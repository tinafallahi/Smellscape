(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/strider/workspace/i18n/ar.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "الرجاء الانتظار...",
  "close": "قم بإغلاق",
  "signin": {
    "title": "تسجيل الدخول",
    "action": "تسجيل الدخول",
    "all": "إظهار الكل",
    "strategyEmailEmpty": "رسالة البريد الإلكتروني فارغاً.",
    "strategyEmailInvalid": "البريد الإلكتروني غير صالح.",
    "strategyDomainInvalid": "{المجال} لم يكن الإعداد.",
    "signupText": "التسجيل",
    "forgotText": "هل نسيت كلمة المرور الخاصة بك؟",
    "emailPlaceholder": "البريد الإلكتروني",
    "usernamePlaceholder": "اسم المستخدم",
    "passwordPlaceholder": "كلمة المرور",
    "separatorText": "أو",
    "serverErrorText": "حدث خطأ أثناء معالجة تسجيل الدخول.",
    "returnUserLabel": "آخر مرة قمت بتسجيل الدخول باستخدام...",
    "wrongEmailPasswordErrorText": "البريد الإلكتروني غير صحيح أو كلمة المرور.",
    "or": ".. أو قم بتسجيل الدخول باستخدام",
    "loadingMessage": "التوقيع في مع {connection}..."
  },
  "signup": {
    "description": "",
    "title": "التسجيل",
    "action": "التسجيل",
    "emailPlaceholder": "البريد الإلكتروني",
    "passwordPlaceholder": "إنشاء كلمة مرور",
    "cancelAction": "إلغاء الأمر",
    "headerText": "الرجاء إدخال البريد الإلكتروني وكلمة المرور الخاصة بك",
    "footerText": "",
    "enterpriseEmailWarningText": "هذا المجال {المجال} قد تم تكوينه لتسجيل الدخول، ولا يمكن أن تقوم بإنشاء حساب. حاول تسجيل الدخول بدلاً من ذلك.",
    "serverErrorText": "حدث خطأ أثناء معالجة العلامة التسجيل."
  },
  "reset": {
    "title": "إعادة تعيين كلمة المرور",
    "action": "إرسال",
    "emailPlaceholder": "البريد الإلكتروني",
    "passwordPlaceholder": "كلمة المرور الجديدة",
    "repeatPasswordPlaceholder": "تأكيد كلمة المرور الجديدة",
    "cancelAction": "إلغاء الأمر",
    "successText": "لقد أرسلنا فقط لك رسالة بريد إلكتروني إعادة تعيين كلمة المرور الخاصة بك.",
    "enterSamePasswordText": "الرجاء إدخال كلمة المرور نفسها.",
    "headerText": "الرجاء إدخال البريد الإلكتروني الخاص بك وكلمة المرور الجديدة. وسوف نرسل لك رسالة بالبريد إلكتروني لتأكيد تغيير كلمة المرور.",
    "serverErrorText": "حدث خطأ أثناء معالجة إعادة تعيين كلمة المرور."
  }
}
},{}],"/home/strider/workspace/i18n/da.json":[function(require,module,exports){
module.exports={
  "loadingTitle":                  "Vent venligst...",
  "close":                         "Luk",
  "windowsAuthTitle":              "Windows Authentication",
  "invalid":                       "Ugyldig",
  "mustMatch":                     "Skal stemme overens",
  "loginSocialButton":             "Login med {connection:title}",
  "signupSocialButton":            "Opret med {connection:title}",
  "networkError":                  "Vi kunne ikke få kontakt til serveren.<br/>Prøv venligst igen.",
  "signin": {
    "title":                       "Log ind",
    "action":                      "Access",
    "actionDomain":                "Log ind på {domain}",
    "all":                         "Vis alle",
    "strategyEmailEmpty":          "Email er tom.",
    "strategyEmailInvalid":        "Email is ugyldig.",
    "strategyDomainInvalid":       "Domænet {domain} er ikke sat op.",
    "signupText":                  "Opret",
    "forgotText":                  "Glemt kodeord",
    "cancelAction":                "Annuller",
    "emailPlaceholder":            "Email",
    "usernamePlaceholder":         "Brugernavn",
    "passwordPlaceholder":         "Kodeord",
    "separatorText":               "eller",
    "serverErrorText":             "Der opstod en fejl under login.",
    "returnUserLabel":             "Ved sidste log ind benyttede du...",
    "domainUserLabel":             "Du er forbundet fra din virksomheds netværk...",
    "wrongEmailPasswordErrorText": "Forkert email eller password.",
    "or":                          "... eller log ind med",
    "loadingMessage":              "Logger ind med {connection}...",
    "popupCredentials":            "Indtast dit login i pop-up vinduet",
    "userClosedPopup":             "Popup vinduet lukkede. Prøv igen.",
    "userConsentFailed":           "Tilladelse blev ikke givet. Prøv igen."
  },
  "signup": {
    "description":                 "",
    "title":                       "Opret",
    "action":                      "Opret",
    "emailPlaceholder":            "Email",
    "usernamePlaceholder":         "Brugernavn",
    "passwordPlaceholder":         "Opret et kodeord",
    "cancelAction":                "Annuller",
    "headerText":                  "Indtast din email og dit kodeord",
    "footerText":                  "",
    "enterpriseEmailWarningText":  "Dette domæne {domain} er blevet konfigureret til Single Sign On og du kan ikke oprette en konto. Prøv at logge ind i stedet.",
    "serverErrorText":             "Der opstod en fejl under oprettelse.",
    "userExistsErrorText":         "Denne bruger eksisterer allerede.",
    "usernameInUseErrorText":      "Brugernavnet er allerede i brug.",
    "invalidPassword":             "Kodeordet er for svagt.",
    
    "passwordStrength": {
      "nonEmpty": "Et ikke-tomt kodeord kræves",
      "lengthAtLeast": "Mindst %d tegn langt",
      "shouldContain": "Skal indeholde:",
      "containsAtLeast" : "Skal indeholde mindst %d af følgende %d typer tegn:",
      "lowerCase": "Små bogstaver (a-z)",
      "upperCase": "Store bogstaver (A-Z)",
      "numbers": "Numre (0-9)",
      "specialCharacters" : "Specialtegn (f.eks. !@#$%^&*)",
      "identicalChars": "Ikke mere end %d identiske tegn i træk (f.eks. er \"%s\" ikke tilladt)"
    }
    
  },
  "reset": {
    "title":                       "Nulstil Kodeord",
    "action":                      "Send",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "Nyt Kodeord",
    "repeatPasswordPlaceholder":   "Bekræft Nyt Kodeord",
    "cancelAction":                "Annuller",
    "successText":                 "Vi har lige sendt dig en email for at nulstille dit kodeord.",
    "enterSamePasswordText":       "Indtast det samme kodeord.",
    "headerText":                  "Indtast venligst din email og dit nye kodeord. Vi sender dig en email for at bekræfte ændringen.",
    "serverErrorText":             "Der opstod en fejl under behandling af nulstilling af kodeord.",
    "userDoesNotExistErrorText":   "Brugeren findes ikke.",
    "invalidPassword":             "Kodeordet er for svagt."
  }
}

},{}],"/home/strider/workspace/i18n/de.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Bitte warten...",
  "close": "Schließen",
  "signin": {
    "title": "Anmelden",
    "action": "Anmelden",
    "all": "Alle anzeigen",
    "strategyEmailEmpty": "Die e-Mail ist leer.",
    "strategyEmailInvalid": "Die e-Mail ist ungültig.",
    "strategyDomainInvalid": "{domain} wurde nicht eingerichtet.",
    "signupText": "Anmelden",
    "forgotText": "Passwort vergessen?",
    "emailPlaceholder": "E-Mail",
    "usernamePlaceholder": "Benutzername",
    "passwordPlaceholder": "Passwort",
    "separatorText": "oder",
    "serverErrorText": "Gab es Fehler beim Verarbeiten der anmelden.",
    "returnUserLabel": "Letzte Mal unterschrieben Sie bei der Verwendung...",
    "wrongEmailPasswordErrorText": "Falsche e-Mail oder Passwort.",
    "or": "... oder melden Sie sich mit",
    "loadingMessage": "Bei der Anmeldung mit {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Anmelden",
    "action": "Anmelden",
    "emailPlaceholder": "E-Mail",
    "passwordPlaceholder": "Erstellen Sie ein Kennwort",
    "cancelAction": "Abbrechen",
    "headerText": "Bitte geben Sie Ihre e-Mail und Passwort",
    "footerText": "Durch Klicken auf \"Anmelden\", stimmen Sie unseren Nutzungsbedingungen oder Datenschutzrichtlinien.",
    "enterpriseEmailWarningText": "Diese Domäne {domain} für Single Sign On konfiguriert wurde und Sie können ein Konto erstellen. Versuchen Sie stattdessen sich anzumelden.",
    "serverErrorText": "Gab es Fehler beim Verarbeiten der Zeichens auf."
  },
  "reset": {
    "title": "Passwort zurücksetzen",
    "action": "Senden",
    "emailPlaceholder": "E-Mail",
    "passwordPlaceholder": "Neues Passwort",
    "repeatPasswordPlaceholder": "Neues Kennwort bestätigen",
    "cancelAction": "Abbrechen",
    "successText": "Wir haben Sie nur eine e-Mail zum Zurücksetzen Ihres Passworts geschickt.",
    "enterSamePasswordText": "Bitte geben Sie das gleiche Kennwort.",
    "headerText": "Bitte geben Sie Ihre e-Mail und das neue Kennwort. Wir senden Ihnen eine e-Mail zur Bestätigung der Passwortänderung.",
    "serverErrorText": "Gab es Fehler beim Verarbeiten des Kennworts zurücksetzen."
  }
}
},{}],"/home/strider/workspace/i18n/en.json":[function(require,module,exports){
module.exports={
  "loadingTitle":                  "Please wait...",
  "close":                         "Close",
  "windowsAuthTitle":              "Windows Authentication",
  "invalid":                       "Invalid",
  "mustMatch":                     "Must match",
  "loginSocialButton":             "Login with {connection:title}",
  "signupSocialButton":            "Signup with {connection:title}",
  "networkError":                  "We could not reach the server.<br/>Please try again.",
  "signin": {
    "title":                       "Log in",
    "action":                      "Access",
    "actionDomain":                "Log in to {domain}",
    "all":                         "Show all",
    "strategyEmailEmpty":          "The email is empty.",
    "strategyEmailInvalid":        "The email is invalid.",
    "strategyDomainInvalid":       "The domain {domain} has not been set up.",
    "signupText":                  "Sign Up",
    "forgotText":                  "Reset password",
    "cancelAction":                "Cancel",
    "emailPlaceholder":            "Email",
    "usernamePlaceholder":         "Username",
    "passwordPlaceholder":         "Password",
    "separatorText":               "or",
    "serverErrorText":             "There was an error processing the login.",
    "returnUserLabel":             "Last time you signed in using...",
    "domainUserLabel":             "You are connected from your corporate network...",
    "wrongEmailPasswordErrorText": "Wrong email or password.",
    "or":                          "... or log in using",
    "loadingMessage":              "Logging In with {connection}...",
    "popupCredentials":            "Enter your credentials in the pop-up window",
    "userClosedPopup":             "Popup window closed. Try again.",
    "userConsentFailed":           "Permissions were not granted. Try again."
  },
  "signup": {
    "description":                 "",
    "title":                       "Sign Up",
    "action":                      "Sign Up",
    "emailPlaceholder":            "Email",
    "usernamePlaceholder":         "Username",
    "passwordPlaceholder":         "Create a Password",
    "cancelAction":                "Cancel",
    "headerText":                  "Please enter your email and password",
    "footerText":                  "",
    "enterpriseEmailWarningText":  "This domain {domain} has been configured for Single Sign On and you can't create an account. Try logging in instead.",
    "serverErrorText":             "There was an error processing the signup.",
    "userExistsErrorText":         "The user already exists.",
    "usernameInUseErrorText":      "The username is already in use.",
    "invalidPassword":             "Password is too weak.",
    
    "passwordStrength": {
      "nonEmpty": "Non-empty password required",
      "lengthAtLeast": "At least %d characters in length",
      "shouldContain": "Should contain:",
      "containsAtLeast" : "Contain at least %d of the following %d types of characters:",
      "lowerCase": "Lower case letters (a-z)",
      "upperCase": "Upper case letters (A-Z)",
      "numbers": "Numbers (i.e. 0-9)",
      "specialCharacters" : "Special characters (e.g. !@#$%^&*)",
      "identicalChars": "No more than %d identical characters in a row (e.g., \"%s\" not allowed)"
    }
    
  },
  "reset": {
    "title":                       "Reset Password",
    "action":                      "Send",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "New Password",
    "repeatPasswordPlaceholder":   "Confirm New Password",
    "cancelAction":                "Cancel",
    "successText":                 "We've just sent you an email to reset your password.",
    "enterSamePasswordText":       "Please enter the same password.",
    "headerText":                  "Please enter your email and the new password. We will send you an email to confirm the password change.",
    "serverErrorText":             "There was an error processing the password reset.",
    "userDoesNotExistErrorText":   "User does not exist.",
    "invalidPassword":             "Password is too weak."
  }
}

},{}],"/home/strider/workspace/i18n/es.json":[function(require,module,exports){
module.exports={
  "loadingTitle":                  "Por favor espere...",
  "close":                         "Cerrar",
  "invalid":                       "Inválido",
  "mustMatch":                     "Debe coincidir",
  "loginSocialButton":             "Ingresar con {connection:title}",
  "signupSocialButton":            "Registrarse con {connection:title}",
  "signin": {
    "title":                       "Iniciar sesión",
    "action":                      "Ingresar",
    "all":                         "Mostrar todas",
    "strategyEmailEmpty":          "El email esta vacío.",
    "strategyEmailInvalid":        "El email no es válido.",
    "strategyDomainInvalid":       "El dominio {domain} no esta configurado.",
    "signupText":                  "Registrarse",
    "forgotText":                  "Resetear contraseña",
    "emailPlaceholder":            "Email",
    "usernamePlaceholder":         "Nombre de usuario",
    "passwordPlaceholder":         "Contraseña",
    "separatorText":               "o",
    "serverErrorText":             "Hubo un error al iniciar sesión.",
    "returnUserLabel":             "La última vez inició sesión con...",
    "domainUserLabel":             "Usted se encuentra conectado desde su red corporativa...",
    "wrongEmailPasswordErrorText": "Email o clave incorrecta.",
    "or":                          "... o inicie sesión usando",
    "loadingMessage":              "Iniciando sesión con {connection}...",
    "popupCredentials":            "Ingrese sus credenciales en la ventana emergente"
  },
  "signup": {
    "description":                 "",
    "title":                       "Registrarse",
    "action":                      "Registrar",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "Contraseña",
    "cancelAction":                "Cancelar",
    "headerText":                  "Por favor ingrese email y contraseña",
    "footerText":                  "",
    "enterpriseEmailWarningText":  "El dominio {domain} ha sido configurado para Single Sign On y no puede crear una cuenta. Intente iniciar sesión directamente.",
    "serverErrorText":             "Hubo un error al procesar su registro.",
    "userExistsErrorText":         "El usuario ya existe."
  },
  "reset": {
    "title":                       "Resetear Contraseña",
    "action":                      "Enviar",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "Nueva Contraseña",
    "repeatPasswordPlaceholder":   "Confirme nueva contraseña",
    "cancelAction":                "Cancelar",
    "successText":                 "Hemos enviado un email para completar el reseteo de su contraseña.",
    "enterSamePasswordText":       "Por favor ingrese la misma contraseña.",
    "headerText":                  "Por favor ingrese su email y la nueva contraseña. Enviaremos un email para confirmar el cambio.",
    "serverErrorText":             "Hubo un error al resetear su contraseña.",
    "userDoesNotExistErrorText":   "Usuario inválido."
  }
}

},{}],"/home/strider/workspace/i18n/fr-FR.json":[function(require,module,exports){
module.exports={
  "loadingTitle": "Veuillez patienter...",
  "close": "Fermer",
  "windowsAuthTitle": "Connexion Windows",
  "signin": {
    "title": "Connexion",
    "action": "Connexion",
    "all": "Afficher tout",
    "strategyEmailEmpty": "Le courriel est vide.",
    "strategyEmailInvalid": "Le courriel n'est pas valide.",
    "strategyDomainInvalid": "Le domaine {domain} n'a pas été configuré.",
    "signupText": "Inscrivez-vous",
    "forgotText": "Vous avez oublié votre mot de passe ?",
    "emailPlaceholder": "Courriel",
    "usernamePlaceholder": "Nom d'utilisateur",
    "passwordPlaceholder": "Mot de passe",
    "separatorText": "ou",
    "serverErrorText": "Erreur lors de la connexion.",
    "returnUserLabel": "Lors de votre dernière connexion vous avez utilisé...",
    "domainUserLabel": "Vous êtes connecté depuis le réseau de votre entreprise...",
    "wrongEmailPasswordErrorText": "Courriel ou mot de passe incorrect.",
    "or": "... ou connectez-vous à l'aide de",
    "loadingMessage": "Connexion à l'aide de {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Inscrivez-vous",
    "action": "Inscrivez-vous",
    "emailPlaceholder": "Courriel",
    "passwordPlaceholder": "Créer un mot de passe",
    "cancelAction": "Annuler",
    "headerText": "Veuillez entrer votre courriel et mot de passe",
    "footerText": "",
    "enterpriseEmailWarningText": "Ce domaine {domain} a été configuré pour le Single Sign On et vous ne pouvez pas créer de compte. Essayez de vous connecter à un compte existant.",
    "serverErrorText": "Erreur lors de l'inscription.",
    "userExistsErrorText": "Cet utilisateur existe déjà."
  },
  "reset": {
    "title": "Réinitialiser votre mot de passe",
    "action": "Envoyer",
    "emailPlaceholder": "Courriel",
    "passwordPlaceholder": "Nouveau mot de passe",
    "repeatPasswordPlaceholder": "Confirmer le nouveau mot de passe",
    "cancelAction": "Annuler",
    "successText": "Vous allez recevoir sous quelques minutes un courriel vous indiquant comment réinitialiser votre mot de passe.",
    "enterSamePasswordText": "S'il vous plaît entrez le même mot de passe.",
    "headerText": "Veuillez saisir votre courriel et mot de passe. Nous vous enverrons un courriel pour confirmer le changement de mot de passe.",
    "serverErrorText": "Erreur de traitement los de réinitialisation du mot de passe.",
    "userDoesNotExistErrorText": "Utilisateur introuvable."
  }
}

},{}],"/home/strider/workspace/i18n/he.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "חכה בבקשה...",
  "close": "סגור",
  "signin": {
    "title": "הירשם",
    "action": "הירשם",
    "all": "הצג הכל",
    "strategyEmailEmpty": "הדוא ל הוא ריק.",
    "strategyEmailInvalid": "הדוא ל אינו חוקי.",
    "strategyDomainInvalid": "התחום {domain} לא היתה תוכנית ההתקנה.",
    "signupText": "הירשם",
    "forgotText": "שכחת הסיסמא?",
    "emailPlaceholder": "דוא",
    "usernamePlaceholder": "שם משתמש",
    "passwordPlaceholder": "סיסמה",
    "separatorText": "או",
    "serverErrorText": "אירעה שגיאה בעיבוד הכניסה.",
    "returnUserLabel": "בפעם האחרונה נכנסת באמצעות...",
    "wrongEmailPasswordErrorText": "הדוא\"ל טועה או סיסמה.",
    "or": ". או כניסה באמצעות",
    "loadingMessage": "כניסה עם {connection}..."
  },
  "signup": {
    "description": "",
    "title": "הירשם",
    "action": "הירשם",
    "emailPlaceholder": "דוא",
    "passwordPlaceholder": "צור סיסמה",
    "cancelAction": "ביטול",
    "headerText": "הזינו את כתובת המייל והסיסמא",
    "footerText": "",
    "enterpriseEmailWarningText": "תחום זה, {domain} נקבעה עבור כניסה יחידה, אין באפשרותך ליצור חשבון. נסה להיכנס במקום.",
    "serverErrorText": "אירעה שגיאה בעיבוד את השלט למעלה."
  },
  "reset": {
    "title": "איפוס סיסמה",
    "action": "שלח",
    "emailPlaceholder": "דוא",
    "passwordPlaceholder": "סיסמה חדשה",
    "repeatPasswordPlaceholder": "אשר סיסמה חדשה",
    "cancelAction": "ביטול",
    "successText": "אנחנו פשוט לשלוח לך דואר אלקטרוני כדי לאפס את הסיסמה שלך.",
    "enterSamePasswordText": "הזינו בבקשה את אותה סיסמה.",
    "headerText": "אנא הזן את הדואר האלקטרוני שלך ואת הסיסמה החדשה. אנו נשלח לך הודעת דואר אלקטרוני כדי לאשר שינוי הסיסמה.",
    "serverErrorText": "אירעה שגיאה בעיבוד איפוס הסיסמה."
  }
}
},{}],"/home/strider/workspace/i18n/it.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Attendere prego...",
  "close": "Chiudere",
  "signin": {
    "title": "Accedi",
    "action": "Accedi",
    "all": "Visualizza tutti",
    "strategyEmailEmpty": "L'email è vuota.",
    "strategyEmailInvalid": "L'email non è valido.",
    "strategyDomainInvalid": "Il dominio {domain} non è stata l'installazione.",
    "signupText": "Registrati",
    "forgotText": "Hai dimenticato la password?",
    "emailPlaceholder": "Posta elettronica",
    "usernamePlaceholder": "Nome utente",
    "passwordPlaceholder": "Password",
    "separatorText": "o",
    "serverErrorText": "C'è stato un errore durante l'elaborazione il segno in.",
    "returnUserLabel": "Ultima volta che hai eseguito utilizzando...",
    "wrongEmailPasswordErrorText": "Email errato o password.",
    "or": "... oppure accedi usando",
    "loadingMessage": "Accedi con {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Registrati",
    "action": "Registrati",
    "emailPlaceholder": "Posta elettronica",
    "passwordPlaceholder": "Creare una Password",
    "cancelAction": "Annulla",
    "headerText": "Inserisci la tua email e la password",
    "footerText": "",
    "enterpriseEmailWarningText": "Questo dominio {domain} è stato configurato per il Single Sign On e non è possibile creare un account. Prova ad accedere invece.",
    "serverErrorText": "C'è stato un errore durante l'elaborazione il segno fino."
  },
  "reset": {
    "title": "Reimpostare la Password",
    "action": "Invia",
    "emailPlaceholder": "Posta elettronica",
    "passwordPlaceholder": "Nuova Password",
    "repeatPasswordPlaceholder": "Conferma nuova Password",
    "cancelAction": "Annulla",
    "successText": "Noi abbiamo appena inviato un'e-mail per reimpostare la password.",
    "enterSamePasswordText": "Inserisci la stessa password.",
    "headerText": "Inserisci il tuo indirizzo email e la password nuova. Ti invieremo un'email per confermare la modifica della password.",
    "serverErrorText": "C'è stato un errore durante l'elaborazione il password reset."
  }
}
},{}],"/home/strider/workspace/i18n/ja.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "お待ちください。。。",
  "close": "閉じる",
  "signin": {
    "title": "サインイン",
    "action": "サインイン",
    "all": "すべて表示します。",
    "strategyEmailEmpty": "電子メールが空です。",
    "strategyEmailInvalid": "電子メールは有効です。",
    "strategyDomainInvalid": "{ドメイン} セットアップされていません。",
    "signupText": "サインアップ",
    "forgotText": "パスワードをお忘れですか？",
    "emailPlaceholder": "電子メール",
    "usernamePlaceholder": "ユーザ名",
    "passwordPlaceholder": "パスワード",
    "separatorText": "または",
    "serverErrorText": "サインインを処理中にエラーがありました。",
    "returnUserLabel": "最後の時間を使用してをサインインして.",
    "wrongEmailPasswordErrorText": "間違ったメール アドレスまたはパスワードです。",
    "or": "... またはを使用してサインイン",
    "loadingMessage": "でサインイン {connection}..."
  },
  "signup": {
    "description": "",
    "title": "サインアップ",
    "action": "サインアップ",
    "emailPlaceholder": "電子メール",
    "passwordPlaceholder": "パスワードを作成します。",
    "cancelAction": "キャンセル",
    "headerText": "あなたのメール アドレスとパスワードを入力してください。",
    "footerText": "",
    "enterpriseEmailWarningText": "このドメイン {} が構成されているシングル サインオン ・ アカウントを作成することはできません。代わりにサインインしてください。",
    "serverErrorText": "符号を処理中にエラーがありました。"
  },
  "reset": {
    "title": "パスワードのリセット",
    "action": "送信",
    "emailPlaceholder": "電子メール",
    "passwordPlaceholder": "新しいパスワード",
    "repeatPasswordPlaceholder": "新しいパスワードを確認します。",
    "cancelAction": "キャンセル",
    "successText": "我々 はちょうどあなたのパスワードをリセットするメールを送信しました。",
    "enterSamePasswordText": "同じパスワードを入力してください。",
    "headerText": "あなたのメール アドレスと新しいパスワードを入力してください。我々 は、パスワードの変更を確認するためにメールが送信されます。",
    "serverErrorText": "パスワードのリセットを処理中にエラーがありました。"
  }
}
},{}],"/home/strider/workspace/i18n/nb-NO.json":[function(require,module,exports){
module.exports={
  "loadingTitle":                  "Vennligst vent...",
  "close":                         "Lukk",
  "windowsAuthTitle":              "Windows-autentisering",
  "invalid":                       "Ugyldig",
  "mustMatch":                     "Må tilsvare",
  "loginSocialButton":             "Logg inn med {connection:title}",
  "signupSocialButton":            "Registrer med {connection:title}",
  "signin": {
    "title":                       "Innlogging",
    "action":                      "Logg inn",
    "actionDomain":                "Logg inn {domain}",
    "all":                         "Vis alle",
    "strategyEmailEmpty":          "E-posten er ikke utfylt.",
    "strategyEmailInvalid":        "E-posten er ugyldig.",
    "strategyDomainInvalid":       "Domenet {domain} er ikke konfigurert.",
    "signupText":                  "Registrer",
    "forgotText":                  "Tilbakestill passord",
    "cancelAction":                "Avbryt",
    "emailPlaceholder":            "E-post",
    "usernamePlaceholder":         "Brukernavn",
    "passwordPlaceholder":         "Passord",
    "separatorText":               "eller",
    "serverErrorText":             "Det oppstod en feil under innlogging",
    "returnUserLabel":             "Sist gang logget du inn med...",
    "domainUserLabel":             "Du er tilkoblet ditt nettverk...",
    "wrongEmailPasswordErrorText": "Feil e-post eller passord.",
    "or":                          "... eller logg inn med",
    "loadingMessage":              "Logger inn med {connection}...",
    "popupCredentials":            "Skriv inn identifikasjon i pop-up-vinduet",
    "userClosedPopup":             "Pop-up-vindu lukket. Prøv igjen.",
    "userConsentFailed":           "Nødvendige tilganger ble ikke gitt. Vennligst prøv igjen."
  },
  "signup": {
    "description":                 "",
    "title":                       "Registrer",
    "action":                      "Registrer",
    "emailPlaceholder":            "E-post",
    "passwordPlaceholder":         "Opprett passord",
    "cancelAction":                "Avbryt",
    "headerText":                  "Vennligst skriv inn e-post og passord",
    "footerText":                  "",
    "enterpriseEmailWarningText":  "Domenet {domain} er konfigurert med Single Sign On og du kan ikke opprette en konto selv. Forsøk å logge inn istedet.",
    "serverErrorText":             "Det oppstod en feil under innlogging.",
    "userExistsErrorText":         "Brukeren finnes allerede.",
    "invalidPassword":             "Passordet er for svakt."
  },
  "reset": {
    "title":                       "Tilbakestill passord",
    "action":                      "Send",
    "emailPlaceholder":            "E-post",
    "passwordPlaceholder":         "Nytt passord",
    "repeatPasswordPlaceholder":   "Bekreft nytt passord",
    "cancelAction":                "Avbryt",
    "successText":                 "Du har blitt tilsendt en e-post for å tilbakestille passordet ditt.",
    "enterSamePasswordText":       "Vennligst skriv inn det samme passordet.",
    "headerText":                  "Vennligst skriv inn e-post og ditt nye passord. Vi sender deg en e-post for å bekrefte endringen.",
    "serverErrorText":             "Det oppstod en feil under tilbakestilling av passordet.",
    "userDoesNotExistErrorText":   "Brukeren finnes ikke."
  }
}

},{}],"/home/strider/workspace/i18n/nl-NL.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Een ogenblik geduld...",
  "close": "Sluiten",
  "signin": {
    "title": "Aanmelden",
    "action": "Aanmelden",
    "all": "Toon alles",
    "strategyEmailEmpty": "Het veld e-mail is leeg.",
    "strategyEmailInvalid": "Het veld e-mail is ongeldig.",
    "strategyDomainInvalid": "Het domein {domain} is niet geactiveerd.",
    "signupText": "Aanmelden",
    "forgotText": "Wachtwoord vergeten?",
    "emailPlaceholder": "E-mail",
    "usernamePlaceholder": "Usernamea",
    "passwordPlaceholder": "Wachtwoord",
    "separatorText": "of",
    "serverErrorText": "Er is een fout opgetreden tijdens het inloggen.",
    "returnUserLabel": "De laatste keer logde je in met...",
    "wrongEmailPasswordErrorText": "Verkeerd e-mail of wachtwoord.",
    "or": "... of meld u aan met",
    "loadingMessage": "Aanmelden met {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Aanmelden",
    "action": "Aanmelden",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Een wachtwoord maken",
    "cancelAction": "Annuleren",
    "headerText": "Voer je email en wachtwoord in",
    "footerText": "",
    "enterpriseEmailWarningText": "Dit domein {domain} is geconfigureerd voor eenmalige aanmelding en u kunt geen account aanmaken. Probeer u aan te melden in plaats daarvan.",
    "serverErrorText": "Er is een fout opgetreden bij de verwerking van uw aanmelding."
  },
  "reset": {
    "title": "Wachtwoord resetten",
    "action": "Verzenden",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Nieuw wachtwoord",
    "repeatPasswordPlaceholder": "Bevestig het nieuwe wachtwoord",
    "cancelAction": "Annuleren",
    "successText": "We hebben u zojuist een e-mail gestuurd om uw wachtwoord te resetten.",
    "enterSamePasswordText": "Voer hetzelfde wachtwoord in.",
    "headerText": "Voer uw e-mailadres en het nieuwe wachtwoord in. Wij sturen u een e-mail ter bevestiging van de wachtwoordswijziging.",
    "serverErrorText": "Er is een fout opgetreden bij de verwerking van het nieuwe wachtwoord."
  }
}

},{}],"/home/strider/workspace/i18n/pt-BR.json":[function(require,module,exports){
module.exports={
  "loadingTitle":                  "Aguarde...",
  "close":                         "Fechar",
  "windowsAuthTitle":              "Autenticação do Windows",
  "invalid":                       "Inválido",
  "mustMatch":                     "Deve corresponder",
  "loginSocialButton":             "Entre com {connection:title}",
  "signupSocialButton":            "Cadastre com {connection:title}",
  "networkError":                  "Não conseguimos acessar o servidor.<br/>Por favor, tente novamente.",
  "signin": {
    "title":                       "Entrar",
    "action":                      "Entrar",
    "actionDomain":                "Entrar no domínio {domain}",
    "all":                         "Mostrar todos",
    "strategyEmailEmpty":          "O e-mail não foi informado.",
    "strategyEmailInvalid":        "O e-mail está incorreto.",
    "strategyDomainInvalid":       "O domínio {domain} não está configurado.",
    "signupText":                  "Cadastre-se",
    "forgotText":                  "Esqueceu sua senha?",
    "cancelAction":                "Cancelar",
    "emailPlaceholder":            "E-mail",
    "usernamePlaceholder":         "Nome de usuário",
    "passwordPlaceholder":         "Senha",
    "separatorText":               "ou",
    "serverErrorText":             "Houve um erro durante o login.",
    "returnUserLabel":             "Da última vez você entrou usando...",
    "domainUserLabel":             "Você está conectado da sua rede corporativa...",
    "wrongEmailPasswordErrorText": "E-mail ou senha inválidos.",
    "or":                          "... ou entre usando",
    "loadingMessage":              "Entrar com {connection}...",
    "popupCredentials":            "Informe seus dados de acesso na janela pop-up",
    "userClosedPopup":             "A janela pop-up está fechada. Por favor, tente novamente.",
    "userConsentFailed":           "As permissões não foram concedidas. Por favor, tente novamente."
  },
  "signup": {
    "description":                 "",
    "title":                       "Cadastre-se",
    "action":                      "Cadastre-se",
    "emailPlaceholder":            "E-mail",
    "usernamePlaceholder":         "Crie um nome de usuário",
    "passwordPlaceholder":         "Crie uma senha",
    "cancelAction":                "Cancelar",
    "headerText":                  "Por favor, preencha seu e-mail e senha",
    "footerText":                  "",
    "enterpriseEmailWarningText":  "O domínio {domain} está configurado para Single Sign On e você não pode criar uma conta. Entre usando uma conta.",
    "serverErrorText":             "Ocorreu um erro durante o cadastro.",
    "userExistsErrorText":         "O usuário já existe.",
    "usernameInUseErrorText":      "Este nome de usuário já está em uso.",
    "invalidPassword":             "A senha não está segura o suficiente.",
    
    "passwordStrength": {
      "nonEmpty": "A senha deve ser preenchida",
      "lengthAtLeast": "Deve ter pelo menos %d de comprimento",
      "shouldContain": "Deve conter:",
      "containsAtLeast" : "Contém pelo menos %d dos seguintes %d tipos de caracteres:",
      "lowerCase": "Letras minúsculas (a-z)",
      "upperCase": "Letras maiúsculas (A-Z)",
      "numbers": "Números (0-9)",
      "specialCharacters" : "Símbolos (!@#$%^&*)",
      "identicalChars": "Máximo de %d caracteres iguais seguidos (ex. \"%s\" não é permitido)"
    }
    
  },
  "reset": {
    "title":                       "Redefinir senha",
    "action":                      "Enviar",
    "emailPlaceholder":            "E-mail",
    "passwordPlaceholder":         "Nova senha",
    "repeatPasswordPlaceholder":   "Confirmar nova senha",
    "cancelAction":                "Cancelar",
    "successText":                 "Te enviamos um e-mail para redefinir sua senha.",
    "enterSamePasswordText":       "Por favor, use a mesma senha.",
    "headerText":                  "Por favor, informe o e-mail e a nova senha. Nós enviaremos um e-mail para você confirmar a alteração de senha.",
    "serverErrorText":             "Ocorreu um erro durante a redefinição de senha.",
    "userDoesNotExistErrorText":   "Usuário não existe.",
    "invalidPassword":             "A senha não está segura o suficiente."
  }
}

},{}],"/home/strider/workspace/i18n/pt.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Aguarde...",
  "close": "Fechar",
  "signin": {
    "title": "Entrar",
    "action": "Entrar",
    "all": "Mostrar todos",
    "strategyEmailEmpty": "O e-mail é vazio.",
    "strategyEmailInvalid": "O email é inválido.",
    "strategyDomainInvalid": "O domínio {domain} não foi a instalação.",
    "signupText": "Inscrição",
    "forgotText": "Esqueceu sua senha?",
    "emailPlaceholder": "Email",
    "usernamePlaceholder": "Nome de Usuário",
    "passwordPlaceholder": "Senha",
    "separatorText": "ou",
    "serverErrorText": "Houve um erro ao processar o sinal em.",
    "returnUserLabel": "Da última vez que você assinou usando...",
    "wrongEmailPasswordErrorText": "Senha ou e-mail errado.",
    "or": "... ou Cadastre-se no uso de",
    "loadingMessage": "Entrar com {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Inscrição",
    "action": "Inscrição",
    "emailPlaceholder": "Email",
    "passwordPlaceholder": "Crie uma senha",
    "cancelAction": "Cancelar",
    "headerText": "Por favor, digite seu e-mail e senha",
    "footerText": "",
    "enterpriseEmailWarningText": "Este domínio {domain} tiver sido configurado para Sign-On único e você não pode criar uma conta. Tente entrar em vez disso.",
    "serverErrorText": "Houve um erro ao processar o sinal de cima."
  },
  "reset": {
    "title": "Redefinir senha",
    "action": "Enviar",
    "emailPlaceholder": "Email",
    "passwordPlaceholder": "Nova senha",
    "repeatPasswordPlaceholder": "Confirmar nova senha",
    "cancelAction": "Cancelar",
    "successText": "Só te enviamos um e-mail para redefinir sua senha.",
    "enterSamePasswordText": "Por favor digite a mesma senha.",
    "headerText": "Por favor, digite seu e-mail e a senha nova. Nós lhe enviaremos um e-mail para confirmar a alteração de senha.",
    "serverErrorText": "Houve um erro ao processar a redefinir a senha."
  }
}
},{}],"/home/strider/workspace/i18n/ru.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle":                   "Подождите...",
  "close":                          "Закрыть",
  "windowsAuthTitle":               "Windows аутентификация",
  "invalid":                        "Неверный",
  "mustMatch":                      "Должны совпадать",
  "loginSocialButton":              "Вход через {connection:title}",
  "signupSocialButton":             "Регистрация через {connection:title}",
  "signin": {
    "title":                        "Войти",
    "action":                       "Войти",
    "all":                          "Показать все",
    "strategyEmailEmpty":           "Email пустой.",
    "strategyEmailInvalid":         "Email недействителен.",
    "strategyDomainInvalid":        "Домен {domain} не был установлен.",
    "signupText":                   "Регистрация",
    "forgotText":                   "Забыли ваш пароль?",
    "emailPlaceholder":             "Email",
    "usernamePlaceholder":          "Имя пользователя",
    "passwordPlaceholder":          "Пароль",
    "separatorText":                "или",
    "serverErrorText":              "Произошла ошибка при обработке входа.",
    "returnUserLabel":              "Последний раз вы заходили через...",
    "wrongEmailPasswordErrorText":  "Неправильный email или пароль.",
    "or":                           "... или войдите с помощью",
    "loadingMessage":               "Вход через {connection}..."
  },
  "signup": {
    "description":                  "",
    "title":                        "Регистрация",
    "action":                       "Регистрация",
    "emailPlaceholder":             "Email",
    "passwordPlaceholder":          "Создайте пароль",
    "cancelAction":                 "Отмена",
    "headerText":                   "Пожалуйста, введите свой email и пароль",
    "footerText":                    "",
    "enterpriseEmailWarningText":   "Этот домен {domain} был настроен для единого входа и нельзя создать учетную запись, попробуйте войти.",
    "serverErrorText":              "Произошла ошибка при обработке регистрации.",
    "userExistsErrorText":          "Пользователь существует."
  },
  "reset": {
    "title":                        "Сброс пароля",
    "action":                       "Отправить",
    "emailPlaceholder":             "Email",
    "passwordPlaceholder":          "Новый пароль",
    "repeatPasswordPlaceholder":    "Подтвердите новый пароль",
    "cancelAction":                 "Отмена",
    "successText":                  "Мы отправили вам email для сброса пароля.",
    "enterSamePasswordText":        "Пожалуйста, введите тот же пароль.",
    "headerText":                   "Пожалуйста, введите ваш email и новый пароль. Мы вышлем email для подтверждения изменения пароля.",
    "serverErrorText":              "Произошла ошибка при обработке сброса пароля.",
    "userDoesNotExistErrorText":    "Пользователь не существует."

  }
}

},{}],"/home/strider/workspace/i18n/tlh.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "DubelmoHchugh loS.",
  "close": "SoQmoH",
  "signin": {
    "title": "qI'",
    "action": "qI'",
    "all": "cha' Hoch",
    "strategyEmailEmpty": "chIm email.",
    "strategyEmailInvalid": "email invalid.",
    "strategyDomainInvalid": "{domain} yer wej setup.",
    "signupText": "qI'",
    "forgotText": "mu'wIj lIj?",
    "emailPlaceholder": "email",
    "usernamePlaceholder": "tus neeg siv lub npe",
    "passwordPlaceholder": "mu'wIj",
    "separatorText": "ghap",
    "serverErrorText": "Qagh qaStaHvIS qI' mIw tu'lu'.",
    "returnUserLabel": "Qav poH qI' SoH qaStaHvIS lo'.",
    "wrongEmailPasswordErrorText": "QIH email pagh mu'wIj.",
    "or": "... pagh qI' qaStaHvIS yIlo'",
    "loadingMessage": "Ukubhalisela In nge {connection}..."
  },
  "signup": {
    "description": "",
    "title": "qI'",
    "action": "qI'",
    "emailPlaceholder": "email",
    "passwordPlaceholder": "mu'wIj chenmoH",
    "cancelAction": "qIl",
    "headerText": "nuqneH email mu'wIj je",
    "footerText": "",
    "enterpriseEmailWarningText": "configured {domain} yer Vas qI' 'ej account pagh chenmoH SoH. nID, qI' instead.",
    "serverErrorText": "Qagh qI' mIw Ha' tu'lu'."
  },
  "reset": {
    "title": "mu'wIj reset",
    "action": "ngeH",
    "emailPlaceholder": "email",
    "passwordPlaceholder": "mu'wIj chu'",
    "repeatPasswordPlaceholder": "mu'wIj chu' confirm",
    "cancelAction": "qIl",
    "successText": "jIboQqang reset mu'wIj neH ngeH SoH maH.",
    "enterSamePasswordText": "DubelmoHchugh mu'wIj rap 'el.",
    "headerText": "nuqneH email chu' mu'wIj je. jIboQqang mu'wIj choH confirm ngeH SoH maH.",
    "serverErrorText": "Qagh reset mu'wIj mIw tu'lu'."
  }
}
},{}],"/home/strider/workspace/i18n/tr.json":[function(require,module,exports){
module.exports={
  "loadingTitle":                 "Lütfen bekleyiniz...",
  "close":                        "Kapat",
  "windowsAuthTitle":             "Windows Doğrulama",
  "invalid":                      "Geçersiz",
  "mustMatch":                    "Eşleşmeli",
  "loginSocialButton":            "{connection:title} ile Giriş Yap",
  "signupSocialButton":           "{connection:title} lie Kayıt Ol",
  "signin": {
    "title":                      "Giriş",
    "action":                     "Erişim",
    "all":                        "Hepsini Göster",
    "strategyEmailEmpty":         "Bu e-posta boş",
    "strategyEmailInvalid":       "Bu e-posts geçersiz",
    "strategyDomainInvalid":      "{domain} Bu alan henüz kurulmadı",
    "signupText":                 "Kayıt Ol",
    "forgotText":                 "Şifremi unuttum",
    "emailPlaceholder":           "E-posta",
    "usernamePlaceholder":        "Kullanıcı Adı",
    "passwordPlaceholder":        "Şifre",
    "separatorText":              "veya",
    "serverErrorText":            "Kayıt işlemi sırasında bir hatayla karşılaşıldı",
    "returnUserLabel":            "... ile en son girişiniz ",
    "domainUserLabel":            "Şirketinize ait ... ağından bağlandınız",
    "wrongEmailPasswordErrorText":"Hatalı e-posta veya şifre.",
    "or":                         "veya bunlardan biriyle Giriş Yap",
    "loadingMessage":             "{connection} ile Giriş Yap",
    "popupCredentials":           "Lütfen açılır pencereye kimlik belgelerinizi giriniz",
    "userClosedPopup":            "Açılır pencere kapandı. Lütfen tekrar deneyiniz.",
    "userConsentFailed":          "İzin verilmedi. Lütfen tekrar deneyiniz."
  },
  "signup": {
    "description":                "",
    "title":                      "Kayıt Ol",
    "action":                     "Kayıt Ol",
    "emailPlaceholder":           "E-posta",
    "passwordPlaceholder":        "Şifre Oluşturun",
    "cancelAction":               "İptal",
    "headerText":                 "Lütfen e-postanızı ve şifrenizi giriniz",
    "footerText":                 "",
    "enterpriseEmailWarningText": "Bu alan {domain} üzerindeki tek oturum için yapılandırılmıştır, bu yüzden hesap oluşturamazsınız. Bunun yerine, lütfen giriş yapmayı deneyiniz.",
    "serverErrorText":            "Kayıt olurken bir hata ile karşılaşıldı.",
    "userExistsErrorText":        "Bu kullanıcı adı zaten alınmış.",
    "invalidPassword":            "Bu şifre çok zayıf."
  },
  "reset": {
    "title":                      "Şifreyi Sıfırla",
    "action":                     "Yolla",
    "emailPlaceholder":           "E-posta",
    "passwordPlaceholder":        "Yeni Şifre",
    "repeatPasswordPlaceholder":  "Yeni Şifreyi Onayla",
    "cancelAction":               "İptal",
    "successText":                "Size şifrenizi sıfırlamanız için bir e-posta yolladık.",
    "enterSamePasswordText":      "Lütfen aynı şifreyi tekrar giriniz.",
    "headerText":                 "Lütfen e-posta adresinizi ve yeni şifrenizi giriniz. Size şifre değişikliğini onaylamak için bir e-posta yollayacağız.",
    "serverErrorText":            "Şifre sıfırlama işlemi sırasında bir hatayla karşılaşıldı.",
    "userDoesNotExistErrorText":  "Böyle bir kullanıcı bulunamadı."
  }
}

},{}],"/home/strider/workspace/i18n/zh.json":[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "请稍候。。。",
  "close": "关闭",
  "signin": {
    "title": "登录",
    "action": "登录",
    "all": "全部显示",
    "strategyEmailEmpty": "电子邮件是空的。",
    "strategyEmailInvalid": "电子邮件是无效的。",
    "strategyDomainInvalid": "指定域 {domain} 尚未安装。",
    "signupText": "登记",
    "forgotText": "忘记了您的密码吗？",
    "emailPlaceholder": "电子邮件",
    "usernamePlaceholder": "用户名",
    "passwordPlaceholder": "密码",
    "separatorText": "或",
    "serverErrorText": "处理所示的标志时出错。",
    "returnUserLabel": "最后一次你在使用签署...",
    "wrongEmailPasswordErrorText": "错误的电子邮件或密码。",
    "or": "...或使用登录",
    "loadingMessage": "签约与 {connection}..."
  },
  "signup": {
    "description": "",
    "title": "登记",
    "action": "登记",
    "emailPlaceholder": "电子邮件",
    "passwordPlaceholder": "创建一个密码",
    "cancelAction": "取消",
    "headerText": "请输入您的电子邮件和密码",
    "footerText": "",
    "enterpriseEmailWarningText": "指定此域 {domain} 已配置为单一登录和您不能创建一个帐户。请尝试登录相反。",
    "serverErrorText": "处理标志向上时出错。"
  },
  "reset": {
    "title": "重置密码",
    "action": "发送",
    "emailPlaceholder": "电子邮件",
    "passwordPlaceholder": "新密码",
    "repeatPasswordPlaceholder": "确认新密码",
    "cancelAction": "取消",
    "successText": "我们刚刚已经向您发送一封电子邮件，重置您的密码。",
    "enterSamePasswordText": "请输入相同的密码。",
    "headerText": "请输入您的电子邮件和新的密码。我们将向您发送邮件以确认密码更改。",
    "serverErrorText": "处理重置密码时出错。"
  }
}
},{}],"/home/strider/workspace/index.js":[function(require,module,exports){
(function (global){
/**
 * Insert css when first loaded
 */

require('./lib/insert-css');

/**
 * Module dependencies.
 */

var bonzo = require('bonzo');
var _ = require('underscore');
var Auth0 = require('auth0-js');
var $ = require('./lib/bonzo-augmented');
var EventEmitter = require('events').EventEmitter;

var strategies = require('./lib/strategies');
var template = require('./lib/html/main.ejs');

var HeaderView = require('./lib/header');

var SigninPanel = require('./lib/mode-signin');
var SignupPanel = require('./lib/mode-signup');
var ResetPanel = require('./lib/mode-reset');
var LoggedinPanel = require('./lib/mode-loggedin');
var KerberosPanel = require('./lib/mode-kerberos');
var LoadingPanel = require('./lib/mode-loading');
var OptionsManager = require('./lib/options-manager');

//browser incompatibilities fixes
var placeholderSupported = require('./lib/supports-placeholder');
var has_animations = require('./lib/supports-animation');
var ocreate = require('./lib/object-create');
var stop = require('./lib/stop-event');
var utils = require('./lib/utils');
var bind = require('./lib/bind');

/**
 * Expose `Auth0Lock` constructor
 */

module.exports = Auth0Lock;

/**
 * Create `Auth0Lock` instance
 * resolving `options`.
 *
 * @param {String} clientID
 * @param {String} domain
 * @param {Object} options
 *     - cdn
 *     - assetsUrl
 * @return {Auth0Lock}
 * @constructor
 */

function Auth0Lock (clientID, domain, options) {
  if (!(this instanceof Auth0Lock)) {
    return new Auth0Lock(clientID, domain, options);
  }

  // validate required options
  if ('string' !== typeof clientID) throw new Error('`ClientID` required as first parameter.');
  if ('string' !== typeof domain) throw new Error('`domain` required as second parameter.');

  // Initiate `EventEmitter`
  EventEmitter.call(this);

  // Instance properties and options
  this.$options = _.extend({}, options);

  // Save clientID and domain in $options
  this.$options.clientID = clientID;
  this.$options.domain = domain;

  // Holds copy for all suppported strategies
  this.$strategies = strategies;

  // Holds auth0-js' instance
  this.$auth0 = new Auth0({
    clientID: this.$options.clientID,
    domain: this.$options.domain,
    useCordovaSocialPlugins: this.$options.useCordovaSocialPlugins
  });

  // use domain as assetsUrl if no assetsUrl provided
  // and domain is not *.auth0.com. Fallback to S3 url
  this.$options.assetsUrl = this.$options.assetsUrl || (this.isAuth0Domain() ? 'https://cdn.auth0.com/' : 'https://' + this.$options.domain + '/');

  // This cdn is only used for the "loading" image
  this.$options.cdn = this.$options.cdn || (this.isAuth0Domain() ? 'https://d19p4zemcycm7a.cloudfront.net/w2/' : 'https://' + this.$options.domain + '/w2/');

  // Holds SSO Data for return user experience
  this.$ssoData = null;

  // Holds widget's DOM `$container` ref
  this.$container = null;

  // holds client's connections configuration
  // retrieved from S3 or CDN/assetsUrl provided
  this.$client = {};
  this.getClientConfiguration(bind(this.setClientConfiguration, this));
}

/**
 * Expose current `Auth0Lock`'s version
 */

Auth0Lock.version = "7.0.0";

/**
 * Inherit from `EventEmitter`
 */

Auth0Lock.prototype = ocreate(EventEmitter.prototype);

/**
 * Get client configuration.
 * XXX: Why not use jsonp? that woudld allow the
 * global namespace definition to be optional...
 *
 * @param {Function} done
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype.getClientConfiguration = function (done) {
  var self = this;

  // Save callback to be called once
  // client configuration gets loaded
  if ('function' === typeof done) {
    this.once('client loaded', function (client) {
      done(client);
    });
  }

  // If not loading, check for already stored
  // in a previous widget instantiation
  global.window.Auth0 = global.window.Auth0 || { clients: {}, script_tags: {} };

  if (!global.window.Auth0.clients) {
    global.window.Auth0.clients = {};
    global.window.Auth0.script_tags = {};
  }

  var clients = global.window.Auth0.clients;
  var client = clients[this.$options.clientID];
  if (client) return this.emit('client loaded', client);

  // check if loading state
  // and then await for response
  // no need to monkey-patch again
  if (this.loadState) return;
  this.loadState = true;

  // Monkey patch Auth.setClient to load client
  var setClient = global.window.Auth0.setClient || function setClient() {};
  global.window.Auth0.setClient = function (client) {
    setClient.apply(window.Auth0, arguments);

    // If not this client, return
    if (self.$options.clientID !== client.id) return;

    // store the client
    clients[self.$options.clientID] = client;

    // notify initialized and pass the client with it
    self.emit('client loaded', client);
  };

  var script = global.window.Auth0.script_tags[this.$options.clientID];

  if (!script) {
    // Load client from assets url
    var script = document.createElement('script');
    script.src = this.$options.assetsUrl + 'client/' + this.$options.clientID + '.js' + '?t' + (+new Date());

    // Save script reference for other intances using the same clientID
    global.window.Auth0.script_tags[this.$options.clientID] = script;

    // Insert script in DOM head
    var firstScript = document.getElementsByTagName('script')[0];
    firstScript.parentNode.insertBefore(script, firstScript);
  }

  // Handle load and error for client config
  script.addEventListener('load', bind(this.onclientloadsuccess, this));
  script.addEventListener('error', bind(this.onclientloaderror, this));
  this.timeout = setTimeout(bind(this.onclientloaderror, this), 5000);
};

/**
 * Handle success for script load of client's configuration
 *
 * @private
 */

Auth0Lock.prototype.onclientloadsuccess = function() {

  // clear error timeout
  clearTimeout(this.timeout);
  this.timeout = null;

  // clear displayed errors if any
  if (this.options) {
    this._showError();
  }

  // We should use debug and log stuff without console.log
  // and only for debugging
  if (window.console && console.log) {
    console.log('Client configuration loaded');
  }
}

/**
 * Handle error for script load of client's configuration
 *
 * @private
 */

Auth0Lock.prototype.onclientloaderror = function(err) {

  // timeout has been cleared
  if (!this.timeout) return;

  // clear error timeout
  clearTimeout(this.timeout);
  this.timeout = null;

  // If UI present, delay the show error just a little more,
  // because sometimes this loads before in the async call
  // compared to the `load` event success.
  if (this.options) setTimeout(bind(this.showNetworkError, this), 500);

  // reset loadstate
  this.loadState = false;

  // reset script loading state
  global.window.Auth0.script_tags[this.$options.clientID] = null;

  if (window.console && console.log) {
    console.log(new Error('Failed to load client configuration for ' + this.$options.clientID));
  };
}

Auth0Lock.prototype.showNetworkError = function() {
  // client has been loaded in some async call
  if (global.window.Auth0.clients[this.options.$clientID]) return;

  // Exhibit lock's working canvas
  this.exhibit();

  // XXX: Should we create an "error-mode" for such cases?
  // XXX: or are we ok with this display?
  this._loadingPanel(this.options);

  // Turn off the loading spinner
  this.query('.a0-spinner').addClass('a0-hide');

  // display error
  this._showError(this.options.i18n.t('networkError'));
}

/**
 * Set's the client configuration object
 *
 * @param {Object} client
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype.setClientConfiguration = function (client) {
  this.$client = _.clone(client);
  this.emit('client initialized');
  return this;
};

/**
 * Query for elements by `selector` within optional `context`.
 * Last defaults to widget's instance `$container`.
 *
 * @param {String} selector
 * @param {NodeElement} context
 * @return {BonzoAugmented}
 * @public
 */

Auth0Lock.prototype.query = function(selector, context) {
  if ('string' === typeof selector) {
    return $(selector, context || this.$container);
  }
  return $('#a0-lock', selector || this.$container);
};

/**
 * Render template function with default incance
 * `_locals` resolved.
 *
 * @param {Function} tmpl
 * @param {Object} locals
 * @return {String}
 * @public
 */

Auth0Lock.prototype.render = function(tmpl, locals) {
  var _locals = _.extend({}, this.options, locals);
  return tmpl(_locals);
};

/**
 * Render widget container to DOM
 * XXX: consider renaming!
 *
 * @param {Object} options
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype.insert = function() {
  if (this.$container) { return this; }

  var options = this.options;
  var cid = options.container;
  var locals = {
    options:      options,
    cordova:      utils.isCordova(),
    ios:          utils.isIOS(),
    alt_spinner:  !has_animations() ?
      (this.$options.cdn + 'img/ajax-loader.gif') :
      null
  };

  // widget container
  if (cid) {
    this.$container = document.getElementById(cid);
    if (!this.$container) { throw new Error('Not found element with \'id\' ' + cid); }

    this.$container.innerHTML = this.render(template, locals);

  } else {
    this.$container = document.createElement('div');
    bonzo(this.$container).addClass('a0-lock-container');

    this.$container.innerHTML = this.render(template, locals);
    document.body.appendChild(this.$container);
  }

  return this;
};

/**
 * Exhibit Lock's working space
 * before loading any other panel
 *
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype.exhibit = function() {
  var options = this.options;

  // Create and set the header
  this.header = new HeaderView(this, this.query('.a0-header').get(0), options);

  // activate panel
  // XXX: (?) this I don't get... why remove and add?
  this.query('div.a0-panel').removeClass('a0-active');
  this.query('div.a0-overlay').addClass('a0-active');
  this.query('.a0-panel.a0-onestep').addClass('a0-active');

  if (!options.container) {
    bonzo(document.body).addClass('a0-lock-open');
  } else {
    this.query('.a0-active').removeClass('a0-overlay');
  }

  this.query('.a0-popup .a0-invalid').removeClass('a0-invalid');

  this.query('.a0-overlay')
    .toggleClass('a0-no-placeholder-support', !placeholderSupported);

  // buttons actions
  this.query('.a0-onestep a.a0-close').a0_on('click', bind(this.oncloseclick, this));

  // close popup with ESC key
  if (options.closable) {
    this.query('').a0_on('keyup', bind(this.onescpressed, this));
  }

  // after pre-setting classes and dom handlers
  // emit as shown
  this.emit('shown');
}

/**
 * Show the widget resolving `options`
 * with default mode as 'signin'
 *
 * @param {Object} options
 * @param {Function} callback
 * @return {Auth0Lock}
 * @public
 */

Auth0Lock.prototype.show = function(options, callback) {
  var params = getShowParams(options, callback);
  var opts = _.extend({ mode: 'signin' }, params.options);
  return this.display(opts, params.callback);
};

/**
 * Show widget on `signin` mode with
 * signup and reset actions disabled
 * by default so no action buttons
 * are present on widget.
 *
 * @param {Object} options
 * @param {Function} callback
 * @return {Auth0Lock}
 * @public
 */

Auth0Lock.prototype.showSignin = function(options, callback) {

  var params = getShowParams(options, callback);
  var optional = { disableSignupAction: true, disableResetAction: true };
  var required = { mode: 'signin' };

  // merge and force `signin` mode
  var opts = _.extend(optional, params.options, required);
  return this.show.call(this, opts, params.callback);
};

/**
 * Show widget on `reset` mode with
 * signup and reset actions disabled
 * by default so no action buttons
 * are present on widget.
 *
 * @param {Object} options
 * @param {Function} callback
 * @return {Auth0Lock}
 * @public
 */

Auth0Lock.prototype.showSignup = function(options, callback) {
  var params = getShowParams(options, callback);
  var optional = { disableSignupAction: true, disableResetAction: true };
  var required = { mode: 'signup' };

  // merge and force `signin` mode
  var opts = _.extend(optional, params.options, required);
  return this.show.call(this, opts, params.callback);
};

/**
 * Show widget on `reset` mode with
 * signup and reset actions disabled
 * by default so no action buttons
 * are present on widget.
 *
 * @param {Object} options
 * @param {Function} callback
 * @return {Auth0Lock}
 * @public
 */

Auth0Lock.prototype.showReset = function(options, callback) {
  var params = getShowParams(options, callback);
  var optional = { disableSignupAction: true, disableResetAction: true };
  var required = { mode: 'reset' };

  // merge and force `signin` mode
  var opts = _.extend(optional, params.options, required);
  return this.show.call(this, opts, params.callback);
};

/**
 * Hide the widget and call `callback` when done.
 *
 * @param {Function} callback
 * @return {Auth0Lock}
 * @public
 */

Auth0Lock.prototype.hide = function (callback) {
  // immediatelly hide widget
  bonzo(document.body).removeClass('a0-lock-open');

  // Remove widget and/or it's container
  if (this.$container && this.options.container) {
    // remove `#a0-lock`
    this.query().remove();
  } else if(this.$container) {
    // remove `.a0-lock-container`
    this.query().parent('.a0-lock-container').remove();
  }

  this.$container = null;

  if ('function' === typeof callback) callback();
  this.emit('hidden');

  return this;
};

/**
 * Proxy `auth0.js` instance `.logout()` method
 *
 * @param {Object} query
 * @return {Auth0Lock}
 * @public
 */

Auth0Lock.prototype.logout = function (query) {
  this.$auth0.logout(query);
  return this;
};

/**
 * Display the widget in "signin" or "signup"
 * or "reset" mode, resolved from display `options`.
 * Optionaly set "popupCallback" to `callback` if present
 *
 * @param {Object} options
 * @param {Function} callback
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype.display = function(options, callback) {
  // pre-format options
  var opts = _.extend({ popupCallback: callback }, options);

  // Instantiate OptionsManager as `this.options`
  this.options = new OptionsManager(this, opts);

  // Start by render widget's container
  this.insert();

  this.options.ready(bind(onoptionsready, this));

  // Initialize widget's view
  // when options get loaded
  function onoptionsready() {
    this.initialize(bind(oninitialized, this));
  }

  // and right after that render mode
  function oninitialized() {
    // focus once ready
    this.once(this.options.mode + ' ready', bind(this.focusInput, this));

    // resolve view
    if ('signin' === this.options.mode) {
      // if user in AD ip range
      if (this.$ssoData && this.$ssoData.connection) {
        return this._kerberosPanel(this.options, callback);
      }

      // if user logged in show logged in experience
      if (this.options._shouldShowLastLogin()) {
        return this._loggedinPanel(this.options, callback);
      }

      // otherwise, just show signin
      this._signinPanel(this.options, callback);
    }

    if ('signup' === this.options.mode) {
      this._signupPanel(this.options, callback);
    }

    if ('reset' === this.options.mode) {
      this._resetPanel(this.options, callback);
    }

  }

  return this;
};

/**
 * Initialize widget for the `display` method
 * and calls `done` when ready to continue mode
 * setup...
 *
 * @param {Function} done
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype.initialize = function(done) {
  var self = this;
  var options = this.options;

  // Wait for Auth0.setClient() to be sure
  // we have the client's configuration
  // before setting up
  if (_.isEmpty(this.$client)) {
    var args  = arguments;
    return this.getClientConfiguration(function () {
      self.initialize.apply(self, args);
    });
  }

  if (options._isFreeSubscription()) {
    // hide footer for non free/dev subscriptions
    this.query('.a0-footer').toggleClass('a0-hide', true);
    this.query('.a0-free-subscription').removeClass('a0-free-subscription');
  }

  // Exhibit lock's working canvas
  this.exhibit();

  function finish(err, ssoData) {
    // XXX: auth0.getSSOData() never returns err
    // see source at: https://github.com/auth0/auth0.js/blob/master/lib/index.js
    self.$ssoData = ssoData;
    done();
    self.emit('ready');
  }

  // do not get SSO data on signup or reset modes
  var notSigninMode = ~['reset', 'signup'].indexOf(options.mode);
  if (notSigninMode) {
    return finish(null, {}), this;
  }

  var disabledReturnUserExperience = false === options.rememberLastLogin &&
    (!options._isThereAnyADConnection() || false === options.integratedWindowsLogin);

  if (disabledReturnUserExperience) {
    return finish(null, {}), this;
  }

  this._loadingPanel(options);

  // get SSO data and then render
  this.$auth0.getSSOData(options._isThereAnyADConnection(), finish);

  return this;
};

/**
 * Create and set a new SigninPanel with
 * `options`, and also set widget's title
 *
 * @param {Object} options
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype._signinPanel = function (options) {
  var panel = SigninPanel(this, { options: options || {} });

  // XXX: future Panel API placeholder
  // panel.on('submit', this.setLoadingMode);
  // panel.on('error', function(errors) {
  //   // errors are already saved in `signin` instance
  //   self.unsetLoadinMode();
  //   self.query('.a0-panel').html(signin.create());
  // });

  // panel.on('success', function() {
  //   self.hide();  // will unset loading mode
  //                 // and destroy and detach
  //                 // widget container from DOM
  // });

  this._setTitle(this.options.i18n.t('signin:title'));

  this.setPanel(panel);

  return this;

};

/**
 * Create and set a new SignupPanel with
 * `options`, and also set widget's title
 *
 * @param {Object} options
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype._signupPanel = function (options) {
  var panel = SignupPanel(this, { options: options || {} });

  this._setTitle(this.options.i18n.t('signup:title'));

  this.setPanel(panel);

  return this;
};

/**
 * Create and set a new ResetPanel with
 * `options`, and also set widget's title
 *
 * @param {Object} options
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype._resetPanel = function (options) {
  var panel = ResetPanel(this, { options: options || {} });

  this._setTitle(this.options.i18n.t('reset:title'));

  this.setPanel(panel);

  return this;
};

/**
 * Create and set a new LoadingPanel with
 * `options`, and also set widget's title
 *
 * @param {Object} options
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype._loadingPanel = function (options) {
  var panel = LoadingPanel(this, { options: options });

  if (options.title) {
    this._setTitle(this.options.i18n.t(options.title + ':title'));
  } else {
    this._setTitle(this.options.i18n.t((options.mode || 'signin') + ':title'));
  }

  this.setPanel(panel);

  if (options.message) {
    panel.query('').addClass('a0-with-message');
    panel.query('.a0-spin-message span').html(options.message.replace('-', ' '));
  }

  return this;
};

/**
 * Create and set a new LoggedinPanel with
 * `options`, and also set widget's title
 *
 * @param {Object} options
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype._loggedinPanel = function (options) {
  var panel = LoggedinPanel(this, { options: options || {} });

  this._setTitle(this.options.i18n.t('signin:title'));

  this.setPanel(panel);

  return this;
};

/**
 * Create and set a new KerberosPanel with
 * `options`, and also set widget's title
 *
 * @param {Object} options
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype._kerberosPanel = function (options) {
  var panel = KerberosPanel(this, { options: options || {} });

  this._setTitle(this.options.i18n.t('signin:title'));

  this.setPanel(panel);

  return this;
};

/**
 * Set `panel` to .a0-mode-container element and
 * emit it's `name` as ready
 *
 * @param {SigninPanel|SignupPanel|...} panel
 * @param {String} name
 * @private
 */

Auth0Lock.prototype.setPanel = function(panel, name) {
  var el = 'function' === typeof panel.render ? panel.render() : panel;
  var pname = 'function' === typeof panel.render ? panel.name : (name || 'signin');

  this.query('.a0-mode-container').html(el);
  this.emit('%s ready'.replace('%s', pname));
};


/**
 * Resolve whether instance `$options.domain` is an
 * Auth0's domain or not
 *
 * @return {Boolean}
 * @private
 */

Auth0Lock.prototype.isAuth0Domain = function () {
  var domainUrl = utils.parseUrl('https://' + this.$options.domain);
  return utils.endsWith(domainUrl.hostname, '.auth0.com');
};

/**
 * Resolve whether ignore or not `inputs` email validation
 *
 * @param {NodeElement} input
 * @return {Boolean}
 * @private
 */

Auth0Lock.prototype._ignoreEmailValidations = function (input) {
  return input.attr('type') !== 'email';
};

/**
 * Set an error `message` or clean element.
 *
 * @param {String} message
 * @private
 */

Auth0Lock.prototype._showError = function (message) {

  // if no error, clean
  if (!message) {
    // reset errors
    this.query('.a0-error').html('').addClass('a0-hide');
    this.query('.a0-errors').removeClass('a0-errors');
    // reset animations
    return animation_shake_reset(this.$container);
  }

  // else, show and render error message
  setTimeout(animation_shake, 0, this.$container);

  this.query('.a0-success').addClass('a0-hide');
  this.query('.a0-error').html(message).removeClass('a0-hide');
  this.emit('_error', message);
};

/**
 * Set a success `message` or clean element.
 * XXX: This is mostly used on password reset,
 * we should consider moving it to `ResetPanel`
 *
 * @param {String} message
 * @private
 */

Auth0Lock.prototype._showSuccess = function (message) {
  // if no message, clean success span
  if (!message) return this.query('.a0-success').html('').addClass('a0-hide');
  // else, show and render success message
  this.query('.a0-error').addClass('a0-hide');
  this.query('.a0-success').html(message).removeClass('a0-hide');
};

/**
 * Set an `input`s style to focus some
 * error going on, and optionaly
 * append a `message`
 *
 * @param {NodeElement} input
 * @param {String} message
 * @private
 */

Auth0Lock.prototype._focusError = function(input, message) {
  // remove all `_focusError` resources
  if (!arguments.length) {
    // reset errors
    this.query('.a0-errors').removeClass('a0-errors');
    this.query('.a0-error-input').removeClass('a0-error-input');
    this.query('.a0-error-message').remove();
    // reset animations
    return animation_shake_reset(this.$container);
  }

  // animation
  setTimeout(animation_shake, 0, this.$container);

  input
    .parent()
    .addClass('a0-error-input');

  if (!message) return;
  input.parent()
    .append($.create('<span class="a0-error-message">' + message + '</span>'));
};

/**
 * Set widget's `title`
 *
 * @param {String} title
 * @private
 */

Auth0Lock.prototype._setTitle = function(title) {
  this.header.setTitle(title);
};

/**
 * Restore widget's image
 *
 * @param {String} title
 * @private
 */

Auth0Lock.prototype.restoreImage = function(title) {
  this.header.restoreImage(title);
};

/**
 * Set widget's image
 *
 * @param {String} title
 * @private
 */

Auth0Lock.prototype.setImage = function(title) {
  this.header.setImage(title);
};

/**
 * Signin entry point method for resolving
 * username and password connections or enterprise
 *
 * @param {SigninPanel|SignupPanel} panel
 * @private
 */

Auth0Lock.prototype._signin = function (panel) {
  var valid = true;

  var message;

  var emailD = panel.query('.a0-email');
  var email_input = panel.query('input[name=email]');

  // Send out the signin event, allowing users to dynamically change the options.
  this.emit('signin submit', this.options, { email: email_input.val() });

  var email = null, domain, connection;

  var input_email_domain = this.options._extractEmailDomain(email_input.val().toLowerCase());

  var conn_obj = this.options._findConnectionByDomain(
    input_email_domain,
    this.$client.strategies
  );

  // Gets suffix
  if (!conn_obj) {
    if (this.options.auth0Strategies.length > 0) {
      return this._signinWithAuth0(panel);
    }

    if (input_email_domain === 'gmail.com') {
      return this._signinSocial('google-oauth2', null, null, panel);
    }

    message = this.options.i18n.t('signin:strategyDomainInvalid');
    message = message.replace('{domain}', input_email_domain);

    this._showError(message);
    this._focusError(email_input);

    return;
  }

  domain = conn_obj.domain;
  email = email_input.val();
  connection = conn_obj.name;

  valid &= (!domain && !emailD.addClass('a0-invalid')) || (!!domain && !!emailD.removeClass('a0-invalid'));

  // XXX: We should throw something here...
  // There has to be an action!
  if (!valid) { return; }

  if (this.options.popup && 'token' === this.options.responseType) {
    return this._signinPopupNoRedirect(connection, this.options.popupCallback, undefined, panel);
  }

  message = this.options.i18n.t('signin:loadingMessage').replace('{connection}', connection);
  this._loadingPanel({ mode: 'signin', message: message });

  var loginOptions = _.extend({}, {
    connection: connection,
    popup: this.options.popup,
    popupOptions: this.options.popupOptions,
    sso: this.options.sso,
  }, this.options.authParams);

  this.$auth0.login(loginOptions);
};

/**
 * Signin method for username and password credentials
 *
 * @param {SigninPanel|SignupPanel} panel
 * @private
 */

Auth0Lock.prototype._signinWithAuth0 = function (panel, connection) {
  var self = this;
  var options = this.options;
  var email_input = panel.query('input[name=email]');
  var password_input = panel.query('input[name=password]');
  var username = email_input.val();
  var password = password_input.val();
  connection = connection || options._getAuth0Connection(username);

  var loginOptions = {
    connection: connection.name,
    username: connection.domain ? username.replace('@' + connection.domain, '') : username,
    password: password,
    popup: self.options.popup,
    popupOptions: self.options.popupOptions,
    sso: self.options.sso
  };

  // We might be loosing some instance parameters here
  // XXX: An options method to get $auth0 login options
  // resolved from existing options combined with instance
  // may be a good idea...
  loginOptions = _.extend({}, loginOptions, this.options.authParams);

  var strategy = options._getClientStrategyByConnectionName(connection.name) || {};

  // Clean error container
  this._showError();
  this._focusError();

  if (this.options.popup && this.options.sso && 'token' === this.options.responseType) {
    //This will use winchan etc...
    return this._signinPopupNoRedirect(connection.name, this.options.popupCallback, loginOptions, panel);
  }

  // TODO: Handle sso case without popup
  var message = strategy.name !== 'auth0' ? // dont show loading message for dbConnections
    this.options.i18n.t('signin:loadingMessage').replace('{connection}', connection.name) : '';

  this._loadingPanel({ mode: 'signin', message: message });

  this.$auth0.login(loginOptions, function (err) {
    if (!err) return;

    // display `panel`
    self.setPanel(panel);

    // display errors
    self._focusError(email_input);
    self._focusError(password_input);

    if (err.status !== 401) {
      self._showError(err.message || self.options.i18n.t('signin:serverErrorText'));
    } else {
      self._showError(self.options.i18n.t('signin:wrongEmailPasswordErrorText'));
    }
  });
};

/**
 * Signin method for social connections
 *
 * @param {Event|String} e
 * @param {String} connection
 * @param {Object} authParams
 * @param {SigninPanel|SignupPanel} panel
 * @private
 */

Auth0Lock.prototype._signinSocial = function (e, connection, extraParams, panel) {
  var target = e.currentTarget || e.delegateTarget || e.target || e;
  var self = this;
  var options = panel.options;
  var strategyName = typeof target === 'string' ? target : target.getAttribute('data-strategy');
  var strategy = options._getClientStrategyByName(strategyName);

  var connectionName = connection || strategy.connections[0].name;

  // use authParams
  var extra = self.options.authParams;

  if (extra.connection_scopes) {
    // if no connection_scope was set for the connection we are ok with sending undefined
    extra.connection_scope = extra.connection_scopes[connectionName];
  }

  if (strategy) {
    // If we are in popup mode and responseType == 'token' was specified
    // we need to pass a callback.
    if (this.options.popup && 'token' === this.options.responseType) {
      this._signinPopupNoRedirect(connectionName, self.options.popupCallback, extraParams, panel);
    } else {
      var loginOptions = _.extend({}, {
        connection: connectionName,
        popup: self.options.popup,
        popupOptions: self.options.popupOptions,
        sso: self.options.sso
      }, self.options.authParams, extraParams);

      this.$auth0.login(loginOptions);
    }
  }
};

/**
 * Invoke `auth0.js` signin with popup parameters
 * and call `popupCallback` on complete
 *
 * @param {String} connectionName
 * @param {Function} popupCallback
 * @param {Object} authParams
 * @param {SigninPanel|SignupPanel} panel
 * @private
 */

Auth0Lock.prototype._signinPopupNoRedirect = function (connectionName, popupCallback, extraParams, panel) {
  var self = this;
  var email_input = panel.query('input[name=email]');
  var password_input = panel.query('input[name=password]');
  var options = this.options;
  var callback = popupCallback || options.popupCallback;

  extraParams = extraParams || {};

  var loginOptions = _.extend({}, {
        connection: connectionName,
        popup: self.options.popup,
        popupOptions: self.options.popupOptions,
        sso: self.options.sso
      }, options.authParams, extraParams);

  if ('function' !== typeof callback) {
    throw new Error('Popup mode needs a callback function to be executed after authentication success or failure.');
  }

  // Clean error container
  this._showError();
  this._focusError();

  // set loading message
  // unless it's a /ro call for username/email and password
  var message = null == loginOptions.username ? this.options.i18n.t('signin:popupCredentials') : null;
  this._loadingPanel({ mode: 'signin', message: message });

  this.$auth0.login(loginOptions, function(err, profile, id_token, access_token, state) {
    var args = Array.prototype.slice.call(arguments, 0);
    if (!err) return callback.apply(self, args), self.hide();

    // display signin
    self.setPanel(panel);

    // render errors
    if (err.message === 'User closed the popup window') {
      // Closed window
      self._showError(self.options.i18n.t('signin:userClosedPopup'));
    } else if (err.message === 'access_denied') {
      // Permissions not granted
      self._showError(self.options.i18n.t('signin:userConsentFailed'));
    } else if (err.status !== 401) {
      self._showError(self.options.i18n.t('signin:serverErrorText'));
    } else {
      self._showError(self.options.i18n.t('signin:wrongEmailPasswordErrorText'));
      self._focusError(email_input);
      self._focusError(password_input);
    }

    return callback.apply(null, args);
  });
};

/**
 * Get `auth0.js` instance client
 *
 * @return {Auth0}
 * @public
 */

Auth0Lock.prototype.getClient = function () {
  return this.$auth0;
};

/**
 * Proxy `auth0.js` instance to `parseHash`
 *
 * @param {String} hash
 * @return {Object|Error}
 * @public
 */

Auth0Lock.prototype.parseHash = function (hash) {
  return this.$auth0.parseHash(hash);
};

/**
 * Proxy `auth0.js` instance to `getProfile`
 *
 * @param {String} token
 * @param {Function} callback
 * @return {Auth0Lock}
 * @public
 */

Auth0Lock.prototype.getProfile = function (token, callback) {
  this.$auth0.getProfile(token, callback);
  return this;
};

/**
 * Handle `e` when .a0-close is clicked
 *
 * @param {Event} e
 * @private
 */

Auth0Lock.prototype.oncloseclick = function(e) {
  stop(e);
  this.hide();
};

/**
 * Handle `e` when keypressed ESC
 *
 * @param {Event} e
 * @private
 */

Auth0Lock.prototype.onescpressed = function(e) {
  if ((e.which == 27 || e.keycode == 27)) this.hide();
};

/**
 * Set focus on firist `input` if supported
 * but avoid mobie media screens and embeded
 * by default
 *
 * @return {Auth0Lock}
 * @private
 */

Auth0Lock.prototype.focusInput = function() {
  if (this.options._focusDisabled()) return this;

  var el = this.query('input').first();
  try{
    el.focus();
  } catch(err) {}

  return this;
};

/**
 * Private helpers
 */

/**
 * Add animate css class to shake `a0-panel`
 * on errorors... withing widget's `$container`
 * (by `context`) element...
 *
 * @param {NodeElement} context
 * @private
 */

function animation_shake(context) {
  $('.a0-panel', context)
    .addClass('a0-errors')
    .addClass('a0-animated a0-shake');
}

/**
 * Restore animate css classes stop shaking `a0-panel`
 * after errors reset... withing widget's `$container`
 * (by `context`) element...
 *
 * @param {NodeElement} context
 * @private
 */

function animation_shake_reset(context) {
  $('.a0-animated', context)
    .removeClass('a0-errors')
    .removeClass('a0-animated a0-shake');
}

/**
 * Parse and retrieve show parameters
 * and invoke callback after it
 *
 * @param {Object} options
 * @param {Function} callback
 * @private
 */

function getShowParams(options, callback) {
  var realOptions = options;
  var realCallback = callback;
  if (_.isFunction(options)) {
    realCallback = options;
    realOptions = {};
  }

  return {
    callback: realCallback,
    options: realOptions
  };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/bind":"/home/strider/workspace/lib/bind/index.js","./lib/bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","./lib/header":"/home/strider/workspace/lib/header/index.js","./lib/html/main.ejs":"/home/strider/workspace/lib/html/main.ejs","./lib/insert-css":"/home/strider/workspace/lib/insert-css/index.js","./lib/mode-kerberos":"/home/strider/workspace/lib/mode-kerberos/index.js","./lib/mode-loading":"/home/strider/workspace/lib/mode-loading/index.js","./lib/mode-loggedin":"/home/strider/workspace/lib/mode-loggedin/index.js","./lib/mode-reset":"/home/strider/workspace/lib/mode-reset/index.js","./lib/mode-signin":"/home/strider/workspace/lib/mode-signin/index.js","./lib/mode-signup":"/home/strider/workspace/lib/mode-signup/index.js","./lib/object-create":"/home/strider/workspace/lib/object-create/index.js","./lib/options-manager":"/home/strider/workspace/lib/options-manager/index.js","./lib/stop-event":"/home/strider/workspace/lib/stop-event/index.js","./lib/strategies":"/home/strider/workspace/lib/strategies/index.js","./lib/supports-animation":"/home/strider/workspace/lib/supports-animation/index.js","./lib/supports-placeholder":"/home/strider/workspace/lib/supports-placeholder/index.js","./lib/utils":"/home/strider/workspace/lib/utils/index.js","auth0-js":"/home/strider/workspace/node_modules/auth0-js/lib/index.js","bonzo":"/home/strider/workspace/node_modules/bonzo/bonzo.js","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/bind/index.js":[function(require,module,exports){
/**
 * Expose `bind`
 */

module.exports = bind;

/**
 * Bind `fn` to `obj`
 */
function bind(fn, obj) {
  return function binded() {
    return fn.apply(obj, arguments);
  }
}

},{}],"/home/strider/workspace/lib/bonzo-augmented/index.js":[function(require,module,exports){
var sizzle       = require('sizzle');
var bonzo       = require('bonzo');
var bean        = require('bean');

function generate(name) {
  return function (event, handler) {
    return this.each(function (el) {
      bean[name](el, event, handler);
    });
  }
}

bonzo.aug({
  a0_on:    generate('on'),
  a0_off:   generate('off'),
  a0_one:   generate('one'),

  // a0_once is an alias of one
  a0_once:  generate('one')
});

module.exports = function (selector, root) {
  if ('string' === typeof selector) {
    return bonzo(sizzle((selector || ''), root));
  }

  return bonzo(selector);
};

module.exports.create = function (html) {
  return bonzo.create(html);
};

},{"bean":"/home/strider/workspace/node_modules/bean/bean.js","bonzo":"/home/strider/workspace/node_modules/bonzo/bonzo.js","sizzle":"/home/strider/workspace/node_modules/sizzle/dist/sizzle.js"}],"/home/strider/workspace/lib/gravatar/index.js":[function(require,module,exports){
var md5 = require('blueimp-md5').md5;
var regex = require('../regex');
var trim = require('trim');

/**
 * Create gravatar url
 *
 * @private
 */
function createURL(parsedEmail) {
  // Trim leading and trailing whitespace
  parsedEmail = trim(parsedEmail);

  // Force all characters to lower-case
  parsedEmail = parsedEmail.toLowerCase();

  // Apply MD5
  // We are not using:
  //  var createHash = require('crypto').createHash;
  //  var md5sum = createHash('md5').update(parsedEmail);
  // As it does not work in IE9 :(

  return 'https://www.gravatar.com/avatar/' + md5(parsedEmail) + '?d=404';

}

/**
 * Sets the header image using a Gravatar asociated with a
 * given mail.
 *
 * @param {Object} widget
 * @param {String} mail
 *
 * @static
 * @public
 */
// TODO Change widget to header
module.exports = function (widget, mail) {
    var parseResult = regex.email_parser.exec(mail.toLowerCase());

    // valid email? Then fetch it in Gravatar
    if (parseResult) {
      var parsedEmail = parseResult[0];

      widget.setImage(createURL(parsedEmail));

    } else {
      widget.restoreImage();
    }
};


},{"../regex":"/home/strider/workspace/lib/regex/index.js","blueimp-md5":"/home/strider/workspace/node_modules/blueimp-md5/js/md5.js","trim":"/home/strider/workspace/node_modules/trim/index.js"}],"/home/strider/workspace/lib/header/icon-container.js":[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;

var whichAnimationEvent = require('../supports-animation');
var ocreate = require('../object-create');

// XXX This number should match the value in less .animation.match duration
var ANIMATION_TIMEOUT_MS = 300;

module.exports = IconContainerView;

/**
 *
 * IconContainerView
 *
 * Class that handles all the complexity of the animation
 * and display of icon and avatar in header.
 *
 * @constructor
 * @param {Object} widget
 * @param {Object} options
 *
 * @public
 */

function IconContainerView (header, options) {
  this.header = header;
  this.options = options;

  this.animationEnd = whichAnimationEvent();

  this.queue = [];
}

/**
 * Inherit from `EventEmitter`
 */

IconContainerView.prototype = ocreate(EventEmitter.prototype);

/**
 * Query for elements at `this.header.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */

IconContainerView.prototype.query = function(selector) {
  return this.header.query(selector);
}

IconContainerView.prototype.avatar = function() {
  return this.query('.a0-avatar');
}

IconContainerView.prototype.img = function() {
  return this.query('.a0-image img');
}

IconContainerView.prototype.imgContainer = function() {
  return this.query('.a0-image');
}

// TODO Refactor me! I'm identical to _hide
IconContainerView.prototype._show = function (el, cb) {
  var self = this;

  if(!el.hasClass('a0-hide')) {
    return cb();
  }

  // IE 9 :(
  if (!self.animationEnd){
    el.removeClass('a0-hide');
    return cb();
  }

  el.removeClass('a0-animated a0-fast a0-flipInX a0-flipOutX');
  el.a0_once(self.animationEnd, function () {
    el.removeClass('a0-animated a0-fast a0-flipInX a0-flipOutX');
    cb();
  });
  el.addClass('a0-animated a0-fast a0-flipInX');
  el.removeClass('a0-hide');
};

IconContainerView.prototype._hide = function (el, cb) {
  var self = this;

  if(el.hasClass('a0-hide')) {
    return cb();
  }

  // IE 9 :(
  if (!self.animationEnd){
    el.addClass('a0-hide');
    return cb();
  }

  el.removeClass('a0-animated a0-fast a0-flipInX a0-flipOutX');
  el.a0_once(self.animationEnd, function () {
    el.removeClass('a0-animated a0-fast a0-flipOutX a0-flipInX');
    el.addClass('a0-hide');

    cb();
  });
  el.addClass('a0-animated a0-fast a0-flipOutX');
};

IconContainerView.prototype._showIcon = function (cb) {
  var self = this;
  return this._show(this.imgContainer(), function () {
    self.emit('icon shown');
    cb();
  });
};

IconContainerView.prototype._showAvatar = function (cb) {
  var self = this;
  return this._show(this.avatar(), function () {
    self.emit('avatar shown');
    cb();
  });
};

IconContainerView.prototype._hideIcon = function (cb) {
  var self = this;
  return this._hide(this.imgContainer(), function () {
    self.emit('icon hidden');
    cb();
  });
};

IconContainerView.prototype._hideAvatar = function (cb) {
  var self = this;
  return this._hide(this.avatar(), function () {
    self.emit('avatar hidden');
    cb();
  });
};

IconContainerView.prototype._onError = callbackify(function (cb, self) {
  clearTimeout(self.timer);
  self.img().a0_off('load');
  self.img().a0_off('error');

  self.imgContainer().removeClass('a0-gravatar');

  self._hideIcon(function () {
    if (self.options.icon) {
      self.img().attr('src', self.options.icon);
      self._showIcon(cb);
    } else {
      self._showAvatar(cb);
    }
  });
});

IconContainerView.prototype._onLoad = callbackify(function (cb, self) {
  clearTimeout(self.timer);
  self.img().a0_off('error');
  self.img().a0_off('load');

  self.query('.a0-image').addClass('a0-gravatar');

  self._hideAvatar(function () {
    self._showIcon(cb);
  });
});

IconContainerView.prototype._processQueue = function () {
  var self = this;

  if (!this.queue.length || this.processing) {
    return;
  }

  var element = this.queue.pop();

  self.processing = true;
  element(function () {
    self.processing = false;
    self._processQueue();
  });
};

/**
 * Show image
 *
 * @param {String} url
 * @private
 */

IconContainerView.prototype.set = function(url) {
  var self = this;

  this.queue.push(function (cb) {
    // URL already set, nothing to do here :)
    if (self.img().attr('src') === url) {
      return cb();
    }
    // XXX Super hack: sometimes neither error nor load
    // executes, that's why this timer is required.
    self.timer = setTimeout(cb, ANIMATION_TIMEOUT_MS);
    self.img().a0_once('error', self._onError(cb, self));
    self.img().a0_once('load', self._onLoad(cb, self));


    self._hideIcon(function () {
      self.img().attr('src', url);
    });

  });
  this._processQueue();
};


/**
 * Restore image to default image
 *
 * @private
 */

IconContainerView.prototype.reset = function () {
  var self = this;

  if (this.options.icon) {
    this.queue.push(function (cb) {
      if (self.img().attr('src') !== self.options.icon) {
        self._hideIcon(function () {
          self.imgContainer().removeClass('a0-gravatar');
          self.img().attr('src', self.options.icon);
          self._showIcon(cb);
        });
        return;
      }
      self.imgContainer().removeClass('a0-gravatar');
      cb();
    });
  } else {
    this.queue.push(function (cb) {
      self._hideIcon(function () {
        self.imgContainer().removeClass('a0-gravatar');
        self._showAvatar(cb);
      });
    });
  }
  this._processQueue();
};

function callbackify(fn) {
  return function (cb, self) {
    return function () {
      fn.apply(self, [cb, self]);
    };
  };
}

},{"../object-create":"/home/strider/workspace/lib/object-create/index.js","../supports-animation":"/home/strider/workspace/lib/supports-animation/index.js","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js"}],"/home/strider/workspace/lib/header/index.js":[function(require,module,exports){
var _ = require('underscore');
var $ = require('../bonzo-augmented');
var IconContainerView = require('./icon-container');

module.exports = HeaderView;

var validOptionsProperties = ['icon'];

/**
 * HeaderView
 *
 * @param {Object} widget
 * @param {Object} el
 * @param {Object} options
 *
 * @public
 */

function HeaderView(widget, el, options) {
  var self = this;

  this.el = el;
  this.widget = widget;
  this.options = _.filter(options, function (option) {
    /*jshint bitwise: false*/
    return !!~validOptionsProperties.indexOf(option);
    /*jshint bitwise: true*/
  });

  this.image = new IconContainerView(this, options);

  function redirectEvent(s) {
    return function () {
      widget.emit(s);
    };
  }

  var events = [ 'icon shown', 'icon hidden', 'avatar shown', 'avatar hidden' ];

  events.forEach(function (eventName) {
    self.image.on(eventName, redirectEvent(eventName));
  });

}

/**
 * Set widget's h1 to `title`
 *
 * @param {String} title
 * @private
 */

HeaderView.prototype.setTitle = function(title) {
  var h1 = this.query('h1');
  h1.html(title);
  h1.css('display', '');
};

/**
 * Query for elements at `this.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */

HeaderView.prototype.query = function(selector) {
  if (!this.el) { throw new Error('Can\'t get element since no `el` is set to local context'); }
  return $(selector, this.el);
};

/**
 * Set image to display on header.
 *
 * @param {String} url Image to display
 * @public
 */

HeaderView.prototype.setImage = function(url) {
  this.image.set(url);
};

/**
 * Reset image to display on header to default.
 *
 * @public
 */

HeaderView.prototype.restoreImage = function () {
  this.image.reset();
};


},{"../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","./icon-container":"/home/strider/workspace/lib/header/icon-container.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/html/main.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="a0-lock" class="a0-lock', escape((1,  (locals && locals.options.theme) ? ' a0-theme-' + locals.options.theme : '')), '" dir="auto">\n  <div class="a0-signin">\n    <div class="a0-popup ', escape((3,  (locals && locals.cordova) ? 'a0-cordova' : '' )), ' ', escape((3,  (locals && locals.ios) ? 'a0-ios' : '' )), '">\n      <div class="a0-overlay">\n        <div class="', escape((5,  locals && locals.options.container ? '' : 'a0-centrix' )), '">\n          ' + (function(){var buf = [];
 buf.push('<div id="a0-onestep" class="a0-panel a0-onestep a0-free-subscription">\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-header a0-top-header ', escape((1,  locals.embedded ? 'a0-hide' : '')), '">\n\n    <div class="a0-bg-gradient"></div>\n\n    <div class="a0-icon-container">\n      <div class="a0-image ', escape((6,  options.icon ? '' : 'a0-hide' )), '">\n          <img src="', escape((7,  options.icon || '' )), '">\n      </div>\n\n      <div class="a0-avatar ', escape((10,  !options.icon ? '' : 'a0-hide' )), '">\n          <i class="a0-avatar-guest a0-icon-budicon-2"></i>\n      </div>\n    </div>\n\n    <h1>', escape((15,  options.i18n.t('signin:title') )), '</h1>\n    <h2 class="a0-error a0-hide">&nbsp;</h2>\n    <h2 class="a0-success a0-hide">&nbsp;</h2>\n\n    <!-- if standalone, you shouldn\'t be able to close the widget -->\n    <a class="a0-close a0-icon-budicon-3 ', escape((20,  options.closable ? '' : 'a0-hide' )), '" href="#"></a>\n</div>\n');
return buf.join('');})() + '\n\n    <div class="a0-mode-container"></div>\n\n    ' + (function(){var buf = [];
 buf.push('<div class=\'a0-footer\'>\n    <a href="http://auth0.com" target="_new" class="a0-logo">\n        <i class="a0-icon-badge"></i>\n    </a>\n</div>\n');
return buf.join('');})() + '\n</div>\n');
return buf.join('');})() + '\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/html/zocial-button.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');1; var icon_class = !use_big_buttons ? 'a0-icon' : 'a0-block' ; buf.push('\n<div tabindex="0"\n		data-strategy="', escape((3,  name )), '"\n		title="', escape((4,  title )), '"\n		class="a0-zocial ', escape((5,  icon_class )), ' a0-', escape((5,  css )), ' ', escape((5,  locals.imageicon ? 'a0-image-icon' : '' )), '" dir="ltr">\n\n\n	<span>', escape((8,  title )), '</span>\n</div>'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/i18n/index.js":[function(require,module,exports){
var dics_data = {
  'ar': require('../../i18n/ar.json'),
  'da': require('../../i18n/da.json'),
  'de': require('../../i18n/de.json'),
  'en': require('../../i18n/en.json'),
  'es': require('../../i18n/es.json'),
  'fr': require('../../i18n/fr-FR.json'),
  'fr-FR': require('../../i18n/fr-FR.json'),
  'he': require('../../i18n/he.json'),
  'it': require('../../i18n/it.json'),
  'ja': require('../../i18n/ja.json'),
  'nb-NO': require('../../i18n/nb-NO.json'),
  'nl': require('../../i18n/nl-NL.json'),
  'nl-NL': require('../../i18n/nl-NL.json'),
  'pt': require('../../i18n/pt.json'),
  'pt-BR': require('../../i18n/pt-BR.json'),
  'ru': require('../../i18n/ru.json'),
  'tlh': require('../../i18n/tlh.json'),
  'tr': require('../../i18n/tr.json'),
  'zh': require('../../i18n/zh.json')
};

var default_dict = dics_data['en'];

function findProp(o, s) {
    s = s.replace(/\[(\w+)\]/g, ':$1'); // convert indexes to properties
    s = s.replace(/^\:/, '');           // strip a leading dot
    var a = s.split(':');
    while (a.length) {
        var n = a.shift();
        if (n in o) {
            o = o[n];
        } else {
            return;
        }
    }
    return o;
}

function Dictionary (data) {
  this._data = data;
}

Dictionary.prototype.t = function (key) {
  return findProp(this._data, key) || findProp(default_dict, key);
};

module.exports.getDict = function ( langOrDict ) {

  if (!langOrDict) {
    return new Dictionary(default_dict);
  }

  if ( typeof langOrDict === 'string' ) {
    var dict = dics_data[langOrDict] || dics_data[langOrDict.split('-')[0]];
    return new Dictionary(dict);
  } else {
    return new Dictionary(langOrDict);
  }
};

},{"../../i18n/ar.json":"/home/strider/workspace/i18n/ar.json","../../i18n/da.json":"/home/strider/workspace/i18n/da.json","../../i18n/de.json":"/home/strider/workspace/i18n/de.json","../../i18n/en.json":"/home/strider/workspace/i18n/en.json","../../i18n/es.json":"/home/strider/workspace/i18n/es.json","../../i18n/fr-FR.json":"/home/strider/workspace/i18n/fr-FR.json","../../i18n/he.json":"/home/strider/workspace/i18n/he.json","../../i18n/it.json":"/home/strider/workspace/i18n/it.json","../../i18n/ja.json":"/home/strider/workspace/i18n/ja.json","../../i18n/nb-NO.json":"/home/strider/workspace/i18n/nb-NO.json","../../i18n/nl-NL.json":"/home/strider/workspace/i18n/nl-NL.json","../../i18n/pt-BR.json":"/home/strider/workspace/i18n/pt-BR.json","../../i18n/pt.json":"/home/strider/workspace/i18n/pt.json","../../i18n/ru.json":"/home/strider/workspace/i18n/ru.json","../../i18n/tlh.json":"/home/strider/workspace/i18n/tlh.json","../../i18n/tr.json":"/home/strider/workspace/i18n/tr.json","../../i18n/zh.json":"/home/strider/workspace/i18n/zh.json"}],"/home/strider/workspace/lib/insert-css/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var fs = require('fs');
var style = "#a0-lock article,#a0-lock aside,#a0-lock details,#a0-lock figcaption,#a0-lock figure,#a0-lock footer,#a0-lock header,#a0-lock hgroup,#a0-lock nav,#a0-lock section,#a0-lock summary{display:block}#a0-lock audio,#a0-lock canvas,#a0-lock video{display:inline-block;*display:inline;*zoom:1}#a0-lock audio:not([controls]){display:none;height:0}#a0-lock [hidden]{display:none}#a0-lock html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}#a0-lock a,#a0-lock button,#a0-lock div,#a0-lock h1,#a0-lock h2,#a0-lock html,#a0-lock input,#a0-lock select,#a0-lock span,#a0-lock textarea{font-family:sans-serif}#a0-lock body{margin:0}#a0-lock a:focus{outline:thin dotted}#a0-lock a:active,#a0-lock a:hover{outline:0}#a0-lock h4{font-size:1em;margin:1.33em 0}#a0-lock h5{font-size:.83em;margin:1.67em 0}#a0-lock h6{font-size:.75em;margin:2.33em 0}#a0-lock abbr[title]{border-bottom:1px dotted}#a0-lock b,#a0-lock strong{font-weight:700}#a0-lock blockquote{margin:1em 40px}#a0-lock dfn{font-style:italic}#a0-lock mark{background:#ff0;color:#000}#a0-lock p,#a0-lock pre{margin:1em 0}#a0-lock code,#a0-lock kbd,#a0-lock pre,#a0-lock samp{font-family:monospace,serif;_font-family:'courier new',monospace;font-size:1em}#a0-lock pre{white-space:pre;white-space:pre-wrap;word-wrap:break-word}#a0-lock q{quotes:none}#a0-lock q:after,#a0-lock q:before{content:'';content:none}#a0-lock small{font-size:80%}#a0-lock sub,#a0-lock sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}#a0-lock sup{top:-.5em}#a0-lock sub{bottom:-.25em}#a0-lock dl,#a0-lock menu,#a0-lock ol,#a0-lock ul{margin:1em 0}#a0-lock dd{margin:0 0 0 40px}#a0-lock menu,#a0-lock ol,#a0-lock ul{padding:0 0 0 40px}#a0-lock nav ol,#a0-lock nav ul{list-style:none;list-style-image:none}#a0-lock img{border:0;-ms-interpolation-mode:bicubic}#a0-lock svg:not(:root){overflow:hidden}#a0-lock figure,#a0-lock form{margin:0}#a0-lock fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}#a0-lock legend{border:0;padding:0;white-space:normal;*margin-left:-7px}#a0-lock button,#a0-lock input,#a0-lock select,#a0-lock textarea{font-size:100%;margin:0;vertical-align:baseline;*vertical-align:middle}#a0-lock button,#a0-lock input{line-height:normal}#a0-lock button,#a0-lock html input[type=button],#a0-lock input[type=reset],#a0-lock input[type=submit]{-webkit-appearance:button;cursor:pointer;*overflow:visible}#a0-lock button[disabled],#a0-lock input[disabled]{cursor:default}#a0-lock input[type=checkbox],#a0-lock input[type=radio]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0;*height:13px;*width:13px}#a0-lock input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}#a0-lock input[type=search]::-webkit-search-cancel-button,#a0-lock input[type=search]::-webkit-search-decoration{-webkit-appearance:none}#a0-lock button::-moz-focus-inner,#a0-lock input::-moz-focus-inner{border:0;padding:0}#a0-lock textarea{overflow:auto;vertical-align:top}#a0-lock table{border-collapse:collapse;border-spacing:0}#a0-lock a,#a0-lock button,#a0-lock footer,#a0-lock form,#a0-lock form label,#a0-lock h1,#a0-lock h2,#a0-lock h3,#a0-lock header,#a0-lock input[type=button],#a0-lock input[type=email],#a0-lock input[type=password],#a0-lock input[type=text],#a0-lock span{font-smooth:never;-webkit-font-smoothing:auto;alignment-baseline:baseline;-webkit-animation:none 0 ease 0 1 normal;-moz-animation:none 0 ease 0 1 normal;animation:none 0 ease 0 1 normal;-webkit-animation-play-state:running;-moz-animation-play-state:running;animation-play-state:running;appearance:normal;-webkit-backface-visibility:visible;-moz-backface-visibility:visible;-ms-backface-visibility:visible;backface-visibility:visible;background:none 0 0 auto repeat scroll padding-box transparent;background-color:transparent;background-image:none;baseline-shift:baseline;binding:none;bleed:6pt;bookmark-label:content();bookmark-level:none;bookmark-state:open;bookmark-target:none;border:0 none transparent;border-radius:0;bottom:auto;-webkit-box-align:stretch;-webkit-align-items:stretch;-moz-box-align:stretch;-ms-flex-align:stretch;box-align:stretch;box-decoration-break:slice;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:normal;-moz-box-orient:vertical;-moz-box-direction:normal;-ms-flex-direction:normal;box-direction:normal;-webkit-box-flex:0;-webkit-flex:0;-moz-box-flex:0;-ms-flex:0;box-flex:0;box-flex-group:1;box-lines:single;-webkit-box-ordinal-group:2;-webkit-order:1;-moz-box-ordinal-group:2;-ms-flex-order:1;box-ordinal-group:1;box-orient:inline-axis;-webkit-box-pack:start;-webkit-justify-content:start;-moz-box-pack:start;-ms-flex-pack:start;box-pack:start;-webkit-box-shadow:none;box-shadow:none;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-break-after:auto;-moz-break-after:auto;break-after:auto;-webkit-break-before:auto;-moz-break-before:auto;break-before:auto;-webkit-break-inside:auto;-moz-break-inside:auto;break-inside:auto;caption-side:top;clear:none;clip:auto;color:inherit;color-profile:auto;-webkit-column-count:auto;-moz-column-count:auto;column-count:auto;-webkit-column-fill:balance;-moz-column-fill:balance;column-fill:balance;-webkit-column-gap:normal;-moz-column-gap:normal;column-gap:normal;-webkit-column-rule:medium medium #1f1f1f;-moz-column-rule:medium medium #1f1f1f;column-rule:medium medium #1f1f1f;-webkit-column-span:1;-moz-column-span:1;column-span:1;-webkit-column-width:auto;-moz-column-width:auto;column-width:auto;-webkit-columns:auto auto;-moz-columns:auto auto;columns:auto auto;content:normal;counter-increment:none;counter-reset:none;crop:auto;cursor:auto;direction:auto;display:auto;dominant-baseline:auto;drop-initial-after-adjust:text-after-edge;drop-initial-after-align:baseline;drop-initial-before-adjust:text-before-edge;drop-initial-before-align:caps-height;drop-initial-size:auto;drop-initial-value:initial;elevation:level;empty-cells:show;fit:fill;fit-position:0 0;float:none;float-offset:0 0;font-size-adjust:none;font-stretch:normal;font:normal normal 100% \"Helvetica Neue\",Arial,sans-serif;grid-columns:none;grid-rows:none;hanging-punctuation:none;height:auto;hyphenate-after:auto;hyphenate-before:auto;hyphenate-character:auto;hyphenate-lines:no-limit;hyphenate-resource:none;-webkit-hyphens:manual;-moz-hyphens:manual;-ms-hyphens:manual;hyphens:manual;icon:auto;image-orientation:auto;image-rendering:auto;image-resolution:normal;inline-box-align:last;left:auto;letter-spacing:normal;line-height:normal;line-stacking:inline-line-height exclude-ruby consider-shifts;list-style:disc outside none;margin:0;marks:none;marquee-direction:forward;marquee-loop:1;marquee-play-count:1;marquee-speed:normal;marquee-style:scroll;max-height:none;max-width:none;min-height:0;min-width:0;move-to:normal;nav-down:auto;nav-index:auto;nav-left:auto;nav-right:auto;nav-up:auto;opacity:1;orphans:2;outline:invert none medium!important;outline-offset:0;overflow:visible;overflow-style:auto;padding:0;page:auto;page-break-after:auto;page-break-before:auto;page-break-inside:auto;page-policy:start;-webkit-perspective:none;-moz-perspective:none;-ms-perspective:none;perspective:none;-webkit-perspective-origin:50% 50%;-moz-perspective-origin:50% 50%;-ms-perspective-origin:50% 50%;perspective-origin:50% 50%;position:static;presentation-level:0;punctuation-trim:none;quotes:none;rendering-intent:auto;resize:none;right:auto;rotation:0;rotation-point:50% 50%;ruby-align:auto;ruby-overhang:none;ruby-position:before;ruby-span:none;size:auto;string-set:none;table-layout:auto;text-align:auto;text-align-last:start;text-decoration:none;text-emphasis:none;text-height:auto;text-indent:0;text-justify:auto;text-outline:0;text-shadow:none;text-transform:none;text-wrap:normal;top:auto;-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;-webkit-transform-origin:50% 50% 0;-moz-transform-origin:50% 50% 0;-ms-transform-origin:50% 50% 0;transform-origin:50% 50% 0;-webkit-transform-style:flat;-moz-transform-style:flat;-ms-transform-style:flat;transform-style:flat;-webkit-transition:all 0 ease 0;-moz-transition:all 0 ease 0;transition:all 0 ease 0;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;white-space-collapse:collapse;widows:2;width:auto;word-break:normal;word-spacing:normal;word-wrap:normal;z-index:auto;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}@-webkit-keyframes appear{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadein{from{opacity:.3}to{opacity:1}}@-moz-keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@-webkit-keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@-ms-keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@-moz-keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}@-webkit-keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}@-ms-keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}@keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}#a0-lock.a0-theme-default .a0-zocial,#a0-lock.a0-theme-default a.a0-zocial{color:#fff;text-align:left;text-decoration:none;white-space:nowrap;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:block;border-radius:3px;padding:0;margin-bottom:6px;cursor:pointer;overflow:hidden;-webkit-transition:opacity .2s ease;-moz-transition:opacity .2s ease;transition:opacity .2s ease}#a0-lock.a0-theme-default .a0-zocial:hover{opacity:1}#a0-lock.a0-theme-default .a0-zocial span,#a0-lock.a0-theme-default a.a0-zocial span{text-transform:uppercase;font-weight:400;font-size:11px;line-height:40px;display:inline-block;padding-left:4%;width:86%;cursor:pointer;-webkit-transition:all .2s ease;-moz-transition:all .2s ease;transition:all .2s ease}#a0-lock.a0-theme-default .a0-strategy div.a0-zocial span{text-transform:lowercase;font-size:12px}#a0-lock.a0-theme-default .a0-zocial:hover span,#a0-lock.a0-theme-default a.a0-zocial,#a0-lock.a0-theme-default a.a0-zocial:hover span{background:rgba(0,0,0,.2)}#a0-lock.a0-theme-default .a0-zocial:before{font:14px zocial;font-weight:400;float:left;display:inline-block;line-height:40px;width:16%;cursor:pointer;text-align:center;background:rgba(0,0,0,.3);-webkit-transition:all .2s ease;-moz-transition:all .2s ease;transition:all .2s ease}#a0-lock.a0-theme-default .a0-zocial:active,#a0-lock.a0-theme-default .a0-zocial:focus{outline:0;opacity:.4}#a0-lock.a0-theme-default .a0-zocial.a0-icon{overflow:hidden;white-space:nowrap}#a0-lock.a0-theme-default .a0-zocial.a0-icon:before{-webkit-box-shadow:none;box-shadow:none;border:0}#a0-lock.a0-theme-default .a0-strategy{margin:10px 0}#a0-lock.a0-theme-default .a0-zocial.a0-amazon:before{content:\"a\"}#a0-lock.a0-theme-default .a0-zocial.a0-dropbox:before{content:\"d\";color:#1f75cc}#a0-lock.a0-theme-default .a0-zocial.a0-facebook:before{content:\"f\"}#a0-lock.a0-theme-default .a0-zocial.a0-github:before{content:\"\\00E8\"}#a0-lock.a0-theme-default .a0-zocial.a0-gmail:before{content:\"m\";color:red}#a0-lock.a0-theme-default .a0-zocial.a0-google:before{content:\"G\"}#a0-lock.a0-theme-default .a0-zocial.a0-googleplus:before{content:\"+\"}#a0-lock.a0-theme-default .a0-zocial.a0-guest:before{content:\"?\"}#a0-lock.a0-theme-default .a0-zocial.a0-ie:before{content:\"6\"}#a0-lock.a0-theme-default .a0-zocial.a0-linkedin:before{content:\"L\"}#a0-lock.a0-theme-default .a0-zocial.a0-openid:before{content:\"o\";color:#ff921d}#a0-lock.a0-theme-default .a0-zocial.a0-paypal:before{content:\"$\"}#a0-lock.a0-theme-default .a0-zocial.a0-stackoverflow:before{content:\"\\00EC\";color:#ff7a15}#a0-lock.a0-theme-default .a0-zocial.a0-twitter:before{content:\"T\"}#a0-lock.a0-theme-default .a0-zocial.a0-vk:before{content:\"N\"}#a0-lock.a0-theme-default .a0-zocial.a0-windows:before{content:\"W\"}#a0-lock.a0-theme-default .a0-zocial.a0-yahoo:before{content:\"Y\"}#a0-lock.a0-theme-default .a0-zocial.a0-office365:before{content:\"W\"}#a0-lock.a0-theme-default .a0-zocial.a0-thirtysevensignals:before{content:\"b\"}#a0-lock.a0-theme-default .a0-zocial.a0-salesforce:before{content:\"*\"}#a0-lock.a0-theme-default .a0-zocial.a0-waad:before{content:\"W\"}#a0-lock.a0-theme-default .a0-zocial.a0-box:before{content:\"x\"}#a0-lock.a0-theme-default .a0-zocial.a0-aol:before{content:\"l\"}#a0-lock.a0-theme-default .a0-zocial.a0-renren:before{content:\"r\"}#a0-lock.a0-theme-default .a0-zocial.a0-baidu:before{content:\"u\"}#a0-lock.a0-theme-default .a0-zocial.a0-fitbit:before{content:\"#\"}#a0-lock.a0-theme-default .a0-zocial.a0-yandex:before{content:\"&\"}#a0-lock.a0-theme-default .a0-zocial.a0-wordpress:before{content:\"w\"}#a0-lock.a0-theme-default .a0-zocial.a0-dwolla:before{content:\"D\"}#a0-lock.a0-theme-default .a0-zocial.a0-shopify:before{content:\"s\"}#a0-lock.a0-theme-default .a0-zocial.a0-yammer:before{content:\"!\"}#a0-lock.a0-theme-default .a0-zocial.a0-miicard:before{content:\"m\"}#a0-lock.a0-theme-default .a0-zocial.a0-soundcloud:before{content:\"t\"}#a0-lock.a0-theme-default .a0-zocial.a0-evernote:before{content:\"n\"}#a0-lock.a0-theme-default .a0-zocial.a0-ebay:before{content:\"e\"}#a0-lock.a0-theme-default .a0-zocial.a0-sharepoint:before{content:\"p\"}#a0-lock.a0-theme-default .a0-zocial.a0-weibo:before{content:\"S\"}#a0-lock.a0-theme-default .a0-zocial.a0-instagram:before{content:\"i\"}#a0-lock.a0-theme-default .a0-zocial.a0-thecity:before{content:\"c\"}#a0-lock.a0-theme-default .a0-zocial.a0-planningcenter:before{content:\"y\"}#a0-lock.a0-theme-default .a0-zocial.a0-exact:before{content:\"\\e9\"}#a0-lock.a0-theme-default .a0-zocial.a0-amazon{background-color:#ffad1d;color:#030037}#a0-lock.a0-theme-default .a0-zocial.a0-dropbox{background-color:#007ee5;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-facebook{background-color:#4863ae}#a0-lock.a0-theme-default .a0-zocial.a0-github{background-color:#eee;color:#050505}#a0-lock.a0-theme-default .a0-zocial.a0-wordpress{background-color:#1e8cbe;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-dwolla{background-color:#F5891F;color:#fbfbfb}#a0-lock.a0-theme-default .a0-zocial.a0-gmail{background-color:#efefef;color:#222}#a0-lock.a0-theme-default .a0-zocial.a0-google{background-color:#4e6cf7}#a0-lock.a0-theme-default .a0-zocial.a0-googleplus{background-color:#dd4b39}#a0-lock.a0-theme-default .a0-zocial.a0-guest{background-color:#1b4d6d}#a0-lock.a0-theme-default .a0-zocial.a0-ie{background-color:#00a1d9}#a0-lock.a0-theme-default .a0-zocial.a0-linkedin{background-color:#0083a8}#a0-lock.a0-theme-default .a0-zocial.a0-openid{background-color:#f5f5f5;color:#333}#a0-lock.a0-theme-default .a0-zocial.a0-paypal{background-color:#eee;color:#32689a}#a0-lock.a0-theme-default .a0-zocial.a0-twitter{background-color:#46c0fb}#a0-lock.a0-theme-default .a0-zocial.a0-vk{background-color:#45688E}#a0-lock.a0-theme-default .a0-zocial.a0-office365{background-color:#00ACED;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-waad{background-color:#00ADEF;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-thirtysevensignals{background-color:#6AC071;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-box{background-color:#267bb6;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-salesforce{background-color:#eee;color:red}#a0-lock.a0-theme-default .a0-zocial.a0-windows{background-color:#2672EC;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-yahoo{background-color:#a200c2;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-aol{background-color:#0861A8;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-renren{background-color:#0056B5;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-baidu{background-color:#2832E1;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-fitbit{background-color:#45C2C5;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-yandex{background-color:red;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-shopify{background-color:#9CC24C;color:#fbfbfb}#a0-lock.a0-theme-default .a0-zocial.a0-yammer{background-color:#0072c6;color:#fdfdfd}#a0-lock.a0-theme-default .a0-zocial.a0-miicard{background-color:#C7EAFF;color:#303030}#a0-lock.a0-theme-default .a0-zocial.a0-soundcloud{background-color:#ff4500}#a0-lock.a0-theme-default .a0-zocial.a0-evernote{background-color:#6bb130;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-ebay{background-color:#000098;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-sharepoint{background-color:#0072C6;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-weibo{background-color:#faf6f1;color:#e6162d}#a0-lock.a0-theme-default .a0-zocial.a0-instagram{background-color:#25537B;color:#fff}#a0-lock.a0-theme-default .a0-zocial.a0-thecity{background-color:#767571;color:#d1d1d1}#a0-lock.a0-theme-default .a0-zocial.a0-planningcenter{background-color:#4e4e4e;color:#d1d1d1}#a0-lock.a0-theme-default .a0-zocial.a0-exact{background-color:#ED1C24;color:#fff}#a0-lock.a0-theme-default button:-moz-focus-inner{border:0;padding:0}@font-face{font-family:zocial;src:url(https://cdn.auth0.com/w2/font/zocial-regular-webfont.eot)}@font-face{font-family:zocial;src:url(data:application/font-woff;charset=utf-8;base64,) format('woff');font-weight:400;font-style:normal}#a0-lock.a0-theme-default .a0-equal-viewport .a0-zocial,#a0-lock.a0-theme-default .a0-zocial.a0-icon{width:auto;display:inline-block;margin:6px}#a0-lock.a0-theme-default .a0-equal-viewport .a0-zocial:before,#a0-lock.a0-theme-default .a0-zocial.a0-icon:before{width:40px;background-color:transparent}#a0-lock.a0-theme-default .a0-equal-viewport .a0-zocial:hover:before,#a0-lock.a0-theme-default .a0-zocial.a0-icon:hover:before{background-color:rgba(0,0,0,.4)}#a0-lock.a0-theme-default .a0-equal-viewport .a0-zocial span,#a0-lock.a0-theme-default .a0-zocial.a0-icon span{display:none}#a0-lock .a0-clearfix{overflow:auto;zoom:1}#a0-lock .a0-show{display:block}#a0-lock .a0-hide{display:none!important}#a0-lock .a0-panel{*zoom:1;background:#fff;width:280px;-webkit-transition:height 50ms ease-in;-moz-transition:height 50ms ease-in;transition:height 50ms ease-in}#a0-lock .a0-panel:after,#a0-lock .a0-panel:before{content:\" \";display:table}#a0-lock .a0-panel:after{clear:both}#a0-lock .a0-panel.a0-disable-transition{-webkit-transition:none;-moz-transition:none;transition:none}#a0-lock .a0-panel .a0-loading{min-height:110px}#a0-lock .a0-spin-container{position:relative;top:50%}#a0-lock .a0-loading.a0-with-message .a0-spin-container{top:37%}#a0-lock .a0-spin-message{text-align:center;position:relative;top:60px}#a0-lock .a0-spin-message span{font-size:14px;color:#41444a}#a0-lock .a0-spin-img{position:relative;top:50%;left:50%;width:32px;height:32px;margin-left:-16px;margin-top:-16px}#a0-lock .a0-overlay.a0-ie8-overlay{background:0 0;background-image:url(https://s3.amazonaws.com/assets.auth0.com/w2/img/bg-transp.png)}#a0-lock .a0-overlay{margin:0;display:table;position:fixed;left:0;top:0;bottom:0;right:0;width:100%;height:100%;overflow:hidden;z-index:9999;font-weight:200;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#000;background:rgba(0,0,0,.8);opacity:0;-webkit-transition:300ms opacity ease-out;-moz-transition:300ms opacity ease-out;transition:300ms opacity ease-out;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}#a0-lock .a0-overlay .a0-centrix{padding:0;vertical-align:middle;display:table-cell;margin:0}#a0-lock .a0-overlay.a0-active{opacity:1}#a0-lock .a0-overlay .a0-panel{display:none;margin:0 auto}#a0-lock .a0-overlay .a0-panel.a0-active{display:block}#a0-lock.a0-theme-default .a0-animated{-webkit-animation-duration:1s;-moz-animation-duration:1s;animation-duration:1s;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;animation-fill-mode:both}#a0-lock.a0-theme-default .a0-animated.a0-infinite{-webkit-animation-iteration-count:infinite;-moz-animation-iteration-count:infinite;animation-iteration-count:infinite}#a0-lock.a0-theme-default .a0-animated.a0-hinge{-webkit-animation-duration:2s;-moz-animation-duration:2s;animation-duration:2s}@-webkit-keyframes bounce{0%,100%,20%,50%,80%{-webkit-transform:translateY(0);transform:translateY(0)}40%{-webkit-transform:translateY(-30px);transform:translateY(-30px)}60%{-webkit-transform:translateY(-15px);transform:translateY(-15px)}}@keyframes bounce{0%,100%,20%,50%,80%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}40%{-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}60%{-webkit-transform:translateY(-15px);-ms-transform:translateY(-15px);-moz-transform:translateY(-15px);transform:translateY(-15px)}}@-moz-keyframes bounce{0%,100%,20%,50%,80%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}40%{-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}60%{-webkit-transform:translateY(-15px);-ms-transform:translateY(-15px);-moz-transform:translateY(-15px);transform:translateY(-15px)}}#a0-lock.a0-theme-default .a0-bounce{-webkit-animation-name:bounce;-moz-animation-name:bounce;animation-name:bounce}@-webkit-keyframes flash{0%,100%,50%{opacity:1}25%,75%{opacity:0}}@keyframes flash{0%,100%,50%{opacity:1}25%,75%{opacity:0}}@-moz-keyframes flash{0%,100%,50%{opacity:1}25%,75%{opacity:0}}#a0-lock.a0-theme-default .a0-flash{-webkit-animation-name:flash;-moz-animation-name:flash;animation-name:flash}@-webkit-keyframes pulse{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes pulse{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}@-moz-keyframes pulse{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}#a0-lock.a0-theme-default .a0-pulse{-webkit-animation-name:pulse;-moz-animation-name:pulse;animation-name:pulse}@-webkit-keyframes rubberBand{0%{-webkit-transform:scale(1);transform:scale(1)}30%{-webkit-transform:scaleX(1.25) scaleY(0.75);transform:scaleX(1.25) scaleY(0.75)}40%{-webkit-transform:scaleX(0.75) scaleY(1.25);transform:scaleX(0.75) scaleY(1.25)}60%{-webkit-transform:scaleX(1.15) scaleY(0.85);transform:scaleX(1.15) scaleY(0.85)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes rubberBand{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}30%{-webkit-transform:scaleX(1.25) scaleY(0.75);-ms-transform:scaleX(1.25) scaleY(0.75);-moz-transform:scaleX(1.25) scaleY(0.75);transform:scaleX(1.25) scaleY(0.75)}40%{-webkit-transform:scaleX(0.75) scaleY(1.25);-ms-transform:scaleX(0.75) scaleY(1.25);-moz-transform:scaleX(0.75) scaleY(1.25);transform:scaleX(0.75) scaleY(1.25)}60%{-webkit-transform:scaleX(1.15) scaleY(0.85);-ms-transform:scaleX(1.15) scaleY(0.85);-moz-transform:scaleX(1.15) scaleY(0.85);transform:scaleX(1.15) scaleY(0.85)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}@-moz-keyframes rubberBand{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}30%{-webkit-transform:scaleX(1.25) scaleY(0.75);-ms-transform:scaleX(1.25) scaleY(0.75);-moz-transform:scaleX(1.25) scaleY(0.75);transform:scaleX(1.25) scaleY(0.75)}40%{-webkit-transform:scaleX(0.75) scaleY(1.25);-ms-transform:scaleX(0.75) scaleY(1.25);-moz-transform:scaleX(0.75) scaleY(1.25);transform:scaleX(0.75) scaleY(1.25)}60%{-webkit-transform:scaleX(1.15) scaleY(0.85);-ms-transform:scaleX(1.15) scaleY(0.85);-moz-transform:scaleX(1.15) scaleY(0.85);transform:scaleX(1.15) scaleY(0.85)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}#a0-lock.a0-theme-default .a0-rubberBand{-webkit-animation-name:rubberBand;-moz-animation-name:rubberBand;animation-name:rubberBand}@-webkit-keyframes shake{0%,100%{-webkit-transform:translateX(0);transform:translateX(0)}10%,30%,50%,70%,90%{-webkit-transform:translateX(-10px);transform:translateX(-10px)}20%,40%,60%,80%{-webkit-transform:translateX(10px);transform:translateX(10px)}}@keyframes shake{0%,100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}10%,30%,50%,70%,90%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}20%,40%,60%,80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}}@-moz-keyframes shake{0%,100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}10%,30%,50%,70%,90%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}20%,40%,60%,80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}}#a0-lock.a0-theme-default .a0-shake{-webkit-animation-name:shake;-moz-animation-name:shake;animation-name:shake}@-webkit-keyframes swing{20%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}40%{-webkit-transform:rotate(-10deg);transform:rotate(-10deg)}60%{-webkit-transform:rotate(5deg);transform:rotate(5deg)}80%{-webkit-transform:rotate(-5deg);transform:rotate(-5deg)}100%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}}@keyframes swing{20%{-webkit-transform:rotate(15deg);-ms-transform:rotate(15deg);-moz-transform:rotate(15deg);transform:rotate(15deg)}40%{-webkit-transform:rotate(-10deg);-ms-transform:rotate(-10deg);-moz-transform:rotate(-10deg);transform:rotate(-10deg)}60%{-webkit-transform:rotate(5deg);-ms-transform:rotate(5deg);-moz-transform:rotate(5deg);transform:rotate(5deg)}80%{-webkit-transform:rotate(-5deg);-ms-transform:rotate(-5deg);-moz-transform:rotate(-5deg);transform:rotate(-5deg)}100%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);-moz-transform:rotate(0deg);transform:rotate(0deg)}}@-moz-keyframes swing{20%{-webkit-transform:rotate(15deg);-ms-transform:rotate(15deg);-moz-transform:rotate(15deg);transform:rotate(15deg)}40%{-webkit-transform:rotate(-10deg);-ms-transform:rotate(-10deg);-moz-transform:rotate(-10deg);transform:rotate(-10deg)}60%{-webkit-transform:rotate(5deg);-ms-transform:rotate(5deg);-moz-transform:rotate(5deg);transform:rotate(5deg)}80%{-webkit-transform:rotate(-5deg);-ms-transform:rotate(-5deg);-moz-transform:rotate(-5deg);transform:rotate(-5deg)}100%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);-moz-transform:rotate(0deg);transform:rotate(0deg)}}#a0-lock.a0-theme-default .a0-swing{-webkit-transform-origin:top center;-ms-transform-origin:top center;-moz-transform-origin:top center;transform-origin:top center;-webkit-animation-name:swing;-moz-animation-name:swing;animation-name:swing}@-webkit-keyframes tada{0%{-webkit-transform:scale(1);transform:scale(1)}10%,20%{-webkit-transform:scale(0.9) rotate(-3deg);transform:scale(0.9) rotate(-3deg)}30%,50%,70%,90%{-webkit-transform:scale(1.1) rotate(3deg);transform:scale(1.1) rotate(3deg)}40%,60%,80%{-webkit-transform:scale(1.1) rotate(-3deg);transform:scale(1.1) rotate(-3deg)}100%{-webkit-transform:scale(1) rotate(0);transform:scale(1) rotate(0)}}@keyframes tada{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}10%,20%{-webkit-transform:scale(0.9) rotate(-3deg);-ms-transform:scale(0.9) rotate(-3deg);-moz-transform:scale(0.9) rotate(-3deg);transform:scale(0.9) rotate(-3deg)}30%,50%,70%,90%{-webkit-transform:scale(1.1) rotate(3deg);-ms-transform:scale(1.1) rotate(3deg);-moz-transform:scale(1.1) rotate(3deg);transform:scale(1.1) rotate(3deg)}40%,60%,80%{-webkit-transform:scale(1.1) rotate(-3deg);-ms-transform:scale(1.1) rotate(-3deg);-moz-transform:scale(1.1) rotate(-3deg);transform:scale(1.1) rotate(-3deg)}100%{-webkit-transform:scale(1) rotate(0);-ms-transform:scale(1) rotate(0);-moz-transform:scale(1) rotate(0);transform:scale(1) rotate(0)}}@-moz-keyframes tada{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}10%,20%{-webkit-transform:scale(0.9) rotate(-3deg);-ms-transform:scale(0.9) rotate(-3deg);-moz-transform:scale(0.9) rotate(-3deg);transform:scale(0.9) rotate(-3deg)}30%,50%,70%,90%{-webkit-transform:scale(1.1) rotate(3deg);-ms-transform:scale(1.1) rotate(3deg);-moz-transform:scale(1.1) rotate(3deg);transform:scale(1.1) rotate(3deg)}40%,60%,80%{-webkit-transform:scale(1.1) rotate(-3deg);-ms-transform:scale(1.1) rotate(-3deg);-moz-transform:scale(1.1) rotate(-3deg);transform:scale(1.1) rotate(-3deg)}100%{-webkit-transform:scale(1) rotate(0);-ms-transform:scale(1) rotate(0);-moz-transform:scale(1) rotate(0);transform:scale(1) rotate(0)}}#a0-lock.a0-theme-default .a0-tada{-webkit-animation-name:tada;-moz-animation-name:tada;animation-name:tada}@-webkit-keyframes wobble{0%{-webkit-transform:translateX(0%);transform:translateX(0%)}15%{-webkit-transform:translateX(-25%) rotate(-5deg);transform:translateX(-25%) rotate(-5deg)}30%{-webkit-transform:translateX(20%) rotate(3deg);transform:translateX(20%) rotate(3deg)}45%{-webkit-transform:translateX(-15%) rotate(-3deg);transform:translateX(-15%) rotate(-3deg)}60%{-webkit-transform:translateX(10%) rotate(2deg);transform:translateX(10%) rotate(2deg)}75%{-webkit-transform:translateX(-5%) rotate(-1deg);transform:translateX(-5%) rotate(-1deg)}100%{-webkit-transform:translateX(0%);transform:translateX(0%)}}@keyframes wobble{0%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}15%{-webkit-transform:translateX(-25%) rotate(-5deg);-ms-transform:translateX(-25%) rotate(-5deg);-moz-transform:translateX(-25%) rotate(-5deg);transform:translateX(-25%) rotate(-5deg)}30%{-webkit-transform:translateX(20%) rotate(3deg);-ms-transform:translateX(20%) rotate(3deg);-moz-transform:translateX(20%) rotate(3deg);transform:translateX(20%) rotate(3deg)}45%{-webkit-transform:translateX(-15%) rotate(-3deg);-ms-transform:translateX(-15%) rotate(-3deg);-moz-transform:translateX(-15%) rotate(-3deg);transform:translateX(-15%) rotate(-3deg)}60%{-webkit-transform:translateX(10%) rotate(2deg);-ms-transform:translateX(10%) rotate(2deg);-moz-transform:translateX(10%) rotate(2deg);transform:translateX(10%) rotate(2deg)}75%{-webkit-transform:translateX(-5%) rotate(-1deg);-ms-transform:translateX(-5%) rotate(-1deg);-moz-transform:translateX(-5%) rotate(-1deg);transform:translateX(-5%) rotate(-1deg)}100%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}}@-moz-keyframes wobble{0%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}15%{-webkit-transform:translateX(-25%) rotate(-5deg);-ms-transform:translateX(-25%) rotate(-5deg);-moz-transform:translateX(-25%) rotate(-5deg);transform:translateX(-25%) rotate(-5deg)}30%{-webkit-transform:translateX(20%) rotate(3deg);-ms-transform:translateX(20%) rotate(3deg);-moz-transform:translateX(20%) rotate(3deg);transform:translateX(20%) rotate(3deg)}45%{-webkit-transform:translateX(-15%) rotate(-3deg);-ms-transform:translateX(-15%) rotate(-3deg);-moz-transform:translateX(-15%) rotate(-3deg);transform:translateX(-15%) rotate(-3deg)}60%{-webkit-transform:translateX(10%) rotate(2deg);-ms-transform:translateX(10%) rotate(2deg);-moz-transform:translateX(10%) rotate(2deg);transform:translateX(10%) rotate(2deg)}75%{-webkit-transform:translateX(-5%) rotate(-1deg);-ms-transform:translateX(-5%) rotate(-1deg);-moz-transform:translateX(-5%) rotate(-1deg);transform:translateX(-5%) rotate(-1deg)}100%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}}#a0-lock.a0-theme-default .a0-wobble{-webkit-animation-name:wobble;-moz-animation-name:wobble;animation-name:wobble}@-webkit-keyframes bounceIn{0%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1;-webkit-transform:scale(1.05);transform:scale(1.05)}70%{-webkit-transform:scale(0.9);transform:scale(0.9)}100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}@keyframes bounceIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1;-webkit-transform:scale(1.05);-ms-transform:scale(1.05);-moz-transform:scale(1.05);transform:scale(1.05)}70%{-webkit-transform:scale(0.9);-ms-transform:scale(0.9);-moz-transform:scale(0.9);transform:scale(0.9)}100%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}@-moz-keyframes bounceIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1;-webkit-transform:scale(1.05);-ms-transform:scale(1.05);-moz-transform:scale(1.05);transform:scale(1.05)}70%{-webkit-transform:scale(0.9);-ms-transform:scale(0.9);-moz-transform:scale(0.9);transform:scale(0.9)}100%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}#a0-lock.a0-theme-default .a0-bounceIn{-webkit-animation-name:bounceIn;-moz-animation-name:bounceIn;animation-name:bounceIn}@-webkit-keyframes bounceInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}60%{opacity:1;-webkit-transform:translateY(30px);transform:translateY(30px)}80%{-webkit-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes bounceInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}60%{opacity:1;-webkit-transform:translateY(30px);-ms-transform:translateY(30px);-moz-transform:translateY(30px);transform:translateY(30px)}80%{-webkit-transform:translateY(-10px);-ms-transform:translateY(-10px);-moz-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes bounceInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}60%{opacity:1;-webkit-transform:translateY(30px);-ms-transform:translateY(30px);-moz-transform:translateY(30px);transform:translateY(30px)}80%{-webkit-transform:translateY(-10px);-ms-transform:translateY(-10px);-moz-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-bounceInDown{-webkit-animation-name:bounceInDown;-moz-animation-name:bounceInDown;animation-name:bounceInDown}@-webkit-keyframes bounceInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}60%{opacity:1;-webkit-transform:translateX(30px);transform:translateX(30px)}80%{-webkit-transform:translateX(-10px);transform:translateX(-10px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes bounceInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}60%{opacity:1;-webkit-transform:translateX(30px);-ms-transform:translateX(30px);-moz-transform:translateX(30px);transform:translateX(30px)}80%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes bounceInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}60%{opacity:1;-webkit-transform:translateX(30px);-ms-transform:translateX(30px);-moz-transform:translateX(30px);transform:translateX(30px)}80%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-bounceInLeft{-webkit-animation-name:bounceInLeft;-moz-animation-name:bounceInLeft;animation-name:bounceInLeft}@-webkit-keyframes bounceInRight{0%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}60%{opacity:1;-webkit-transform:translateX(-30px);transform:translateX(-30px)}80%{-webkit-transform:translateX(10px);transform:translateX(10px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes bounceInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}60%{opacity:1;-webkit-transform:translateX(-30px);-ms-transform:translateX(-30px);-moz-transform:translateX(-30px);transform:translateX(-30px)}80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes bounceInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}60%{opacity:1;-webkit-transform:translateX(-30px);-ms-transform:translateX(-30px);-moz-transform:translateX(-30px);transform:translateX(-30px)}80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-bounceInRight{-webkit-animation-name:bounceInRight;-moz-animation-name:bounceInRight;animation-name:bounceInRight}@-webkit-keyframes bounceInUp{0%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}60%{opacity:1;-webkit-transform:translateY(-30px);transform:translateY(-30px)}80%{-webkit-transform:translateY(10px);transform:translateY(10px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes bounceInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}60%{opacity:1;-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}80%{-webkit-transform:translateY(10px);-ms-transform:translateY(10px);-moz-transform:translateY(10px);transform:translateY(10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes bounceInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}60%{opacity:1;-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}80%{-webkit-transform:translateY(10px);-ms-transform:translateY(10px);-moz-transform:translateY(10px);transform:translateY(10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-bounceInUp{-webkit-animation-name:bounceInUp;-moz-animation-name:bounceInUp;animation-name:bounceInUp}@-webkit-keyframes bounceOut{0%{-webkit-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(0.95);transform:scale(0.95)}50%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1)}100%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}}@keyframes bounceOut{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(0.95);-ms-transform:scale(0.95);-moz-transform:scale(0.95);transform:scale(0.95)}50%{opacity:1;-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}}@-moz-keyframes bounceOut{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(0.95);-ms-transform:scale(0.95);-moz-transform:scale(0.95);transform:scale(0.95)}50%{opacity:1;-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}}#a0-lock.a0-theme-default .a0-bounceOut{-webkit-animation-name:bounceOut;-moz-animation-name:bounceOut;animation-name:bounceOut}@-webkit-keyframes bounceOutDown{0%{-webkit-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}}@keyframes bounceOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}@-moz-keyframes bounceOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}#a0-lock.a0-theme-default .a0-bounceOutDown{-webkit-animation-name:bounceOutDown;-moz-animation-name:bounceOutDown;animation-name:bounceOutDown}@-webkit-keyframes bounceOutLeft{0%{-webkit-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}}@keyframes bounceOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}@-moz-keyframes bounceOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}#a0-lock.a0-theme-default .a0-bounceOutLeft{-webkit-animation-name:bounceOutLeft;-moz-animation-name:bounceOutLeft;animation-name:bounceOutLeft}@-webkit-keyframes bounceOutRight{0%{-webkit-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}}@keyframes bounceOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}@-moz-keyframes bounceOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}#a0-lock.a0-theme-default .a0-bounceOutRight{-webkit-animation-name:bounceOutRight;-moz-animation-name:bounceOutRight;animation-name:bounceOutRight}@-webkit-keyframes bounceOutUp{0%{-webkit-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(20px);transform:translateY(20px)}100%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}}@keyframes bounceOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}@-moz-keyframes bounceOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}#a0-lock.a0-theme-default .a0-bounceOutUp{-webkit-animation-name:bounceOutUp;-moz-animation-name:bounceOutUp;animation-name:bounceOutUp}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-moz-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}#a0-lock.a0-theme-default .a0-fadeIn{-webkit-animation-name:fadeIn;-moz-animation-name:fadeIn;animation-name:fadeIn}@-webkit-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInDown{0%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-fadeInDown{-webkit-animation-name:fadeInDown;-moz-animation-name:fadeInDown;animation-name:fadeInDown}@-webkit-keyframes fadeInDownBig{0%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInDownBig{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInDownBig{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-fadeInDownBig{-webkit-animation-name:fadeInDownBig;-moz-animation-name:fadeInDownBig;animation-name:fadeInDownBig}@-webkit-keyframes fadeInLeft{0%{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInLeft{0%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInLeft{0%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-fadeInLeft{-webkit-animation-name:fadeInLeft;-moz-animation-name:fadeInLeft;animation-name:fadeInLeft}@-webkit-keyframes fadeInLeftBig{0%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInLeftBig{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInLeftBig{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-fadeInLeftBig{-webkit-animation-name:fadeInLeftBig;-moz-animation-name:fadeInLeftBig;animation-name:fadeInLeftBig}@-webkit-keyframes fadeInRight{0%{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInRight{0%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInRight{0%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-fadeInRight{-webkit-animation-name:fadeInRight;-moz-animation-name:fadeInRight;animation-name:fadeInRight}@-webkit-keyframes fadeInRightBig{0%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInRightBig{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInRightBig{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-fadeInRightBig{-webkit-animation-name:fadeInRightBig;-moz-animation-name:fadeInRightBig;animation-name:fadeInRightBig}@-webkit-keyframes fadeInUp{0%{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInUp{0%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInUp{0%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-fadeInUp{-webkit-animation-name:fadeInUp;-moz-animation-name:fadeInUp;animation-name:fadeInUp}@-webkit-keyframes fadeInUpBig{0%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInUpBig{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInUpBig{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-fadeInUpBig{-webkit-animation-name:fadeInUpBig;-moz-animation-name:fadeInUpBig;animation-name:fadeInUpBig}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@-moz-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}#a0-lock.a0-theme-default .a0-fadeOut{-webkit-animation-name:fadeOut;-moz-animation-name:fadeOut;animation-name:fadeOut}@-webkit-keyframes fadeOutDown{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}}@keyframes fadeOutDown{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}}@-moz-keyframes fadeOutDown{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}}#a0-lock.a0-theme-default .a0-fadeOutDown{-webkit-animation-name:fadeOutDown;-moz-animation-name:fadeOutDown;animation-name:fadeOutDown}@-webkit-keyframes fadeOutDownBig{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}}@keyframes fadeOutDownBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}@-moz-keyframes fadeOutDownBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}#a0-lock.a0-theme-default .a0-fadeOutDownBig{-webkit-animation-name:fadeOutDownBig;-moz-animation-name:fadeOutDownBig;animation-name:fadeOutDownBig}@-webkit-keyframes fadeOutLeft{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}}@keyframes fadeOutLeft{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}}@-moz-keyframes fadeOutLeft{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}}#a0-lock.a0-theme-default .a0-fadeOutLeft{-webkit-animation-name:fadeOutLeft;-moz-animation-name:fadeOutLeft;animation-name:fadeOutLeft}@-webkit-keyframes fadeOutLeftBig{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}}@keyframes fadeOutLeftBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}@-moz-keyframes fadeOutLeftBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}#a0-lock.a0-theme-default .a0-fadeOutLeftBig{-webkit-animation-name:fadeOutLeftBig;-moz-animation-name:fadeOutLeftBig;animation-name:fadeOutLeftBig}@-webkit-keyframes fadeOutRight{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}}@keyframes fadeOutRight{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}}@-moz-keyframes fadeOutRight{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}}#a0-lock.a0-theme-default .a0-fadeOutRight{-webkit-animation-name:fadeOutRight;-moz-animation-name:fadeOutRight;animation-name:fadeOutRight}@-webkit-keyframes fadeOutRightBig{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}}@keyframes fadeOutRightBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}@-moz-keyframes fadeOutRightBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}#a0-lock.a0-theme-default .a0-fadeOutRightBig{-webkit-animation-name:fadeOutRightBig;-moz-animation-name:fadeOutRightBig;animation-name:fadeOutRightBig}@-webkit-keyframes fadeOutUp{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}}@keyframes fadeOutUp{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}}@-moz-keyframes fadeOutUp{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}}#a0-lock.a0-theme-default .a0-fadeOutUp{-webkit-animation-name:fadeOutUp;-moz-animation-name:fadeOutUp;animation-name:fadeOutUp}@-webkit-keyframes fadeOutUpBig{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}}@keyframes fadeOutUpBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}@-moz-keyframes fadeOutUpBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}#a0-lock.a0-theme-default .a0-fadeOutUpBig{-webkit-animation-name:fadeOutUpBig;-moz-animation-name:fadeOutUpBig;animation-name:fadeOutUpBig}@-webkit-keyframes flip{0%{-webkit-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}40%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}80%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}100%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}}@keyframes flip{0%{-webkit-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}40%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}80%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}100%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}}@-moz-keyframes flip{0%{-webkit-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}40%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}80%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}100%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}}#a0-lock.a0-theme-default .a0-animated.a0-flip{-webkit-backface-visibility:visible;-ms-backface-visibility:visible;-moz-backface-visibility:visible;backface-visibility:visible;-webkit-animation-name:flip;-moz-animation-name:flip;animation-name:flip}@-webkit-keyframes flipInX{0%{-webkit-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateX(-10deg);transform:perspective(400px) rotateX(-10deg)}70%{-webkit-transform:perspective(400px) rotateX(10deg);transform:perspective(400px) rotateX(10deg)}100%{-webkit-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}}@keyframes flipInX{0%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateX(-10deg);-ms-transform:perspective(400px) rotateX(-10deg);-moz-transform:perspective(400px) rotateX(-10deg);transform:perspective(400px) rotateX(-10deg)}70%{-webkit-transform:perspective(400px) rotateX(10deg);-ms-transform:perspective(400px) rotateX(10deg);-moz-transform:perspective(400px) rotateX(10deg);transform:perspective(400px) rotateX(10deg)}100%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}}@-moz-keyframes flipInX{0%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateX(-10deg);-ms-transform:perspective(400px) rotateX(-10deg);-moz-transform:perspective(400px) rotateX(-10deg);transform:perspective(400px) rotateX(-10deg)}70%{-webkit-transform:perspective(400px) rotateX(10deg);-ms-transform:perspective(400px) rotateX(10deg);-moz-transform:perspective(400px) rotateX(10deg);transform:perspective(400px) rotateX(10deg)}100%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}}#a0-lock.a0-theme-default .a0-flipInX{-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important;-webkit-animation-name:flipInX;-moz-animation-name:flipInX;animation-name:flipInX}@-webkit-keyframes flipInY{0%{-webkit-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateY(-10deg);transform:perspective(400px) rotateY(-10deg)}70%{-webkit-transform:perspective(400px) rotateY(10deg);transform:perspective(400px) rotateY(10deg)}100%{-webkit-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}}@keyframes flipInY{0%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateY(-10deg);-ms-transform:perspective(400px) rotateY(-10deg);-moz-transform:perspective(400px) rotateY(-10deg);transform:perspective(400px) rotateY(-10deg)}70%{-webkit-transform:perspective(400px) rotateY(10deg);-ms-transform:perspective(400px) rotateY(10deg);-moz-transform:perspective(400px) rotateY(10deg);transform:perspective(400px) rotateY(10deg)}100%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}}@-moz-keyframes flipInY{0%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateY(-10deg);-ms-transform:perspective(400px) rotateY(-10deg);-moz-transform:perspective(400px) rotateY(-10deg);transform:perspective(400px) rotateY(-10deg)}70%{-webkit-transform:perspective(400px) rotateY(10deg);-ms-transform:perspective(400px) rotateY(10deg);-moz-transform:perspective(400px) rotateY(10deg);transform:perspective(400px) rotateY(10deg)}100%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}}#a0-lock.a0-theme-default .a0-flipInY{-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important;-webkit-animation-name:flipInY;-moz-animation-name:flipInY;animation-name:flipInY}@-webkit-keyframes flipOutX{0%{-webkit-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}}@keyframes flipOutX{0%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}}@-moz-keyframes flipOutX{0%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}}#a0-lock.a0-theme-default .a0-flipOutX{-webkit-animation-name:flipOutX;-moz-animation-name:flipOutX;animation-name:flipOutX;-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important}@-webkit-keyframes flipOutY{0%{-webkit-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}}@keyframes flipOutY{0%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}}@-moz-keyframes flipOutY{0%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}}#a0-lock.a0-theme-default .a0-flipOutY{-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important;-webkit-animation-name:flipOutY;-moz-animation-name:flipOutY;animation-name:flipOutY}@-webkit-keyframes lightSpeedIn{0%{-webkit-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}60%{-webkit-transform:translateX(-20%) skewX(30deg);transform:translateX(-20%) skewX(30deg);opacity:1}80%{-webkit-transform:translateX(0%) skewX(-15deg);transform:translateX(0%) skewX(-15deg);opacity:1}100%{-webkit-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}}@keyframes lightSpeedIn{0%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}60%{-webkit-transform:translateX(-20%) skewX(30deg);-ms-transform:translateX(-20%) skewX(30deg);-moz-transform:translateX(-20%) skewX(30deg);transform:translateX(-20%) skewX(30deg);opacity:1}80%{-webkit-transform:translateX(0%) skewX(-15deg);-ms-transform:translateX(0%) skewX(-15deg);-moz-transform:translateX(0%) skewX(-15deg);transform:translateX(0%) skewX(-15deg);opacity:1}100%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}}@-moz-keyframes lightSpeedIn{0%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}60%{-webkit-transform:translateX(-20%) skewX(30deg);-ms-transform:translateX(-20%) skewX(30deg);-moz-transform:translateX(-20%) skewX(30deg);transform:translateX(-20%) skewX(30deg);opacity:1}80%{-webkit-transform:translateX(0%) skewX(-15deg);-ms-transform:translateX(0%) skewX(-15deg);-moz-transform:translateX(0%) skewX(-15deg);transform:translateX(0%) skewX(-15deg);opacity:1}100%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}}#a0-lock.a0-theme-default .a0-lightSpeedIn{-webkit-animation-name:lightSpeedIn;-moz-animation-name:lightSpeedIn;animation-name:lightSpeedIn;-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}@-webkit-keyframes lightSpeedOut{0%{-webkit-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}100%{-webkit-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}}@keyframes lightSpeedOut{0%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}100%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}}@-moz-keyframes lightSpeedOut{0%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}100%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}}#a0-lock.a0-theme-default .a0-lightSpeedOut{-webkit-animation-name:lightSpeedOut;-moz-animation-name:lightSpeedOut;animation-name:lightSpeedOut;-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}@-webkit-keyframes rotateIn{0%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(-200deg);transform:rotate(-200deg);opacity:0}100%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateIn{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(-200deg);-ms-transform:rotate(-200deg);-moz-transform:rotate(-200deg);transform:rotate(-200deg);opacity:0}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateIn{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(-200deg);-ms-transform:rotate(-200deg);-moz-transform:rotate(-200deg);transform:rotate(-200deg);opacity:0}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-lock.a0-theme-default .a0-rotateIn{-webkit-animation-name:rotateIn;-moz-animation-name:rotateIn;animation-name:rotateIn}@-webkit-keyframes rotateInDownLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-lock.a0-theme-default .a0-rotateInDownLeft{-webkit-animation-name:rotateInDownLeft;-moz-animation-name:rotateInDownLeft;animation-name:rotateInDownLeft}@-webkit-keyframes rotateInDownRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-lock.a0-theme-default .a0-rotateInDownRight{-webkit-animation-name:rotateInDownRight;-moz-animation-name:rotateInDownRight;animation-name:rotateInDownRight}@-webkit-keyframes rotateInUpLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-lock.a0-theme-default .a0-rotateInUpLeft{-webkit-animation-name:rotateInUpLeft;-moz-animation-name:rotateInUpLeft;animation-name:rotateInUpLeft}@-webkit-keyframes rotateInUpRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-lock.a0-theme-default .a0-rotateInUpRight{-webkit-animation-name:rotateInUpRight;-moz-animation-name:rotateInUpRight;animation-name:rotateInUpRight}@-webkit-keyframes rotateOut{0%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(200deg);transform:rotate(200deg);opacity:0}}@keyframes rotateOut{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(200deg);-ms-transform:rotate(200deg);-moz-transform:rotate(200deg);transform:rotate(200deg);opacity:0}}@-moz-keyframes rotateOut{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(200deg);-ms-transform:rotate(200deg);-moz-transform:rotate(200deg);transform:rotate(200deg);opacity:0}}#a0-lock.a0-theme-default .a0-rotateOut{-webkit-animation-name:rotateOut;-moz-animation-name:rotateOut;animation-name:rotateOut}@-webkit-keyframes rotateOutDownLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@keyframes rotateOutDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@-moz-keyframes rotateOutDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}#a0-lock.a0-theme-default .a0-rotateOutDownLeft{-webkit-animation-name:rotateOutDownLeft;-moz-animation-name:rotateOutDownLeft;animation-name:rotateOutDownLeft}@-webkit-keyframes rotateOutDownRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@keyframes rotateOutDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@-moz-keyframes rotateOutDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}#a0-lock.a0-theme-default .a0-rotateOutDownRight{-webkit-animation-name:rotateOutDownRight;-moz-animation-name:rotateOutDownRight;animation-name:rotateOutDownRight}@-webkit-keyframes rotateOutUpLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@keyframes rotateOutUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@-moz-keyframes rotateOutUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}#a0-lock.a0-theme-default .a0-rotateOutUpLeft{-webkit-animation-name:rotateOutUpLeft;-moz-animation-name:rotateOutUpLeft;animation-name:rotateOutUpLeft}@-webkit-keyframes rotateOutUpRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@keyframes rotateOutUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@-moz-keyframes rotateOutUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}#a0-lock.a0-theme-default .a0-rotateOutUpRight{-webkit-animation-name:rotateOutUpRight;-moz-animation-name:rotateOutUpRight;animation-name:rotateOutUpRight}@-webkit-keyframes slideInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes slideInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes slideInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-slideInDown{-webkit-animation-name:slideInDown;-moz-animation-name:slideInDown;animation-name:slideInDown}@-webkit-keyframes slideInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes slideInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes slideInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-slideInLeft{-webkit-animation-name:slideInLeft;-moz-animation-name:slideInLeft;animation-name:slideInLeft}@-webkit-keyframes slideInRight{0%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes slideInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes slideInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-lock.a0-theme-default .a0-slideInRight{-webkit-animation-name:slideInRight;-moz-animation-name:slideInRight;animation-name:slideInRight}@-webkit-keyframes slideOutLeft{0%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}}@keyframes slideOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}@-moz-keyframes slideOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}#a0-lock.a0-theme-default .a0-slideOutLeft{-webkit-animation-name:slideOutLeft;-moz-animation-name:slideOutLeft;animation-name:slideOutLeft}@-webkit-keyframes slideOutRight{0%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}}@keyframes slideOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}@-moz-keyframes slideOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}#a0-lock.a0-theme-default .a0-slideOutRight{-webkit-animation-name:slideOutRight;-moz-animation-name:slideOutRight;animation-name:slideOutRight}@-webkit-keyframes slideOutUp{0%{-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}}@keyframes slideOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}@-moz-keyframes slideOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}#a0-lock.a0-theme-default .a0-slideOutUp{-webkit-animation-name:slideOutUp;-moz-animation-name:slideOutUp;animation-name:slideOutUp}@-webkit-keyframes slideInUp{0%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes slideInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes slideInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-lock.a0-theme-default .a0-slideInUp{-webkit-animation-name:slideInUp;-moz-animation-name:slideInUp;animation-name:slideInUp}@-webkit-keyframes slideOutDown{0%{-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}}@keyframes slideOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}@-moz-keyframes slideOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}#a0-lock.a0-theme-default .a0-slideOutDown{-webkit-animation-name:slideOutDown;-moz-animation-name:slideOutDown;animation-name:slideOutDown}@-webkit-keyframes hinge{0%{-webkit-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}20%,60%{-webkit-transform:rotate(80deg);transform:rotate(80deg);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}40%{-webkit-transform:rotate(60deg);transform:rotate(60deg);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}80%{-webkit-transform:rotate(60deg) translateY(0);transform:rotate(60deg) translateY(0);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;opacity:1}100%{-webkit-transform:translateY(700px);transform:translateY(700px);opacity:0}}@keyframes hinge{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}20%,60%{-webkit-transform:rotate(80deg);-ms-transform:rotate(80deg);-moz-transform:rotate(80deg);transform:rotate(80deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}40%{-webkit-transform:rotate(60deg);-ms-transform:rotate(60deg);-moz-transform:rotate(60deg);transform:rotate(60deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}80%{-webkit-transform:rotate(60deg) translateY(0);-ms-transform:rotate(60deg) translateY(0);-moz-transform:rotate(60deg) translateY(0);transform:rotate(60deg) translateY(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;opacity:1}100%{-webkit-transform:translateY(700px);-ms-transform:translateY(700px);-moz-transform:translateY(700px);transform:translateY(700px);opacity:0}}@-moz-keyframes hinge{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}20%,60%{-webkit-transform:rotate(80deg);-ms-transform:rotate(80deg);-moz-transform:rotate(80deg);transform:rotate(80deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}40%{-webkit-transform:rotate(60deg);-ms-transform:rotate(60deg);-moz-transform:rotate(60deg);transform:rotate(60deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}80%{-webkit-transform:rotate(60deg) translateY(0);-ms-transform:rotate(60deg) translateY(0);-moz-transform:rotate(60deg) translateY(0);transform:rotate(60deg) translateY(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;opacity:1}100%{-webkit-transform:translateY(700px);-ms-transform:translateY(700px);-moz-transform:translateY(700px);transform:translateY(700px);opacity:0}}#a0-lock.a0-theme-default .a0-hinge{-webkit-animation-name:hinge;-moz-animation-name:hinge;animation-name:hinge}@-webkit-keyframes rollIn{0%{opacity:0;-webkit-transform:translateX(-100%) rotate(-120deg);transform:translateX(-100%) rotate(-120deg)}100%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}}@keyframes rollIn{0%{opacity:0;-webkit-transform:translateX(-100%) rotate(-120deg);-ms-transform:translateX(-100%) rotate(-120deg);-moz-transform:translateX(-100%) rotate(-120deg);transform:translateX(-100%) rotate(-120deg)}100%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}}@-moz-keyframes rollIn{0%{opacity:0;-webkit-transform:translateX(-100%) rotate(-120deg);-ms-transform:translateX(-100%) rotate(-120deg);-moz-transform:translateX(-100%) rotate(-120deg);transform:translateX(-100%) rotate(-120deg)}100%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}}#a0-lock.a0-theme-default .a0-rollIn{-webkit-animation-name:rollIn;-moz-animation-name:rollIn;animation-name:rollIn}@-webkit-keyframes rollOut{0%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}100%{opacity:0;-webkit-transform:translateX(100%) rotate(120deg);transform:translateX(100%) rotate(120deg)}}@keyframes rollOut{0%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}100%{opacity:0;-webkit-transform:translateX(100%) rotate(120deg);-ms-transform:translateX(100%) rotate(120deg);-moz-transform:translateX(100%) rotate(120deg);transform:translateX(100%) rotate(120deg)}}@-moz-keyframes rollOut{0%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}100%{opacity:0;-webkit-transform:translateX(100%) rotate(120deg);-ms-transform:translateX(100%) rotate(120deg);-moz-transform:translateX(100%) rotate(120deg);transform:translateX(100%) rotate(120deg)}}#a0-lock.a0-theme-default .a0-rollOut{-webkit-animation-name:rollOut;-moz-animation-name:rollOut;animation-name:rollOut}@-webkit-keyframes zoomIn{0%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1}}@keyframes zoomIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1}}@-moz-keyframes zoomIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1}}#a0-lock.a0-theme-default .a0-zoomIn{-webkit-animation-name:zoomIn;-moz-animation-name:zoomIn;animation-name:zoomIn}@-webkit-keyframes zoomInDown{0%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInDown{0%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInDown{0%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-lock.a0-theme-default .a0-zoomInDown{-webkit-animation-name:zoomInDown;-moz-animation-name:zoomInDown;animation-name:zoomInDown}@-webkit-keyframes zoomInLeft{0%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(48px);transform:scale(0.475) translateX(48px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInLeft{0%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(48px);-ms-transform:scale(0.475) translateX(48px);-moz-transform:scale(0.475) translateX(48px);transform:scale(0.475) translateX(48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInLeft{0%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(48px);-ms-transform:scale(0.475) translateX(48px);-moz-transform:scale(0.475) translateX(48px);transform:scale(0.475) translateX(48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-lock.a0-theme-default .a0-zoomInLeft{-webkit-animation-name:zoomInLeft;-moz-animation-name:zoomInLeft;animation-name:zoomInLeft}@-webkit-keyframes zoomInRight{0%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(-48px);transform:scale(0.475) translateX(-48px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInRight{0%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(-48px);-ms-transform:scale(0.475) translateX(-48px);-moz-transform:scale(0.475) translateX(-48px);transform:scale(0.475) translateX(-48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInRight{0%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(-48px);-ms-transform:scale(0.475) translateX(-48px);-moz-transform:scale(0.475) translateX(-48px);transform:scale(0.475) translateX(-48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-lock.a0-theme-default .a0-zoomInRight{-webkit-animation-name:zoomInRight;-moz-animation-name:zoomInRight;animation-name:zoomInRight}@-webkit-keyframes zoomInUp{0%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInUp{0%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInUp{0%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-lock.a0-theme-default .a0-zoomInUp{-webkit-animation-name:zoomInUp;-moz-animation-name:zoomInUp;animation-name:zoomInUp}@-webkit-keyframes zoomOut{0%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}50%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}100%{opacity:0}}@keyframes zoomOut{0%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}100%{opacity:0}}@-moz-keyframes zoomOut{0%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}100%{opacity:0}}#a0-lock.a0-theme-default .a0-zoomOut{-webkit-animation-name:zoomOut;-moz-animation-name:zoomOut;animation-name:zoomOut}@-webkit-keyframes zoomOutDown{40%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-transform-origin:center bottom;transform-origin:center bottom}}@keyframes zoomOutDown{40%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-transform-origin:center bottom;-ms-transform-origin:center bottom;-moz-transform-origin:center bottom;transform-origin:center bottom}}@-moz-keyframes zoomOutDown{40%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-transform-origin:center bottom;-ms-transform-origin:center bottom;-moz-transform-origin:center bottom;transform-origin:center bottom}}#a0-lock.a0-theme-default .a0-zoomOutDown{-webkit-animation-name:zoomOutDown;-moz-animation-name:zoomOutDown;animation-name:zoomOutDown}@-webkit-keyframes zoomOutLeft{40%{opacity:1;-webkit-transform:scale(0.475) translateX(42px);transform:scale(0.475) translateX(42px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-transform-origin:left center;transform-origin:left center}}@keyframes zoomOutLeft{40%{opacity:1;-webkit-transform:scale(0.475) translateX(42px);-ms-transform:scale(0.475) translateX(42px);-moz-transform:scale(0.475) translateX(42px);transform:scale(0.475) translateX(42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-transform-origin:left center;-ms-transform-origin:left center;-moz-transform-origin:left center;transform-origin:left center}}@-moz-keyframes zoomOutLeft{40%{opacity:1;-webkit-transform:scale(0.475) translateX(42px);-ms-transform:scale(0.475) translateX(42px);-moz-transform:scale(0.475) translateX(42px);transform:scale(0.475) translateX(42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-transform-origin:left center;-ms-transform-origin:left center;-moz-transform-origin:left center;transform-origin:left center}}#a0-lock.a0-theme-default .a0-zoomOutLeft{-webkit-animation-name:zoomOutLeft;-moz-animation-name:zoomOutLeft;animation-name:zoomOutLeft}@-webkit-keyframes zoomOutRight{40%{opacity:1;-webkit-transform:scale(0.475) translateX(-42px);transform:scale(0.475) translateX(-42px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-transform-origin:right center;transform-origin:right center}}@keyframes zoomOutRight{40%{opacity:1;-webkit-transform:scale(0.475) translateX(-42px);-ms-transform:scale(0.475) translateX(-42px);-moz-transform:scale(0.475) translateX(-42px);transform:scale(0.475) translateX(-42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-transform-origin:right center;-ms-transform-origin:right center;-moz-transform-origin:right center;transform-origin:right center}}@-moz-keyframes zoomOutRight{40%{opacity:1;-webkit-transform:scale(0.475) translateX(-42px);-ms-transform:scale(0.475) translateX(-42px);-moz-transform:scale(0.475) translateX(-42px);transform:scale(0.475) translateX(-42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-transform-origin:right center;-ms-transform-origin:right center;-moz-transform-origin:right center;transform-origin:right center}}#a0-lock.a0-theme-default .a0-zoomOutRight{-webkit-animation-name:zoomOutRight;-moz-animation-name:zoomOutRight;animation-name:zoomOutRight}@-webkit-keyframes zoomOutUp{40%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-transform-origin:center top;transform-origin:center top}}@keyframes zoomOutUp{40%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-transform-origin:center top;-ms-transform-origin:center top;-moz-transform-origin:center top;transform-origin:center top}}@-moz-keyframes zoomOutUp{40%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-transform-origin:center top;-ms-transform-origin:center top;-moz-transform-origin:center top;transform-origin:center top}}#a0-lock.a0-theme-default .a0-zoomOutUp{-webkit-animation-name:zoomOutUp;-moz-animation-name:zoomOutUp;animation-name:zoomOutUp}#a0-lock.a0-theme-default .a0-animated.a0-fast{-webkit-animation-duration:.3s;-moz-animation-duration:.3s;animation-duration:.3s;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;animation-fill-mode:both}#a0-lock.a0-theme-default .a0-spinner-css{position:absolute;top:50%;left:50%;margin:-2.5em;display:block;width:5em;font-size:30px;color:#D0D2D3;border-radius:2.5em 0 2.5em 2.5em;-webkit-animation:spinner 2s ease-in-out 0s infinite;-moz-animation:spinner 2s ease-in-out 0s infinite;animation:spinner 2s ease-in-out 0s infinite}#a0-lock.a0-theme-default .a0-spinner-css:after{position:absolute;display:block;width:1.8em;top:2.5em;left:1.6em;font-family:auth0!important;content:\"f\"}@-webkit-keyframes spinner{from{-webkit-transform:rotateY(0deg)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes spinner{from{-moz-transform:rotateY(0deg)}to{-moz-transform:rotateY(360deg)}}@keyframes spinner{from{-webkit-transform:rotateY(0deg);-moz-transform:rotateY(0deg);-ms-transform:rotateY(0deg);transform:rotateY(0deg)}to{-webkit-transform:rotateY(360deg);-moz-transform:rotateY(360deg);-ms-transform:rotateY(360deg);transform:rotateY(360deg)}}@font-face{font-family:proxima_nova;src:url(data:application/x-font-woff;charset=utf-8;base64,) format('woff'),url(//cdn.auth0.com/fonts/proxima-nova/proxima_nova_thin-webfont-webfont.eot),url(https://cdn.auth0.com/fonts/proxima-nova/proxima_nova_thin-webfont-webfont.woff) format('woff');font-weight:100;font-style:normal}@font-face{font-family:proxima_nova;src:url(data:application/x-font-woff;charset=utf-8;base64,) format('woff'),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.woff) format('woff');font-weight:400;font-style:normal}@font-face{font-family:proxima_nova;src:url(data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAGhsABMAAAAAyXgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABqAAAABwAAAAcW3K4ykdERUYAAAHEAAAALQAAADIDAwHyR1BPUwAAAfQAAAnXAAAfqJOrgpRHU1VCAAALzAAAAgcAAAYUTJ51TU9TLzIAAA3UAAAAWgAAAGB9ssMsY21hcAAADjAAAAGNAAAB6rnlRJ5jdnQgAAAPwAAAADgAAAA4DsESgmZwZ20AAA/4AAABsQAAAmVTtC+nZ2FzcAAAEawAAAAIAAAACAAAABBnbHlmAAARtAAATf0AAI+ozYVyfmhlYWQAAF+0AAAAMQAAADYFrwucaGhlYQAAX+gAAAAgAAAAJA7BB3pobXR4AABgCAAAAlEAAAOitmk6rGxvY2EAAGJcAAABygAAAdQNpjHcbWF4cAAAZCgAAAAgAAAAIAIGAT5uYW1lAABkSAAAAXkAAAOMV0997HBvc3QAAGXEAAAB6QAAAtuMD3tocHJlcAAAZ7AAAACxAAABLRMVH9p3ZWJmAABoZAAAAAYAAAAGMAVTUAAAAAEAAAAAzD2izwAAAAC/vzV2AAAAAM914IR42mNgZGBg4ANiLQYQYGJgYWBkqAHiWoZ6IK+B4QmQ/ZThBVgGJM8AAF7rBPYAAAB42r1ZS2wrZxn9ZsYev9+POL6Ok5vre6uUFtQbKKXgigWt0lu1grSUUkJVpOINCBHEopI3FDCPDVZ5qgYKi0jtKhKIxe2mtPXaEgsghdu7sFAlFhGLu/CCRYfznRk748SOnTjCR7bH9sz/+P7/nO98YzFEJCpVuUeMr3/l29+QsATwjTiO6C/G1776Lf1O3E/4zcS7LVnrTviFxFr6xtINMa0/6jXm8+bvceZV/L7qHDpN56bTxbPj7OG44dRxvMfXutN3bjnvOwd41+chXg+cjkx5OJu4ro+2OkADxy1+28A1O2PnaUtdfLsveRztTWip7z9z7JfDKX33J/+KPtz3Az2e1Nex83szz/ivM8DYBzgaTBvN2PkDPXfsm+Zodn2N2OmzG7/+6Jgz6g2PNZr6zcw48Rxdb772Ry003Dhj5brOzjBqR1eMt+H09NrRHHq6J/DZxP68CphyDQjIXYAt1wFbPgrY8iMgIC8DtvxMfoXXVwBbfgfYuO5eCQJptBPFawKISQqoSQaoyToQxXtN1tiHLXcDNq67F3ve39P9gCkfByx5AAjKJ4CQPAiE5ZPAunwKiEgduCKPAhn5ApCVZ4CcfBHIy7NAQXaAonwTSMtL8kP0rjMZn0NHfoteXgUi8iZQlLeAorwN2NIFIvJ3OUAL7wI1+Yf8E8e3gJq8B6zIbaAm/wLS8r78G+Mx0HcNEb2GSF7HvF6S78r35PvSkh+g/5fR/8/lF/JLjOIVRNAMNMjvO5aNvjam74JFHthnTbBS1aKF997C7aEN3W+jfTRYtM0JjANT8eyfNx5+PpwY+4ne5mpxkupBVaC6gwtZpYNhOx5PW1ixXUD1uYu1O8A3+zjS79v41OaK7s/SQjcXuDM4qQzeOTd1diMNPziaq7M5rmH8tIVRibP6wQBHXWcVSnSo16KVQ4xKdaqtn7xM0ka/GNcHezi/Dn5sgNMGOO4+bHDbBMNVRVLgQAR8UC1JUUuuUUtUX9JgmypKkIqSpKK4qpWhomSoKBYVJUNFyVBLDGpJjVoSo5bEqSVRaklCPgPk5RHZAm9VUYpyAyjINlCQp4ACNWaJGlOixixTY8ryJeASlaZCpUnJi8AK9cak3mSoNxnqTYZ6U6PeJOQ1IC+vAwX5A1CQN4ACdahCHapQhzLyDlCgGiXkr/I3tK+alKImBalJKWpSkJp0lZoUpCalqElFeosNxOjD8hEozp4qjhWwriPWd2ON8txhG/AOHSeK1dzG6rbcdb+Qfe3PhQ2vty3uSs1bm9OYeuZ+OkOeOo0zXNWnJkBlnNsj/vneMc6uz9kczq+Rw1fqmPqPw+ljmE/rlPUXmhcafr2gR1A0nW32VcdO2NCdwL2xy2/3gQ6eAzrGHj1jG5/VXTRcn+JXsiN98fJQ62iNZju7GaPvDp3RKIrzRseEAqlahGUTMORjgEX/EaBm2NSMMPmq6lSnOoWpTq7TCVOdDKpThuqUpzplwM4qvIaqU4LqZFGdLPaXpDpZVCe3v1X2F6A6BalONtUpRXUKUZ2yVKcc1Wmd6pSTz8rn4IBUo3LyJHCFSpWTzwNX5GlgmapVpmptULUuUbUqVK0VqlZVvgxcoXaFqV15aleC2mVRuyxql0XVClG1slStHFUrR9XKUbWqVK0qVcuiauWoWiGqVp6qFaZqZahaYapWhnqVoV6FqVfriGsU0drEqtyP6DyAdfi1/AZrYVoV1S7jL8YdtLpGbu0rs87tEjqeg1Y9qrOq0oqqpb6GlVGH3Owxr3V4To9cbh9xhjux69+J0338cWVyOYCWm1ql0U0ckGOqjT2+qgb16DK6yrqTvv4oX/vrksl10nHOuXUNuLiFPvOYt3I+7yj7t8B71ekW0MAzCq2+ide9Uc9NjrxHXu9Oc0h+vuJZHyqZx0PX4xvc+Rb3vOvHg9w5QZxxH1kX9vmAoucDlGmrZJpxorIInagsqmSayf4s8ipGXsXJqwR5FSevkuRVnLxKkldx8ipJXqXIqzR5lSGvsuRVjrzKk1cF8ipJRhXJKGNC9aFcipFLcXIpTi7FyaUCuVTwKhHlUpwsKnpZ3833bqZXzqgWaSwfRARfReRM+y1lSuBPwScwvstUx85QfRdT3YVbQMYHn1aRUc6ZAbzdts1M1KIrPiP/R/twlz67dUH5tA5+bMzbGs7sIA5RHf+EeujmYhXaGSPpqwzA8tG9H601ZnsIjLapHmAhDW4uFHd1JKvqRKa5z9O1cV7/espjW3ZR4zfxbE2sHFVTWqw82zjaxHOiG4PidubmWGNiJOtu1hg5raavh7n2JjJAe/L+m+NuXNvdV+okz1D969kmPItqvUVv5Wp9miofpV6b8jBgQ7UfwVlbQMyn3Ul5DDDlCSBDHTcR4ydxvip4Ul4AIlTktE95Iz7lteXPgKu2MaptmhVViA4wAJTpA22Ocok+0Ma1cYxbR1xkjspy1GvMUVnWqkHmqCTvs5WZqQy5C56szHxlyIfkHhxr1kqhQrsPx5q7DHrTMjOY61DLzGOXPMeoDrXCbBZm9ozQN+Y936h3yAryaWCZWa7KGFXlcWCFe7HKuFSZtXLyPLBMH2gzRmvMWklmLUN+LD9F75q7DOYug8644nlCjWOVcawyjq4DNBjHqs8BrtEB2sxgWTpAm3ksyyivMptl6QNtXF3FjBLe+tex+g9zHo9iFo9hhXV9dXWfwqq+iNV8Hb2/gdV7hz29J2boP5r/bLF/gphc81ixDZ3qu7uNiqUup8dqt6t3tXlfY+ckM8//MLZmZ0PysjlPtpr/TtJcWXgAR9fF+860+2fqe+epuH3fbE/SWe0B0d2bNcfj48YI9yaOqzvD6c6ZO9WNz1JbZ2u+/xy8+6Gn5opR9XuUa5uTxsq2Zt0LaB3Pa1o3TGvrzONqn3ZXk/d8u/wHan96rI/9C9Qar/hH/2Kc+87xovdCFr8PPouhjBPz4ClRashFP/ry/3hsXmD0Ohd6V6sDxTeRnzVXW8zSFvJ5DLkkBySQycrIbBUgwZwZk4eANGu8AGu8IGs8mzVeiDVemDVehNkyxRovyhovJM8BafkOYLByi7JyizLXWcxy1uj+doHOYZ1jKtAtVOgWLtMtVLzx5QH1FMujsaqLqNJFLNE/lOgcSvQMl+gWSvQJJd8d72Glq94gwHmu0BvkmEdtOqcQXYFNV1CkK3Ddks0olBmFMOcf4fyjnHmMPqFAn3CZPmGJPqFEh1CiQyjRIZh0CDk6BJsOwfaclkYqxkjF6BZKdAvuf2455vDLjGCBbqHCOBboFir0CRX6hAJr3xDdQhCji/FuXA4jr2C+D2E9n8YMnsH4n8W67WC9nsM6vYlete132eotuf0/yz1sXwB42o2Uz0ocQRDGv+ru3RgJIVl3ZpeJyBAkiIQlePIBFhZREJdEc90kmASWjfgHxKBePPgEnn0A8Ql8AI8eQg7iSTDmESQXU13Tu+mZ7Mgcprun+NXXX/VUDwjAKCbxHtTtbPYwAsMR3N/LTFDQMKvrnY+Iul8/d/Dy2/qnHqY2ttY20GBCCWWfhNcu6xGeYQpvMIsvWMM2yhx/zKsjnOGaRqhBb2mHjiVOdJpo0Lm8B/ST7lSkmqqnjtWF+qNj3dSr+kCf6h/6zkRm1nwwh+bEXCW7mstkLpUTndKM+NCoIkLsHJZ4JI7YsSJjUIiq5VJhIcrXCnOpoBDla70o5CufqheiogyVqFccUx58+wp2sYd9/vJPmNrBJrakG6pcWSh59Uweock0YQzjsvcwop0ilLizp5BWsePzAmR7KDmOV66q1x674lH/Tn6eMzTHYkxLjq8+L+tslt2hjgl3hpMuvuxpVt1+2p22fY893eUMZWub+K+2Ffcl+nuG7IH4DsJFW16XVXNOuzW4FcM8L6UUEj7Ps8+2cj23Bp6DBzyHBTyHOZ7fpRQe9uyzRTyHKaXpTO8o7oIxjtSkpn7vDNfsd042p8GP/R+Pck22n3+zwhwWcSvzAn5xxiJueFwQfk56WDEf81jGU76RmnMDvpt2rslN3R+sFfsIhVfo4rtEmmj/BeELSGkAeNpjYGKezBTBwMrAwjqL1ZiBgVEeQjNfZEhjWsXAwMTAysYMolgaGBjWBzA8+M0ABbk5xcUMCgy8v1nYgv4FMTCw6zMeUGBgnO0LlGO+yxoGpBQYWADVjRASAAB42mNgYGBmgGAZBkYGEHgC5DGC+SwMJ4C0HoMCkMUHZPEy1DFsYfjPGMxYwXSM6Y4Cl4KIgpSCnIKSgpqCvoKVQrzCGkUl1T+/Wf7/B5vEC9S5gGEbYxBUPYOCgIKEggxUvSVcPSNQPeP/r/8f/z/0/+D//P/ef//9ffng2IODD/Y92Ptg14PtD9Y/WPag6YHZ/YO3XrA+gbqTBMDIxgDXxMgEJJjQFQCDgIWVjZ2Dk4ubh5ePX0BQSFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTS1tHV0/fwNDI2MTUzNzC0sraxtbO3sHRydnF1c3dw9PL28fXzz8gMCg4JDQsPCIyKjomNi4+IZGhta2ja9L0uYsWLl66ZNmKVStXr1m3dv2GTVs2b92+bfeuPXsZilJSM++ULyjIflyWxdA+k6GYgSEd4rqcaoblOxuS80Ds3Jq7SY0t0w4eunL15q1r13cwHDjM8Oj+g6fPGCpu3GZo7m7q6ezrn9A7ZSrD5NlzZjEcOVoI1FQJxABuDI0XAAAAAAAD3QVWANMBCgCaAKwAsAC6AL8AzwDXAJQA1wEMANcA3QDhAPAA9gEKAM8AvQDIALQAxQBEBRF42l1Ru05bQRDdDQ8DgcTYIDnaFLOZkMZ7oQUJxNWNYmQ7heUIaTdykYtxAR9AgUQN2q8ZoKGkSJsGIRdIfEI+IRIza4iiNDs7s3POmTNLypGqd+lrz1PnJJDC3QbNNv1OSLWzAPek6+uNjLSDB1psZvTKdfv+Cwab0ZQ7agDlPW8pDxlNO4FatKf+0fwKhvv8H/M7GLQ00/TUOgnpIQTmm3FLg+8ZzbrLD/qC1eFiMDCkmKbiLj+mUv63NOdqy7C1kdG8gzMR+ck0QFNrbQSa/tQh1fNxFEuQy6axNpiYsv4kE8GFyXRVU7XM+NrBXbKz6GCDKs2BB9jDVnkMHg4PJhTStyTKLA0R9mKrxAgRkxwKOeXcyf6kQPlIEsa8SUo744a1BsaR18CgNk+z/zybTW1vHcL4WRzBd78ZSzr4yIbaGBFiO2IpgAlEQkZV+YYaz70sBuRS+89AlIDl8Y9/nQi07thEPJe1dQ4xVgh6ftvc8suKu1a5zotCd2+qaqjSKc37Xs6+xwOeHgvDQWPBm8/7/kqB+jwsrjRoDgRDejd6/6K16oirvBc+sifTv7FaAAAAAAEAAf//AA942sW9CWAUVbYwXLeq1/SSrl7S2ZNOJ+mEkDTpTtI0ISxhFUJACGEZREAERMMiuwjIIAMY2VwRN0YZxsFlqjotKKMI7rvjMMI4juPojEt8OPJ86nMwKb5z7q3qdEJA5nvv+3+xu6uqO1Xnnnvu2c+5HM8N5zh+rn4yJ3BGrkImXHBgzKjL/CokG/R/GRgTeDjkZAEv6/FyzGjI6hgYI3g9LPrEIp/oG87nK4Vkj7JAP/nso8N1b3FwS67l3GmyTd/MmTkbN4WLmTiuTBZ07bEUnisjkj0ocSellJCst7fjS7KE2qx6zlQWt3m4cboyyRaMW+mRnErKZKtNdLYJRhNf6I1ycoogOiVrtF9lpKomlOZxGwqKXT7B3zJ5+aRJyyenEEPRkbXRpqZobVOTPq2jkaPwzBF8/CP6hZyVS+eWczAwrkxKDcctOs4Ij0sLESkDYZINzva2FANCYvFwqfCVJRhPYUcGh2wDYJzwizSnDX7hZde9wXgaPZIz4esUC0AnRGUvB5+pUckpSo4o16/SVVUTptCmEj9fpEKOx3NGhcIjC53OOaNJ08h57Ej3TXjEiLDji+tayBP+rkMYR4DjdHHAaxaXB3MXywS8Sp5wzIjjsYRjegJ4NtvCYVlnbZdTc0OhOEcy9bYyWcyGixxcdHlDMNr8oOwjZQhXJOzywyss0JfRT19+F77wq0D5u2vfLXtv1cMr31m5f827pe+te7/8g1UPr/79qv1rTrx149tk3g6yaAeZp+zF1w7lth3siF5H3AvcmHNh3RZDEVfCBbka7j4uFkCoCwFGS7vULxQL6FLK2oYEis1lMQeOwxWWy4V2KT0Uc5TjNw7RDDQTCUq2k3Kpq10qdcjFpCymc/QNwfiKPJxXVxZzpveDM6nIIYdhFvJc7XJ/+CwFypFIVM4Li045zRMF8tEF4BIXlcrFQ8SWltc3XANUJTmckgdIajDJJV6xwlBdVROpDnvSvMbigJir87jtvNHjry50udO8op2QQaS6qjgwZkudvKCq8crhI8qyTr+4/7sDW5bsb7j2pvE11QsfX7Jf+eDaK3/WPJfMvOqqebOOHxk+10G227zFJXUjZ/Z/8EPx2eeyHowt8SkPuP3DL98wfsKty8akPP10mnC6/8hsUm+Z3rHLvqB+SGMu4lDPRc99rj8O9GvhvDD3RYDJh7hYOuAxVohLq9TaHssA3FHClj3W9nhFXqEA014Bh6lmephqbSdSP6RyXFuAM8nqkJ2kLG5gZ0Df2XBWzM6KHXIZnPnomVyJhG+FVWgW0rMAX3JZseh8MiM3z1+YSRdlRTogONsXjcqeVDgycNFoEs37C4oj7rRwqAaw5i8wuEjYTKpq8vGrfPyGflFgiD57955nnr37rqP75jVOmD9/QuO8oHBNa8edZOuzpOLZo8ofj94/f9+8efvm67y3HT92++7jx3dPW7Jk2vTrr/9xp7757EESvf34cXZ58eJp05ctY/RXB7gzAO4CXJgbwl3PxfIQb37EW5mBsSR5kB6QM5SygBKxvc1YAixArrK1SyUOuRYGb/O0y/XwWVUCo9NXRqNSrRhP8ZeVu5B6bE7Z60PiKssD4vJFpUHik5zRll2JtIV4GMRHiqtVbNgFY5o3zVsT8RrgwFccAPRU8BQ/keJAccBOXG7vIIGhqq5i6uz6WX98cNex0ujVjYOjjROrJ4eeaFqw6wbls5HhR/8444HVI/7ROnfFqutrmuvHXP7M8JqxI/zjBo64krQ0rL9yhO+xjdueunPjwPmjRpflTph+dXT9Lye8vOPuFfXVu0JX3r3kuptmrx551azK5fyk5lWZ5bUj+wwaNQtwRpBfkibKL+sZt1RZJQHWrPLJi/BK2d7FCXvyvi5+l8zl8JnNygLeqV8Lz3Rx9DnkpGyE59gpo6pxOAFjvMfthEXZ/KvbNrfMm3/d5tvOkjPkb/Lc15Tt7Z8p216eL3MU/iJlAfko+V4pJ2Vd4l4ub43TwQeMaU6Pmy/avHv//t2br503T3lnvkw+If8kH8tzX1e2f/GZcgveq1bg+VbAhQgcLKZHXKSquHAGpdSTki4Ut6siIiS7VK4aiHgDYWPEa/QaA15/xFj7xhsDjqUstRyPvvVW9Lhlacox4Z0F18xZ9+mn6+Zcs2DODZ9+egN9FveS8JrudljnkzmJC0rGsEys7ZI+FOMI8kIuBbgk4fCQCMgWrTg0iQ/FzWzd6kIxcwp+bTbCL1PMeJjCmctQdiFg1T4RBLfHJ/rFWrJ2D1mrbN7DL95G7lWu3qY0k4MAQ4tyhtxFTJyDK+diqZrkNnIouUU6KwYQ2/gC7gHaASx4yQBkXqNNszEwiESAqlsuH1A/Y8GUOeEpZqs3PPz6iXOb5z89aHzukrABx1pHbudL+QZYoQU4VpmY2vFFJF1Q5oD3CHbODLSk1wD31JHT5Pann8a/bTnXTloBRjNXmqRdaAdESqFUqqoXsoXeoktfAF1hMvzP1IQpU+B+3LlT/Gb9BoAljUMAkEvydpxl9fkeEibk031KVqn+kbNTqU7RfO5z3V6gCy/AALLYiQ/PEdpjBmQoAQGg6EOhyACZleGQC1CTAbkEbFUuyAA24jQgywjkwKFV5ZeDhHAoV0AeATxBqHHn8uHQIL66qoIvsJPmQPO6p5csfmpdcwCOnlq85Gk4+tY3YvXlE1YP9+WPWPXQ6hH8wYWvHN5y+eVbDr+y8JpXD2+bOHHb4VffefPR7RMmbH903vxHW8ePb0X8AQvk14AeYQBZEtMhPyRUMzMGJd1JWYCVYiKISio+Ef0kDBRjzCPb3j3zkfAa2X72oM73JVtrTaCTDAc85HINXMyBWLABFqgkyhba23IdggnunBeU0ul6jqUbkSjTHUCU+UhANgc8RYxKuaJsTAfOmo3yGR5ZUwjIIJRhAsFWD9IDHoi/wNg0lVjv2vKXW/rPuvexFfwVHQW3Hzkyf7JvzKL6v+3W7bx2ycznN429+9b7d089cXTJ7nuvXXplaPjsPg8xWCthzqIAaxmsr1gpwqoTmOiUXUJ73G4uzQBRacfJ6wur76Rc7GyXxPyTopwNOClHcM2AFFiNxVEA1S4it3c5Y5607GhUVSConPMVGKtR4iEXx/UQDjEtAmdX5y8orNxU/3rL5j3Ku8tLvJtv2nv/qrfvvKGp4+GPiK1qyryaqmtn1ymf/8fjyrcv3T9u2vVXvqB7n58ev3rPnVctf+k39UsbKs2GivHrx8of3Qh0GAX8L4S5TAFdeyoXM+Ns8simOIuZtwFLAMUP9ClDiCre5pOSNSSbYFhCKGai/MFkAFZhNlGugawiFYdp4ejcS7wo2XA2qglwDo8fqACU/ihfScYcOvS1MovsI9XHhVkdsRPKG6T6BL+K4XkF4BnpKxu17Sy6LAHPNsSzA/DsNmfZAM/uFMBzTlCynpRFIAzRiiCIqeYySXTIBiDAdFgvufApgu4BqxgwbhDbBLM7iyodQhZT5cxiG7FY01ESu5GScBoS2oYxQNkdzgASk86fv2Jb6z823HPnusfXHxQ2dC6JPHTFyhdvVD78XHnmyIH9tyxo2byikj97QlkVrr/6za1/6Eys9Y1AN/lcBbdYHVExjAjFgWyBEbn6ZqGa7cIRBemydwCKfSHJ4ZBLYQReGEk/1EiB2NsseheOQPKKssmITKAvqFMSXHCJMueAUVqckikq6UXJqKoP4ZDXiMRvJzlEG4qdIJPw5goJxaq58Y4vdp25e9GATTMWH5hU9fqS9W/dtPaLO1cc3Tg18L2+ePiKsevveHDVlF/yB+9UjrXcHa8duP6NGwLjls9569b1v1835ufxtyO1180ecPvPVq1rZvMYAdpyUD5RALJP4xNIT8grkElwYDVSQc94NPGRiPB+5xnlB16n23TiwI8TdJuAqyL+FgP+ckCm1HHXqhj0AQateL+BeL9BFG25wC1zHVIFrjnQMCRDUK5w4iW5kKFRiuJXIuBzMFyIVojOQ1Z3ZpavVKBEMdAHmilnEL2lVaryVROpAHWdslYepRPDXX4F0XTSCj5gF1zuXIGpXYDHJzZvuH/A7J9vHzvzidumPrBh82/v+FL55D9u+3bf6pUPD5rVXFTcPHNQWqD/2NqcQMPUyK5/7CKz1h7pW/LQmjFrJvbP6DNx58/WPFTS98jaVU80NT1x17SF106tnFSZo9fnVE7kKwoHleQ59Ib0stHlzbNnM/t0wrl23Vp9C2C5kluqSl2PxkWDQF95xamoxOchfYUoovyAFb8DjU6pNCSbgT2h5eOHyYDFBDSUKbaleoQ8ihRUypHF5omSMyoVO2PmTORXUlBkrLaK65I7gQiyMJQ6AUphKpoiFcC2DBNI+t8oOVVetePF5f+8d8mAn18xbcfkvnzo9evXv7nhmwfXTHmwWpfRb9jcuvV3CA+9QExjNsbfXr7qj/JNo/Ycqhs47ucPNGdZG5bNfvOO1TdOHRNsbh4UuI36C0CeC6dBnrvAtumS6DY0aJ0o0d1JPgMplbkOPD3kuthTwneX80J27eTJtXDCcN6ifE/ugmeKXAZXzcU8+KgMHdw8yHSITPpEZ0hTd6S0kJzVTeOJ9NR4ih0IAQCQpPqYssIjmlY2TV6+KcoUoAm5i8O6y/j3lzc1LZ9Mdb6nQOfbD2uMAy7rMRNPrbCjM43/kp91H3lkv/KYEjuA8NaS/cJrQpz6ajKZxgSqIShLerTsTEHZnNCUCLzgJh3XCzvI/tZWsmXbNraek54VqTYTeFwtf7rTLex46gBpJE37lan3UdxknWsX1sB6zQPd5mouVoLz4dep9Jij6jbuk1J+SLaDaVQE2LFTWpQNqopjd4vOuODM8QeQ0xXBikXZnumULECPOX6QoQZnHtKgoNIgsjU0j/QeN9rduGIZA3clZjWr8fNtRz8pGTqucWhJuufQ6OGzZw+fO/OJxXc34zw36/bNvia+fdCCywbXVA0tyqyyDxpx3YjFl9VPDA5p2tWxQtP2cHyjzy3Vn9VngT04jvsULEKYeyk/3Jaal2Uvk8fq26W6YLy/lSr1QHi2sDwcrhWHpIpgXEcvE6mRKolhpvmHHbIXBj3U0y4NZZaziVlC42F51mQeGfTZt305T1mKlFdhl0Yd08v5af+yS75j0ihHW+6oPFdZ22h8j8F7/i35t/gNdljDUm6Ua8v1jRpdAf+RJ3Pz8tXjigppSCaRy4aKzsM2nTuron9tHV3n7v6w+gfUghk+djjwRc7k9ZeFRZUPOkGf0jlRCwFCDRJc3IhlRLs3EhYMHlznuO45X4EOLS3UPsHmAm2FL2I8wIUyyDD6H2TVH54jpfePXLJ5eNPVJj6yf+ptj255f9WMzf6044t1waL8EUNLlVcUZZfyzUsrp9zzp3Uvy6WvfnJYOfkIeXXulEk3l1c7rxy1+TD59hRZ+efHlY9+u+qFVYNn1NsbZz5799bTWyfWr+j81p3RL1TcuP1nP5DI6leU77av/uM905bVbjxIit+Z1jKtnvD9xjJfI6iv+lkgo4ygAfXlYhx6l4QwFVRxg4kjwDYNSLGWoGyl8soEyzcFUBIGYeUTfILLJ+j4DFLGpytn5nZuv/oRcvp76k8wKT+QD/hWWHG7QQ6+C8+wg7afz13FniKnAoem8jAfOHS6lz4qHR/loxw61YleLCnVgVahbAHRlY2iSw8rBI0BV7aIYp6TvchPLFEpXUSpn++U9Aic6GOsBcWVwV/kY0LeV60d7Ob3HX5729zF97z7jFJHWmcvWjRbWUE2Tps3b5qyQd/80t1rf+MRj9/4q7dPXD3t8kUnZo8fdxXjASCL9aNB1mRzYeZDkp2aJmMVmEKGwDPVi5OtTljIYGl50jQ6QsVcx/QRzuPmkDC8vK+gsJhvXnyMmO46RhyT3ggfufYN5VtifWPh78JvvaTsu0v54dhi/uC9JOXw/N9sWzh1sfLln95TPl8yZZ7y+oLDJIXxZMCzfir1G7u5/iqWUzQsuxE6D4UuBVCb4qDeYWQ4aQioO0Vly4g6IHQH5wOsoasOIPXtJh0nyMiYskJ5XvmGWHf9qeWaU7cr3+ibn1Bef1l5V9l0YuN7mzaf2MBwhPMdBTgs3DAVCrMGBRgMcT0jKz0CZKUAgfyltjc1zc0W0KJ5QyikWt3M4mav3cIjnaP5g53N/FP65hPKvhPw5O7PNIOGRJ/Z+/NSenke2PoSH1Lt3K6nJZ7FntQpqfP/qb4J5j8PNVlNgZWyg7JoARkXlL1wZgqijxgfZHdR1u4GTGeAju7OwAe602CAPrjkBj4Vs+ipMpGhabNpIkxERlQ2AYHLnB31WU2TRdrJd3UjnWogadGANhHfvPQ4Md5Brnz5hdojLYx6Zv82rMzntyxQPnn0ZeXIcf7gA8Ty5NXKp0svn8cI6LLQiRMKv2LzE2Qkw6E+QudtsMoJjIwTSPpwXEihWBS6Zs0CWORDksWBmizgk/qbtDnDAAdavYDHM/wrX3/dCZPTeYIvP3uQb+48mJgzshGeJ3C+pDlTPQjUjsaXPnHH3WeQsbC/dZz7XBgDf2tDjceq2UhGLUJioJPMjDHByiwdowgmWcK8gfuhb9WxdO7m624+o7zz8ZpDy7YtFh7qmPHxlyo9naa46NcDF7pwdwTQIVM9XhbM0SgDlfjMwB+NOHgvKe18j29WTikRMOo6V/HbOtd1lvP1O5QGeM5GjhPegOfoNe5Lx8HwYNDwEBMopQp6IBxjF4I9G8/w0/XNP67rWgOGHLiXlRup3stgDidBzbyPVoDa6sD7UEckehuNaCHyOiQ/HEdMMFmibCQ4DJhF4ifibjKRrCDLyMQzysx5ygx9c0ezcPDsQV3ejx/jS6WfSroG1edLhqSndy09s0MW1Kdb0FFihvnh0ToFOtcwaVIxSZCK4OHf87/7+vNOoM6ORiF29qDwbkdQsy31b8B6TOWyuFFczMYxZ0RMh0szA4k1m3rdHLASwZoEXiebgeflwGcaWJOyjY46wwWGJeHMJsqlnQ4q7dOcDp4uLZfbGQ45q6tA9PPNMhn8+t1E99SCBU8pHXe/rhwf8cObb5w9+8abP5C/kTvIsEPX/k45q/xBOfu7aw/xtpPKFyT95CniVb5M8GjdI9Tf4ELvcBenQg+K2ULXmFnQVHbKqi0hjVuj8EO1XXahezhZ0Pl9GaRLtv3sna/++bZyJxkzb+PGecohffN3h5/8TuH4E6tmzVnFqXiLU7w5wWqaonqe0jS85SMAfoo3F+DN5aD4QryhGZkDyIrZHTpkW2Z0cHAMlVZkVvki4NFi7o5HjwM9uQYNlejfremJzsNLD6y691mGz4VTDj5ycEYPnN6tfPDKhtbNExlWS4+3Htt0SEMswyvG9lK5dPROUeqzMOpDrSJud1DUUudURkLBcFAFw62iFjVwN0ZgrClIFA47VXVQs0hCtZ03wsr2J6N76uv/Hbni+iFkgvKlcuIMYH3Tz+cj1r96buru2XUpnZ8TReH5d1dfNXslXadRsOdXAe4ruNlcrFzzo7kR1EyBuUDEk4DmdimHrdOA6v/IEZlbySg+qQOzvaAcrYOAU07zIryZOtA1OCJ6qdHgFqW0ZJ9ahbG6CsQH0zxAXc01Uos1P7p13F83b9tSM2P1zZtWz6gh7r+SAS9uGf/O4gXr4dqmm+FaoOkG+VrlwPEjk65b3FgxvKzAFxh4+foJj396PDZ+/JVjS+sCBQUlQ5o2Xj7ixusayxkvQr/aXKpXDuBihmTfhySE0OBCFq0H1qY3IGvTC+aymEGPhwb0onVZY8h+oroy5aozuk0nTvy4TreJ8TpY98hrHFyEi9kpr1P5pmQOU1c7sk5AoUDFEyqQ6HGXTRgAt1OvLEqAtHwqCUDbyed2f/skaXzyW1i7f1U+Ut7lc4Rox1sHjh8/IIQ7XlF+VN4hlWxsms5sQLlFx8bxVG3ucutwBsrT4ClUEPh0xEEegH+Ozi+U94BlS7oJKMkI6MScsZzy7N2qHDNbgGdzNB6pM4TDCb5NwEwkzLNntFO+jbZR3e+/XkhtIwFsI/6YnJL2L71kOXbk+fDXM+h1c4VsSTFJKcfsst4M3+mOCVyM16egVXSIF3R6c4qlImEXwe2B/k3WKMUQwB6m4MObnVhICsl8jmTBh1VZc45TflC+O8fBYD7VZeELuPI3HXYYkwnwM5zKzmJ1JZrC1KkKegTKTiYxeeTzuhTK5830EfR/EywWH8kjs8hM4lPyeE75WNmobOSf4fcqVvJt54LOet7b2a7NgxeeY0IZbew2D2bqf0YJk4KSxkhnA6bF2G1agLR0xEVWklXE1fn11yCdn+JHd3zc+RofwfvPABqeQeVZhSpPjRqHFJgySZVG2ci8vbCKNR26mvioO88zg3+qc7TwTecw/o0XhGMnjnXUqbJ6urKWnAUeQNcHU1Wt7eiWUP0RaB4b7VyKDnXTuJ7GpzCok8IiZer6UJXV6WTfObinstbwzR1nq2/nLiUmA6LVv498uk+/4exUGvNbS16i8IDOzoYI8AA5cyo8xpOwcOMGFQJHnLCQGQniiQqYoLlRvAAVKKa+IsIBYPuUWd/o37jjX0gbAf6gMJWuHZFLhE3omqFxEuK3kABpuJ+M3v9f3/IH+cc6m9hsw5jOnT2Xpdt27gkYk5fDZ2FGBgUP3Tj0DhjrMOh2/rh04u2IA90yclq/F35fRH9PdO1JqNDCYzIRRBY0QZS8RfL26vcq76NMmQg65nHhe7BZy7klasZANpJBobU95kCPl8UE5kVZtgPNCwSkgq5Un61d8jnkdFypAbBjvLZ2OQgnPqR4G0rJdLFNb3FkU7eDHhV9YwZT9G00m8Le5bhW3fA11MUo+qupV5FXvYrVlJdPHHj1ysHvLrlp/sG10w+cHbFqYUPfP0UemVO3em7dqTUzRq8vKlo/esYaEpy4cWzxhtsnX7X+zn3emglrx3Uubhkysmz8TQ0T5lRX7qmsvgrH3AqyaSrlqzncFap+QtmS28zYa8yAA880w2hzmaseRseLIeqsRzeO2dEu56G3GXUCA3IS2a3m82SKkhn0PObwRhUW/ScYRvYXFAc8oiqp0BlvbD1Ve+CKF7777oWZBwYU7Rq7/p571o/dWQwrVBk/Sfns9H8qX0weu4WU9h/71G27DjdE6ZqaAPP1GsyXixukRhRtALSA8JrMTKUCjcbiUJUoG9jmkiMqmVBlMaSi0BSYVuV0cBgzQEAcaaobZwLJ++iHTTsm3L75wIHNO5t2bPn2I5JKnidF0sbrDyl/fXrVZpn5oj/XZXXhLwXxZ9fwZ6RcHeHJ6sKf6GjHiA3lU16gFrON4S9FRD3YTvGXwnwcWejtQyANzB5E5xPqx5QqNKIQKVFM+O74lb8acOrUgF9defy7D++5acyuwsJdYzbsJWdOk8xJ43n+7MEtYyeT9P+87alx/cmW/uMOa770z3VlgEMPl8tN42IuBN1qBK6HUGcb2+NpZpcOyD0Ncz7ygpL3pGz0tMe8NCzp5VhYUjZ6AfZUB8JudTEsg6YIFJCmhiep54zLIT465xEvDoBz+SoEBH3DFzv/QsydBtuBXzTcWzVn7LsrPlH+8hFfzvuHtIxcv4uc2fFVq3LidPXy+wZUbR/ZQPJJbcXU8cEHkQZyYBCf6hdybm46g55FlC0wBIJ+SntY5kyo+FFniAuj/7IT1qstFHO6cAxOB2giLiceunA41DtiAalISRedTKiXhGlCCpBIgSGHsMhezv6D2++7vKni5lGvvnpK8B+JPHi4eXNZ08TIkY4PBT/FrbJYl0X5SV9uERfLpawEyYJoZFFmph50jxGQW06powCoo0B1DgdU6qjAIDjyEqeLhSqEVE8u5SW5HoDTFZXLUIvlsqLU6E0ilmpQeTBMURyIUHdlHXVk8k5HF+VM+ObFmfsHnho4e+st4za9OG3u0jf6XzUlXPurmc9/C2R02c7i4p2X3UTOfkVSJ43f1tE8/5dXDcmov/y+Ddl1ixuWjptGbGS98snjDf3J9RG0b7cDFwYdAdbkKFUXSAkn8ZFUc8LUcdmoOwGMDTQKU2x0lYLeRmUqJxtSxe58Iw3YociYhbj9VP+nWh7cd+rqOY1bSvXNCl8/Y9/ezuH84sXTGiKdDYD7ZUAc6/SzQL5ZuKEsRsL88UZde8xMOJYNAuxB727HV5tJT0zweBt1aQCjxyxKg5FmUQKDUCMVAsCybNySceOWVJ/S7V/U2Lio8ceDwocdflxL5yqVxfSZdpDB44Aj4ePSdGy+UQ0ScJq9zFlha2/zGhx24BPwfJQcZtAg20QndRye58MQIsk+jGJOBeedIYPGDms8deCXE+cQKwVLObQvMmmyLu3HLx86lG/wUAgpr2yFeSmlOlqou3+DrvSEh8PW5eHQ9e7haD1FniQpyjzykPKNcuJWMNAPkg+VIZ1/J3t3Kd9rzyJzLuznARTjq8vP03qqy88Df2vwwZrxcQtUHcyRgT4NolKQZA3LObBqPLCgCxLSF+jIxxZNho3mj4hwiILKD5+ZPkpSUgaVRjQfFpSAnOTReZhjvyeZwQH9bD1V8uT8a7dllj+9cNsdpyY0DV/v/9Mvh60rFj7cHJk/e9Lo6+66s7Oa39w0c1xNZwO/OdZY3dmg4pyj8il5LZB/fy2QpLXg6Qlk66nI71oe+OWpBbMbtvYBiIZesX9v52h+4eKZdCmoPH40wKH6TKh4d5lVHp9hZj4TlOyOhM/EKHb5TNp0gsVKqRLdJqD9quk3JJ8Gh/mEfsJE+YQ1X5LQl2tGbTz+2fGNoz7au+nmPXtu3gSCaOeX27d/uXPhszsnTdr57MJbjj3XesuzR6kOomzRNavwXZUEn5UyaCuHWVwJrKV3wZuKmogjRG36NFUToUCnJjQRl5Waf2jTw9wTNfSuYpFpIoEMZjI7VD2k/6+vfPGb/3rh6E1Ufu7dMGZnkbJF3wzSU/nyDOghD3Uq/IFo41Ok8Mmx/akMbQD4vV3w2zT4bRR+G2ahdbH8zC74kzWBNJXX5yQ0ARuF38Y0gUyqCRidPZi7XzT0YOcN37x45a+if/rTTc++8F8fIvCFRTvGbCBnzpA0UKDOHuT5h0g62aT85anGKKgBY9U1x+8H+G1cpbZeE+g2YwydpqDLNsYcqI+VmLtTpEejxYGP/iwrMHJvvvDhzjEz3zOMr+mcyXIjQFdbC88o5T5iOc2yztAec9IZNbAIaepJOcvTLmUxH0ihh4ZG0eY9Y3jeiLatXbI6JPMxOcf7Lyn/GJy0pVjNrrI2C75LOY623Jx8OM3D9xgcJwUH86Ix+BUepUS5w2ACW3Ny8/JVO7iCnHeFhgyzUjX3S5vOmU69LIVO2d0tMxo0e5LqKcTvnE7J3c0Do1eVBs0DY1Cze6+K/O5nV86rv+amm66p//2T/7h3evC+6ZOuCjddt+S6pvCfn9/wl017o5ePHhioysksHbhk3IbHtu2pGjaiJq+vNzM9OPi6kVufuJzi1H3uc36D7jRIm1mq/ms1q2qPnqk9xlC3/EeQPR6qAQGl0YCIJ5H86KHJTR7UgNK1QBaqcRyqcVQDEsM0pYkpnaghF1eL7v2nXnstVJ5TZQuP+vm6jaAFkVTlP490nq2uT0vdP2TTOn4g0hfMvSJ8yPggro6YyJzVKrApYY0PglxABw7IH8kckq0qH7QJNCEDdAKbqBpL1JdDiV5Th4tbT82fM25LyalTtU9e98BDxMc/03nHoivG1vCHOvyb6qeznLZzHcCTUwCWJF8OuZAvRwib0ULVfY4ukU+Vli+EDzuz+E9B2gNSQU5xcB8r9xLjWDETOnLC9HZxIugMxkJvly/H0eXLERO+nOdb/+mnPhvOIVmP2eEXEn/syMB3TqfgVb0kVMiEN8E1u5ySztw8LxSeDp3n5jFSN8+RuhXsdrJObwIjXdIf00tGh2RKcgANMaMHyITUXpFE6miLh7MI/o8GuT/lo3dPH/3y3Y+Vtz7+4tNPYNSV/Dv46vDz73WWUdqD8QtnYPzdfT7koj4fvL+Z+M0khbQoB//zy//4RjlIWr45xykK6SAfKzHSqOQpOvjydjZXoD/jXIlcGadNE6Zu2JCFOoM0fVi2sQA1EKrMW6KJWbMTYwFVemsGE20C/ZUH1o4M5xWVR4Z5Ktlc/rh09dW8/ZijuN9Spn/MgnEthWcm+YBMqqQUTJfmA5pFvlDSBZMikh/28xuO3Nt5wzPs3inKWt6tbwF7YDFopNRMsbZLmUHZS11BcaImS/iCUg7NlHYzn4s9FHPn0EhihhkXRizHjWc5BBYrxsbdOer64NAMc+WAGUBEzGCyOGV9KpXW1ag9VtXUEg+yItFtBA3CnUZPYRlXFadURR5feeON/RtnzBgfufHGlY9HSHzD+IFk3daDd0wZobTsDAR2KYuHT7/911vJhoHj1fjTuVOkiPqcchI+J0H1XLFSCKbjoc26+w4tF5hwfsBDuYaHVMSDHRCQTx08Unow7u3Cg+4kjDeezfDgCsWyaflLthc4li4bD3X5ZkQQxUM2ZuBiSCkdyQ7jrJIXY0yS3SmbXYgHL9WiqyJ0zGWkmmpSwEg8FCmGMuJfFwEUNEbWrVv5eE1VVc3jK9d9M3042b0rENhJbh8x5Y6DW5VNA8cDapSNW3+Nck1oEt4HXTefm8PGgqw316omY+HE5ofUFId4PhtGPg3uxB0MRQh4vpo+mirK+jSULjYvky65opyCVl0q8mJM+8G8PH045PLa9QUVen+BEDEVDFkyrvryfoWZWaXZS313Gpw5fQdOXqhdyBXmzd9358TSYRPGDyslaxzDF62aellxaf34CfWlyjbmA1iobCFbhG9p/dkYTnWg6Np7KT2zaaVnFlZ6ZuleemZJKj2jyYRaKhIJuxY2Y8lZs63oSECYO6CZppb9OEOIdzSofoiw8JpuM8iyHG4VxwQESjM1zdUFE+7mNKXEAl8YLDR4oDMzvUrzrniB03pZDomQGQrFnSohWkC/yqOCTWS+KYsY58z2TJpaanAyM7/K2VXIREtOPP7qYlRusY5pQvtz+55fvGPw3DlDd1z/3L6jX37YMnNmCznzGsnMufN2750bp3g613pmbL7T+/TvsknWGysO5vAr8g4AjZSf+1RXrV/I9eee4GIhGEVbaqgMTL8iQS2oEc3tcr+QI/9YUC4A26YEC9FCKbYyKYOWoUlZQEJRtBulcAgNxpjBrUVO2mrcBrBbc23tsdwavJibBVxhAAy/BsRYjA/1j0ajcq4bK5Cy8wsq+lFFvl8IkFARlQrEWH5pGAN7nFPOrYFfigSTzdBpyaR+Ba9lPSXUGN7r8/hhYo2Yz6cpAxU8S92urgqUHyzuE7jlz2sf/Gzg0YwNExbsyM4cYiblXxl2BiNDfx2um+udc/XRuuvqp5fPuG3i9Tdl8YHt4SGL+q86Nm/NyqXDp95wVd/J5dPs23Pz75jtbAjmHb06x58z4WD1jkmRQYxex3AfCn/XraK1XTdwyDHyWPZZYTCeovKO4qAknETGgdezHZh/ERdZllkAWYWAlgwuLZ94WG+yprrSMgmSAnpsqYKXh0VabrB1pELxMNHDL0yZaJtLKWBb2Cl2sEyJxjZByYt4jYgSFvYMGF000lRVnG8Yc/28eddHV6z+9UM3LqvF49plNz708I0rqt8mBW+9pfz1bZJx/YZ9D9+4fMCyefOWDVh+48P7Nlw/cMU116wgb+1+663dt735ZnLsIw1zxO1JsY+4Q7RzNoyCyQ4rBo9BatALwIfc6NIPUb3PTpMzbc52yRSK2ezUMMFEmJRQzG7DM7sbzhwh6ouw2bX4iad7WMvD/vkxDQX/JaIpylhyi5JJPlMyv1bSUf6RVhZd6Wy59UjrN9+0HrlVjYcnZIaRAz2KRT5Q1glqYZ12pEUWQHYIVH7ccUcpv6VzjeDDd3qv6LnpwlpYV2FuJNABrcyQQ/p2ZsL0wzcvzcBE1+UoWn3kDslVHmTJUhW1MqTBITkIF/qE5NFYsJZQ+A/pLE5vTlEIJzzojGVklkeRKHIw5ErcmQOHs4x0KQOFSiRZ4Vdr17rFXQ1GVtjncufqvTTHig/YSXR2/0fnzFjK7ID1006990TH5unhvROmzC8dMf2qq6aPKL1iSvzTwz8Odbj75g3JLxo1Mn/goLIFTYbWuuaGYX3rCnL7DFzUMHtzZmN87cPbN/SvG12XX5Ht9WZV1M0e1LQt0PDEbb8WrN7i7Ey7y2TOnziwMFLstWRMpr6q93Tz+GXUH+TlBnbV+JotXCbMgifE6tjYKYElptaxYeGjlRX2yhl0goSkusWipOMyLF0bGQ6NIk+MYEcjdB+yz5GV6idQwfRz7fqP9ItBxysCODYy2lY1AKk2GK9mR8FgvJQd+bqSSuuoVHWyNe504MKOh9hZiNVnmtmKH4QrHljeYbtX5ysti9ZSJhisFp1DUszO7OJAGde3fzQ585MWu7E8q0hSYZG/wA7WdvL0Jhjg9KNk5HO7iOGZJUueUc7uek45cnTkvEdP37Txq4NXX33w9M9vOv3ovA/+u+3p5dGSm0ff+uprrZdtKqldfTjGP3aMjHx2ybPwNzuVs0eX4G3wt/i3Pz+Nf/uV8hpZ/v2W2pohr993zztDI9FWzMnlW/l9+iCXyQW49ZQH5jL8FAXjAjsyB+N2FVMlFFNZbImBgY1Wld4X0jRMWnSRhUqTxQoMz4NlI/Z05mGmbBCUEqlIC0boqXPfgmoVLS2nFYvJgSseA1dddaxq2Gr01p+1NjTXL28YsvSR2jkTKx4Yv3XaLfePq+17eXr65X1rxwmz5rZMmFkzdOo1CzIis4cps0c0L5tTNaAgb3qefyBd73XcRuEJYQanB6rlaF2sn73XkdFvKU/Bm4eMYgfkG7JQuUvZSZayT5bPreaE64FjqBnhWqWgzszyr3SaBhvTCVS95BIpWFgN6BdrhR27hLJtnWfIFu5/Vpengzk0CI+pdfbFXJB7WK0eTWPzlxKMO7Q5lXzheICexIoCCFgRmgIFIVwYmeoks3JlG1sANgeuTyxQxrNASKtRzmUX4C9zqZYUN7IlgkXLtE45xZEm+H107gNFoM8ZbS6OckFRytUmm2XZ9qhTFtWl7/UH/B6RXS8jo5X4qleXdT4ZVwa/v/feP79/397333pj6MwZ/l80bZy6paB//4ItwlNPdi57dVVcUeJ7/vz+Pfe9/76ykHzTNGx0wysvvUSEcFGgmtkbnO4I/7k+Su2NLnspYTYlosIioJn/XHdkwwYmc8qFqfxgWg/u4RpVHLsSayRV/fM0rdo7lVV7i6zaG5Hj1aqqzAJ1yl2wapuVsBnK9y5quf/+lkV7105cOXly7YBJulmL7rtvUcu997YMuPzy5c2TGVy1YGu+pjsK40nl5qrWJqtSkCxhDDCjraejSTI6O+i5emr86I1Iqw4q0kFa2tii7pLqQjepDvSLqZoic7azaoeuolasetAKW1tb+b2t5B5lfqsylTxCaxWFmfwJwwOgc0zkaMwkbmVYc2k8hqoWjpNaVTw81kHTexxWzY9kRgesDYu1YgZHGi1hcHYrYTDQesVCLQ7c1P/R6VvjT71ANnbuJMajU4YNv9FnyBpav3HVgndu3bz2yFPjBw8ZWMbooUGYwJ8C+Eq4mRwofKpc6OJ7CGe6CmcpzWhwhOJ+lQmG5D40ylGslcXJxB+lPC2XlpZ5UDlMd9KkKpcm4f2sULGL17Gkc4ERQENT6cahjVOfH+70DD10xahN0xuXvbrrkUWX5Q8bWNx2Z8tvhBMLKyNDqlcJNwuLqyJXzN64al7DVVYhO9hQvnDzZRqNazkMOYyf9JrDADSOJbZ5bylPwO8DmL5AfaxhwU9zi8aqVG5iLMMkaJWLQFFqhbcqGyWzI07ojTG1w0x9VJh+ohamY+wL5B0SC/4riLxzG2ldenDJbcJcUvj2vz7Ux842CldhjTGZR7bxm8CGBD5ookVBFy4udiWXHmEjEvI9rTeZPJnhQFlGDoFeks4N52BZavLMpPFDmtFnOBl3JTqJcLKQxubRJMZIigvpzAHSjOrpIgue4eQFImFj14INXnZFsL6+b/bEQUurfKUDxm2YOXSFEptZG/DX5fU7eLN3/KCGmYXoZxVmkocMuzkDl8upVb+aktqj8DdCC3/dyq4DW/R3/djxFj9rO6zzkSCrfwBZjbpWA9fFcyRP1zpKv2CvCeTjtJ+Eyn0uoWfEyKN773/26H17jx64clLznDnNk64UPtzx4gs7d7z40vYrli+/YubSpefJ0wjN/WL/gzxVnnoL33aRUcrTb+LRRk2UJolUkGFglBsiNL8nBbhrOvcrlpkludRMYFM4bkkzEhvrIMOGLYZiadR6T7OBAWswEhObUt1JsFY0Q0CgeZqSN4TTrHrBXNTsdYnoDKCxFTfWDmSqcyCTlCjmQbaZzDYWRU2z0GifZBBBnKcjURCW8KFOFCYgFVUT6tgGoyYQFunUtQoLb+m4kzeRiZ8tWrT/zBnd9A46lR0pGKd8ZgXPK9ZNzzyzicxnPTMQBwtUHPi4PVzMy+KrcTdbfhoi7LleQITKnNoMXjrugvPHncVsVS9TxLNEHGmWF0bq7zbSLDFuMlvsblbMhB6jdPQYxXWikIUCHHmZJSoTg9hz0GbSO/NNHv2s/o9N39pGGfEuYny2ediItb7uiOCfGTLsJpUtH0a23AfooQFw0aGfAzy5LxfhBnC/Z5XjUnU4lo5o6BNWRW+8vH9pOpBFZThezsgiHIr1pz1s+gfNoLno8Gu52EoLzdMTeCNgFfRk5VjaWQPEEg3Fq9m1fqFYNXWHVIeBWGqq8bCmHFA4EMs+MSuwb1SqEdv6lAX7U/z1L6cekSR5ECP+AdGeEuGSZYH5PNLSpMMYq330oRmjb57WQzqQRmHhto67eAOZ+Onixfu//prfA+JicPUqfhO/uKpmxiwUF3NUcfGLyzof7oUYeS6sLBZ2C99y+Vwf7houVojuslJdu5QbZMVWZZQde1ztkoclyto9tFbP7pB99nawruS+mLnmoTQD3FS2uCgO4tb03MJSiqr0XPgyKyqVijHOmkkdRd4qbDiAWSYet11HrSKW41NMKItCVh/uKkWsvKz5ssq5Mx9b2jr+s21HPyE5kwcA71/ZNGHQNZcNqa5WyxGvrZ0zZGj4stIhk3bunbUwrhtaOxlLF9maozm5hrM0v8N+fiWbtauSLTUoO2jI0qoGjxKVbGHiF3pUszViPuAPSSVthrPK+x0mvrX7M1N6e6apl2eeXz1nIUAZ51XQ3U1yQZYn19GRFlWuJz/XDnbyec9N7XquFhQhrIS567nogfUHjD2Hu+65F1/asu/uK5MGrD+Bz33lFTpo7dn/hGf7uEJua89nF2jPRgtUZOs4N6gyeoKGi+kk9kWiljvl6HEPk9rFSGYmFGUFlGvHCW9Jp3FUj1PW+2ltSgGMojAqi2CDxkzYMAn5G41HJvBJzRFa1B/GdUcTyjw9h9m86OqSwaX+Pt7ifisWXR0YXFrYx1sULEoe9Qc33e4LBn1jLrvpNvwce1kHB+PXqeM/BON3gR5cwC3siQF3AgNiUMoHGcc8KJkhWlFhOinbnbQmDG2IHCerqLCb0MlK3FEWoUiLSjnOmJ73UB8TcYtM6+w2RlXKu7qfdhvlBM3jMhUGNktzuiQIuY6eDx/x4ztAXKfUEyrD6RiNQUrXLi6PW39BykaNWvXN5HR5F/KxKQW6EmgFMM3DwegGzjIte7Myr1qmGLfZna4UtYUY+hfV9SHneLEyzupgVUhdlaa8pigGkrSb8xbPu+seW7PmMfegvmWDBpX1HdRtFe17bN2NU5rXvls2eHBZ38GDqe+rg+OMDbR2xImRc4zeSly4e9Gi3WFV60fiepM1UU/owsZqoMAkSgptWgSdFTJicN1N7Qo9jMwJo/GTrnJGeAnEJ+qE0TpT5yha1/h0x1TF9ABJJVsSBY6JSlrW52ktrT+t4n6eVH9KnZtaESq6xJhvQOobjGepk1KtFaZidkyfhOWPclLuk4qeL6vemZ4BmkKQxQT6BmAOcosqolS1kDOC0eillrPqk5TqQLK2XSFcqMj1GaUtO6+M6twr/f3GTg/WDy3Pmli29T9+M7v3utdTtrFpVCHPunIgKOi5wVW26+M/JmqBosAfLTCjY3+qAtVxsQpUTBszcyxFrHslKkbGk6pROz6giePalKGU4M6DZdj/FJYeMKBOkQRD5x0k700UGioQjHN3g8H50/hwXQwG94Xx4aICJRkc89GXXgRh0gOeV16hMozBdIjaQH7sK3cxqDBV1xeOpzJWitGvwotA2WY1YwM6J6s0xPhFLvDZIrSazJiW7ImeB/wFfNbJE/y3kYyBjiRPDKdHlSO6plvjpZVdbBT4yiFYsA8B3jG2oXWK0tPMRxPtFIX1smZMAdFpzd4EVEHEsDgGqWnVGSSjs+VqMiTPrYC3Wf/W/dCgwfutoOrEujNsChK3BBg/hbdyuCfaKqVqFY2J3tNCS2hS4J7o4E8BHRmmRh+lyBPYbGPaTRZTGQrOaNOr3V04dwTuPdUQp7Sfxc1Q82JstEYrKGWE4wKbUFeIZsBZaU1emyHVCrPHOWk1DLbJc9ALaU6WDGfV0lBZWp8rgwGULBMxRJR0PlKTg6fOZGhS0FCrztS/qMhPnFI8g/2m305ri7O5+Wr+oV3rJ4PFhByxCmo01sCisbQPEzJ7O21bELPTMLU9C4wNq13LWkSxj4Fok9YdgJa6mlxqaFUrvC8loqur9B5J1N1G6+9lZaXyvMJ/TWxqAf5/kpHKEX7ME/xMrQ6fH6NsY6X4yoontJ4AlaCvmWGV3XFeVa6UGdQ8n/nBuE0VFYXJlbopICr8TJT7aVplonVrVxUvrq0UVsUrp/kxZJoZTa7klV2ZQD0puf4orRDFVBQbq1pMrvHtXXfTKn89Lb3pbMn1wOfrbKx3kv4NoO9U2vV1TK8Vwvm9VQj7tGxXmy47N5HtemlFwmhJXKRQeM2bJO+en6gWFlajBPn/CX4ULBcrdC6nguYnRsBfzgyW7mMouMAY/L2NoTBpDHn/5hhUC+ciwzjA5NMlDQOkljaOf9JxVHM7ehkHKlxFbD2FtCwEItUkjw3DkNVsBVU75BI4K2VnpV3jjsBnSbXofNLmysjT9T1v5HJRX1hP2f2qcT2FRMn/U/TY68q6CGrWoYFU0nOx/RSmpp23/nQqzg5RnGEP2SW9YQ3MwspwPI9JgzJgp1U9MCYXOGkZDKCLNjSr6MJVNeKqAGnElaH7d9fpBeT+RTCz6nw14KfQ8rvzlQPCrQFB36qrppFLM4mYiddMjGayhpQqp+aQACmdpbxPArOUU/Cxufv5HPxNYl2BLZDO5XMl3Eou5knk0vrVZhgMx7m4wkqT+2kWq/00+2CJBLJpD4Z0i8UnjaJbl029hVanbDYhG/d7UM6mUWO7zcplleC3RjDUzdFEgNwbCRsTMfKA0R/BNCkvKUYkp1F8ByhSj99XHrtm0Q0UrW8+FG5bOn/J9wv58OzVb/7w/jU/f+PsWv7g64DL5sG7Zytf7r8bsXnlyPtmE/uDb2wWTDXKl52rBwFi32tluSOfg2w7yzlAYtf2VgXu6a0KPE2tAo/ZRRfTZs6rBKfKffdqcMKjStZbTbj+k4Su//8KHqro94DnaarS9QaQ7nea3p+Ax9s7POm9wZPRBY/7QvhRlf0eIPVnDPXCMGm6P4XrEMCVDXR7zfmQSVlBqTgc9zCGgAmTpcmQYh1/OupZrC+F2stPg78P/Zb5K3NELPbw06qZ88dhItVdi76b3t9jYHp10ZMFbM2Hhvc6xm/VFb4ysdBZfy0vzIGJs2KlVfcqdVuiSt2uVqnLPC1TOb9OXUAvYVKteo5q63VVrAv3MXnb1WPExqVp9h5z3Fjt1KKyggorpHW18/Gycg4Ag7eHQpgq4FS1VBqyTbOLLB8Sndc+Ndif3G/kDLm29a253TuOfLr62MpD3yqfk9OrZs1Zw2KZ2899rntfv5AbwJ1WocqkjSyNqiiowTzuWgrMAFu7NMBBfc/okLazzvRGR7tkdNCwh9fTjr57TJv/57XPr2LlICUOqfiY7PD+S3IdaxMdLldZmxPf4Yu2QEmxC5ijw5VUBeKMxuAyHHGHQMtwFQdKtAKQHue0/KPvAMBDDvatjekwNzIqhZ2ytZIWWcYy833UW4c13vijGjFm9OaqXXS05uW6rqIPbBRJc8QM1VWDdMyR5RG3n375l/9RNnjs4LJ+jXOvmdvY749Pb/3txJnlDz01R71QUjeqruTa0VfcIHz860/23lg9LRLpM8CHpSDe4OBrR25pmzT+jgHjxvYvCGXlpFfUXl0fmhKtCYQyIoMWXdGRx3zltK5dvxekRiFXCVZlUmV7SbfK9mBXZTtrm1kE01KkVraXqZXtODFF2DXIZqce2XTxENa2F/gL/6/L26kn/hJL3De+RXLv6biUOnfd08r7HUcSxe7JeCgHPKy5pAr/0AUr/MM9KvwpFiqClTQz0Cn1+98o9Ud7/tLK/RfQZIBLKPrn/zsRV+jCR4Cr4m5MxkdZN3yEuvDB3IolrNk/xUeFig90LJZ0o4vDjC6KAipKCv8vUaIFLy6RQg5RD8WeBZdCI8JtiI2XX+6FTrYDXgZwo7hXk/EyqBteRmh4kSqD8T7MDogE44WqHTCa4qoWcFXrkAbknxQTkZBgfAA7qlWROJQhsa3cm24qi1cwV+1l8M0AH8ufSReHmGkLiT6Vg0agSVDOscY28gjM0OMQo7QFMrZDRryiJJT7VMJ8+KoHRKM/uQR7D6RcIspbew2wlF3SDOwF66FCtSLoZ0csMRc6dS6aaQ19lBvB/Tp5NvrBbBSicK0Lx/sw5WFYKGl+Il10O5LORTmg2FeO3sIAKBHlKvLDDPmS1yENwZ6TA+C7AUF5CAjIUdiNyYdEnY2uMGmA2GZx9ItQThe5MOIvBdma9yoZxcmOyYvxQM3D1ZyE4amar+siuO5QE287NmooFmZrubgarhXKH2u4eu65S+CQYOzGBzDKHxKMV6qUPyyZawbB5o0wco9056FtYUrudezLuqDaIFYeDr+JBHGTFEC6VCcethSW9ausrnFQvJddhOCHgMyOVQTDP03w3fiss7c406Ux3nIafPIM7ltWV1fWd/AlcGBh2nkxKcpzDM8I3wPma7nh3P0c3XJFKg1jDw62/UqlOgGSO4xzINWH4gMz/DgNA/Xt0kCHpEfajSKxj6Dor7BRw7lO1Z5Goi2dkFd14hAL8BO3MdtfmlE1kHFoOS+fdsfLxq7gecUVVXS7n4GIZdmixz919obXfKyA6NHcozjQDc3FDM9FrOPHxP6zbhj++6UqZoll1Iav3iOGTqPtwC/G3ls9Z+y7Kzf9YfjQt7cMWz9/EKC6sbUso2jDqBlr+D20Kciiket3kvLx68f3Wbeb4vnpp2l7kD214d0jG+ZPndjSp/Gmxglzho3pVxeOXPVyxdTGfvdjvxhlFe0X05dbxyXaxIDtEfcxAi4Oxj0qAbNmHBbQPy20l3o8nVEmtuIotGD0zCTYnC5PVm5pH0qUPmyvn4smdSw9rwRZhQeM6NIobTfDGZx9ktrN0A7i3drNpJILBNCK+Z59aFb+MU+Nm63wswQ2jJu98i9y5uOk3jT3Oy9Xo2U0nS03uNZN8pDOaL8XkPkeLoMrOL/jS76xPZ7JOr5k6pmbLot1fMmiHV+yMB8a3XTGrAt0fMm8aMcXUPTIxbq+7EftTmm/SO8X3e3K+53vqP1fkseTC+P52U91sPH31sGmUO1gE0t1MKX+3+9hg4raT/WxWc1UtAt1syFvav7TrjFlc0Xnj6kQxpTLxpSLYyoOSnlsTHl0THk4JixyMubRMWX0Mqbci41J1bd4Ix1b78N67+hLL219cM9qoza888clXMd0K6XqahwgyxdkY2uGsfm4PiBl7k0aHe4sIlUkHINVITbeEhhvARtvAY43EpTSTuIWI1jXhd3TK53tbf7KMpDqiAQ/RYIfkYC7mmWnARLMfQpwSZaJbVaXjvqz/E65ogouVVJ0GBE1arJyKpbFXWzGu6Vj0NlPFtu9o+sRkNgjRoDEjnSR9hImsCtH9oK6k6pU7ryL0gZfo0lpjOHtB+N6J80RTooLkqS4oO1CccYZuLyuPYUNz37crvWt4WbC25h/635anHEmJemWUywJOXFLgPEEvGXBPbvFGUlSnNH2E3HGckZgQfXeL7+s3V049wjceyStXUIv80w1ziiw7fC0EqaMEC3BTUQabf8PIo1TNT3s76es2mQmipx+bEJ4E6daHxb9E8B5i7CKz0v3QDK304384oLfi7KcFpkXU+mTCdIn00H7a7nFdrqiM9G+MpmtLK52WDDqbY4UrzOxmQsn+3O0skUB25iCfRU3mqypTi1/AwRPcUAPggXEDBYtcqKbA6Lu1sDlx+feWdV0RjlV9lnxvBU75p0qf4hcq3zV/g/li4/2btp8N+3m8t57xP3Ubx7fdO3cjMFPTG2YOW+0ckz5xT+V90janzZIv71p/W9/S2nrLuy3ALaUCzSbmy/QBQfrNnOYCO7TVf1doXXGkfnyEPbGSWQYBZMa5Uj5XXYVbbqHW/HIhsJoVwspOacQsOYuKY9GL9BCR+jV+LnrVOSI2lhnS5/FXRbOcmrh+NHCET7cXD8jud2Obm1Pa0bl56NhLaTS7KoJaoTZq3XgyTG3a/3D3TDlLIGK9omg2VMc49uZ4iHswyO6nFTfwIypXlvxUBF7wXY8B6l8/fsFmvLo3CBb1yU683DdYM9Kgr1796D83roHafFICnV2Th4NImAN0SW2EaIStfdWQptUQdprQyFyNuHf6II9jXU9prBnarDnm5lC0FU1nqPCTjfPUfGeIx7GETjdYhqLg0guGEJ+5gWG0M1X0dsMfAB8bcu+PZsvMAX8V4zbdU2DNo7tMI5SrprbqY6jXBtH2IzNE+IZCSXW1RWHhLH1cQCj64NF+2rgsY+DNheGgbblGPvBda1KGlYhW0cYj8wuFZ2HBZ3V4sovD1OSC5erY5Yz8mFBOQpLo72Q30X8CL2hI96r56DhQtj5rufy6lyh4Umn4qk5EXvcqGIqDzDlQulQFo5nMOlQqeoWRUgDVRRP2YinbI4JBFQtClQkVRgL4GIJXCyh2yvRECTrgC0Any0R5bwi+KxwyhbaXLwo70JL8zyzn2Gkm/rQDTuPaQImnEDI2i6toRtqhCmayjBcxQg/N6E0CGBVviJ8oNsDRxbOzVVwuMGH0dKubYzjCsqpFrZhhPUkLRhzYKU47YbI6ha1nnOC+llcK+zrPF4/Y+jQGfXwXj99GL942zZlL70gzC0fMnjGiBFJPATsrjTQ0YtxPyvayYG2IPdp7RCZto6zEUhekbgSLbAiS7QV6cR6/LjBoctkCQI+N/ZF9OBOeGKbhcso7hGsRFZPg5VsKxcaqlQjlQYXm4IA4Pye+zf0237NrYD2ZY/eEL61ZfNHlWRL/bRNe9eMnnHznmqK6wmRdbf9FbHdXLdp91+WTSQfBo8qc6qfa72+mcUDaZ8j4DcuzosVcxfodJR+gU5HGIcTcIjuqGQT20RPmpeO8KJNj5Dbd2981IIc/vzuR3qRxYr+5zBiN6Y20e3x0qAxZi//BIwYzezRnMnPOPh5UApfajGtLjgz0Uq9AJxZF4Azuxsu44DL9EwW45Z+EqUqB+8O8R4MdT6450IQv/wy0jmDuZlK+TL0p3eHGpsRSP5wPIexoNJQ1zj6auNocwvIgTKdPUaEnc+K0b+T76SdcorZBotyppvtVZYvsqaZF6WVC2Q/dB/p0p51+8Bpzhu1rqlnJT/Nq8Z+TTBnIlh3vXRswt1SLrFjE41+9ta1qZQSznm9m3QbEnSDvQRVGXChXoL8/0YvQUOil6D4b/YSNLyjcBdoJiioOGwGHOaAtF/AxTxINb5wPItRTSB0Hl77BCXnSS1AjhtAFjrZrmIYFW8z2QjuaYWFEzz2r0MD7pKm4ALU0uu0fHQ+0Zw/R+290AzmtJhm6heCTVTM3a76AhxCu2ocwYFJ3XOHhYwLhfa4NdWrs6nbLwVo4lCmK2EpGV2hEN3qwRKKpebjnKc6cX8BG1xGIUIVNx3dP8HhYgwiVZS5/ChlDpkYlpKJD912TroLD0snSvNWJ2Xx0+XEEovUrot880FS9eLmb0YlJRBPHfVfN7+ovNnw4x9u/XMk8v72P/xIPiJ3kaHxJde8pOYRv3LtikO87ZTSvmsLiW2+VTmdkJfGkSAvC2gN3e3qzvW5YUrIFkIzOeWwkR1jD+F4uSPTAigpR/dIf7bhoYMmSeCQHWK7VE7bdVew8LocxVAd5m3m6rBQVpQN2VSBiVlcmWynVnWLCURRW1p2UTHdxhxRxxmS5Cq2o+ruHslPbNCttr/RUw+JnUcZ27EzfdCVm8f9hVg7dbZHfjHmvvCcy95dpXx76+6zy1C/v4/w996rKPcJGXw57xuyaGT9wqFFVPR+XzZufJB5SGrD20c2fP89avw7n3125/YjR2orpo3rVzFuWqJWyms4xJlAy6H9xZIzMHAP6txw3MqWUjprzMUyMtpSDUZgvDQJNkjzkj30QpaT7T9mxFRyq1Pdsx0TX7MMcCU99wLpGxdaPUkpHSd6ppaFhifnd+gMveWRcbpl/GjqVymhe14LYVYibmTd11jH/66dRtHdLDKnCrM7NG8Ku9difjfYFRncdE5yBONmZkGkdVUl010d4xnMPsigrV/UBhNYpCpbcWdmgTqBzQ7c6NeNvkZaix0zWm3UPBB7NQh6taZ7MZ579NjgunXQ+B9+p9tIv/Oe17cjqVmHbjj9E/p7Q8tP/97QT/39VKGJbNS3AB+v1LrrBGWzjtbo0V2Z7O30Rcv1zKms6FQQJZ26CysspqSimqm4O+ZUs9VbNQL3ytTZ5x8ZNAG3Br+sf+3EuXSPb3jeXdq+6zRxPbXrYdoW5K5uG3K6ztuQs8dGnLqP6Cachwc10k04Kd7+v9nvnOdmCk2CjuLPr3UzkDxhQCLIQsSjlKFVhWCWk72raD6XnmGKOsOrzDmpM0zWpUV7xW3ReVdmLpwyKzQlxemoHjkxWj+TrIXzMJyL7FzF/uIqw+jogEkAtjoX9IzulQqwO+hc+HG3GhV2nBApL1HLgnukGtTcNns7g1egykZ6tNfJKfqp6SI3TBxQ/7P56nlVz+nr32MycU/XM4KDzqUPe6SnqlIGJlRyhxjjTKcTW6BNrAax105ba2sQ08T+82a48OJTTqq7wO1JAWPoyZE6lRyA7rYQEz+df5/25cROEIIOe1aoH2qXibieNrJQP87rNbFl2/Nbtz6/jZyZvXXr7Flbt1F50XLutH4F4AD3UMzjRqh9dI054bBs04FK6A2F2CXazCJfa2Yh6Vnf5lQ7ra/DfkqZdur06rbHbpF65O92qDW9+A5bIg6onUy+n7y8qWlAbRPbe7epqZZ9Th6gniP/4TbyE2mvBtzfxaA1BDHpEu2JundC0hogcd3+1qf9LW4yo0v8Oe31zlpYRHo0gEi0fYD7VJ/7XI/7WPVFz0qplnZs1XYz40ip1VYm5bCehXmhuMlIL6SHZZMVNwSmYVXdSTnL1R7Lor1ssvLM2OIhpsvSmi1JxhBVU7KwzYG5L5WuqKkUB7CsxKQGHWn9DHbf81eHa7hERSJtZ2DwuL3woeokvK+AC1RP5HVNi+vJ8h+0QsTb/h7hizrjOh3f0Pl+5O93qPtu/kvZNoScavVWpte0/o2k0BLEO29qrUmv9LZu2kO33yS2v+Pa8Qu3C9PpfldubrW6o4/ZGg7HOSZEhZDWWgr3izfZxVCIbUFhOKm2V+l9JywkLBDfSdW02CvUzmQuGiap6PBIUTdsApGDbVmIiK11Ue3wC6KfRDZECT9106ap0b2OvXpfdbVyPdkBrxeQMpQ6skJpxRfTJ2AR/FX4K6yEQFLv70Q3V6pPaGoFk3OVok/EP+ko4GiXGk74HnidB4583H3MtwNcpGsbjgzag0/HrHY5NS/MWlOLrIG/m1ZRYf/7Xvt7IEZczKrx4ZYJuV470IabNfb3oh/ZgPVGvlzQUzOyc1jPMosbQ35pWWyfzZjJm6l1s9R28fB3bePBJW3tkLP/sdaWocHCUD3u6cGXNeL+CTV0c4+H4oUPpWmbe5CN3bd+AHpAPHxA8ZCB/UspFtLC1ObvsSNJatf4My91/GlsZwOqdKVpo+7apsR73jYlSQMk5w9s2PlD6vhQqxHU4VgMLXRPlT5cFdef+0C1y0qqw+FYFk8ryjBTAPs9VeDYwursttnTCmsKvXSAMYenmNJ89FK2XcH2faW03QvNLfSHYiWl+F1JMfystAQPSz1mTOyl3tf+SAvVfYEWKoHrYrfTUqdGC31L4CgrB44qq+GoIoyYykdDxpxbRrMzK8Q2U07ffiwk1tvWLr4LUQptZeFXaSVp+xfy3sOPqwge/dprp/jSxkj/xsb+kerzN4a5KCnR9WSYqOK+gntGw3wZYL4v0lIP9NM4GmA9HO6O9OD/MtLRnVBhY7sSdqG6TEM1IBj3kTODNST1FWVTTvTfQy35KYTW/yQiNQL+Pw8DuIIAAAB42mNgZGBgAGLFKc9XxvPbfGWQ52AAgfOlD1pg9H/Dfxkccez6QHUcDEwgUQBgngybAAAAeNpjYGRgYNf/58DAwLHvv+H/yRxxDEARFPACAIYVBk142m2TX0hTURzHv/ec37kbI4bIiKBmD2IFIWEhY4w9RJGz9jBERkhIDNqDMJKaUC+BRERchtyXfJIYFRSIj3uQkBghQTGCiB7EImL0YNKDiJjC+p47ViY+fPief79zz/l+z1U/cTEMwKK6AGcDJR1BQVZwUj7jstlG0pxC2qmhoAaRVwn0qWWkRJByNlFSRc5tUR8A8gt51h6XOkZlFgPyFEl5jylpIC/nkZA31AZyThMlW2v36KDncdS9gIwpQMwAfFNG3izAlzkyzf4r9t/CV93w9Qq6ZIvjhzDtco2pw3d7uPfXtpow517z23M8O+fsnqEkomYYYXMEIjVcUz0Ys2em9ul7vOv91m9njXe4ghF5Dk/vIEfNSRk5dQfxoO2h4qzjtrPeGpAEPLY9dx4exz3eNydVahVZ+uPpZSRUBTF5xDG3tetGENHbiNi2buA6fYzQU5/aK1GubXs/EXx3GP3ST+95VrtGf0BSDbU+uUmM6Sgyeg1pOYyU9V5vIKN+8B4TrLE+nsAoydq76FkkbDbcA+oYYjqNS7bWvYWYu4gYPcnq0zgXeH4AoYXWrs0hyGAPqrtVYw5T1CZZNN8R62SwH57pbpBJvZ3TX2wOzEt2UAk8P4CQi5HAj/L/0P9n9H6c+pG8CLz38DjQ/dCnQG0Oe2EOQV7U8BLyoRnk7JnUEL3yA+8QOvNP1Q3m846cbYMm9Sa1yDnm0EGW6O9L/hObuGrfuEVPYpxYLalVPDTfOM5aNcMaYvc1TzCoq+jVX/gGi3xvxF1FHPE/3KrOPAAAAHjaY2Bg0IHCEoYbjEaMV5iKmHmY3ZhzmCcxn2DhYrFjiWFpYZnH8odVibWC9RGbDtsUdgF2E/YjHC4cdRyHOK5x/ODk4azhSuKawvWL24O7h/sY9y+eDJ4FPPt43vEq8XrwdvAe4pPii+M7xi/D38e/j/+PgJJAj8ABgQ+CcoJ+gmmCswR3CF4Q/CCUJXRCmEs4S/iUiITIJJFrogKicaJTRDeJSYjFiK0R5xHPEZ8n4SExR+KRJJtkm+QOyU9SClIdUkukuaRzgHCdjIzMEVk72UWyJ+TS5FbJu8kfkH+gwKWgoXBA4Y6ihmKF4gklI6UApT6lLUp/lGWUM5S7VHhUJqkGqR5TY1CzUatS+6Weo/5Ew0rjjKaQZojmPC0BLQutJK0JWm+0g7Qv6RjpTNH5oTtJT07PQe+APod+gP4cAyEDH4MZhjGGD4wyjL4Y7zIpMNUzfWCWZHbK3MR8kYWLRY7FNIsjlgqWs6xkrKqsbljbWF+wibOZYytgm2S7zU7AboLdJXsj+1UOJg6XHJ0cMxz34ICnHG84PnP85yTm5OfU5LTNWcQ5w3mf8ysXOyCMcWlwaXBlc81y7XLjcytxN3K/AgD9d5M/AAAAAQAAAOkATgAFAAAAAAACAAEAAgAWAAABAADsAAAAAHjanZI9TsNAEIXfOuEnAkFoEKJALoMExoEkIFMBLUSIIJAQjUMMicifsAkgUVJScgKOwQngEpScgZK3641lOYoLNMruN+O3M7M7ATCPD2QgsjkAXf5CFlihF7KBabxqzuAEb5qzKOBH8wSqYk7zJAriUvMULsSL5hyWxbfmGVTEr+ZZVAxLcx5LRkPzAvLGs+ZPLBrDHr5gG+84QA99POEOLdygiQAm+7nCKvcjuIzfkmr82qGyC1+ta4xtwqaVYZH30KaZsSy+8jzuHvcB1waVx+QeHlU2l4oqvYGiQ57Zp9emblg3WdWhbnyGGmt0GK/rLE6sx/S6ZlT5THXrUyfrmSiyZ1vZLnPUGJEcjzapDPheUj+ITljYwk6i6rDm+kin47trqXeUFFDjUuspTTiVHq5Tp2SlfJMzCjh5Bxu0B2VWlNsfySRv2PnnqXH3S77DOf067yTPBtFbnrLqvfqP9ZlHRrfVWmYXJb6yo6YczrqI0h/4ZoqHAAAAeNpt0EVs03EUwPHv2ypb5+4b7tL/v+0Eb7f9cXdnsK0tjG10FBhOGC6BkHCDYBcguAYCHIDgFiTAgTMeDsAVuv1/3HiXT95LnuQRRVv8sdKN/8UnkCiJJhoLVmzYiSEWB3HEk0AiSSSTQipppJNBJllkk0MueeRTQCFFtKM9HehIJzrTha6RPd3pQU960Zs+9MWJho4LNx6KKaGUMvrRnwEMZBCDGYIXH+VUUInBUIYxnBGMZBSjGcNYxjGeCUxkEpOZwlSmMZ0ZzGQWs5nDXOZRJRaO0sImbrCfj2xmNzs4wHGOiZXtvGcj+8Qmdnaxldt8kBgOcoJf/OQ3RzjFA+5xmvksYA/VPKKG+zzkGY95wtPIj2p5yXNecAY/P9jLG17xmgBf+MY2FhJkEYupo55DNLCERkI0EWYpy1jOZ1awkmZWsYbVXOUw61jLejbwle9c4yznuM5b3kmsOCRO4iVBEiVJkiVFUiVN0iVDMjnPBS5zhTtc5BJ32cJJyeImtyRbctgpuZIn+VIghTZ/XXNjQLOH64NOp7PC1OtUqtynK13Kslb1SINSU+pKl9Kt9CiLlSXKUuW/eV5TTc3VNEdt0B8O1VRXNQXMkm6YegxLZTjU0JZ4jPJWDZ95R0Rd6VK6/wL2aJv4AAAAeNo9zTsKwkAUheFM3g9jXiPaRBJBBGcJNhYmCGnEKgFrl2BtY6lrubFyUe5BDzqZ7nyn+V/scyN21xpyD23P2KPra1u0JcVdQ/yIce1yssWp1cgoKjLEjsyiehozXfxgAeYAG7D2Eg5gbyRcwCklPMB9S/iAN5cIAD+XGAHB4g9GoayP8YZTXfRGfQEjcLxUjMHorJiA8VYxBROhmIHpWpGD2UpxAvJ8YEdcfAGjxlPkAAAAAAFTUDAEAAA=) format('woff'),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.ttf) format('truetype');font-weight:700;font-style:normal}@font-face{font-family:auth0;src:url(data:application/x-font-woff;charset=utf-8;base64,d09GRk9UVE8AAAcgAAsAAAAACZwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAABCAAAA+UAAASCwatINEZGVE0AAATwAAAAGgAAABxwUbV5R0RFRgAABQwAAAAdAAAAIAA3AARPUy8yAAAFLAAAAEUAAABgUB1e1mNtYXAAAAV0AAAAVgAAAWAGmxHSaGVhZAAABcwAAAAoAAAANgIRL3toaGVhAAAF9AAAABgAAAAkBC8CA2htdHgAAAYMAAAAGAAAABgEWgDsbWF4cAAABiQAAAAGAAAABgAKUABuYW1lAAAGLAAAAOQAAAHCKK5fFnBvc3QAAAcQAAAAEAAAACAAAwABeJxtU21MW1UYPrf09h5L1+nkmo01F11i5vxYGJCYzNUI27SZMtnAuYKJH/GjyBgJa7OWrMWWe9fSty3c9rZQC+FDBh1BfuHXwKkJQTHdDzP8IYn+0Bh+KD+MP85NDgmey4xf8Z775p73nOc87/O+77kcMpsRx3G7XvV5PdWPXW5//a03vIgzIQ7V6/tNuqNM32tO2DiwlYHNLFnRvuY92wB/TWxCHPSsrvEO1LvbgdDdDpS+x4EcDrO4B5kMml1o3z+5/xWHPSfR0+gMcqETqAE9w+w4shqnTOgnzslFTNh0xTRomjL9WNZhJyp5SpyL3OrJ9o1fzrX5ujCEw9RJnb1ZkHwzucXxsWzm1shcpmPW/wXcxN+Nfb2xMfacU4Lz/nMdF/D3FIlTmvKBXwupZ999W8PRPEzwM5OFJfgIfxVacrlCracleLnQNnMJgy8a4rv6mnuuKP5I8LWZMCYHLORzYhfvxAZQlGOxRBZy/Vm8ZGG8H/ozf/OO89MTIx/DAiyHPnHBVYjGoxDUAoO+5Eh2PF2EDRh7HuoxvOR3X+ic6yuxnLCdzJIpkbipm08rEJZlRQmDomLqJq3UTVt5w5dVJQ1ZVcWklSGZ8Ypq+Ol0FlQZG6cJG7zK/DQDQ1hRGPM2GRMHYokoRA0p0RjE6Qv0uJFEhIVQBu9QushRysyg1FR1UGWUCgAxkHFs13uIKE55h5q6PRi6epkkd+cQSN3zQytTk/lhUj49rTZfb/8WvsE/X1sjVmK91nBEgpPt9c2d710lu7uGQ9j3sDg71LfszQW02olXclh+H4b5G5PFEqzgNf/K4cP+pgYJmoqnbngxhJQO3hM+0u2PeN8JtMwHMTlrset1ZE2cL170VFFtq45ownyxOC8tCuul0vp66dQxiWr3tRHvorDq/rSx0e1ulMgCXRZJizAazAckumAJBIOBKtoiBPLBUbZpGc3nR6voCVInamk5UvWIEJHlSEROa9IvgpZmH7teuSneb6WdtEZ8wPo40cQD1v9fG9CrRVXeqTldo2t/dgwDCLSW1P6nVQ/Rg2SVrPLqTp1ZfTN6iwgAWxW8oUDaumTpYyqq9ApICDCQSKWSOJkQUslUIpXASdC7IQl8Ks5GP07ELalYIgZRfLpH3NoL5Byt5omXukQgt6mHOvk4QFyKxaL9O5cgGUvhOFAPeRLobT6SkTOSXmfJZFg8u65VgAiLel2hULBIVpPlwW3bXQWblf3X96IyjpMeffaHL6//fnHDSOxFUkOPMtU3aQ15Auj+Q3w5qdwklYeo8W7y5Z+RGmIAzlMDyDbYBIB3Lr/52+yvuPwPm18GiQAAAHicY2BgYGQAgvNxx36B6AuV5fYwGgBRiQbtAAB4nGNgZGBg4ANiCQYQYGJgBEJOIGYB8xgABK0APAAAAHicY2BmYmCcwMDKwMHow5jGwMDgDqW/MkgytDAwMDGwcjLAACMDEghIc01hcGBIZChgfPD/AYMeE5IaMFsBCBkB0W0JmgAAAHicY2BgYGaAYBkGRgYQiALyGMF8FgY7IM0BhExgmXSGgv//waxEGOv/ZLBaNrAoBwMnAyuQz8TADtTLwAgUhRhJQ8DGycrIxM4C4zLT2j4SAQDfNQiAAAB4nGNgZGBgAOIHp+p54vltvjJwMzGAwIXKcntkmokBLM4BoQAKzgfweJxjYGRgYGIAAj0wCWIzMqACJgAF0AA5AgAAAAIAAAAAHwCQACAAQAAbABsAAAABAABQAAAKAAB4nI2OMU7DMBiFP7dJJERnVLHgrWJIZKewVMw9AEP3So3SLImUpuo1mHqYnoMLcAw2noORYECqJdvf/97z7x+YccYQlhHfR56Q8Rx5yiNvkRNl3iOn3PIZOWNmHpQ0yY2U+fgq8ET5ReQpr7xETpS5RE654yNyxtykbDkysMeRc6JhR00lhe1x2Lv81OzqStUf60dc09FKCHc/mpaSQr0sK+3/en+7S7x0P7qlTs+TWnbtsO76urJl4ezK/p5C5dLn3uWl84peOflGYs9BgTCs1TdhQDZVf2i61vrCXdvqCzIWRhV4nGNgZkAGjAxoAAAAjgAF) format(\"woff\"),url(https://cdn.auth0.com/fonts/widget/fonts/auth0-widget.eot) format(\"embedded-opentype\"),url(https://cdn.auth0.com/fonts/widget/fonts/auth0-widget.ttf) format(\"truetype\"),url(https://cdn.auth0.com/fonts/widget/fonts/auth0-widget.svg#auth0-widget) format(\"svg\");font-weight:400;font-style:normal}#a0-lock.a0-theme-default .a0-iconbase,#a0-lock.a0-theme-default [class*=\" a0-icon-\"]:before,#a0-lock.a0-theme-default [class^=a0-icon-]:before{font-family:auth0!important;font-style:normal!important;font-weight:400!important;font-variant:normal!important;text-transform:none!important;speak:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}#a0-lock.a0-theme-default .a0-icon-budicon-2:before{content:\"d\"}#a0-lock.a0-theme-default .a0-icon-budicon-3:before{content:\"e\"}#a0-lock.a0-theme-default .a0-icon-budicon-9:before{content:\"p\"}#a0-lock.a0-theme-default .a0-icon-budicon-1:before{content:\"g\"}#a0-lock.a0-theme-default .a0-icon-budicon:before{content:\"c\"}#a0-lock.a0-theme-default .a0-icon-badge:before{content:\"f\"}#a0-lock.a0-theme-default .a0-icon-budicon-4:before{content:\"a\"}#a0-lock.a0-theme-default .a0-icon-budicon-5:before{content:\"b\"}#a0-lock.a0-theme-default .a0-btn-small{font-size:10px;letter-spacing:1px;text-transform:uppercase;border:1px solid #f1f1f1;padding:4px 10px 4px 11px;margin:0 5px;border-radius:100px;display:inline-block}#a0-lock.a0-theme-default .a0-btn-small:hover{background:#f1f1f1}#a0-lock.a0-theme-default .a0-btn-small:focus{background:#e9e9e9;border-color:#e9e9e9}#a0-lock.a0-theme-default .a0-panel{text-align:center;border-radius:3px;-webkit-box-shadow:0 1px 10px rgba(0,0,0,.4);box-shadow:0 1px 10px rgba(0,0,0,.4);font-size:13px;position:relative;color:#4d4d4d;display:block;zoom:1}#a0-lock.a0-theme-default .a0-panel *{font-family:proxima_nova!important}#a0-lock.a0-theme-default .a0-panel .a0-mode{-webkit-animation-name:fadein;-webkit-animation-duration:.3s;-webkit-animation-iteration-count:once;-webkit-animation-timing-function:ease-in;padding:0 20px 20px;margin:auto}#a0-lock.a0-theme-default .a0-panel *,#a0-lock.a0-theme-default .a0-panel input{font-smoothing:antialiased}#a0-lock.a0-theme-default .a0-panel a,#a0-lock.a0-theme-default .a0-panel button{-webkit-transition:all .2s ease;-moz-transition:all .2s ease;transition:all .2s ease;font-weight:700}#a0-lock.a0-theme-default .a0-panel .a0-header{margin-bottom:0;margin-top:0}#a0-lock.a0-theme-default .a0-panel .a0-header h1{font-size:24px;font-weight:100;margin-bottom:10px}#a0-lock.a0-theme-default .a0-panel .a0-icon-container{height:90px}#a0-lock.a0-theme-default .a0-panel .a0-icon-container .a0-image{margin:auto;display:inline-block;margin-bottom:10px;margin-top:20px}#a0-lock.a0-theme-default .a0-panel .a0-icon-container .a0-image.a0-gravatar img{border-radius:58px}#a0-lock.a0-theme-default .a0-panel .a0-icon-container .a0-image img{width:auto;height:58px}#a0-lock.a0-theme-default .a0-panel .a0-icon-container .a0-avatar{background:#f1f1f1;margin:auto;display:inline-block;margin-bottom:10px;border-radius:100%;width:60px;height:60px;margin-top:20px}#a0-lock.a0-theme-default .a0-panel .a0-icon-container .a0-avatar i{color:#EB5424;font-size:28px;display:block;padding-top:16px}#a0-lock.a0-theme-default .a0-panel .a0-footer{margin-top:0;margin-bottom:10px;display:block;overflow:hidden}#a0-lock.a0-theme-default .a0-panel .a0-footer .a0-logo{margin-top:0;display:block}#a0-lock.a0-theme-default .a0-panel .a0-footer .a0-logo i{color:#EB5424;font-size:18px}#a0-lock.a0-theme-default .a0-panel .a0-instructions{margin-bottom:10px;line-height:18px}#a0-lock.a0-theme-default .a0-panel .a0-last-time{font-size:14px;margin-bottom:20px}#a0-lock.a0-theme-default .a0-panel .a0-corporate-credentials{margin-bottom:10px}#a0-lock.a0-theme-default .a0-panel .a0-email,#a0-lock.a0-theme-default .a0-panel .a0-username{border-bottom:1px solid #ccc}#a0-lock.a0-theme-default .a0-panel .a0-password,#a0-lock.a0-theme-default .a0-panel .a0-repeatPassword{border-top:1px solid #ccc}#a0-lock.a0-theme-default .a0-panel .a0-password{border:0}#a0-lock.a0-theme-default .a0-panel .a0-not-loggedin .a0-email,#a0-lock.a0-theme-default .a0-panel .a0-reset .a0-email{border-top:0}#a0-lock.a0-theme-default .a0-panel .a0-sso-notice-container{margin-top:20px}#a0-lock.a0-theme-default .a0-panel .a0-sso-notice-container i{position:relative;top:1px;margin-right:2px;font-size:11px}#a0-lock.a0-theme-default .a0-panel .a0-sso-notice-container .a0-sso-notice{font-size:10px;text-transform:uppercase;letter-spacing:1px}#a0-lock.a0-theme-default .a0-panel .a0-email .a0-input-box,#a0-lock.a0-theme-default .a0-panel .a0-password .a0-input-box,#a0-lock.a0-theme-default .a0-panel .a0-repeatPassword .a0-input-box,#a0-lock.a0-theme-default .a0-panel .a0-username .a0-input-box{position:relative;height:50px}#a0-lock.a0-theme-default .a0-panel .a0-email .a0-input-box i,#a0-lock.a0-theme-default .a0-panel .a0-password .a0-input-box i,#a0-lock.a0-theme-default .a0-panel .a0-repeatPassword .a0-input-box i,#a0-lock.a0-theme-default .a0-panel .a0-username .a0-input-box i{font-size:14px;z-index:1000;top:18px;left:16px;position:absolute;color:#999}#a0-lock.a0-theme-default .a0-panel .a0-email input,#a0-lock.a0-theme-default .a0-panel .a0-password input,#a0-lock.a0-theme-default .a0-panel .a0-repeatPassword input,#a0-lock.a0-theme-default .a0-panel .a0-username input{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:16px 10px;padding-left:40px;border-radius:0;position:absolute;right:0;left:0;bottom:0;top:0;background:#fff;max-width:248px;width:100%}#a0-lock.a0-theme-default .a0-panel .a0-email input:focus,#a0-lock.a0-theme-default .a0-panel .a0-password input:focus,#a0-lock.a0-theme-default .a0-panel .a0-repeatPassword input:focus,#a0-lock.a0-theme-default .a0-panel .a0-username input:focus{background:#fff}#a0-lock.a0-theme-default .a0-panel input::-webkit-input-placeholder{color:#9da4ad;-webkit-transition:color .2s ease-in}#a0-lock.a0-theme-default .a0-panel input:-moz-placeholder{color:#9da4ad}#a0-lock.a0-theme-default .a0-panel input::-moz-placeholder{color:#9da4ad}#a0-lock.a0-theme-default .a0-panel input:-ms-input-placeholder{color:#9da4ad}#a0-lock.a0-theme-default .a0-panel input:focus::-webkit-input-placeholder{color:#666}#a0-lock.a0-theme-default .a0-panel input:focus:-moz-placeholder{color:#666}#a0-lock.a0-theme-default .a0-panel input:focus::-moz-placeholder{color:#666}#a0-lock.a0-theme-default .a0-panel input:focus:-ms-input-placeholder{color:#666}#a0-lock.a0-theme-default .a0-panel .a0-inputs{border:1px solid #ccc;border-radius:3px;overflow:hidden}#a0-lock.a0-theme-default .a0-panel .a0-email input{border-bottom:0;border-top-left-radius:3px;border-top-right-radius:3px}#a0-lock.a0-theme-default .a0-panel .a0-password input,#a0-lock.a0-theme-default .a0-panel .a0-username input{border-bottom-left-radius:3px;border-bottom-right-radius:3px}#a0-lock.a0-theme-default .a0-panel .a0-separator{margin-bottom:10px;margin-top:6px;color:#999;font-size:12px}#a0-lock.a0-theme-default .a0-panel .a0-separator span{letter-spacing:1px;text-transform:uppercase}#a0-lock.a0-theme-default .a0-panel button.a0-primary{padding:20px 10px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;text-align:center;text-transform:uppercase;font-weight:700;display:block!important;width:100%!important;float:none;min-width:auto;letter-spacing:1px;margin-bottom:20px;margin-top:20px;background-color:#16214D;color:#fff;cursor:pointer;border-radius:3px}#a0-lock.a0-theme-default .a0-panel button.a0-primary:hover{background:#0b1025}#a0-lock.a0-theme-default .a0-panel button.a0-primary:focus{background:#3e4975}#a0-lock.a0-theme-default .a0-panel input[disabled]{background-color:#d9dee0}#a0-lock.a0-theme-default .a0-panel .a0-success{color:green}#a0-lock.a0-theme-default .a0-panel .a0-error{color:red}#a0-lock.a0-theme-default .a0-panel .a0-error,#a0-lock.a0-theme-default .a0-panel .a0-success{margin-bottom:10px;padding:0 15px}#a0-lock.a0-theme-default .a0-panel.a0-errors.a0-errors-global{border-color:red}#a0-lock.a0-theme-default .a0-panel.a0-errors .a0-error-input i{color:red}#a0-lock.a0-theme-default .a0-panel.a0-errors .a0-error-input span{position:absolute;top:15px;right:14px;font-size:9px;letter-spacing:1px;text-transform:uppercase;color:red;border:1px solid red;padding:4px 6px 4px 7px;border-radius:3px;display:block;z-index:10000}#a0-lock.a0-theme-default .a0-panel.a0-errors .a0-error-input input{color:red}#a0-lock.a0-theme-default .a0-panel.a0-errors .a0-error-input input::-webkit-input-placeholder{color:red}#a0-lock.a0-theme-default .a0-panel.a0-errors .a0-error-input input:-moz-placeholder{color:red}#a0-lock.a0-theme-default .a0-panel.a0-errors .a0-error-input input::-moz-placeholder{color:red}#a0-lock.a0-theme-default .a0-panel.a0-errors .a0-error-input input:-ms-input-placeholder{color:red}#a0-lock.a0-theme-default .a0-panel .a0-close{position:absolute;top:20px;right:20px;display:block;cursor:pointer;font-size:16px;color:#ccc}#a0-lock.a0-theme-default .a0-panel .a0-close:hover{color:#333}#a0-lock.a0-theme-default .a0-panel .a0-signup-footer small{margin-top:10px;display:block}#a0-lock.a0-theme-default .a0-panel .a0-password_policy_arrow{background:#1F242E}#a0-lock.a0-theme-default .a0-panel .a0-password_policy_arrow:after{top:100%;left:18px;border:solid transparent;content:\" \";height:0;width:0;position:absolute;pointer-events:none;border-color:rgba(31,36,46,0);border-top-color:#1F242E;border-top-color:rgba(31,36,46,.95);border-width:9px;margin-left:-9px}#a0-lock.a0-theme-default .a0-panel .a0-password_policy{display:none;-webkit-animation-name:fadein;-webkit-animation-duration:.3s;-webkit-animation-iteration-count:once;-webkit-animation-timing-function:ease-in;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-inputs-wrapper{position:relative}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy{position:absolute;bottom:50px;left:2.5%;width:95%;display:block;text-align:left;margin-top:15px;padding:15px;padding-top:12px;background:#1F242E;background:rgba(31,36,46,.95);border-radius:5px;z-index:1000}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy:after{top:100%;left:18px;border:solid transparent;content:\" \";height:0;width:0;position:absolute;pointer-events:none;border-color:rgba(31,36,46,0);border-top-color:#1F242E;border-top-color:rgba(31,36,46,.95);border-width:9px;margin-left:-9px}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy li,#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy ul{margin:0;padding:0;list-style:none;color:#dd4b39}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy ul li ul li{color:#fff}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy ul li ul li:before{content:\"\";width:5px;height:5px;border-radius:7px;border:2px solid #fff;display:inline-block;top:7px;left:2px}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy ul li ul li.a0-checked:before{top:3px;left:0}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy li{line-height:1.5;margin-top:5px;font-size:12px;font-weight:600;-webkit-transition:color .3s ease-in;-moz-transition:color .3s ease-in;transition:color .3s ease-in;position:relative;padding-left:18px}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy li.a0-checked{color:#7ED321}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy li.a0-checked:before{font-family:auth0!important;font-style:normal!important;font-weight:400!important;font-variant:normal!important;text-transform:none!important;speak:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;content:\"a\";border:0;width:auto;height:auto;border-radius:0;font-size:12px}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy li:before{font-family:auth0!important;font-style:normal!important;font-weight:400!important;font-variant:normal!important;text-transform:none!important;speak:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;content:\"e\";margin-right:10px;font-size:11px;position:absolute;top:3px;left:0}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength #a0-change_password .a0-password_policy{bottom:100px}#a0-lock.a0-theme-default .a0-panel #a0-change_password .a0-password{margin-bottom:0}#a0-lock.a0-theme-default .a0-panel #a0-change_password .a0-password input{border-radius:0}#a0-lock.a0-theme-default .a0-panel #a0-change_password .a0-collapse-reset .a0-instructions{margin-top:0;margin-bottom:20px}#a0-lock.a0-theme-default .a0-panel #a0-change_password .a0-reset_easy_password input{border-bottom-right-radius:3px;border-bottom-left-radius:3px}#a0-lock.a0-theme-default .a0-sad-placeholder{display:none}#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-sad-placeholder{display:block;text-align:left;font-weight:700;margin:14px 0 10px}#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-inputs{border:0!important}#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-inputs .a0-email,#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-inputs .a0-password,#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-inputs .a0-repeatPassword,#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-inputs .a0-username{border:0}#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-inputs .a0-input-box{border:1px solid #ccc}#a0-lock.a0-theme-default .a0-no-placeholder-support .a0-inputs .a0-input-box input{border:0!important}#a0-lock.a0-theme-default .a0-cordova.a0-ios .a0-centrix{padding-top:20px}@media screen and (max-width:480px){#a0-lock.a0-theme-default .a0-ie8-overlay{background:none!important}#a0-lock.a0-theme-default #a0-onestep{-webkit-transition:none;-moz-transition:none;transition:none}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-emailPassword{position:static}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy{position:static;width:auto;left:auto;top:auto;background:0 0;padding:0 15px}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy li.a0-checked{color:#5E9D19}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy ul li ul li{color:#3e4975}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy ul li ul li:before{border-color:#3e4975}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy:before{text-transform:uppercase;display:block;margin-bottom:10px;font-size:11px;content:\"Password Policy:\";color:#999}#a0-lock.a0-theme-default .a0-panel.a0-active-pwd-strength .a0-password_policy:after{display:none}#a0-lock.a0-theme-default .a0-popup .a0-overlay{display:block;overflow:auto;position:absolute;background:#fff}#a0-lock.a0-theme-default .a0-popup .a0-centrix{vertical-align:top;display:block;position:static}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel{-webkit-box-shadow:none;box-shadow:none;background:#fff}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-mode{padding:0 20px 20px}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-icon-container{height:60px}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-icon-container .a0-image{margin-top:10px}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-icon-container .a0-image img{height:40px;width:auto}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-icon-container .a0-avatar{margin-top:10px;width:40px;height:40px}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-icon-container .a0-avatar i{font-size:20px;padding-top:10px}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel #a0-change_password .a0-collapse-reset .a0-instructions,#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel h1{margin-bottom:10px}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-db-actions,#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-options{margin-top:20px;font-size:14px}#a0-lock.a0-theme-default .a0-popup .a0-centrix .a0-panel .a0-footer{margin-top:40px}}@media screen and (max-width:480px){body.a0-lock-open>*{display:none}body.a0-lock-open .a0-lock-container{display:block}.a0-lock-container{background:#fff;opacity:1}}";

/**
 * Insert `css` in HEAD Element
 */

function insert (css) {
  var head = document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  head.appendChild(style);

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

/**
 * Auto-boot
 */

insert(style);

},{"fs":"/home/strider/workspace/node_modules/browserify/lib/_empty.js"}],"/home/strider/workspace/lib/is-small-screen/index.js":[function(require,module,exports){
module.exports = function () {
  return window.matchMedia && !window.matchMedia( "(min-width: 340px)" ).matches;
};
},{}],"/home/strider/workspace/lib/mode-kerberos/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var _ = require('underscore');
var $ = require('../bonzo-augmented');
var Emitter = require('events').EventEmitter;
var create = require('../object-create');
var template = require('./loggedin.ejs');
var buttonTmpl  = require('../html/zocial-button.ejs');
var stop = require('../stop-event');

/**
 * Expose KerberosPanel
 */

module.exports = KerberosPanel;

/**
 * Create `KerberosPanel`
 *
 * @param {Auth0Lock} widget
 * @param {Object} options
 * @constructor
 */

function KerberosPanel(widget, options) {
  if (!(this instanceof KerberosPanel)) {
    return new KerberosPanel(widget, options);
  };

  // Both `widget` and `options` are required
  if (2 !== arguments.length) {
    throw new Error('Missing parameters for KerberosPanel');
  }

  this.name = 'kerberos'
  this.widget = widget;
  this.options = this.resolveOptions(options);
  this.el = null;

  Emitter.call(this);
}

/**
 * Inherit from `EventEmitter`
 */

KerberosPanel.prototype = create(Emitter.prototype);

/**
 * Query for elements at `this.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */
KerberosPanel.prototype.query = function(selector) {
  if (!this.el) throw new Error('Can\'t get element since no `el` is set to local context');
  return $(selector, this.el);
};

/**
 * Create `el`
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

KerberosPanel.prototype.create = function(options) {
  var opts = this.resolveOptions(options);
  var widget = this.widget;

  this.el = $.create(widget.render(template, opts))[0];
  this.bindAll();
  return this.el;
}

/**
 * Return `el` or create it
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

KerberosPanel.prototype.render = function() {
  return null != this.el
    ? this.el
    : this.create.apply(this, arguments);
}

/**
 * Resolves login options passed to template
 *
 * @param {Object} options
 * @return {Object}
 * @private
 */

KerberosPanel.prototype.resolveOptions = function(options) {
  return _.extend({}, this.widget.options,  this.options, options);
};

/**
 * Bind events to `this.el`, like submit
 */
KerberosPanel.prototype.bindAll = function() {
  var self = this;
  var widget = this.widget;
  var options = this.options;

  var connection = widget.$ssoData.connection;
  //this could be ad or auth0-adldap
  var strategy_name = widget.$ssoData.strategy;
  var strategy = widget.$strategies[strategy_name];

  if (!strategy) return;

  this.query('form').a0_on('submit', function (e) {
    stop(e);
    widget._signInEnterprise(e);
  });

  var button = $.create(buttonTmpl({
    use_big_buttons: true,
    name: strategy_name,
    title: options.i18n.t('windowsAuthTitle').replace('{connection}', connection),
    css: strategy.css,
    imageicon: strategy.imageicon,
  }));

  this.query('.a0-last-time').html(options.i18n.t('signin:domainUserLabel'));

  this.query('.a0-strategy div').remove();

  this.query('.a0-strategy')
    .append(button);

  this.query('.a0-strategy .a0-zocial[data-strategy]').a0_on('click', function (e) {
    stop(e);
    widget._signinSocial(strategy_name, connection, null, self);
  });

  this.query('.a0-all').a0_on('click', function (e) {
    stop(e);
    // no need to check other panels since
    // no reset nor signup modes allow for
    // return user experience...
    widget._signinPanel(self.options);
  });
}

},{"../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","../html/zocial-button.ejs":"/home/strider/workspace/lib/html/zocial-button.ejs","../object-create":"/home/strider/workspace/lib/object-create/index.js","../stop-event":"/home/strider/workspace/lib/stop-event/index.js","./loggedin.ejs":"/home/strider/workspace/lib/mode-kerberos/loggedin.ejs","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/mode-kerberos/loggedin.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="a0-loggedin a0-mode">\n    <form novalidate>\n        <span class="a0-centered a0-last-time">', escape((3,  i18n.t('signin:returnUserLabel') )), '</span>\n        <div class="a0-strategy"></div>\n        <div class="a0-emailPassword a0-hide">\n            <div class="a0-email">\n                <span class="a0-email-readonly"></span>\n                <input name="email"\n                       type="email"\n                       value=""\n                       disabled\n                       placeholder="', escape((12,  i18n.t('signin:emailPlaceholder') )), '"\n                       title="', escape((13,  i18n.t('signin:emailPlaceholder') )), '"\n                       class="a0-hide">\n            </div>\n            <div class="a0-password">\n                <label class="a0-sad-placeholder">\n                  ', escape((18,  i18n.t('signin:passwordPlaceholder') )), '\n                </label>\n                <input name="password" type="password"\n                       autofocus\n                       placeholder="', escape((22,  i18n.t('signin:passwordPlaceholder') )), '"\n                       title="', escape((23,  i18n.t('signin:passwordPlaceholder') )), '">\n            </div>\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next" style="width: 100%;">', escape((26,  i18n.t('signin:action') )), '</button>\n                ');27; if (options.showForgot !== false) { ; buf.push('\n                <label class="a0-create-account">\n                  <a href="', escape((29,  options.resetLink || 'javascript: {}' )), '"\n                    class="a0-forgot-pass">', escape((30,  i18n.t('signin:forgotText') )), '</a>\n                </label>\n                ');32; } ; buf.push('\n            </div>\n        </div>\n        <a href="#" class="a0-centered a0-all a0-btn-small">', escape((35,  i18n.t('signin:all') )), '</a>\n    </form>\n</div>\n'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/mode-loading/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var _ = require('underscore');
var $ = require('../bonzo-augmented');
var Emitter = require('events').EventEmitter;
var create = require('../object-create');
var template = require('./loading.ejs');

/**
 * Expose LoadingPanel
 */

module.exports = LoadingPanel;

/**
 * Create `LoadingPanel`
 *
 * @param {Auth0Lock} widget
 * @param {Object} options
 * @constructor
 */

function LoadingPanel(widget, options) {
  if (!(this instanceof LoadingPanel)) {
    return new LoadingPanel(widget, options);
  };

  // Both `widget` and `options` are required
  if (2 !== arguments.length) {
    throw new Error('Missing parameters for LoadingPanel');
  }

  this.name = 'loading';
  this.widget = widget;
  this.options = this.resolveOptions(options);
  this.el = null;

  Emitter.call(this);
}

/**
 * Inherit from `EventEmitter`
 */

LoadingPanel.prototype = create(Emitter.prototype);

/**
 * Query for elements at `this.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */

LoadingPanel.prototype.query = function(selector) {
  if (!this.el) throw new Error('Can\'t get element since no `el` is set to local context');
  return $(selector, this.el);
}

/**
 * Create `el`
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

LoadingPanel.prototype.create = function(options) {
  var opts = this.resolveOptions(options);
  var widget = this.widget;

  this.el = $.create(widget.render(template, opts))[0];
  this.bindAll();
  return this.el;
}

/**
 * Return `el` or create it
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

LoadingPanel.prototype.render = function() {
  return null != this.el
    ? this.el
    : this.create.apply(this, arguments);
}

/**
 * Resolves login options passed to template
 *
 * @param {Object} options
 * @return {Object}
 * @private
 */

LoadingPanel.prototype.resolveOptions = function(options) {
  return _.extend({}, this.widget.options,  this.options, options);
}

/**
 * Bind events to `this.el`, like submit
 */

LoadingPanel.prototype.bindAll = function() {
  return this;
}

},{"../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","../object-create":"/home/strider/workspace/lib/object-create/index.js","./loading.ejs":"/home/strider/workspace/lib/mode-loading/loading.ejs","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/mode-loading/loading.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="a0-loading a0-mode">\n    ');2; if (locals.alt_spinner) { ; buf.push('\n    <div class="a0-spinner a0-spin-img" style="background-image: url(\'', escape((3,  locals.alt_spinner )), '\')"></div>\n    ');4; } else { ; buf.push('\n    <div class="a0-spinner a0-spin-container">\n        <div class="a0-spinner-css">\n          <span class="a0-side a0-sp_left">\n            <span class="a0-fill"></span>\n          </span>\n          <span class="a0-side a0-sp_right">\n            <span class="a0-fill"></span>\n          </span>\n        </div>\n        <div class="a0-spin-message">\n            <span>&nbsp;</span>\n        </div>\n    </div>\n    ');18; } ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/mode-loggedin/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var Emitter = require('events').EventEmitter;
var create = require('../object-create');
var template = require('./loggedin.ejs');
var loggedinBtnTmpl = require('./loggedin_button.ejs');
var stop = require('../stop-event');
var _ = require('underscore');
var $ = require('../bonzo-augmented');
var gravatar = require('../gravatar');

/**
 * Expose LoggedinPanel
 */

module.exports = LoggedinPanel;

/**
 * Create `LoggedinPanel`
 *
 * @param {Auth0Lock} widget
 * @param {Object} options
 * @constructor
 */

function LoggedinPanel(widget, options) {
  if (!(this instanceof LoggedinPanel)) {
    return new LoggedinPanel(widget, options);
  }

  // Both `widget` and `options` are required
  if (2 !== arguments.length) {
    throw new Error('Missing parameters for LoggedinPanel');
  }

  this.name = 'loggedin';
  this.widget = widget;
  this.options = this.resolveOptions(options);
  this.el = null;

  Emitter.call(this);
}

/**
 * Inherit from `EventEmitter`
 */

LoggedinPanel.prototype = create(Emitter.prototype);

/**
 * Query for elements at `this.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */

LoggedinPanel.prototype.query = function(selector) {
  if (!this.el) { throw new Error('Can\'t get element since no `el` is set to local context'); }
  return $(selector, this.el);
};

/**
 * Create `el`
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

LoggedinPanel.prototype.create = function(options) {
  var opts = this.resolveOptions(options);
  var widget = this.widget;

  this.el = $.create(widget.render(template, opts))[0];
  this.bindAll();
  return this.el;
};

/**
 * Return `el` or create it
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

LoggedinPanel.prototype.render = function() {
  return null != this.el
    ? this.el
    : this.create.apply(this, arguments);
};

/**
 * Resolves login options passed to template
 *
 * @param {Object} options
 * @return {Object}
 * @private
 */

LoggedinPanel.prototype.resolveOptions = function(options) {
  return _.extend({}, this.widget.options,  this.options, options);
};

/**
 * Bind events to `this.el`, like submit
 */

LoggedinPanel.prototype.bindAll = function() {
  var self = this;
  var widget = this.widget;
  var options = this.options;

  var strategy_name = widget.$ssoData.lastUsedConnection.strategy;
  var strategy = widget.$strategies[strategy_name];

  if (!strategy) { return; }

  this.query('form').a0_on('submit', function (e) {
    stop(e);
    widget._signInEnterprise(e);
  });

  if (options.gravatar) {
    gravatar(this.widget, widget.$ssoData.lastUsedUsername);
  }


  var button = $.create(loggedinBtnTmpl({
    name: strategy_name,
    title: strategy.title,
    css: strategy.css,
    imageicon: strategy.imageicon,
    username: widget.$ssoData.lastUsedUsername
  }));

  this.query('.a0-last-time').html(options.i18n.t('signin:returnUserLabel'));

  this.query('.a0-strategy div').remove();

  this.query('.a0-strategy').append(button);

  this.query('.a0-strategy .a0-zocial[data-strategy]').a0_on('click', function (e) {
    stop(e);

    widget._signinSocial(
      strategy_name,
      widget.$ssoData.lastUsedConnection && widget.$ssoData.lastUsedConnection.name,
      options._getLoggedInAuthParams(strategy_name, widget.$ssoData),
      self
    );
  });

  this.query('.a0-all').a0_on('click', function (e) {
    stop(e);
    // no need to check other panels since
    // no reset nor signup modes allow for
    // return user experience...
    gravatar(widget, '');
    widget._signinPanel(self.options);
  });

};

LoggedinPanel.prototype.query = function(selector) {
  return $(selector, this.el);
};

},{"../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","../gravatar":"/home/strider/workspace/lib/gravatar/index.js","../object-create":"/home/strider/workspace/lib/object-create/index.js","../stop-event":"/home/strider/workspace/lib/stop-event/index.js","./loggedin.ejs":"/home/strider/workspace/lib/mode-loggedin/loggedin.ejs","./loggedin_button.ejs":"/home/strider/workspace/lib/mode-loggedin/loggedin_button.ejs","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/mode-loggedin/loggedin.ejs":[function(require,module,exports){
arguments[4]["/home/strider/workspace/lib/mode-kerberos/loggedin.ejs"][0].apply(exports,arguments)
},{}],"/home/strider/workspace/lib/mode-loggedin/loggedin_button.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div tabindex="0"\n		data-strategy="', escape((2,  name )), '"\n		title="', escape((3,  username ? (username + ' (' + title + ')') : title )), '"\n		class="a0-zocial a0-block a0-', escape((4,  css )), ' ', escape((4,  locals.imageicon ? 'a0-image-icon' : '' )), '">\n	<span>', escape((5,  username || title )), '</span>\n</div>'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/mode-reset/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var _ = require('underscore');
var $ = require('../bonzo-augmented');
var Emitter = require('events').EventEmitter;
var create = require('../object-create');
var stop = require('../stop-event');
var bind = require('../bind');
var template = require('./reset.ejs');
var regex = require('../regex');
var PasswordStrength = require('../password-strength');
var empty = regex.empty;
var trim = require('trim');
var email_parser = regex.email_parser;
var slice = Array.prototype.slice;

/**
 * Expose ResetPanel
 */

module.exports = ResetPanel;

/**
 * Create `ResetPanel`
 *
 * @param {Auth0Lock} widget
 * @param {Object} options
 * @constructor
 */

function ResetPanel(widget, options) {
  if (!(this instanceof ResetPanel)) {
    return new ResetPanel(widget, options);
  }

  // Both `widget` and `options` are required
  if (2 !== arguments.length) {
    throw new Error('Missing parameters for ResetPanel');
  }

  this.name = 'reset';
  this.widget = widget;
  this.options = this.resolveOptions(options);
  this.el = null;

  Emitter.call(this);
}

/**
 * Inherit from `EventEmitter`
 */

ResetPanel.prototype = create(Emitter.prototype);

/**
 * Query for elements at `this.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */

ResetPanel.prototype.query = function(selector) {
  if (!this.el) throw new Error('Can\'t get element since no `el` is set to local context');
  return $(selector, this.el);
};

/**
 * Create `el`
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

ResetPanel.prototype.create = function(options) {
  var opts = this.resolveOptions(options);
  var widget = this.widget;

  this.el = $.create(widget.render(template, opts))[0];
  this.bindAll();
  return this.el;
};

/**
 * Return `el` or create it
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

ResetPanel.prototype.render = function() {
  return null != this.el ? this.el : this.create.apply(this, arguments);
};

/**
 * Resolves login options passed to template
 *
 * @param {Object} options
 * @return {Object}
 * @private
 */

ResetPanel.prototype.resolveOptions = function(options) {
  return _.extend({}, this.widget.options,  this.options, options);
};

/**
 * Bind events to `this.el`, like submit
 *
 * @return {ResetPanel}
 * @private
 */

ResetPanel.prototype.bindAll = function() {
  var options = this.options;

  // hide only and only if set to false
  this.query('.a0-options')
    .toggleClass('a0-hide', !options.showResetAction);

  this.query('form')
    .a0_off('submit')
    .a0_on('submit', bind(this.onsubmit, this));

  this.query('.a0-options .a0-cancel')
    .a0_on('click', bind(this.oncancel, this));

  var passwordStrength = new PasswordStrength(this.query('.a0-password_policy'),
                                              this.query('#a0-reset_easy_password'),
                                              this.options);

  return this;
};

/**
 * Handler for `submit` form event
 *
 * @param {Event} e
 * @private
 */

ResetPanel.prototype.onsubmit = function(e) {
  stop(e);

  if (!this.valid()) { return; }
  this.submit();
};

/**
 * Handler for `cancel` event click
 *
 * @param {Event} e
 * @private
 */

ResetPanel.prototype.oncancel = function(e) {
  stop(e);
  var widget = this.widget;
  widget._showSuccess();
  widget._showError();
  widget._focusError();
  widget._signinPanel();
};

/**
 * Validate form for errros before `submit`
 *
 * @private
 */

ResetPanel.prototype.valid = function () {
  var ok = true;
  var email_input = this.query('input[name=email]');
  var email = trim(email_input.val());
  var email_empty = empty.test(email);
  var email_parsed = email_parser.exec(email.toLowerCase());
  var validate_username = this.options._isUsernameRequired();
  var username_parsed = regex.username_parser.exec(email_input.val().toLowerCase());
  var password_input = this.query('input[name=password]');
  var password = password_input.val();
  var password_empty = empty.test(password);
  var repeat_password_input = this.query('input[name=repeat_password]');
  var repeat_password = repeat_password_input.val();
  var repeat_password_empty = empty.test(repeat_password);
  var widget = this.widget;

  // asume valid by default
  // and reset errors
  widget._showError();
  widget._focusError();

  if (email_empty) {
    widget._focusError(email_input);
    ok = false;
  }

  if (!email_parsed && !email_empty) {
    if(validate_username && !username_parsed) {
      ok = false || (validate_username && username_parsed);
      if(!ok) widget._focusError(email_input, widget.options.i18n.t('invalid'));
    }
  }

  if (password_empty) {
    widget._focusError(password_input);
    ok = false;
  }

  if (repeat_password_empty) {
    widget._focusError(repeat_password_input);
    ok = false;
  }

  if (repeat_password_input.val() !== password_input.val()) {
    widget._focusError(repeat_password_input, widget.options.i18n.t('mustMatch'));
    ok = false;
  }

  return ok;
}

/**
 * Submit validated form to Auth0 for password reset
 *
 * @private
 */

ResetPanel.prototype.submit = function () {
  var panel = this;
  var widget = panel.widget;
  var email_input = this.query('input[name=email]');
  var username = email_input.val();
  var password_input = this.query('input[name=password]');
  var password = password_input.val();
  var repeat_password_input = this.query('input[name=repeat_password]');
  var connection  = this.options._getAuth0Connection();
  var callback = panel.options.popupCallback;

  widget._loadingPanel({ mode: 'reset' });

  widget.$auth0.changePassword({
    connection: connection.name,
    username:   username,
    password:   password
  }, function (err) {
    var args = slice.call(arguments, 0);

    // This is now dummy, and should no longer exist since all
    // dom events keep a reference to widget.$container
    if ( !widget.$container || widget.query()[0] !== widget.$container.childNodes[0] ) {
      return console && console.log && console.log('this password reset was triggered from another node instance', arguments);
    }

    // clean password input either there is an error or not
    password_input.val('');
    repeat_password_input.val('');

    if (!err) {
      email_input.val('');
      widget._signinPanel(panel.options);
      widget._showSuccess(widget.options.i18n.t('reset:successText'));

      return 'function' === typeof callback ? callback.apply(widget, args) : null;
    }

    widget.setPanel(panel);

    if (400 === err.status) {
      if ('invalid_password' === err.name) {
        widget._focusError(email_input);
        widget._showError(widget.options.i18n.t('reset:invalidPassword'));
        return;
      }
      widget._focusError(email_input);
      widget._showError(widget.options.i18n.t('reset:userDoesNotExistErrorText'));
    } else {
      widget._showError(widget.options.i18n.t('reset:serverErrorText'));
    }

    return 'function' === typeof callback ? callback.apply(widget, args) : null;

  });

}

},{"../bind":"/home/strider/workspace/lib/bind/index.js","../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","../object-create":"/home/strider/workspace/lib/object-create/index.js","../password-strength":"/home/strider/workspace/lib/password-strength/index.js","../regex":"/home/strider/workspace/lib/regex/index.js","../stop-event":"/home/strider/workspace/lib/stop-event/index.js","./reset.ejs":"/home/strider/workspace/lib/mode-reset/reset.ejs","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","trim":"/home/strider/workspace/node_modules/trim/index.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/mode-reset/reset.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="a0-reset a0-mode">\n    <form id="a0-change_password" class="form-reset-password" novalidate>\n        <div class="a0-collapse-reset">\n            <div class="a0-header a0-instructions">', escape((4,  i18n.t('reset:headerText') )), '</div>\n        </div>\n        <div class="a0-emailPassword">\n            <div class="a0-inputs-wrapper">\n              <div class="a0-inputs">\n\n                  <div class="a0-email">\n                      ');11;
                        var emailPlaceholder = i18n.t('signin:emailPlaceholder')
                          + ( _isUsernameRequired() ? ' / ' + i18n.t('signin:usernamePlaceholder') : '' )
                        var inputBudicon = _isUsernameRequired() || 'username' === usernameStyle ? '1' : '5';
                      ; buf.push('\n                      <label for="a0-reset_easy_email" class="a0-sad-placeholder">\n                        ', escape((17,  emailPlaceholder )), '\n                      </label>\n                      <div class="a0-input-box">\n                        <i class="a0-icon-budicon-', escape((20,  inputBudicon )), '"></i>\n                        <input name="email"\n                             id="a0-reset_easy_email"\n                             type="email"\n                             value=""\n                             placeholder="', escape((25,  emailPlaceholder )), '"\n                             title="', escape((26,  emailPlaceholder )), '">\n                      </div>\n                  </div>\n                  <div class="a0-password">\n                      <label for="a0-reset_easy_password" class="a0-sad-placeholder">\n                        ', escape((31,  i18n.t('reset:passwordPlaceholder') )), '\n                      </label>\n                      <div class="a0-input-box">\n                        <i class="a0-icon-budicon"></i>\n                        <input name="password"\n                             id="a0-reset_easy_password"\n                             type="password"\n                             value=""\n                             placeholder="', escape((39,  i18n.t('reset:passwordPlaceholder') )), '"\n                             title="', escape((40,  i18n.t('reset:passwordPlaceholder') )), '">\n                      </div>\n                  </div>\n                  <div class="a0-repeatPassword">\n                      <label for="a0-reset_easy_repeat_password" class="a0-sad-placeholder">\n                        ', escape((45,  i18n.t('reset:repeatPasswordPlaceholder') )), '\n                      </label>\n                      <div class="a0-input-box">\n                        <i class="a0-icon-budicon"></i>\n                        <input name="repeat_password"\n                             id="a0-reset_easy_repeat_password"\n                             type="password" value=""\n                             placeholder="', escape((52,  i18n.t('reset:repeatPasswordPlaceholder') )), '"\n                             title="', escape((53,  i18n.t('reset:repeatPasswordPlaceholder') )), '">\n                      </div>\n                  </div>\n\n              </div>\n              <div class="a0-password_policy"></div>\n            </div>\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next" style="width: 100%;">', escape((61,  i18n.t('reset:action') )), '</button>\n                <div class="a0-options">\n                    <a href="javascript: {}" class="a0-centered a0-btn-small a0-cancel">', escape((63,  i18n.t('reset:cancelAction') )), '</a>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/mode-signin/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var _ = require('underscore');
var bind = require('../bind');
var regex = require('../regex');
var stop = require('../stop-event');
var $ = require('../bonzo-augmented');
var template = require('./signin.ejs');
var create = require('../object-create');
var Emitter = require('events').EventEmitter;
var buttonTmpl = require('../html/zocial-button.ejs');
var loginActionsTmpl = require('./login_actions.ejs');
var gravatar = require('../gravatar');

/**
 * Expose SigninPanel
 */

module.exports = SigninPanel;

/**
 * Create `SigninPanel`
 *
 * @param {Auth0Lock} widget
 * @param {Object} options
 * @constructor
 */

function SigninPanel(widget, options) {
  if (!(this instanceof SigninPanel)) {
    return new SigninPanel(widget, options);
  }

  // Both `widget` and `options` are required
  if (2 !== arguments.length) {
    throw new Error('Missing parameters for SigninPanel');
  }

  this.name = 'signin';
  this.widget = widget;
  this.options = this.resolveOptions(options);
  this.el = null;

  // debounce gravatar update method
  this.gravatar = _.debounce(this.gravatar, 300);

  Emitter.call(this);
}

/**
 * Inherit from `EventEmitter`
 */

SigninPanel.prototype = create(Emitter.prototype);

/**
 * Query for elements at `this.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */

SigninPanel.prototype.query = function(selector) {
  if (!this.el) { throw new Error('Can\'t get element since no `el` is set to local context'); }
  return $(selector, this.el);
};

/**
 * Create `el`
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

SigninPanel.prototype.create = function(options) {
  var opts = this.resolveOptions(options);
  var widget = this.widget;

  this.el = $.create(widget.render(template, opts))[0];
  this.bindAll();
  return this.el;
};

/**
 * Return `el` or create it
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

SigninPanel.prototype.render = function() {
  return null != this.el
    ? this.el
    : this.create.apply(this, arguments);
};

/**
 * Resolves login options passed to template
 *
 * @param {Object} options
 * @return {Object}
 * @private
 */

SigninPanel.prototype.resolveOptions = function(options) {
  return _.extend({}, this.widget.options,  this.options, options);
};

/*
 * Render and bind social strategies
 *
 *@private
 */
SigninPanel.prototype.renderAndBindSocialStrategies = function () {
  var options = this.options;

  // load social buttons
  var list = this.query('.a0-iconlist');

  var socialStrategies = _.chain(options.$client.strategies).where({ social: true });

  if (options.connections) {
    // sort social strategies based on options.connections array order
    var connections = options.connections;
    socialStrategies = socialStrategies.map(function (s) {
      var n = connections.indexOf(s.connections[0].name);
      connections[n] = '';
      return [n, s];
    }).sort().map(function (x) { return x[1]; });
  }

  socialStrategies
    .map(function (s) {
      var e = {
        use_big_buttons: options._useBigSocialButtons(),
        title: options.i18n.t('loginSocialButton').replace('{connection:title}', s.title)
      };
      return  _.extend({}, s, e);
    })
    .each(function (s) { return list.append(buttonTmpl(s)); });

  if (options._getSocialStrategies().length > 0) {
    this.query('.a0-separator, .a0-iconlist').toggleClass('a0-hide', false);
  }

  this.query('.a0-zocial[data-strategy]', list).a0_on('click', bind(this.onsocialclick, this));
};

/**
 * Bind events to `this.el`, like submit
 *
 * @return {SigninPanel}
 * @private
 */

SigninPanel.prototype.bindAll = function() {
  var widget = this.widget;
  var options = this.options;

  this.renderAndBindSocialStrategies();

  // register email validation stuff
  this.query('.a0-email input').a0_on('input', bind(this.onemailinput, this));

  // bind to submit
  this.query('form').a0_on('submit', bind(this.onsubmit, this));

  var actions = $.create(widget.render(loginActionsTmpl, options));
  this.query('.a0-db-actions').append(actions);

  // set username mode
  if (options.usernameStyle === 'username') {
    var placeholder = options.i18n.t('signin:usernamePlaceholder');

    this.query('.a0-email input')
      .attr('type', 'text')
      .attr('title', placeholder)
      .attr('placeholder', placeholder);

    this.query('.a0-email label').text(placeholder);
  }

  var signup_btn = this.query('.a0-sign-up');
  if (!options.signupLink && signup_btn.length > 0) {
    signup_btn.a0_on('click', bind(this.onsignupclick, this));
  }

  if (!options.resetLink) {
    this.query('.a0-forgot-pass').a0_on('click', bind(this.onresetclick, this));
  }

  this.query('input').val('');

  // show email, password, separator and button if there are enterprise/db connections
  var anyEnterpriseOrDbConnection = options._isThereAnyEnterpriseOrDbConnection();
  var anySocialConnection = options._isThereAnySocialConnection();
  var anyDBConnection = options._isThereAnyDBConnection();

  this.query('.a0-email input').toggleClass('a0-hide', !anyEnterpriseOrDbConnection);
  this.query('.a0-zocial.a0-primary').toggleClass('a0-hide', !anyEnterpriseOrDbConnection);
  this.query('.a0-password').toggleClass('a0-hide', !anyDBConnection);
  this.query('.a0-separator').toggleClass('a0-hide', !(anyEnterpriseOrDbConnection && anySocialConnection));

  this.query('.a0-inputs').toggleClass('a0-hide', !anyEnterpriseOrDbConnection);
  this.query('.a0-action').toggleClass('a0-hide', !anyEnterpriseOrDbConnection);

};

/**
 * Show or hide password input whether it is or is not
 * an enterprise connection
 * XXX: This should be moved to `SigninPanel` view
 *
 * @param {Event} e
 * @private
 */

SigninPanel.prototype.onemailinput = function (e) {
  stop(e);
  var mailField   = this.query('.a0-email input');
  var pwdField    = this.query('.a0-password input').first();
  var nextButton  = this.query('.a0-action > button.a0-next');

  var emailDomain = this.options._extractEmailDomain(mailField.val() || '');

  var isEnterpriseConnection = this.options._isEnterpriseConnection(mailField.val() || '');
  var adConnection = this.options._findConnectionByADDomain(emailDomain);
  var msg;

  if ('username' !== this.options.usernameStyle && this.options.gravatar) {
    this.gravatar(mailField.val());
  }

  // TODO Refactor
  if ('username' !== this.options.usernameStyle && adConnection) {
    this.hrd = true;
    this.currentADConnection = adConnection;
    this.currentADConnectionDomain = emailDomain;

    this.query('.a0-sso-notice-container').removeClass('a0-hide');
    this.query('.a0-password').addClass('a0-hide');
    this.oldText = nextButton.text();

    msg = this.options.i18n.t('signin:actionDomain');
    msg = msg.replace('{domain}', emailDomain);

    nextButton.text(msg);
    nextButton.attr('title', msg);

    return pwdField.attr('disabled', true);
  }

  this.hrd = undefined;
  this.currentADConnection = undefined;
  if (this.oldText) {
    nextButton.text(this.oldText);
    nextButton.attr('title', this.oldText);
    this.oldText = undefined;
  }

  if (isEnterpriseConnection) {
    this.query('.a0-sso-notice-container').removeClass('a0-hide');
    this.query('.a0-password').addClass('a0-hide');
    this.oldText = nextButton.text();

    msg = this.options.i18n.t('signin:actionDomain');
    msg = msg.replace('{domain}', emailDomain);

    nextButton.text(msg);
    nextButton.attr('title', msg);

    return pwdField.attr('disabled', true);
  }

  this.query('.a0-sso-notice-container').addClass('a0-hide');
  this.query('.a0-password').removeClass('a0-hide');

  return pwdField.removeAttr('disabled');
};

/**
 * Invoke gravatar update for `email`
 *
 * @param {String} email
 * @private
 */

SigninPanel.prototype.gravatar = function(email) {
  gravatar(this.widget, email);
  return this;
}

/**
 * Validate form and continue with signin
 *
 * @param {Event} e
 * @private
 */
SigninPanel.prototype.onsubmit = function(e) {
  stop(e);
  var widget = this.widget;
  var options = this.options;

  var ok = true;
  var password_input = this.query('input[name=password]');
  var password_empty = regex.empty.test(password_input.val());
  var password_disabled = password_input.attr('disabled');
  var password_required = options._isThereAnyDBConnection();

  var validate_username = options._isUsernameRequired();
  var email_input = this.query('input[name=email]');
  var email_parsed = regex.email_parser.exec(email_input.val().toLowerCase());
  var username_parsed = regex.username_parser.exec(email_input.val().toLowerCase());
  var email_empty = regex.empty.test(email_input.val());

  // Clean error container
  widget._showError();
  widget._focusError();

  if (email_empty) {
    widget._focusError(email_input);
    ok = false;
  }

  if (!widget._ignoreEmailValidations(email_input)) {
    if (!email_parsed && !email_empty) {
      ok = false || (validate_username && username_parsed);
      if(!ok) widget._focusError(email_input, options.i18n.t('invalid'));
    }
  }

  if (password_empty && password_required && !password_disabled) {
    widget._focusError(password_input);
    ok = false;
  }

  if (this.hrd) {
    return this.enableHRD(this.currentADConnection, this.currentADConnectionDomain);

  }

  if (ok && this.currentADConnection) {
    var conn_obj = this.options._findConnectionByADDomain(
      this.currentADConnection.domain,
      widget.$client.strategies
    );
    return widget._signinWithAuth0(this, conn_obj);
  }

  if (ok) { return widget._signin(this); }
};

/**
 * Handle `e` for social connections button click
 *
 * @param {Event} e
 * @private
 */

SigninPanel.prototype.onsocialclick = function(e) {
    stop(e);
    this.widget._signinSocial(e, null, null, this);
};

/**
 * Handle `e` for reset button action click
 *
 * @param {Event} e
 * @private
 */

SigninPanel.prototype.onresetclick = function(e) {
  stop(e);
  this.widget._resetPanel(this.options);
};

/**
 * Handle `e` for signup button action click
 *
 * @param {Event} e
 * @private
 */

SigninPanel.prototype.onsignupclick = function(e) {
  stop(e);
  this.widget._signupPanel(this.options);
};


/**
 * Enables Home Realm Discovery in signin
 *
 * @param {Connection} conn
 * @private
 */
// TODO Refactor
SigninPanel.prototype.enableHRD = function (adConnection, emailDomain) {
  this.hrd = undefined;

  var emailField = this.query('.a0-email input').first();
  var pwdField   = this.query('.a0-password input').first();
  var nextButton = this.query('.a0-action > button.a0-next');

  var emailParsed = regex.email_parser.exec(emailField.val());

  this.query('.a0-password').removeClass('a0-hide');
  this.query('.a0-sso-notice-container').addClass('a0-hide');
  nextButton.text(this.oldText);
  pwdField.removeAttr('disabled');

  this.widget.setPanel(this);

  var placeholder = this.options.i18n.t('signin:usernamePlaceholder');

  this._oldPlaceholder = emailField.attr('title');

  emailField
  .attr('type', 'text')
  .attr('title', placeholder)
  .attr('placeholder', placeholder);

  this.query('.a0-email label').text(placeholder);
  emailField.focus();
  if (emailParsed.length > 1 && this.options.defaultADUsernameFromEmailPrefix) {
    emailField.val(emailParsed[1]);
  } else {
    emailField.val('');
  }

  this.query('.a0-corporate-credentials').toggleClass('a0-hide');
  this.query('.a0-domain').text(emailDomain);

  // Hide other actions buttons
  var actions = $.create(this.widget.render(loginActionsTmpl, {
    showSignupAction: false,
    showResetAction: false,
    showCancel: true
  }));

  this.query('.a0-db-actions').first().deepEach(function (child) {
    $(child).hide();
  });
  this.query('.a0-db-actions').append(actions);
  this.query('.a0-db-actions').show();

  this.query('.a0-cancel').a0_on('click', bind(this.oncancel, this));
  this.currentADConnection = adConnection;
  emailField.a0_off('input');
};


/**
 * Handle `e` for cancel button action click (when doing HRD)
 *
 * @param {Event} e
 * @private
 */
// TODO Refactor
SigninPanel.prototype.oncancel = function (e) {
  stop(e);

  this.currentADConnection = undefined;

  var widget = this.widget;
  // Clean error container
  widget._showError();
  widget._focusError();
  widget.setPanel(this);

  var emailField = this.query('.a0-email input').first();
  var pwdField   = this.query('.a0-password input').first();

  this.query('.a0-db-actions').first().deepEach(function (child) {
    $(child).show();
  });

  var oldPlaceholder = this._oldPlaceholder;
  this._oldPlaceholder = undefined;

  this.query('.a0-db-actions .a0-cancel').remove();
  emailField
    .attr('type', 'text')
    .attr('title', oldPlaceholder)
    .attr('placeholder', oldPlaceholder);

  emailField.val('');
  pwdField.val('');

  this.query('.a0-email label').text(oldPlaceholder);

  this.query('.a0-corporate-credentials').toggleClass('a0-hide');
  emailField.a0_on('input', bind(this.onemailinput, this));
  emailField.focus();
};



},{"../bind":"/home/strider/workspace/lib/bind/index.js","../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","../gravatar":"/home/strider/workspace/lib/gravatar/index.js","../html/zocial-button.ejs":"/home/strider/workspace/lib/html/zocial-button.ejs","../object-create":"/home/strider/workspace/lib/object-create/index.js","../regex":"/home/strider/workspace/lib/regex/index.js","../stop-event":"/home/strider/workspace/lib/stop-event/index.js","./login_actions.ejs":"/home/strider/workspace/lib/mode-signin/login_actions.ejs","./signin.ejs":"/home/strider/workspace/lib/mode-signin/signin.ejs","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/mode-signin/login_actions.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="a0-create-account a0-buttons-actions">\n  ');2; if (locals.showCancel) { ; buf.push('\n  <a href="', escape((3,  locals.cancelLink || 'javascript: {}' )), '"\n    class="a0-cancel  a0-btn-small">', escape((4,  i18n.t('signin:cancelAction') )), '</a>\n  ');5; } ; buf.push('\n  ');6; if (showSignupAction) { ; buf.push('\n  <a href="', escape((7,  locals.signupLink || 'javascript: {}' )), '"\n    class="a0-sign-up a0-btn-small">\n    ', escape((9,  i18n.t('signin:signupText') )), '\n  </a>\n  ');11; } ; buf.push('\n  ');12; if (showSignupAction && showResetAction) { ; buf.push('\n  <span class="a0-divider"></span>\n  ');14; } ; buf.push('\n  ');15; if (showResetAction) { ; buf.push('\n  <a href="', escape((16,  locals.resetLink || 'javascript: {}' )), '"\n    class="a0-forgot-pass  a0-btn-small">', escape((17,  i18n.t('signin:forgotText') )), '</a>\n  ');18; } ; buf.push('\n</div>\n'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/mode-signin/signin.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="a0-notloggedin a0-mode">\n    <form novalidate>\n      <div class="a0-collapse-social">\n        <div class="a0-iconlist a0-hide"><p class="a0-hide">', escape((4,  i18n.t('signin:or') )), '</p></div>\n        <div class="a0-separator a0-hide"><span>', escape((5,  i18n.t('signin:separatorText') )), '</span></div>\n      </div>\n      <div class="a0-corporate-credentials a0-hide">Please enter your <strong>corporate</strong> credentials at <span class="a0-domain"></span>.</div>\n      <div class="a0-emailPassword">\n        <div class="a0-inputs">\n\n          <div class="a0-email">\n              ');12;
                var emailPlaceholder = i18n.t('signin:emailPlaceholder')
                  + ( _isUsernameRequired() ? ' / ' + i18n.t('signin:usernamePlaceholder') : '' )
                var inputBudicon = _isUsernameRequired() || 'username' === usernameStyle ? '1' : '5';
              ; buf.push('\n              <label for="a0-signin_easy_email" class="a0-sad-placeholder">\n                ', escape((18,  emailPlaceholder )), '\n              </label>\n\n              <div class="a0-input-box">\n                <i class="a0-icon-budicon-', escape((22,  inputBudicon )), '"></i>\n\n                <input name="email"\n                       id="a0-signin_easy_email"\n                       type="email"\n                       placeholder="', escape((27,  emailPlaceholder )), '"\n                       title="', escape((28,  emailPlaceholder )), '">\n              </div>\n          </div>\n\n          <div class="a0-password a0-hide">\n            <label for="a0-signin_easy_password" class="a0-sad-placeholder">\n              ', escape((34,  i18n.t('signin:passwordPlaceholder') )), '\n            </label>\n\n            <div class="a0-input-box">\n              <i class="a0-icon-budicon"></i>\n\n              <input name="password"\n                     id="a0-signin_easy_password"\n                     type="password"\n                     placeholder="', escape((43,  i18n.t('signin:passwordPlaceholder') )), '"\n                     title="', escape((44,  i18n.t('signin:passwordPlaceholder') )), '">\n            </div>\n          </div>\n\n        </div>\n        <!-- .a0-inputs -->\n\n        <div class="a0-sso-notice-container a0-hide"><i class="a0-icon-budicon"></i> <span class="a0-sso-notice">Single Sign-on enabled</span></div>\n\n        <div class="a0-action">\n            <button type="submit" class="a0-primary a0-next">', escape((54,  i18n.t('signin:action') )), '</button>\n            <div class="a0-db-actions">\n            </div>\n        </div>\n      </div>\n    </form>\n</div>\n'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/mode-signup/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var _ = require('underscore');
var $ = require('../bonzo-augmented');
var Emitter = require('events').EventEmitter;
var create = require('../object-create');
var stop = require('../stop-event');
var bind = require('../bind');
var template = require('./signup.ejs');
var buttonTmpl = require('../html/zocial-button.ejs');
var regex = require('../regex');
var gravatar = require('../gravatar');
var PasswordStrength = require('../password-strength');
var empty = regex.empty;
var email_parser = regex.email_parser;
var slice = Array.prototype.slice;
var username_parser = regex.username_parser;

/**
 * Expose SignupPanel
 */

module.exports = SignupPanel;

/**
 * Create `SignupPanel`
 *
 * @param {Auth0Lock} widget
 * @param {Object} options
 * @constructor
 */

function SignupPanel(widget, options) {
  if (!(this instanceof SignupPanel)) {
    return new SignupPanel(widget, options);
  }

  // Both `widget` and `options` are required
  if (2 !== arguments.length) {
    throw new Error('Missing parameters for SignupPanel');
  }

  this.name = 'signup';
  this.widget = widget;
  this.options = this.resolveOptions(options);
  this.el = null;

  // debounce gravatar update method
  this.gravatar = _.debounce(this.gravatar, 300);

  Emitter.call(this);
}

/**
 * Inherit from `EventEmitter`
 */

SignupPanel.prototype = create(Emitter.prototype);

/**
 * Query for elements at `this.el` context
 *
 * @param {String} selector
 * @return {BonzoAugmented}
 * @public
 */

SignupPanel.prototype.query = function(selector) {
  if (!this.el) { throw new Error('Can\'t get element since no `el` is set to local context'); }
  return $(selector, this.el);
};

/**
 * Create `el`
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

SignupPanel.prototype.create = function(options) {
  var opts = this.resolveOptions(options);
  var widget = this.widget;

  this.el = $.create(widget.render(template, opts))[0];
  this.bindAll();
  return this.el;
};

/**
 * Return `el` or create it
 *
 * @param {Object} options
 * @return {NodeElement}
 * @public
 */

SignupPanel.prototype.render = function() {
  return null != this.el
    ? this.el
    : this.create.apply(this, slice.call(arguments, 0));
};

/**
 * Resolves login options passed to template
 *
 * @param {Object} options
 * @return {Object}
 * @private
 */

SignupPanel.prototype.resolveOptions = function(options) {
  return _.extend({}, this.widget.options,  this.options, options);
};


/**
 * Bind events to `this.el`, like submit
 *
 * @private
 */

SignupPanel.prototype.bindAll = function() {
  var options = this.options;

  // hide only and only if set to false
  this.query('.a0-options')
    .toggleClass('a0-hide', !options.showSignupAction);

  var list = this.query('.a0-iconlist').html('');
  _.chain(options.$client.strategies)
    .where({ social: true })
    .map(function (s) {
      var e = {
        use_big_buttons: options._useBigSocialButtons(),
        title: options.i18n.t('signupSocialButton').replace('{connection:title}', s.title)
      };
      return  _.extend({}, s, e);
    })
    .each(function (s) { return list.append(buttonTmpl(s)); });

  if (options._getSocialStrategies().length > 0) {
    this.query('.a0-separator, .a0-iconlist').show();
  } else {
    this.query('.a0-separator, .a0-iconlist').hide();
  }

  this.query('.a0-email input').a0_on('input', bind(this.onemailinput, this));

  this.query('.a0-zocial[data-strategy]', list)
    .a0_on('click', bind(this.onzocialclick, this));

  this.query('.a0-options .a0-cancel')
    .a0_on('click', bind(this.oncancel, this));

  this.query('form')
    .a0_off('submit')
    .a0_on('submit', bind(this.onsubmit, this));

  var passwordStrength = new PasswordStrength(this.query('.a0-password_policy'),
                                              this.query('#a0-signup_easy_password'),
                                              this.options);
};

/**
 * Handler for `zocial` signup click
 *
 * @param {Event} e
 * @private
 */

SignupPanel.prototype.onzocialclick = function(e) {
  stop(e);
  this.widget._signinSocial(e, null, null, this);
};

/**
 * Handler for `submit` form event
 *
 * @param {Event} e
 * @private
 */

SignupPanel.prototype.onsubmit = function(e) {
  stop(e);
  if (!this.valid()) return;
  this.submit();
};

/**
 * Handler for `cancel` event click
 *
 * @param {Event} e
 * @private
 */

SignupPanel.prototype.oncancel = function(e) {
  stop(e);

  var widget = this.widget;
  widget._showSuccess();
  widget._showError();
  widget._focusError();
  widget._signinPanel();
};

SignupPanel.prototype.onemailinput = function (e) {
  var mailField = this.query('.a0-email input');

  if ('username' !== this.options.usernameStyle && this.options.gravatar) {
    this.gravatar(mailField.val());
  }
};

/**
 * Invoke gravatar update for `email`
 *
 * @param {String} email
 * @private
 */

SignupPanel.prototype.gravatar = function(email) {
  gravatar(this.widget, email);
  return this;
}

/**
 * Submit validated form to Auth0 for signup
 *
 * @private
 */

SignupPanel.prototype.submit = function() {
  var panel = this;
  var widget = this.widget;
  var options = this.options;
  var connection  = options._getAuth0Connection();
  var email_input = this.query('input[name=email]');
  var email = email_input.val();
  var username_input = this.query('.a0-username input');
  var username = username_input.val();
  var password_input = this.query('input[name=password]');
  var password = password_input.val();
  var callback = widget.options.popupCallback;

  widget._loadingPanel({ mode: 'signup' });

  widget.$auth0.signup({
    connection: connection.name,
    username:   (options._isUsernameRequired()) ? username : email,
    email:      email,
    password:   password,
    auto_login: false,
    popup:      panel.options.popup,
  }, function (err) {
    var args = slice.call(arguments, 0);

    // This is now dummy, and should no longer exist since all
    // dom events keep a reference to widget.$container
    if ( !widget.$container || widget.query()[0] !== widget.$container.childNodes[0] ) {
      return console && console.log && console.log('this signup was triggered from another node instance', arguments);
    }

    if (!err && widget.options.loginAfterSignup) return widget._signinWithAuth0(panel);
    if (!err && 'function' === typeof callback) return callback.apply(widget, args), widget.hide();
    if (!err) return widget.hide();

    // display signup again
    widget.setPanel(panel);

    // render errors
    if (400 !== err.status) {
      widget._showError(widget.options.i18n.t('signup:serverErrorText'))
      return 'function' === typeof callback ? callback.apply(widget, args) : null;
    }

    if ('invalid_password' === err.name) {
      widget._focusError(password_input, widget.options.i18n.t('invalid'));
      widget._showError(widget.options.i18n.t('signup:invalidPassword'));
    } else if ('username_exists' === err.name) {
      widget._focusError(username_input);
      widget._showError(widget.options.i18n.t('signup:usernameInUseErrorText'));
    } else {
      widget._focusError(email_input);
      widget._showError(widget.options.i18n.t('signup:userExistsErrorText'));
    }

    return 'function' === typeof callback ? callback.apply(widget, args) : null;
  });

};

/**
 * Validate form for errros before `submit`
 *
 * @private
 */

SignupPanel.prototype.valid = function() {
  // TODO: Lot of duplicated validation logic with `mode-signin` and `mode-reset`.
  // Will be better to create a new object that handle input validations.
  var ok = true;
  var email_input = this.query('input[name=email]');
  var email_empty = empty.test(email_input.val());
  var email_parsed = email_parser.exec(email_input.val().toLowerCase());
  var password_input = this.query('input[name=password]');
  var password_empty = empty.test(password_input.val());
  var widget = this.widget;

  // asume valid by default
  // and reset errors
  widget._showError();
  widget._focusError();

  if (email_empty) {
    widget._focusError(email_input);
    ok = false;
  }

  if (!email_parsed && !email_empty) {
    widget._focusError(email_input, widget.options.i18n.t('invalid'));
    ok = false;
  }

  if(this.options._isUsernameRequired()) {
    var username_input = this.query('input[name=username]');
    var username_empty = empty.test(username_input.val());
    var username_parsed = username_parser.exec(username_input.val().toLowerCase());

    if (username_empty) {
      widget._focusError(username_input);
      ok = false;
    }
    if (!username_parsed && !username_empty) {
      widget._focusError(username_input, widget.options.i18n.t('invalid'));
      ok = false;
    }
  }

  if (password_empty) {
    widget._focusError(password_input);
    ok = false;
  }

  return ok;
};

},{"../bind":"/home/strider/workspace/lib/bind/index.js","../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","../gravatar":"/home/strider/workspace/lib/gravatar/index.js","../html/zocial-button.ejs":"/home/strider/workspace/lib/html/zocial-button.ejs","../object-create":"/home/strider/workspace/lib/object-create/index.js","../password-strength":"/home/strider/workspace/lib/password-strength/index.js","../regex":"/home/strider/workspace/lib/regex/index.js","../stop-event":"/home/strider/workspace/lib/stop-event/index.js","./signup.ejs":"/home/strider/workspace/lib/mode-signup/signup.ejs","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/mode-signup/signup.ejs":[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="a0-signup a0-mode">\n    <form novalidate>\n        <div class="a0-header">', escape((3,  i18n.t('signup:description') )), '</div>\n        <div class="a0-collapse-social-signup">\n          <div class="a0-iconlist"><p class="a0-hide">', escape((5,  i18n.t('signin:or') )), '</p></div>\n          <div class="a0-separator"><span>', escape((6,  i18n.t('signin:separatorText') )), '</span></div>\n        </div>\n        <div class="a0-instructions">', escape((8,  i18n.t('signup:headerText') )), '</div>\n        <div class="a0-emailPassword">\n            <div class="a0-inputs-wrapper">      \n              <div class="a0-inputs">\n                ');12; if(_isUsernameRequired()) { ; buf.push('\n                  <div class="a0-username">\n                      <label for="a0-signup_easy_username" class="a0-sad-placeholder">\n                        ', escape((15,  i18n.t('signup:usernamePlaceholder') )), '\n                      </label>\n                      <div class="a0-input-box">\n                        <i class="a0-icon-budicon-1"></i>\n                        <input name="username" id="a0-signup_easy_username"\n                             type="text" value=""\n                             placeholder="', escape((21,  i18n.t('signup:usernamePlaceholder') )), '"\n                             title="', escape((22,  i18n.t('signup:usernamePlaceholder') )), '">\n                      </div>\n                  </div>\n                ');25; }; buf.push('\n                <div class="a0-email">\n                    <label for="a0-signup_easy_email" class="a0-sad-placeholder">\n                      ', escape((28,  i18n.t('signup:emailPlaceholder') )), '\n                    </label>\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon-5"></i>\n                      <input name="email" id="a0-signup_easy_email"\n                           type="email" value=""\n                           placeholder="', escape((34,  i18n.t('signup:emailPlaceholder') )), '"\n                           title="', escape((35,  i18n.t('signup:emailPlaceholder') )), '">\n                    </div>\n                </div>\n                <div class="a0-password">\n                    <label for="a0-signup_easy_password" class="a0-sad-placeholder">\n                      ', escape((40,  i18n.t('signup:passwordPlaceholder') )), '\n                    </label>\n\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon"></i>\n                      <input name="password" id="a0-signup_easy_password"\n                             type="password" value=""\n                             placeholder="', escape((47,  i18n.t('signup:passwordPlaceholder') )), '"\n                             title="', escape((48,  i18n.t('signup:passwordPlaceholder') )), '">\n\n                    </div>\n\n                </div>\n              </div>\n              <div class="a0-password_policy"></div>\n            </div>  \n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next">', escape((57,  i18n.t('signup:action') )), '</button>\n                <div class="a0-options">\n                    <a href="javascript: {}" class="a0-centered a0-btn-small a0-cancel">', escape((59,  i18n.t('signup:cancelAction') )), '</a>\n                </div>\n            </div>\n            ');62; if (i18n.t('signup:footerText') && i18n.t('signup:footerText').length) { ; buf.push('\n            <div class="a0-signup-footer">\n              <small>\n                ', (65,  i18n.t('signup:footerText') ), '\n              </small>\n            </div>\n            ');68; } ; buf.push('\n        </div>\n    </form>\n</div>\n'); })();
} 
return buf.join('');
})
},{}],"/home/strider/workspace/lib/object-create/index.js":[function(require,module,exports){
//ie9 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill
module.exports = Object.create || (function(){
  function F(){}

  return function(o){
    if (arguments.length != 1) {
        throw new Error('Object.create implementation only accepts one parameter.');
    }
    F.prototype = o;
    return new F();
  };
})();
},{}],"/home/strider/workspace/lib/options-manager/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var EventEmitter = require('events').EventEmitter;
var small_screen = require('../is-small-screen');
var ocreate = require('../object-create');

var regex = require('../regex');
var i18n = require('../i18n');
var bind = require('../bind');
var _ = require('underscore');
var okeys = _.keys;

/**
 * Expose `OptionsManager`
 */

module.exports = OptionsManager;

/**
 * Create an `OptionsManager` from
 * instanceOptions and displayOptions
 *
 * @param {Auth0Lock} widget
 * @param {Object} displayOptions
 * @constructor
 */

function OptionsManager(widget, options) {
  if (!(this instanceof OptionsManager)) {
    return new OptionsManager(widget, options);
  }

  // Initiate `EventEmitter`
  EventEmitter.call(this);

  // Flag OptionsManager as `unloaded`
  this.state('loading');

  // holds widget as reference
  this.$widget = widget;

  // save widget's $client object reference
  this.$client = widget.$client;

  // save copy of widget's valid strategies
  this.$strategies = widget.$strategies;

  // save widget's `auth0-js` instance object
  this.$auth0 = widget.$auth0;

  // save widget instance options with `$` prepended
  _.each(okeys(widget.$options), function(key) {
    this['$' + key] = widget.$options[key];
  }, this);

  // copies all provided options to instance
  // filtering by allowed options `whitelist`
  _.each(okeys(options), function(key) {
    // we should whitelist options
    // so no OptionsManager method gets overriden
    // by user configurable object
    // XXX: Broken, fix it!
    // if (!~whitelist.indexOf(key) && !~supportedParams.indexOf(key)) return;
    this[key] = options[key];
  }, this);

  // Set `i18n` dictionary for templates
  this.i18n = i18n.getDict(this.dict);

  // default authParams to empty object
  this.authParams = _.extend({}, options.authParams);

  // enable/disable last login and AD discovery
  this.rememberLastLogin = null != options.rememberLastLogin ? !!options.rememberLastLogin : true;
  this.integratedWindowsLogin = null != options.integratedWindowsLogin ? !!options.integratedWindowsLogin : true;

  // default theme is `default`
  this.theme = null != options.theme ? options.theme : 'default';

  // enable/disable gravatar image fetch
  this.gravatar = null != options.gravatar ? !!options.gravatar : true;

  // If popupCallback, enable popup mode
  if ('function' === typeof options.popupCallback) {
    this.popup = true;
    // XXX: the following to should already come with
    // the options from constructor... right?
    this.popupOptions = _.extend({}, options.popupOptions);
    this.popupCallback = options.popupCallback;
  }

  // save default responseType
  if (options.responseType) {
    this.responseType = options.responseType;
  } else {
    this.responseType = (this.popup || !options.callbackURL) ? 'token' : 'code';
  }

  // Options moved from constructor and hacked into `auth0-js` instance
  this.$auth0._useJSONP = options.forceJSONP || this.$auth0._useJSONP;
  this.$auth0._callbackURL = options.callbackURL || this.$auth0._callbackURL;
  this.$auth0._callbackOnLocationHash = 'token' === this.responseType || !!this.$auth0._callbackOnLocationHash;

  // force `closable` when provided with `container`
  this.closable = null != options.closable ? !!options.closable : !this.container;

  // force `loginAfterSignup` to true unles provided
  this.loginAfterSignup = null != options.loginAfterSignup ? !!options.loginAfterSignup : true;

  // force `defaultADUsernameFromEmailPrefix` to true if not provided
  // This variable is used
  this.defaultADUsernameFromEmailPrefix = null != options.defaultADUsernameFromEmailPrefix ? !!options.defaultADUsernameFromEmailPrefix : true;

  // SSO by default. User&Password can be authenticated with an ajax call
  // However, since this call is CORS or JSONP it will not set the cookie,
  // hence SSO will not work.
  // To enable Ajax/jsonp/cors use sso: false.
  this.sso = null != this.sso ? !!this.sso : true;

  // Delay options requiring $client configuration
  this.$widget.getClientConfiguration(bind(this._onclientloaded, this));
}

/**
 * Inherit from `EventEmitter`
 */

OptionsManager.prototype = ocreate(EventEmitter.prototype);

/**
 * Get or Set `$_state` for track
 * `OptionsManager`s ready state
 *
 * @param {String} state
 * @param {String} message
 * @return {OptionsManager}
 * @public
 */

OptionsManager.prototype.state = function(state, message) {
  if (0 === arguments.length) {
    return this.$_state;
  }

  // debug('state is now %s', state);
  this.$_state = state;
  this.emit(state, message);
  return this;
};

/**
 * Register `fn` for when `OptionsManager`
 * is ready (or `loaded`)
 *
 * @param {Function} fn
 * @return {OptionsManager}
 * @public
 */

OptionsManager.prototype.ready = function(fn) {
  function done() {
    if ('loaded' === this.state()) {
      return fn();
    }
  }

  if ('loaded' === this.state()) {
    setTimeout(bind(done, this), 0);
  } else {
    this.once('loaded', bind(done, this));
  }

  return this;
};

/**
 * Continue setup once client's configuration
 * is retrieved from assets url or S3
 *
 * @param {Object} client
 * @return {OptionsManager}
 * @private
 */

OptionsManager.prototype._onclientloaded = function(client) {

  // Refresh clients configuration with what's stored
  // on the Auth0's hash
  this.$client = _.extend(this.$client, client);

  // Enrich $client.strategies
  // then, continue setting up the mode
  if (this.connections) {
    this.$client.strategies = _.chain(this.$client.strategies)
      .map(strategiesConnectionsMapper(this.connections))
      .filter(hasConnectionsFilter)
      .value();
  }

  // merge strategies info
  for (var i = 0; i < this.$client.strategies.length; i++) {
    var sname = this.$client.strategies[i].name;
    this.$client.strategies[i] = _.extend({}, this.$client.strategies[i], this.$strategies[sname]);
  }

  // Holds auth0 strategies only
  this.auth0Strategies = _.chain(this.$client.strategies)
    .filter(auth0StrategiesFilter)
    .value();

  // show signup/forgot links
  var auth0Conn = this._getAuth0Connection() || {};

  // if booted on `signup` or `reset`, but not configured
  // on connection => override mode with `signin`
  if (this.mode === 'signup' && !auth0Conn.showSignup) { this.mode = 'signin'; }
  if (this.mode === 'reset' && !auth0Conn.showForgot) { this.mode = 'signin'; }

  // Resolve show action buttons or not
  this.showSignupAction = (this.disableSignupAction !== true) && ((auth0Conn && auth0Conn.showSignup) || this.signupLink);
  this.showResetAction = (this.disableResetAction !== true) && ((auth0Conn && auth0Conn.showForgot) || this.resetLink);

    // override usernameStyle if required by connection
    var auth0ConnStrategy = this._getClientStrategyByConnectionName(auth0Conn.name) || {};
    if (!this.usernameStyle && (auth0ConnStrategy.name === 'ad' || auth0ConnStrategy.name === 'auth0-adldap')) {
      this.usernameStyle = 'username';
    }

  // Ensure usernameStyle
  this.usernameStyle = null != this.usernameStyle ? this.usernameStyle : 'email';

  this.state('loaded');

  return this;
};

/**
 * Resolve whether are there or not any
 * social connections within client
 * strategies
 *
 * @return {Boolean}
 * @private
 */

OptionsManager.prototype._isThereAnySocialConnection = function () {
  var client = this.$client;
  var filter = { social: true };
  return !!_.findWhere(client.strategies, filter);
};

/**
 * Resolve whether are there or not any
 * enterprise or Databse connection within
 * client strategies
 *
 * @return {Boolean}
 * @private
 */

OptionsManager.prototype._isThereAnyEnterpriseOrDbConnection = function() {
  var client = this.$client;
  var filter = { social: false };
  return !!_.findWhere(client.strategies, filter);
};

/**
 * Resolve whether are there or not any
 * database connection within client strategies
 *
 * @return {Boolean}
 * @private
 */

OptionsManager.prototype._isThereAnyDBConnection = function() {
  var client = this.$client;
  var filter = { userAndPass: true };
  return !!_.findWhere(client.strategies, filter);
};

/**
 * Resolve whether are there or not any
 * Active Directory connection within client
 * strategies
 *
 * @return {Boolean}
 * @private
 */

OptionsManager.prototype._isThereAnyADConnection = function() {
  return _.some(this.$client.strategies, function (s) {
    return (s.name === 'ad' || s.name === 'auth0-adldap') && s.connections.length > 0;
  });
};

/**
 * Given an email extracts it domain part.
 *
 * @param {String} email
 *
 * @return {String} domain of the email
 */
OptionsManager.prototype._extractEmailDomain = function (email) {
  var parser = regex.email_parser;
  var emailM = parser.exec(email.toLowerCase());
  return emailM ? emailM.slice(-2)[0] : null;
};

/**
 * Helper to filter AD connections by domain.
 *
 * @private
 */
OptionsManager.prototype._findConnectionByADDomain = function (domain, strategies) {
  return this._filterConnections(domain, strategies, {userAndPass: true});
};

/**
 * Helper to filter enterprise connections by domain.
 *
 * @private
 */
OptionsManager.prototype._findConnectionByDomain = function (domain, strategies) {
  return this._filterConnections(domain, strategies, {userAndPass: undefined});
};

/**
 * Get from the strategies list (filtered by criteria) connections and
 * filter those connections by a given domain.
 *
 * @param   {String}  domain      Domain to be found.
 * @param   {Array}   strategies  Array with all the existing strategies
 *                                for this client.
 * @param   {Object}  criteria    Criteria to filter strategies.
 *
 * @returns {Object} the connection matching the domain or undefined otherwise.
 *
 * @private
 */
OptionsManager.prototype._filterConnections = function (domain, strategies, criteria) {
  strategies = strategies || this.$client.strategies;
  var conn_obj = _.chain(strategies)
    .where(criteria)
    .pluck('connections')
    .flatten()
    .map(function (e) {
      var l = [];
      if (e.domain) {
        l.push(e.domain);
      }
      l = l.concat(e.domain_aliases || []);
      e.domains = l;
      return e;
    })
    .find(function (e) { return e.domains.indexOf(domain) !== -1; })
    .value();

  return conn_obj;
};

/**
 * Resolves wether `email`'s domain belongs to
 * an enterprise connection or not, and alters
 * `output` object in the way...
 *
 * @param {String} email
 * @param {Object} output
 * @return {Boolean}
 * @private
 */

OptionsManager.prototype._isEnterpriseConnection = function (email, output) {
  var client = this.$client;
  var domain = this._extractEmailDomain(email);

  var conn = this._filterConnections(domain, client.strategies, {userAndPass: undefined});

  if (conn && output) {
    output.domain = conn.domain;
  }

  return !!conn;
};

OptionsManager.prototype._isFreeSubscription = function() {
  return this.$client.subscription && !~['free', 'dev'].indexOf(this.$client.subscription);
};

/**
 * Get resolved Auth0 connection to signin by `userName`
 * XXX: No idea what logic this follows...
 *
 * @param {String} userName
 * @return {Object}
 * @private
 */

OptionsManager.prototype._getAuth0Connection = function(username) {

  // if specified, use it, otherwise return first
  if (null != this.defaultUserPasswordConnection) {
    return _.chain(this.auth0Strategies)
      .pluck('connections')
      .flatten()
      .findWhere({ name: this.defaultUserPasswordConnection })
      .value();
  }

  var domain = username && ~username.indexOf('@') ? username.split('@')[1] : '';

  if (username && domain && this.$client.strategies) {
    //there is still a chance that the connection might be
    //adldap and with domain
    var conn = _.chain(this.$client.strategies)
                .pluck('connections')
                .flatten()
                .findWhere({domain: domain})
                .value();
    if (conn) {
      return conn;
    }
  }

  // By default, if exists, return auth0 connection (db-conn) or first
  var defaultStrategy = _.findWhere(this.auth0Strategies, { name: 'auth0' });
  defaultStrategy = defaultStrategy || (this.auth0Strategies.length > 0 ? this.auth0Strategies[0] : null);

  return defaultStrategy && defaultStrategy.connections.length > 0 ? defaultStrategy.connections[0] : null;
};

/**
 * Get Loggedin auth parameters from `strategy` and `ssoData`
 *
 * @param {String} strategy
 * @param {Object} ssoData
 * @return {Object}
 * @private
 */

OptionsManager.prototype._getLoggedInAuthParams = function (strategy, ssoData) {
  switch (strategy) {
    case 'google-oauth2':
      return { login_hint: ssoData.lastUsedUsername };
    default:
      return {};
  }
};

/**
 * Get client strategy by connection `connName`
 * XXX: Check that there may exist 2 connection with same name
 * but at different strategies... in that case this is wrong,
 * and it should also accept a strategy name as second parameter
 *
 * @param {String} connName
 * @return {Object}
 * @private
 */

OptionsManager.prototype._getClientStrategyByConnectionName = function (connName) {
  return _.chain(this.$client.strategies)
    .filter(function (s) {
      return _.findWhere(s.connections, { name: connName });
    }).value()[0];
};

/**
 * Get configured client strategy by strategy `name`
 *
 * @param {String} name
 * @return {Object}
 * @private
 */

OptionsManager.prototype._getClientStrategyByName = function (name) {
  return _.findWhere(this.$client.strategies, { name: name });
};

/**
 * Resolve whether use or don't use big social buttons
 *
 * @return {Boolean}
 * @public
 */

OptionsManager.prototype._useBigSocialButtons = function() {
  return null != this.socialBigButtons ? !!this.socialBigButtons : !this._isThereAnyEnterpriseOrDbConnection();
};

/**
 * Retrieve `$client` strategies by `social: true`
 *
 * @return {Array}
 * @public
 */

OptionsManager.prototype._getSocialStrategies = function() {
  return _.where(this.$client.strategies, { social: true });
};

/**
 * Resolve disable the focus on `is_small_screen`
 * or at embeded mode in `container`. Or override
 * by user preferences
 *
 * @return {Boolean}
 * @public
 */

OptionsManager.prototype._focusDisabled = function() {
  return null != this.focusInput ? !this.focusInput : (small_screen() || !!this.container);
};

/**
 * Resolve whether it should or should not
 * show last login connection
 *
 * @return {Boolean}
 * @public
 */

OptionsManager.prototype._shouldShowLastLogin = function() {
  var $ssoData = this.$widget.$ssoData;

  var connectionStrategy = $ssoData && $ssoData.lastUsedConnection && $ssoData.lastUsedConnection.strategy;
  var isADOrAuth0 = connectionStrategy === 'auth0' || connectionStrategy === 'ad';

  // Don't show last login if in Phonegap with AD or auth0 connection
  if (window.cordova && isADOrAuth0) {
    return false;
  }

  var shouldShow = $ssoData
    && $ssoData.sso
    && $ssoData.lastUsedConnection
    && this._isEnabledConnection($ssoData.lastUsedConnection.name)
    && !!this.rememberLastLogin;

  return shouldShow;
};

/**
 * Resolve whether it is or is not a connection
 * between enabled client's connection strategies
 *
 * @param {String} connectionName
 * @return {Boolean}
 * @public
 */

OptionsManager.prototype._isEnabledConnection = function(connectionName) {
  var strategy = this._getClientStrategyByConnectionName(connectionName);
  return strategy != null ? true : false;
};

OptionsManager.prototype._isUsernameRequired = function() {
  var dbConnection = this._getAuth0Connection();
  return dbConnection && dbConnection.requires_username;
}

/**
 * Private helpers
 */

function auth0StrategiesFilter(strategy) {
  return strategy.userAndPass && strategy.connections.length > 0;
}

function hasConnectionsFilter(strategy) {
  return strategy.connections.length > 0;
}

function strategiesConnectionsMapper(connections) {
  return function (strategy) {
    // XXX: We need to replace with Lodash
    // no deep clone/extend is a pain for referential objects...
    var cloned = _.extend({}, strategy);
    cloned.connections = _.filter(cloned.connections, function (connection) {
      return _.contains(connections, connection.name);
    });
    return cloned;
  };
}

},{"../bind":"/home/strider/workspace/lib/bind/index.js","../i18n":"/home/strider/workspace/lib/i18n/index.js","../is-small-screen":"/home/strider/workspace/lib/is-small-screen/index.js","../object-create":"/home/strider/workspace/lib/object-create/index.js","../regex":"/home/strider/workspace/lib/regex/index.js","events":"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js","underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/password-strength/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var format = require('util').format;
var createPolicy = require('password-sheriff');
var $ = require('../bonzo-augmented');
var isSmallScreen = require('../is-small-screen');

/**
 * Expose PasswordStrength
 */
module.exports = PasswordStrength;

/**
 * Create `PasswordStrength`
 *
 * @param {Object} el     Element where the PasswordStrength will be render
 * @param {Object} pwdEl  Password element to validate
 * @constructor
 */
function PasswordStrength(el, pwdEl, options) {
  this.el = el;
  this.pwdEl = pwdEl;
  this.options = options;

  this.bindAll();
}

/**
 * Bind events to `this.pwdEl`
 */
PasswordStrength.prototype.bindAll = function () {
  var connection  = this.options._getAuth0Connection();
  var policy = createPolicy(connection.passwordPolicy);
  var pwd = this.pwdEl;
  var el = this.el;
  var self = this;
  var panel = $('.a0-panel');

  // TODO Debounce?
  pwd.a0_on('keyup', function () {
    var missing = policy.missing(pwd.val());
    el.html(flatDescriptions(self.options, missing, 0));

    var showPwdStrength = $('.a0-password_policy .a0-checked').length !== $('.a0-password_policy li').length;

    panel.toggleClass('a0-active-pwd-strength', showPwdStrength);

    // TODO Un-comment to enable mark password as invalid while
    // not meeting criteria. Bear in mind that a0-error/s should
    // be added to .a0-panel
    // if (!missing.verified) {
    //   $('.a0-password .a0-input-box').addClass('a0-error-input');
    // } else {
    //   $('.a0-password .a0-input-box').removeClass('a0-error-input');
    // }
  });

  panel.a0_on('touchstart', function (e) {
    if(isSmallScreen() && e.target.nodeName !== 'INPUT') {
      document.activeElement.blur();
    }
  });

  pwd.a0_on('blur', function () {
    if(!isSmallScreen()) {
      panel.removeClass('a0-active-pwd-strength');
    }
  });
};

function flatSingleDescription (options, description, index) {
  var result = (new Array(index+1)).join(' ');
  var verified = (description.verified ? 'a0-checked' : '');
  var message = options.i18n.t('signup:passwordStrength:' + description.code);

  if (description.format) {
    message = format.apply(null, [message].concat(description.format));
  }

  var childrenDescription = flatDescriptions(options, description || {}, index + 1);
  result += format('<li class="%s">%s%s</li>', verified, message, childrenDescription);

  return result;
}

function flatDescriptions (options, descriptions, index) {
  if (!(descriptions.rules && descriptions.rules.length) &&
      !(descriptions.items && descriptions.items.length)) {
    return '';
  }

  var items = descriptions.rules || descriptions.items;

  var firstDescription = flatSingleDescription(options, items[0], index);

  descriptions = items.slice(1).reduce(function (result, description) {
    return result + '\n' + flatSingleDescription(options, description, index);
  }, firstDescription);

  return '<ul>' + descriptions + '</ul>';
}

},{"../bonzo-augmented":"/home/strider/workspace/lib/bonzo-augmented/index.js","../is-small-screen":"/home/strider/workspace/lib/is-small-screen/index.js","password-sheriff":"/home/strider/workspace/node_modules/password-sheriff/index.js","util":"/home/strider/workspace/node_modules/browserify/node_modules/util/util.js"}],"/home/strider/workspace/lib/regex/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var r = module.exports;

// Check for a valid email address
r.email_parser = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

r.username_parser = /^[a-zA-Z0-9_]{1,15}$/;
// check for an empty form value
r.empty = /^\s*$/;

},{}],"/home/strider/workspace/lib/stop-event/index.js":[function(require,module,exports){
/**
 * Expose `stop`
 */

module.exports = stop;

/**
 * Call `preventDefault` and `stopPropagation` on `e`
 *
 * @param {Event} e
 * @return {Event}
 * @public
 */

function stop(e) {
  e.preventDefault();
  e.stopPropagation();
  return e;
}

},{}],"/home/strider/workspace/lib/strategies/index.js":[function(require,module,exports){
module.exports = {
    'google-openid': {
        css: 'google',
        title: 'Google OpenId',
        social: true
    },
    'google-apps': {
        css: 'google',
        title: 'Google Apps',
        social: false
    },
    'google-oauth2': {
        css: 'googleplus',
        title: 'Google',
        social: true
    },
    'facebook': {
        css: 'facebook',
        title: 'Facebook',
        social: true
    },
    'windowslive': {
        css: 'windows',
        title: 'Microsoft Account',
        social: true
    },
    'linkedin': {
        css: 'linkedin',
        title: 'LinkedIn',
        social: true
    },
    'github': {
        css: 'github',
        title: 'GitHub',
        social: true
    },
    'paypal': {
        css: 'paypal',
        title: 'PayPal',
        social: true
    },
    'twitter': {
        css: 'twitter',
        title: 'Twitter',
        social: true
    },
    'amazon': {
        css: 'amazon',
        title: 'Amazon',
        social: true
    },
    'vkontakte': {
        css: 'vk',
        title: 'vKontakte',
        social: true
    },
    'yandex': {
        css: 'yandex',
        title: 'Yandex',
        social: true
    },
    'office365': {
        css: 'office365',
        title: 'Office365',
        social: false
    },
    'waad': {
        css: 'waad',
        title: 'Windows Azure AD',
        social: false
    },
    'adfs': {
        css: 'windows',
        title: 'ADFS',
        social: false
    },
    'samlp': {
        css: 'guest',
        title: 'SAML',
        social: false
    },
    'pingfederate': {
        css: 'guest',
        title: 'Ping Federate',
        social: false
    },
    'ip': {
        css: 'guest',
        title: 'IP Address',
        social: false
    },
    'mscrm': {
        css: 'guest',
        title: 'Dynamics CRM',
        social: false
    },
    'ad': {
        css: 'windows',
        title: 'AD / LDAP',
        social: false,
        userAndPass: true
    },
    'custom': {
        css: 'guest',
        title: 'Custom Auth',
        social: false
    },
    'auth0': {
        css: 'guest',
        title: 'Auth0',
        social: false,
        userAndPass: true
    },
    'auth0-adldap': {
        css: 'guest',
        title: 'AD/LDAP',
        social: false,
        userAndPass: true
    },
    'thirtysevensignals': {
        css: 'thirtysevensignals',
        title: '37 Signals',
        social: true
    },
    'box': {
        css: 'box',
        title: 'Box',
        social: true,
        imageicon: true
    },
    'salesforce': {
        css: 'salesforce',
        title: 'Salesforce',
        social: true
    },
    'salesforce-sandbox': {
        css: 'salesforce',
        title: 'Salesforce (sandbox)',
        social: true
    },
    'fitbit': {
        css: 'fitbit',
        title: 'Fitbit',
        social: true
    },
    'baidu': {
        css: 'baidu',
        title: '百度',
        social: true
    },
    'renren': {
        css: 'renren',
        title: '人人',
        social: true
    },
    'yahoo': {
        css: 'yahoo',
        title: 'Yahoo!',
        social: true
    },
    'aol': {
        css: 'aol',
        title: 'Aol',
        social: true
    },
    'yammer': {
        css: 'yammer',
        title: 'Yammer',
        social: true
    },
    'wordpress': {
        css: 'wordpress',
        title: 'Wordpress',
        social: true
    },
    'dwolla': {
        css: 'dwolla',
        title: 'Dwolla',
        social: true
    },
    'shopify': {
        css: 'shopify',
        title: 'Shopify',
        social: true
    },
    'miicard': {
        css: 'miicard',
        title: 'miiCard',
        social: true
    },
    'soundcloud': {
        css: 'soundcloud',
        title: 'Soundcloud',
        social: true
    },
    'ebay': {
        css: 'ebay',
        title: 'ebay',
        social: true
    },
    'evernote': {
        css: 'evernote',
        title: 'Evernote',
        social: true
    },
    'evernote-sandbox': {
        css: 'evernote',
        title: 'Evernote (sandbox)',
        social: true
    },
    'sharepoint': {
        css: 'sharepoint',
        title: 'SharePoint Apps',
        social: false
    },
    'weibo': {
        css: 'weibo',
        title: '新浪微博',
        social: true
    },
    'instagram': {
        css: 'instagram',
        title: 'Instagram',
        social: true
    },
    'thecity': {
        css: 'thecity',
        title: 'The City',
        social: true
    },
    'thecity-sandbox': {
        css: 'thecity',
        title: 'The City (sandbox)',
        social: true
    },
    'planningcenter': {
        css: 'planningcenter',
        title: 'Planning Center',
        social: true
    },
    'exact': {
        css: 'exact',
        title: 'Exact',
        social: true
    }
};
},{}],"/home/strider/workspace/lib/supports-animation/index.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var _ = require('underscore');
var prefixes = ['Webkit', 'Moz', 'O', 'ms', 'Khtml', ''];
var animationEndNames = {
  'Animation':'animationend',
  'OAnimation':'oAnimationEnd',
  'MozAnimation':'animationend',
  'WebkitAnimation':'webkitAnimationEnd'
};

module.exports = function () {
  return _.chain(prefixes)
    .map(function (prefix) {
      return prefix + 'Animation';
    })
    .filter(function (s) {
      return typeof document.body.style[s] !== 'undefined';
    })
    .map(function (supportedAnimation) {
      return animationEndNames[supportedAnimation];
    })
    .first()
    .value();
};

},{"underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/lib/supports-placeholder/index.js":[function(require,module,exports){
function placeholderIsSupported() {
  var test = document.createElement('input');
  return ('placeholder' in test);
}

module.exports = placeholderIsSupported();
},{}],"/home/strider/workspace/lib/utils/index.js":[function(require,module,exports){
var _ = require('underscore');

module.exports = {
  parseUrl: function (url) {
    var parser = document.createElement('a');
    parser.href = url;
    return parser;
  },

  endsWith: function (str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  },

  extract: function (obj, props) {
    var pre = _.pick(obj, props);

    return _.chain(_.pairs(pre))
            .filter(function (pair) {
              return typeof pair[1] !== 'undefined';
            }).reduce(function (r, current) {
              r[current[0]] = current[1];
              return r;
            }, {}).value();
  },

  isCordova: function () {
    return !!window.cordova;
  },

  isIOS: function () {
    if (window.navigator &&
        window.navigator.userAgent &&
          window.navigator.userAgent.match) {
      // navigator.userAgent examples:
      //
      // Safari Mobile (iPhone)
      // -------------
      // "Mozilla/5.0 (iPhone; CPU iPhone OS 10_10_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B411 Safari/600.1.4"
      //
      // Phonegap (iPhone)
      // --------
      // "Mozilla/5.0 (iPhone; CPU iPhone OS 10_10_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12B411 (2050749072)"
      //
      // Safari Mobile (iPad)
      // -------------
      // Mozilla/5.0(iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B314 Safari/531.21.10
      return !!navigator.userAgent.match(/.*iPhone OS.*/);
    }
    return false;
  }
};

},{"underscore":"/home/strider/workspace/node_modules/underscore/underscore.js"}],"/home/strider/workspace/node_modules/auth0-js/lib/LoginError.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var json_parse = require('./json-parse');

/**
 * Expose `LoginError`
 */

module.exports = LoginError;

/**
 * Create a `LoginError` by extend of `Error`
 *
 * @param {Number} status
 * @param {String} details
 * @public
 */

function LoginError(status, details) {
  var obj;

  if (typeof details == 'string') {
    try {
      obj = json_parse(details);
    } catch (er) {
      obj = { message: details };
    }
  } else {
    obj = details || { description: 'server error' };
  }

  if (obj && !obj.code) {
    obj.code = obj.error;
  }

  var err = Error.call(this, obj.description || obj.message || obj.error);

  err.status = status;
  err.name = obj.code;
  err.code = obj.code;
  err.details = obj;

  if (status === 0) {
    err.code = "Unknown";
    err.message = "Unknown error.";
  }

  return err;
}

/**
 * Extend `LoginError.prototype` with `Error.prototype`
 * and `LoginError` as constructor
 */

if (Object && Object.create) {
  LoginError.prototype = Object.create(Error.prototype, {
    constructor: { value: LoginError }
  });
}

},{"./json-parse":"/home/strider/workspace/node_modules/auth0-js/lib/json-parse.js"}],"/home/strider/workspace/node_modules/auth0-js/lib/assert_required.js":[function(require,module,exports){
/**
 * Expose `required`
 */

module.exports = required;

/**
 * Assert `prop` as requirement of `obj`
 *
 * @param {Object} obj
 * @param {prop} prop
 * @public
 */

function required (obj, prop) {
  if (!obj[prop]) {
    throw new Error(prop + ' is required.');
  }
}

},{}],"/home/strider/workspace/node_modules/auth0-js/lib/base64_url_decode.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var Base64 = require('Base64');

/**
 * Expose `base64_url_decode`
 */

module.exports = base64_url_decode;

/**
 * Decode a `base64` `encodeURIComponent` string
 *
 * @param {string} str
 * @public
 */

function base64_url_decode(str) {
  var output = str.replace("-", "+").replace("_", "/");

  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += "==";
      break;
    case 3:
      output += "=";
      break;
    default:
      throw "Illegal base64url string!";
  }

  return decodeURIComponent(escape(Base64.atob(output)));
}

},{"Base64":"/home/strider/workspace/node_modules/auth0-js/node_modules/Base64/base64.js"}],"/home/strider/workspace/node_modules/auth0-js/lib/index.js":[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var assert_required   = require('./assert_required');
var base64_url_decode = require('./base64_url_decode');
var is_array          = require('./is-array');

var qs                = require('qs');
var xtend             = require('xtend');
var trim              = require('trim');
var reqwest           = require('reqwest');
var WinChan           = require('winchan');

var jsonp             = require('jsonp');
var jsonpOpts         = { param: 'cbx', timeout: 8000, prefix: '__auth0jp' };

var use_jsonp         = require('./use_jsonp');
var LoginError        = require('./LoginError');
var json_parse        = require('./json-parse');

/**
 * Stringify popup options object into
 * `window.open` string options format
 *
 * @param {Object} popupOptions
 * @api private
 */

function stringifyPopupSettings(popupOptions) {
  var settings = '';

  for (var key in popupOptions) {
    settings += key + '=' + popupOptions[key] + ',';
  }

  return settings.slice(0, -1);
}


/**
 * Check that a key has been set to something different than null
 * or undefined.
 *
 * @param {Object} obj
 * @param {String} key
 */
function checkIfSet(obj, key) {
  /*
   * false      != null -> true
   * true       != null -> true
   * undefined  != null -> false
   * null       != null -> false
   */
  return !!(obj && obj[key] != null);
}

/**
 * Create an `Auth0` instance with `options`
 *
 * @class Auth0
 */
function Auth0 (options) {
  // XXX Deprecated: We prefer new Auth0(...)
  if (!(this instanceof Auth0)) {
    return new Auth0(options);
  }

  assert_required(options, 'clientID');
  assert_required(options, 'domain');

  this._useJSONP = options.forceJSONP || use_jsonp();
  this._clientID = options.clientID;
  this._callbackURL = options.callbackURL || document.location.href;
  this._domain = options.domain;
  this._callbackOnLocationHash = false || options.callbackOnLocationHash;
  this._cordovaSocialPlugins = {
    facebook: this._phonegapFacebookLogin
  };
  this._useCordovaSocialPlugins = false || options.useCordovaSocialPlugins;

  // TODO Change this to a property named 'disableSSO' for consistency.
  // By default, options.sso is true
  if (!checkIfSet(options, 'sso')) {
    options.sso = true;
  }
}

/**
 * Export version with `Auth0` constructor
 *
 * @property {String} version
 */

Auth0.version = "6.0.2";

/**
 * Redirect current location to `url`
 *
 * @param {String} url
 * @api private
 */

Auth0.prototype._redirect = function (url) {
  global.window.location = url;
};

Auth0.prototype._getCallbackOnLocationHash = function(options) {
  return (options && typeof options.callbackOnLocationHash !== 'undefined') ?
    options.callbackOnLocationHash : this._callbackOnLocationHash;
};

Auth0.prototype._getCallbackURL = function(options) {
  return (options && typeof options.callbackURL !== 'undefined') ?
    options.callbackURL : this._callbackURL;
};

/**
 * Renders and submits a WSFed form
 *
 * @param {Object} options
 * @param {Function} formHtml
 * @api private
 */

Auth0.prototype._renderAndSubmitWSFedForm = function (options, formHtml) {
  var div = document.createElement('div');
  div.innerHTML = formHtml;
  var form = document.body.appendChild(div).children[0];

  if (options.popup && !this._getCallbackOnLocationHash(options)) {
    form.target = 'auth0_signup_popup';
  }

  form.submit();
};

/**
 * Resolve response type as `token` or `code`
 *
 * @return {Object} `scope` and `response_type` properties
 * @api private
 */

Auth0.prototype._getMode = function (options) {
  return {
    scope: 'openid',
    response_type: this._getCallbackOnLocationHash(options) ? 'token' : 'code'
  };
};

Auth0.prototype._configureOfflineMode = function(options) {
  if (options.scope && options.scope.indexOf('offline_access') >= 0) {
    options.device = options.device || 'Browser';
  }
};

/**
 * Get user information from API
 *
 * @param {Object} profile
 * @param {String} id_token
 * @param {Function} callback
 * @api private
 */

Auth0.prototype._getUserInfo = function (profile, id_token, callback) {

  if (profile && !profile.user_id) { // the scope was just openid
    var self = this;
    var url = 'https://' + self._domain + '/tokeninfo?';

    var fail = function (status, description) {
      var error = new Error(status + ': ' + (description || ''));

      // These two properties are added for compatibility with old versions (no Error instance was returned)
      error.error = status;
      error.error_description = description;

      callback(error);
    };

    if (this._useJSONP) {
      return jsonp(url + qs.stringify({id_token: id_token}), jsonpOpts, function (err, resp) {
        if (err) {
          return fail(0, err.toString());
        }

        return resp.status === 200 ?
          callback(null, resp.user) :
          fail(resp.status, resp.error);
      });
    }

    return reqwest({
      url:          url,
      method:       'post',
      type:         'json',
      crossOrigin:  true,
      data:         {id_token: id_token}
    }).fail(function (err) {
      fail(err.status, err.responseText);
    }).then(function (userinfo) {
      callback(null, userinfo);
    });
  }

  callback(null, profile);
};

/**
 * Get profile data by `id_token`
 *
 * @param {String} id_token
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.getProfile = function (id_token, callback) {
  if (!id_token || typeof id_token !== 'string') {
    return callback(new Error('Invalid token'));
  }

  this._getUserInfo(this.decodeJwt(id_token), id_token, callback);
};

/**
 * Validate a user
 *
 * @param {Object} options
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.validateUser = function (options, callback) {
  var endpoint = 'https://' + this._domain + '/public/api/users/validate_userpassword';
  var query = xtend(
    options,
    {
      client_id:    this._clientID,
      username:     trim(options.username || options.email || '')
    });

  if (this._useJSONP) {
    return jsonp(endpoint + '?' + qs.stringify(query), jsonpOpts, function (err, resp) {
      if (err) {
        return callback(err);
      }
      if('error' in resp && resp.status !== 404) {
        return callback(new Error(resp.error));
      }
      callback(null, resp.status === 200);
    });
  }

  reqwest({
    url:     endpoint,
    method:  'post',
    type:    'text',
    data:    query,
    crossOrigin: true,
    error: function (err) {
      if (err.status !== 404) { return callback(new Error(err.responseText)); }
      callback(null, false);
    },
    success: function (resp) {
      callback(null, resp.status === 200);
    }
  });
};

/**
 * Decode Json Web Token
 *
 * @param {String} jwt
 * @api public
 */

Auth0.prototype.decodeJwt = function (jwt) {
  var encoded = jwt && jwt.split('.')[1];
  return json_parse(base64_url_decode(encoded));
};

/**
 * Given the hash (or a query) of an URL returns a dictionary with only relevant
 * authentication information. If succeeds it will return the following fields:
 * `profile`, `id_token`, `access_token` and `state`. In case of error, it will
 * return `error` and `error_description`.
 *
 * @method parseHash
 * @param {String} [hash=window.location.hash] URL to be parsed
 * @example
 *      var auth0 = new Auth0({...});
 *
 *      // Returns {profile: {** decoded id token **}, state: "good"}
 *      auth0.parseHash('#id_token=.....&state=good&foo=bar');
 *
 *      // Returns {error: "invalid_credentials", error_description: undefined}
 *      auth0.parseHash('#error=invalid_credentials');
 *
 *      // Returns {error: "invalid_credentials", error_description: undefined}
 *      auth0.parseHash('?error=invalid_credentials');
 *
 * @api public
 */

Auth0.prototype.parseHash = function (hash) {
  hash = hash || window.location.hash;
  var parsed_qs;
  if (hash.match(/error/)) {
    hash = hash.substr(1).replace(/^\//, '');
    parsed_qs = qs.parse(hash);
    var err = {
      error: parsed_qs.error,
      error_description: parsed_qs.error_description
    };
    return err;
  }
  if(!hash.match(/access_token/)) {
    // Invalid hash URL
    return null;
  }
  hash = hash.substr(1).replace(/^\//, '');
  parsed_qs = qs.parse(hash);
  var id_token = parsed_qs.id_token;
  var refresh_token = parsed_qs.refresh_token;
  var prof = this.decodeJwt(id_token);
  var invalidJwt = function (error) {
    var err = {
      error: 'invalid_token',
      error_description: error
    };
    return err;
  };

  // aud should be the clientID
  if (prof.aud !== this._clientID) {
    return invalidJwt(
      'The clientID configured (' + this._clientID + ') does not match with the clientID set in the token (' + prof.aud + ').');
  }

  // iss should be the Auth0 domain (i.e.: https://contoso.auth0.com/)
  if (prof.iss && prof.iss !== 'https://' + this._domain + '/') {
    return invalidJwt(
      'The domain configured (https://' + this._domain + '/) does not match with the domain set in the token (' + prof.iss + ').');
  }

  return {
    profile: prof,
    id_token: id_token,
    access_token: parsed_qs.access_token,
    state: parsed_qs.state,
    refresh_token: refresh_token
  };
};

/**
 * Signup
 *
 * @param {Object} options Signup Options
 *  @param {String} email New user email
 *  @param {String} password New user password
 *
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.signup = function (options, callback) {
  var self = this;

  var query = xtend(
    this._getMode(options),
    options,
    {
      client_id: this._clientID,
      redirect_uri: this._getCallbackURL(options),
      username: trim(options.username || ''),
      email: trim(options.email || options.username || ''),
      tenant: this._domain.split('.')[0]
    });

  this._configureOfflineMode(query);

  var popup;

  if (options.popup  && !this._getCallbackOnLocationHash(options)) {
    popup = this._buildPopupWindow(options);
  }

  if (options.popup  && options.sso) {
    popup = this._buildPopupWindow(options);
  }

  function success () {
    if ('auto_login' in options && !options.auto_login) {
      if (callback) {
        callback();
      }
      return;
    }
    self.login(options, callback);
  }

  function fail (status, resp) {
    var error = new LoginError(status, resp);
    if (popup && popup.kill) {
      popup.kill();
    }
    if (callback) {
      return callback(error);
    }
    throw error;
  }

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + '/dbconnections/signup?' + qs.stringify(query), jsonpOpts, function (err, resp) {
      if (err) {
        return fail(0, err);
      }
      return resp.status == 200 ?
              success() :
              fail(resp.status, resp.err);
    });
  }

  reqwest({
    url:     'https://' + this._domain + '/dbconnections/signup',
    method:  'post',
    type:    'html',
    data:    query,
    success: success,
    crossOrigin: true,
    error: function (err) {
      fail(err.status, err.responseText);
    }
  });
};

/**
 * Change password
 *
 * @param {Object} options
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.changePassword = function (options, callback) {
  var query = {
    tenant:         this._domain.split('.')[0],
    client_id:      this._clientID,
    connection:     options.connection,
    username:       trim(options.username || ''),
    email:          trim(options.email || options.username || ''),
    password:       options.password
  };


  function fail (status, resp) {
    var error = new LoginError(status, resp);
    if (callback) {
      return callback(error);
    }
  }

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + '/dbconnections/change_password?' + qs.stringify(query), jsonpOpts, function (err, resp) {
      if (err) {
        return fail(0, err);
      }
      return resp.status == 200 ?
              callback(null, resp.message) :
              fail(resp.status, resp.err);
    });
  }

  reqwest({
    url:     'https://' + this._domain + '/dbconnections/change_password',
    method:  'post',
    type:    'html',
    data:    query,
    crossOrigin: true,
    error: function (err) {
      fail(err.status, err.responseText);
    },
    success: function (r) {
      callback(null, r);
    }
  });
};

/**
 * Builds query string to be passed to /authorize based on dict key and values.
 *
 * @method _buildAuthorizeQueryString
 * @param {Array} args
 * @param {Array} blacklist
 * @api private
 */

Auth0.prototype._buildAuthorizeQueryString = function (args, blacklist) {
  var query = this._buildAuthorizationParameters(args, blacklist);
  return qs.stringify(query);
};

/**
 * Builds parameter dictionary to be passed to /authorize based on dict key and values.
 *
 * @method _buildAuthorizationParameters
 * @param {Array} args
 * @param {Array} blacklist
 * @api private
 */

Auth0.prototype._buildAuthorizationParameters = function(args, blacklist) {
  var query = xtend.apply(null, args);

  // Adds offline mode to the query
  this._configureOfflineMode(query);

  // Elements to filter from query string
  blacklist = blacklist || ['popup', 'popupOptions'];

  var i, key;

  for (i = 0; i < blacklist.length; i++) {
    key = blacklist[i];
    delete query[key];
  }

  if (query.connection_scope && is_array(query.connection_scope)){
    query.connection_scope = query.connection_scope.join(',');
  }

  return query;
};

/**
 * Login user
 *
 * @param {Object} options
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.login = Auth0.prototype.signin = function (options, callback) {

  if (typeof options.username !== 'undefined' ||
      typeof options.email !== 'undefined') {
    return this.loginWithUsernamePassword(options, callback);
  }

  if (!!window.cordova) {
    return this.loginPhonegap(options, callback);
  }

  if (!!options.popup && this._getCallbackOnLocationHash(options)) {
    return this.loginWithPopup(options, callback);
  }

  var query = this._buildAuthorizeQueryString([
    this._getMode(options),
    options,
    { client_id: this._clientID, redirect_uri: this._getCallbackURL(options) }
  ]);

  var url = 'https://' + this._domain + '/authorize?' + query;

  if (options.popup) {
    this._buildPopupWindow(options, url);
  } else {
    this._redirect(url);
  }
};

/**
 * Compute `options.width` and `options.height` for the popup to
 * open and return and extended object with optimal `top` and `left`
 * position arguments for the popup windows
 *
 * @param {Object} options
 * @api private
 */

Auth0.prototype._computePopupPosition = function (options) {
  var width = options.width;
  var height = options.height;

  var screenX = typeof window.screenX !== 'undefined' ? window.screenX : window.screenLeft;
  var screenY = typeof window.screenY !== 'undefined' ? window.screenY : window.screenTop;
  var outerWidth = typeof window.outerWidth !== 'undefined' ? window.outerWidth : document.body.clientWidth;
  var outerHeight = typeof window.outerHeight !== 'undefined' ? window.outerHeight : (document.body.clientHeight - 22);
  // XXX: what is the 22?

  // Use `outerWidth - width` and `outerHeight - height` for help in
  // positioning the popup centered relative to the current window
  var left = screenX + (outerWidth - width) / 2;
  var top = screenY + (outerHeight - height) / 2;

  return { width: width, height: height, left: left, top: top };
};

/**
 * loginPhonegap method is triggered when !!window.cordova is true.
 *
 * @method loginPhonegap
 * @private
 * @param {Object}    options   Login options.
 * @param {Function}  callback  To be called after login happened. Callback arguments
 *                              should be:
 *                              function (err, profile, idToken, accessToken, state)
 *
 * @example
 *      var auth0 = new Auth0({ clientId: '...', domain: '...'});
 *
 *      auth0.signin({}, function (err, profile, idToken, accessToken, state) {
 *        if (err) {
 *         alert(err);
 *         return;
 *        }
 *
 *        alert('Welcome ' + profile.name);
 *      });
 */

Auth0.prototype.loginPhonegap = function (options, callback) {
  if (this._shouldAuthenticateWithCordovaPlugin(options.connection)) {
    this._socialPhonegapLogin(options, callback);
    return;
  }

  var mobileCallbackURL = 'https://' + this._domain + '/mobile';
  var self = this;
  var query = this._buildAuthorizeQueryString([
    this._getMode(options),
    options,
    { client_id: this._clientID, redirect_uri: mobileCallbackURL}]);

    var popupUrl = 'https://' + this._domain + '/authorize?' + query;

    var popupOptions = xtend({location: 'yes'} ,
      options.popupOptions);

    // This wasn't send before so we don't send it now either
    delete popupOptions.width;
    delete popupOptions.height;



    var ref = window.open(popupUrl, '_blank', stringifyPopupSettings(popupOptions));
    var answered = false;

    function errorHandler(event) {
      if (answered) { return; }
      callback(new Error(event.message), null, null, null, null);
      answered = true;
      return ref.close();
    }

    function startHandler(event) {
      if (answered) { return; }

      if ( event.url && !(event.url.indexOf(mobileCallbackURL + '#') === 0 ||
                         event.url.indexOf(mobileCallbackURL + '?') === 0)) { return; }

      var result = self.parseHash(event.url.slice(mobileCallbackURL.length));

      if (!result) {
        callback(new Error('Error parsing hash'), null, null, null, null);
        answered = true;
        return ref.close();
      }

      if (result.id_token) {
        self.getProfile(result.id_token, function (err, profile) {
          callback(err, profile, result.id_token, result.access_token, result.state, result.refresh_token);
        });
        answered = true;
        return ref.close();
      }

      // Case where we've found an error
      callback(new Error(result.err || result.error || 'Something went wrong'), null, null, null, null);
      answered = true;
      return ref.close();
    }

    function exitHandler() {
      if (answered) { return; }

      callback(new Error('Browser window closed'), null, null, null, null);

      ref.removeEventListener('loaderror', errorHandler);
      ref.removeEventListener('loadstart', startHandler);
      ref.removeEventListener('exit', exitHandler);
    }

    ref.addEventListener('loaderror', errorHandler);
    ref.addEventListener('loadstart', startHandler);
    ref.addEventListener('exit', exitHandler);

};

/**
 * loginWithPopup method is triggered when login method receives a {popup: true} in
 * the login options.
 *
 * @method loginWithPopup
 * @param {Object}   options    Login options.
 * @param {function} callback   To be called after login happened (whether
 *                              success or failure). This parameter is mandatory when
 *                              option callbackOnLocationHash is truthy but should not
 *                              be used when falsy.
 * @example
 *       var auth0 = new Auth0({ clientId: '...', domain: '...', callbackOnLocationHash: true });
 *
 *       // Error! No callback
 *       auth0.login({popup: true});
 *
 *       // Ok!
 *       auth0.login({popup: true}, function () { });
 *
 * @example
 *       var auth0 = new Auth0({ clientId: '...', domain: '...'});
 *
 *       // Ok!
 *       auth0.login({popup: true});
 *
 *       // Error! No callback will be executed on response_type=code
 *       auth0.login({popup: true}, function () { });
 * @private
 */

Auth0.prototype.loginWithPopup = function(options, callback) {
  var self = this;
  if (!callback) {
    throw new Error('popup mode should receive a mandatory callback');
  }

  var query = this._buildAuthorizeQueryString([
    this._getMode(options),
    options,
    { client_id: this._clientID, owp: true }]);


  var popupUrl = 'https://' + this._domain + '/authorize?' + query;

  var popupOptions = xtend(
    self._computePopupPosition({
      width: (options.popupOptions && options.popupOptions.width) || 500,
      height: (options.popupOptions && options.popupOptions.height) || 600
  }),
    options.popupOptions);


  // TODO Errors should be LoginError for consistency
  var popup = WinChan.open({
    url: popupUrl,
    relay_url: 'https://' + this._domain + '/relay.html',
    window_features: stringifyPopupSettings(popupOptions)
  }, function (err, result) {
    if (err) {
      // Winchan always returns string errors, we wrap them inside Error objects
      return callback(new Error(err), null, null, null, null, null);
    }

    if (result && result.id_token) {
      return self.getProfile(result.id_token, function (err, profile) {
        callback(err, profile, result.id_token, result.access_token, result.state, result.refresh_token);
      });
    }

    // Case where we've found an error
    return callback(new Error(result ? result.err : 'Something went wrong'), null, null, null, null, null);
  });

  popup.focus();
};

/**
 * _shouldAuthenticateWithCordovaPlugin method checks whether Auth0 is properly configured to
 * handle authentication of a social connnection using a phonegap plugin.
 *
 * @method _shouldAuthenticateWithCordovaPlugin
 * @param {String}   connection    Name of the connection.
 * @private
 */

Auth0.prototype._shouldAuthenticateWithCordovaPlugin = function(connection) {
  var socialPlugin = this._cordovaSocialPlugins[connection];
  return this._useCordovaSocialPlugins && !!socialPlugin;
};

/**
 * _socialPhonegapLogin performs social authentication using a phonegap plugin
 *
 * @method _socialPhonegapLogin
 * @param {String}   connection   Name of the connection.
 * @param {function} callback     To be called after login happened (whether
 *                                success or failure).
 * @private
 */

Auth0.prototype._socialPhonegapLogin = function(options, callback) {
  var socialAuthentication = this._cordovaSocialPlugins[options.connection];
  var self = this;
  socialAuthentication(options.connection_scope, function(error, accessToken, extras) {
    if (error) {
      callback(error, null, null, null, null);
      return;
    }
    var loginOptions = xtend({ access_token: accessToken }, options, extras);
    self.loginWithSocialAccessToken(loginOptions, callback);
  });
};

/**
 * _phonegapFacebookLogin performs social authentication with Facebook using phonegap-facebook-plugin
 *
 * @method _phonegapFacebookLogin
 * @param {Object}   scopes     FB scopes used to login. It can be an Array of String or a single String.
 *                              By default is ["public_profile"]
 * @param {function} callback   To be called after login happened (whether success or failure). It will
 *                              yield the accessToken and any extra information neeeded by Auth0 API
 *                              or an Error if the authentication fails. Callback should be:
 *                              function (err, accessToken, extras) { }
 * @private
 */

Auth0.prototype._phonegapFacebookLogin = function(scopes, callback) {
  if (!window.facebookConnectPlugin || !window.facebookConnectPlugin.login) {
    callback(new Error('missing plugin phonegap-facebook-plugin'), null, null);
    return;
  }

  var fbScopes;
  if (scopes && is_array(scopes)){
    fbScopes = scopes;
  } else if (scopes) {
    fbScopes = [scopes];
  } else {
    fbScopes = ['public_profile'];
  }
  window.facebookConnectPlugin.login(fbScopes, function (state) {
    callback(null, state.authResponse.accessToken, {});
  }, function(error) {
    callback(new Error(error), null, null);
  });
};

/**
 * This method handles the scenario where a db connection is used with
 * popup: true and sso: true.
 *
 * @private
 */
Auth0.prototype.loginWithUsernamePasswordAndSSO = function (options, callback) {
  var self = this;
  var popupOptions = xtend(
    self._computePopupPosition({
      width: (options.popupOptions && options.popupOptions.width) || 500,
      height: (options.popupOptions && options.popupOptions.height) || 600
  }),
    options.popupOptions);

  // TODO Refactor this with the other winchan logic for loginWithPopup.
  var popup = WinChan.open({
    url: 'https://' + this._domain + '/sso_dbconnection_popup/' + this._clientID,
    relay_url: 'https://' + this._domain + '/relay.html',
    window_features: stringifyPopupSettings(popupOptions),
    popup: this._current_popup,
    params: {
      domain:                 this._domain,
      clientID:               this._clientID,
      options: {
        // TODO What happens with i18n?
        username:   options.username,
        password:   options.password,
        connection: options.connection,
        state:      options.state
      }
    }
  }, function (err, result) {
    if (err) {
      // Winchan always returns string errors, we wrap them inside Error objects
      return callback(new LoginError(err), null, null, null, null, null);
    }

    if (result && result.id_token) {
      return self.getProfile(result.id_token, function (err, profile) {
        callback(err, profile, result.id_token, result.access_token, result.state, result.refresh_token);
      });
    }

    // Case we've found an error
    return callback(result && result.err ?
                    new LoginError(result.err.status,
                                   result.err && result.err.details ?
                                     result.err.details :
                                     result.err) :
                    new LoginError('Something went wrong'),
            null, null, null, null, null);
  });

  popup.focus();
};

/**
 * Login with Resource Owner (RO)
 *
 * @param {Object} options
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.loginWithResourceOwner = function (options, callback) {
  var self = this;
  var query = xtend(
    this._getMode(options),
    options,
    {
      client_id:    this._clientID,
      username:     trim(options.username || options.email || ''),
      grant_type:   'password'
    });

  this._configureOfflineMode(query);

  var endpoint = '/oauth/ro';

  function enrichGetProfile(resp, callback) {
    self.getProfile(resp.id_token, function (err, profile) {
      callback(err, profile, resp.id_token, resp.access_token, resp.state, resp.refresh_token);
    });
  }

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + endpoint + '?' + qs.stringify(query), jsonpOpts, function (err, resp) {
      if (err) {
        return callback(err);
      }
      if('error' in resp) {
        var error = new LoginError(resp.status, resp.error);
        return callback(error);
      }
      enrichGetProfile(resp, callback);
    });
  }

  reqwest({
    url:     'https://' + this._domain + endpoint,
    method:  'post',
    type:    'json',
    data:    query,
    crossOrigin: true,
    success: function (resp) {
      enrichGetProfile(resp, callback);
    },
    error: function (err) {
      var er = err;
      if (!er.status || er.status === 0) { //ie10 trick
        er = {};
        er.status = 401;
        er.responseText = {
          code: 'invalid_user_password'
        };
      }
      else {
        er.responseText = err;
      }
      var error = new LoginError(er.status, er.responseText);
      callback(error);
    }
  });
};

/**
 * Login with Social Access Token
 *
 * @param {Object} options
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.loginWithSocialAccessToken = function (options, callback) {
  var self = this;
  var query = this._buildAuthorizationParameters([
      { scope: 'openid' },
      options,
      { client_id: this._clientID }
    ]);

  var endpoint = '/oauth/access_token';

  function enrichGetProfile(resp, callback) {
    self.getProfile(resp.id_token, function (err, profile) {
      callback(err, profile, resp.id_token, resp.access_token, resp.state, resp.refresh_token);
    });
  }

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + endpoint + '?' + qs.stringify(query), jsonpOpts, function (err, resp) {
      if (err) {
        return callback(err);
      }
      if('error' in resp) {
        var error = new LoginError(resp.status, resp.error);
        return callback(error);
      }
      enrichGetProfile(resp, callback);
    });
  }

  reqwest({
    url:     'https://' + this._domain + endpoint,
    method:  'post',
    type:    'json',
    data:    query,
    crossOrigin: true,
    success: function (resp) {
      enrichGetProfile(resp, callback);
    },
    error: function (err) {
      var er = err;
      if (!er.status || er.status === 0) { //ie10 trick
        er = {};
        er.status = 401;
        er.responseText = {
          code: 'invalid_request'
        };
      }
      else {
        er.responseText = err;
      }
      var error = new LoginError(er.status, er.responseText);
      callback(error);
    }
  });
};

/**
 * Open a popup, store the winref in the instance and return it.
 *
 * We usually need to call this method before any ajax transaction in order
 * to prevent the browser to block the popup.
 *
 * @param  {[type]}   options  [description]
 * @param  {Function} callback [description]
 * @return {[type]}            [description]
 */

Auth0.prototype._buildPopupWindow = function (options, url) {
  if (this._current_popup) {
    return this._current_popup;
  }

  var popupOptions = stringifyPopupSettings(xtend(
                          { width: 500, height: 600 },
                          (options.popupOptions || {})));

  this._current_popup = window.open(url || 'about:blank', 'auth0_signup_popup',popupOptions);

  var self = this;

  this._current_popup.kill = function () {
    this.close();
    delete self._current_popup;
  };

  return this._current_popup;
};

/**
 * Login with Username and Password
 *
 * @param {Object} options
 * @param {Fucntion} callback
 * @api public
 */

Auth0.prototype.loginWithUsernamePassword = function (options, callback) {
  // XXX: Warning: This check is whether callback arguments are
  // fn(err) case callback.length === 1 (a redirect should be performed) vs.
  // fn(err, profile, id_token, access_token, state) callback.length > 1 (no
  // redirect should be performed)
  if (callback && callback.length > 1 && !options.sso) {
    return this.loginWithResourceOwner(options, callback);
  }

  var self = this;
  var popup;

  // TODO We should deprecate this, really hacky and confuses people.
  if (options.popup  && !this._getCallbackOnLocationHash(options)) {
    popup = this._buildPopupWindow(options);
  }

  if (options.popup && options.sso ) {
    return this.loginWithUsernamePasswordAndSSO(options, callback);
  }


  var query = xtend(
    this._getMode(options),
    options,
    {
      client_id: this._clientID,
      redirect_uri: this._getCallbackURL(options),
      username: trim(options.username || options.email || ''),
      tenant: this._domain.split('.')[0]
    });

  this._configureOfflineMode(query);

  var endpoint = '/usernamepassword/login';

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + endpoint + '?' + qs.stringify(query), jsonpOpts, function (err, resp) {
      if (err) {
        if (popup && popup.kill) { popup.kill(); }
        return callback(err);
      }
      if('error' in resp) {
        if (popup && popup.kill) { popup.kill(); }
        var error = new LoginError(resp.status, resp.error);
        return callback(error);
      }
      self._renderAndSubmitWSFedForm(options, resp.form);
    });
  }

  function return_error (error) {
    if (callback) {
      return callback(error);
    }
    throw error;
  }

  reqwest({
    url:     'https://' + this._domain + endpoint,
    method:  'post',
    type:    'html',
    data:    query,
    crossOrigin: true,
    success: function (resp) {
      self._renderAndSubmitWSFedForm(options, resp);
    },
    error: function (err) {
      var er = err;
      if (popup && popup.kill) {
        popup.kill();
      }
      if (!er.status || er.status === 0) { //ie10 trick
        er = {};
        er.status = 401;
        er.responseText = {
          code: 'invalid_user_password'
        };
      }
      var error = new LoginError(er.status, er.responseText);
      return return_error(error);
    }
  });
};

Auth0.prototype.renewIdToken = function (id_token, callback) {
  this.getDelegationToken({
    id_token: id_token,
    scope: 'passthrough',
    api: 'auth0'
  }, callback);
};

Auth0.prototype.refreshToken = function (refresh_token, callback) {
  this.getDelegationToken({
    refresh_token: refresh_token,
    scope: 'passthrough',
    api: 'auth0'
  }, callback);
};

/**
 * Get delegation token for certain addon or certain other clientId
 *
 * @example
 *
 *     auth0.getDelegationToken({
 *      id_token:   '<user-id-token>',
 *      target:     '<app-client-id>'
 *      api_type: 'auth0'
 *     }, function (err, delegationResult) {
 *        if (err) return console.log(err.message);
 *        // Do stuff with delegation token
 *        expect(delegationResult.id_token).to.exist;
 *        expect(delegationResult.token_type).to.eql('Bearer');
 *        expect(delegationResult.expires_in).to.eql(36000);
 *     });
 *
 * @example
 *
 *      // get a delegation token from a Firebase API App
  *     auth0.getDelegationToken({
 *      id_token:   '<user-id-token>',
 *      target:     '<app-client-id>'
 *      api_type: 'firebase'
 *     }, function (err, delegationResult) {
 *      // Use your firebase token here
 *    });
 *
 * @param {Object} [options]
 *  @param {String} [id_token]
 *  @param {String} [target]
 *  @param {String} [api_type]
 * @param {Function} [callback]
 * @api public
 */
Auth0.prototype.getDelegationToken = function (options, callback) {
  options = options || {};

  if (!options.id_token && !options.refresh_token ) {
    throw new Error('You must send either an id_token or a refresh_token to get a delegation token.');
  }

  var query = xtend({
    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
    client_id:  this._clientID,
    target: options.targetClientId || this._clientID,
    api_type: options.api
  }, options);

  delete query.hasOwnProperty;
  delete query.targetClientId;
  delete query.api;

  var endpoint = '/delegation';

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + endpoint + '?' + qs.stringify(query), jsonpOpts, function (err, resp) {
      if (err) {
        return callback(err);
      }
      if('error' in resp) {
        var error = new LoginError(resp.status, resp.error_description || resp.error);
        return callback(error);
      }
      callback(null, resp);
    });
  }

  reqwest({
    url:     'https://' + this._domain + endpoint,
    method:  'post',
    type:    'json',
    data:    query,
    crossOrigin: true,
    success: function (resp) {
      callback(null, resp);
    },
    error: function (err) {
      try {
        callback(JSON.parse(err.responseText));
      }
      catch (e) {
        var er = err;
        if (!er.status || er.status === 0) { //ie10 trick
          er = {};
          er.status = 401;
          er.responseText = {
            code: 'invalid_operation'
          };
        }
        callback(new LoginError(er.status, er.responseText));
      }
    }
  });
};

/**
 * Trigger logout redirect with
 * params from `query` object
 *
 * Examples:
 *
 *     auth0.logout();
 *     // redirects to -> 'https://yourapp.auth0.com/logout'
 *
 *     auth0.logout({returnTo: 'http://logout'});
 *     // redirects to -> 'https://yourapp.auth0.com/logout?returnTo=http://logout'
 *
 * @param {Object} query
 * @api public
 */

Auth0.prototype.logout = function (query) {
  var url = 'https://' + this._domain + '/logout';
  if (query) {
    url += '?' + qs.stringify(query);
  }
  this._redirect(url);
};

/**
 * Get single sign on Data
 *
 * Examples:
 *     auth0.getSSOData(function (err, ssoData) {
 *       if (err) return console.log(err.message);
 *       expect(ssoData.sso).to.exist;
 *     });
 *
 *     auth0.getSSOData(false, fn);
 *
 * @param {Boolean} withActiveDirectories
 * @param {Function} callback
 * @api public
 */

Auth0.prototype.getSSOData = function (withActiveDirectories, callback) {
  if (typeof withActiveDirectories === 'function') {
    callback = withActiveDirectories;
    withActiveDirectories = false;
  }

  var url = 'https://' + this._domain + '/user/ssodata';

  if (withActiveDirectories) {
    url += '?' + qs.stringify({ldaps: 1, client_id: this._clientID});
  }

  // override timeout
  var jsonpOptions = xtend({}, jsonpOpts, { timeout: 3000 });

  return jsonp(url, jsonpOptions, function (err, resp) {
    callback(null, err ? {sso:false} : resp); // Always return OK, regardless of any errors
  });
};

/**
 * Get all configured connections for a client
 *
 * Examples:
 *
 *     auth0.getConnections(function (err, conns) {
 *       if (err) return console.log(err.message);
 *       expect(conns.length).to.be.above(0);
 *       expect(conns[0].name).to.eql('Apprenda.com');
 *       expect(conns[0].strategy).to.eql('adfs');
 *       expect(conns[0].status).to.eql(false);
 *       expect(conns[0].domain).to.eql('Apprenda.com');
 *       expect(conns[0].domain_aliases).to.eql(['Apprenda.com', 'foo.com', 'bar.com']);
 *     });
 *
 * @param {Function} callback
 * @api public
 */
// XXX We may change the way this method works in the future to use client's s3 file.

Auth0.prototype.getConnections = function (callback) {
  return jsonp('https://' + this._domain + '/public/api/' + this._clientID + '/connections', jsonpOpts, callback);
};

/**
 * Expose `Auth0` constructor
 */

module.exports = Auth0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./LoginError":"/home/strider/workspace/node_modules/auth0-js/lib/LoginError.js","./assert_required":"/home/strider/workspace/node_modules/auth0-js/lib/assert_required.js","./base64_url_decode":"/home/strider/workspace/node_modules/auth0-js/lib/base64_url_decode.js","./is-array":"/home/strider/workspace/node_modules/auth0-js/lib/is-array.js","./json-parse":"/home/strider/workspace/node_modules/auth0-js/lib/json-parse.js","./use_jsonp":"/home/strider/workspace/node_modules/auth0-js/lib/use_jsonp.js","jsonp":"/home/strider/workspace/node_modules/auth0-js/node_modules/jsonp/index.js","qs":"/home/strider/workspace/node_modules/auth0-js/node_modules/qs/index.js","reqwest":"/home/strider/workspace/node_modules/auth0-js/node_modules/reqwest/reqwest.js","trim":"/home/strider/workspace/node_modules/trim/index.js","winchan":"/home/strider/workspace/node_modules/auth0-js/node_modules/winchan/winchan.js","xtend":"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/index.js"}],"/home/strider/workspace/node_modules/auth0-js/lib/is-array.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var toString = Object.prototype.toString;

/**
 * Resolve `isArray` as native or fallback
 */

module.exports = null != Array.isArray
  ? Array.isArray
  : isArray;

/**
 * Wrap `Array.isArray` Polyfill for IE9
 * source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
 *
 * @param {Array} array
 * @public
 */

function isArray (array) {
  return toString.call(array) === '[object Array]';
};

},{}],"/home/strider/workspace/node_modules/auth0-js/lib/json-parse.js":[function(require,module,exports){
/**
 * Expose `JSON.parse` method or fallback if not
 * exists on `window`
 */

module.exports = 'undefined' === typeof window.JSON
  ? require('json-fallback').parse
  : window.JSON.parse;

},{"json-fallback":"/home/strider/workspace/node_modules/auth0-js/node_modules/json-fallback/index.js"}],"/home/strider/workspace/node_modules/auth0-js/lib/use_jsonp.js":[function(require,module,exports){
/**
 * Expose `use_jsonp`
 */

module.exports = use_jsonp;

/**
 * Return true if `jsonp` is required
 *
 * @return {Boolean}
 * @public
 */

function use_jsonp() {
  var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : null;

  if (xhr && 'withCredentials' in xhr) {
    return false;
  }

  // We no longer support XDomainRequest for IE8 and IE9 for CORS because it has many quirks.
  // if ('XDomainRequest' in window && window.location.protocol === 'https:') {
  //   return false;
  // }

  return true;
}
},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/Base64/base64.js":[function(require,module,exports){
;(function () {

  var
    object = typeof exports != 'undefined' ? exports : this, // #8: web workers
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    INVALID_CHARACTER_ERR = (function () {
      // fabricate a suitable error object
      try { document.createElement('$'); }
      catch (error) { return error; }}());

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next input index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      input.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = input.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) throw INVALID_CHARACTER_ERR;
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    input = input.replace(/=+$/, '')
    if (input.length % 4 == 1) throw INVALID_CHARACTER_ERR;
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = input.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());

},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/debug/browser.js":[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // This hackery is required for IE8,
  // where the `console.log` function doesn't have 'apply'
  return 'object' == typeof console
    && 'function' == typeof console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      localStorage.removeItem('debug');
    } else {
      localStorage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = localStorage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

},{"./debug":"/home/strider/workspace/node_modules/auth0-js/node_modules/debug/debug.js"}],"/home/strider/workspace/node_modules/auth0-js/node_modules/debug/debug.js":[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":"/home/strider/workspace/node_modules/auth0-js/node_modules/debug/node_modules/ms/index.js"}],"/home/strider/workspace/node_modules/auth0-js/node_modules/debug/node_modules/ms/index.js":[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 's':
      return n * s;
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/json-fallback/index.js":[function(require,module,exports){
/*
    json2.js
    2011-10-19

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON = {};

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

module.exports = JSON
},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/jsonp/index.js":[function(require,module,exports){
/**
 * Module dependencies
 */

var debug = require('debug')('jsonp');

/**
 * Module exports.
 */

module.exports = jsonp;

/**
 * Callback index.
 */

var count = 0;

/**
 * Noop function.
 */

function noop(){}

/**
 * JSONP handler
 *
 * Options:
 *  - param {String} qs parameter (`callback`)
 *  - timeout {Number} how long after a timeout error is emitted (`60000`)
 *
 * @param {String} url
 * @param {Object|Function} optional options / callback
 * @param {Function} optional callback
 */

function jsonp(url, opts, fn){
  if ('function' == typeof opts) {
    fn = opts;
    opts = {};
  }
  if (!opts) opts = {};

  var prefix = opts.prefix || '__jp';
  var param = opts.param || 'callback';
  var timeout = null != opts.timeout ? opts.timeout : 60000;
  var enc = encodeURIComponent;
  var target = document.getElementsByTagName('script')[0] || document.head;
  var script;
  var timer;

  // generate a unique id for this request
  var id = prefix + (count++);

  if (timeout) {
    timer = setTimeout(function(){
      cleanup();
      if (fn) fn(new Error('Timeout'));
    }, timeout);
  }

  function cleanup(){
    script.parentNode.removeChild(script);
    window[id] = noop;
  }

  window[id] = function(data){
    debug('jsonp got', data);
    if (timer) clearTimeout(timer);
    cleanup();
    if (fn) fn(null, data);
  };

  // add qs component
  url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc(id);
  url = url.replace('?&', '?');

  debug('jsonp req "%s"', url);

  // create script
  script = document.createElement('script');
  script.src = url;
  target.parentNode.insertBefore(script, target);
}

},{"debug":"/home/strider/workspace/node_modules/auth0-js/node_modules/debug/browser.js"}],"/home/strider/workspace/node_modules/auth0-js/node_modules/qs/index.js":[function(require,module,exports){
/**
 * Object#toString() ref for stringify().
 */

var toString = Object.prototype.toString;

/**
 * Object#hasOwnProperty ref
 */

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Array#indexOf shim.
 */

var indexOf = typeof Array.prototype.indexOf === 'function'
  ? function(arr, el) { return arr.indexOf(el); }
  : function(arr, el) {
      if (typeof arr == 'string' && typeof "a"[0] == 'undefined') {
        arr = arr.split('');
      }
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === el) return i;
      }
      return -1;
    };

/**
 * Array.isArray shim.
 */

var isArray = Array.isArray || function(arr) {
  return toString.call(arr) == '[object Array]';
};

/**
 * Object.keys shim.
 */

var objectKeys = Object.keys || function(obj) {
  var ret = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      ret.push(key);
    }
  }
  return ret;
};

/**
 * Array#forEach shim.
 */

var forEach = typeof Array.prototype.forEach === 'function'
  ? function(arr, fn) { return arr.forEach(fn); }
  : function(arr, fn) {
      for (var i = 0; i < arr.length; i++) fn(arr[i]);
    };

/**
 * Array#reduce shim.
 */

var reduce = function(arr, fn, initial) {
  if (typeof arr.reduce === 'function') return arr.reduce(fn, initial);
  var res = initial;
  for (var i = 0; i < arr.length; i++) res = fn(res, arr[i]);
  return res;
};

/**
 * Cache non-integer test regexp.
 */

var isint = /^[0-9]+$/;

function promote(parent, key) {
  if (parent[key].length == 0) return parent[key] = {}
  var t = {};
  for (var i in parent[key]) {
    if (hasOwnProperty.call(parent[key], i)) {
      t[i] = parent[key][i];
    }
  }
  parent[key] = t;
  return t;
}

function parse(parts, parent, key, val) {
  var part = parts.shift();

  // illegal
  if (hasOwnProperty.call(Object.prototype, key)) return;

  // end
  if (!part) {
    if (isArray(parent[key])) {
      parent[key].push(val);
    } else if ('object' == typeof parent[key]) {
      parent[key] = val;
    } else if ('undefined' == typeof parent[key]) {
      parent[key] = val;
    } else {
      parent[key] = [parent[key], val];
    }
    // array
  } else {
    var obj = parent[key] = parent[key] || [];
    if (']' == part) {
      if (isArray(obj)) {
        if ('' != val) obj.push(val);
      } else if ('object' == typeof obj) {
        obj[objectKeys(obj).length] = val;
      } else {
        obj = parent[key] = [parent[key], val];
      }
      // prop
    } else if (~indexOf(part, ']')) {
      part = part.substr(0, part.length - 1);
      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
      parse(parts, obj, part, val);
      // key
    } else {
      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
      parse(parts, obj, part, val);
    }
  }
}

/**
 * Merge parent key/val pair.
 */

function merge(parent, key, val){
  if (~indexOf(key, ']')) {
    var parts = key.split('[')
      , len = parts.length
      , last = len - 1;
    parse(parts, parent, 'base', val);
    // optimize
  } else {
    if (!isint.test(key) && isArray(parent.base)) {
      var t = {};
      for (var k in parent.base) t[k] = parent.base[k];
      parent.base = t;
    }
    set(parent.base, key, val);
  }

  return parent;
}

/**
 * Compact sparse arrays.
 */

function compact(obj) {
  if ('object' != typeof obj) return obj;

  if (isArray(obj)) {
    var ret = [];

    for (var i in obj) {
      if (hasOwnProperty.call(obj, i)) {
        ret.push(obj[i]);
      }
    }

    return ret;
  }

  for (var key in obj) {
    obj[key] = compact(obj[key]);
  }

  return obj;
}

/**
 * Parse the given obj.
 */

function parseObject(obj){
  var ret = { base: {} };

  forEach(objectKeys(obj), function(name){
    merge(ret, name, obj[name]);
  });

  return compact(ret.base);
}

/**
 * Parse the given str.
 */

function parseString(str, options){
  var ret = reduce(String(str).split(options.separator), function(ret, pair){
    var eql = indexOf(pair, '=')
      , brace = lastBraceInKey(pair)
      , key = pair.substr(0, brace || eql)
      , val = pair.substr(brace || eql, pair.length)
      , val = val.substr(indexOf(val, '=') + 1, val.length);

    // ?foo
    if ('' == key) key = pair, val = '';
    if ('' == key) return ret;

    return merge(ret, decode(key), decode(val));
  }, { base: {} }).base;

  return compact(ret);
}

/**
 * Parse the given query `str` or `obj`, returning an object.
 *
 * @param {String} str | {Object} obj
 * @return {Object}
 * @api public
 */

exports.parse = function(str, options){
  if (null == str || '' == str) return {};
  options = options || {};
  options.separator = options.separator || '&';
  return 'object' == typeof str
    ? parseObject(str)
    : parseString(str, options);
};

/**
 * Turn the given `obj` into a query string
 *
 * @param {Object} obj
 * @return {String}
 * @api public
 */

var stringify = exports.stringify = function(obj, prefix) {
  if (isArray(obj)) {
    return stringifyArray(obj, prefix);
  } else if ('[object Object]' == toString.call(obj)) {
    return stringifyObject(obj, prefix);
  } else if ('string' == typeof obj) {
    return stringifyString(obj, prefix);
  } else {
    return prefix + '=' + encodeURIComponent(String(obj));
  }
};

/**
 * Stringify the given `str`.
 *
 * @param {String} str
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyString(str, prefix) {
  if (!prefix) throw new TypeError('stringify expects an object');
  return prefix + '=' + encodeURIComponent(str);
}

/**
 * Stringify the given `arr`.
 *
 * @param {Array} arr
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyArray(arr, prefix) {
  var ret = [];
  if (!prefix) throw new TypeError('stringify expects an object');
  for (var i = 0; i < arr.length; i++) {
    ret.push(stringify(arr[i], prefix + '[' + i + ']'));
  }
  return ret.join('&');
}

/**
 * Stringify the given `obj`.
 *
 * @param {Object} obj
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyObject(obj, prefix) {
  var ret = []
    , keys = objectKeys(obj)
    , key;

  for (var i = 0, len = keys.length; i < len; ++i) {
    key = keys[i];
    if ('' == key) continue;
    if (null == obj[key]) {
      ret.push(encodeURIComponent(key) + '=');
    } else {
      ret.push(stringify(obj[key], prefix
        ? prefix + '[' + encodeURIComponent(key) + ']'
        : encodeURIComponent(key)));
    }
  }

  return ret.join('&');
}

/**
 * Set `obj`'s `key` to `val` respecting
 * the weird and wonderful syntax of a qs,
 * where "foo=bar&foo=baz" becomes an array.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {String} val
 * @api private
 */

function set(obj, key, val) {
  var v = obj[key];
  if (hasOwnProperty.call(Object.prototype, key)) return;
  if (undefined === v) {
    obj[key] = val;
  } else if (isArray(v)) {
    v.push(val);
  } else {
    obj[key] = [v, val];
  }
}

/**
 * Locate last brace in `str` within the key.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function lastBraceInKey(str) {
  var len = str.length
    , brace
    , c;
  for (var i = 0; i < len; ++i) {
    c = str[i];
    if (']' == c) brace = false;
    if ('[' == c) brace = true;
    if ('=' == c && !brace) return i;
  }
}

/**
 * Decode `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function decode(str) {
  try {
    return decodeURIComponent(str.replace(/\+/g, ' '));
  } catch (err) {
    return str;
  }
}

},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/reqwest/reqwest.js":[function(require,module,exports){
/*!
  * Reqwest! A general purpose XHR connection manager
  * license MIT (c) Dustin Diaz 2014
  * https://github.com/ded/reqwest
  */

!function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
}('reqwest', this, function () {

  var win = window
    , doc = document
    , httpsRe = /^http/
    , protocolRe = /(^\w+):\/\//
    , twoHundo = /^(20\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
    , byTag = 'getElementsByTagName'
    , readyState = 'readyState'
    , contentType = 'Content-Type'
    , requestedWith = 'X-Requested-With'
    , head = doc[byTag]('head')[0]
    , uniqid = 0
    , callbackPrefix = 'reqwest_' + (+new Date())
    , lastValue // data stored by the most recent JSONP callback
    , xmlHttpRequest = 'XMLHttpRequest'
    , xDomainRequest = 'XDomainRequest'
    , noop = function () {}

    , isArray = typeof Array.isArray == 'function'
        ? Array.isArray
        : function (a) {
            return a instanceof Array
          }

    , defaultHeaders = {
          'contentType': 'application/x-www-form-urlencoded'
        , 'requestedWith': xmlHttpRequest
        , 'accept': {
              '*':  'text/javascript, text/html, application/xml, text/xml, */*'
            , 'xml':  'application/xml, text/xml'
            , 'html': 'text/html'
            , 'text': 'text/plain'
            , 'json': 'application/json, text/javascript'
            , 'js':   'application/javascript, text/javascript'
          }
      }

    , xhr = function(o) {
        // is it x-domain
        if (o['crossOrigin'] === true) {
          var xhr = win[xmlHttpRequest] ? new XMLHttpRequest() : null
          if (xhr && 'withCredentials' in xhr) {
            return xhr
          } else if (win[xDomainRequest]) {
            return new XDomainRequest()
          } else {
            throw new Error('Browser does not support cross-origin requests')
          }
        } else if (win[xmlHttpRequest]) {
          return new XMLHttpRequest()
        } else {
          return new ActiveXObject('Microsoft.XMLHTTP')
        }
      }
    , globalSetupOptions = {
        dataFilter: function (data) {
          return data
        }
      }

  function succeed(r) {
    var protocol = protocolRe.exec(r.url);
    protocol = (protocol && protocol[1]) || window.location.protocol;
    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response;
  }

  function handleReadyState(r, success, error) {
    return function () {
      // use _aborted to mitigate against IE err c00c023f
      // (can't read props on aborted request objects)
      if (r._aborted) return error(r.request)
      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')
      if (r.request && r.request[readyState] == 4) {
        r.request.onreadystatechange = noop
        if (succeed(r)) success(r.request)
        else
          error(r.request)
      }
    }
  }

  function setHeaders(http, o) {
    var headers = o['headers'] || {}
      , h

    headers['Accept'] = headers['Accept']
      || defaultHeaders['accept'][o['type']]
      || defaultHeaders['accept']['*']

    var isAFormData = typeof FormData === 'function' && (o['data'] instanceof FormData);
    // breaks cross-origin requests with legacy browsers
    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']
    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']
    for (h in headers)
      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])
  }

  function setCredentials(http, o) {
    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {
      http.withCredentials = !!o['withCredentials']
    }
  }

  function generalCallback(data) {
    lastValue = data
  }

  function urlappend (url, s) {
    return url + (/\?/.test(url) ? '&' : '?') + s
  }

  function handleJsonp(o, fn, err, url) {
    var reqId = uniqid++
      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key
      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)
      , cbreg = new RegExp('((^|\\?|&)' + cbkey + ')=([^&]+)')
      , match = url.match(cbreg)
      , script = doc.createElement('script')
      , loaded = 0
      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1

    if (match) {
      if (match[3] === '?') {
        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name
      } else {
        cbval = match[3] // provided callback func name
      }
    } else {
      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em
    }

    win[cbval] = generalCallback

    script.type = 'text/javascript'
    script.src = url
    script.async = true
    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {
      // need this for IE due to out-of-order onreadystatechange(), binding script
      // execution to an event listener gives us control over when the script
      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
      script.htmlFor = script.id = '_reqwest_' + reqId
    }

    script.onload = script.onreadystatechange = function () {
      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {
        return false
      }
      script.onload = script.onreadystatechange = null
      script.onclick && script.onclick()
      // Call the user callback with the last value stored and clean up values and scripts.
      fn(lastValue)
      lastValue = undefined
      head.removeChild(script)
      loaded = 1
    }

    // Add the script to the DOM head
    head.appendChild(script)

    // Enable JSONP timeout
    return {
      abort: function () {
        script.onload = script.onreadystatechange = null
        err({}, 'Request is aborted: timeout', {})
        lastValue = undefined
        head.removeChild(script)
        loaded = 1
      }
    }
  }

  function getRequest(fn, err) {
    var o = this.o
      , method = (o['method'] || 'GET').toUpperCase()
      , url = typeof o === 'string' ? o : o['url']
      // convert non-string objects to query-string form unless o['processData'] is false
      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')
        ? reqwest.toQueryString(o['data'])
        : (o['data'] || null)
      , http
      , sendWait = false

    // if we're working on a GET request and we have data then we should append
    // query string to end of URL and not post data
    if ((o['type'] == 'jsonp' || method == 'GET') && data) {
      url = urlappend(url, data)
      data = null
    }

    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)

    // get the xhr from the factory if passed
    // if the factory returns null, fall-back to ours
    http = (o.xhr && o.xhr(o)) || xhr(o)

    http.open(method, url, o['async'] === false ? false : true)
    setHeaders(http, o)
    setCredentials(http, o)
    if (win[xDomainRequest] && http instanceof win[xDomainRequest]) {
        http.onload = fn
        http.onerror = err
        // NOTE: see
        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e
        http.onprogress = function() {}
        sendWait = true
    } else {
      http.onreadystatechange = handleReadyState(this, fn, err)
    }
    o['before'] && o['before'](http)
    if (sendWait) {
      setTimeout(function () {
        http.send(data)
      }, 200)
    } else {
      http.send(data)
    }
    return http
  }

  function Reqwest(o, fn) {
    this.o = o
    this.fn = fn

    init.apply(this, arguments)
  }

  function setType(header) {
    // json, javascript, text/plain, text/html, xml
    if (header.match('json')) return 'json'
    if (header.match('javascript')) return 'js'
    if (header.match('text')) return 'html'
    if (header.match('xml')) return 'xml'
  }

  function init(o, fn) {

    this.url = typeof o == 'string' ? o : o['url']
    this.timeout = null

    // whether request has been fulfilled for purpose
    // of tracking the Promises
    this._fulfilled = false
    // success handlers
    this._successHandler = function(){}
    this._fulfillmentHandlers = []
    // error handlers
    this._errorHandlers = []
    // complete (both success and fail) handlers
    this._completeHandlers = []
    this._erred = false
    this._responseArgs = {}

    var self = this

    fn = fn || function () {}

    if (o['timeout']) {
      this.timeout = setTimeout(function () {
        timedOut()
      }, o['timeout'])
    }

    if (o['success']) {
      this._successHandler = function () {
        o['success'].apply(o, arguments)
      }
    }

    if (o['error']) {
      this._errorHandlers.push(function () {
        o['error'].apply(o, arguments)
      })
    }

    if (o['complete']) {
      this._completeHandlers.push(function () {
        o['complete'].apply(o, arguments)
      })
    }

    function complete (resp) {
      o['timeout'] && clearTimeout(self.timeout)
      self.timeout = null
      while (self._completeHandlers.length > 0) {
        self._completeHandlers.shift()(resp)
      }
    }

    function success (resp) {
      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE
      resp = (type !== 'jsonp') ? self.request : resp
      // use global data filter on response text
      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)
        , r = filteredResponse
      try {
        resp.responseText = r
      } catch (e) {
        // can't assign this in IE<=8, just ignore
      }
      if (r) {
        switch (type) {
        case 'json':
          try {
            resp = win.JSON ? win.JSON.parse(r) : eval('(' + r + ')')
          } catch (err) {
            return error(resp, 'Could not parse JSON in response', err)
          }
          break
        case 'js':
          resp = eval(r)
          break
        case 'html':
          resp = r
          break
        case 'xml':
          resp = resp.responseXML
              && resp.responseXML.parseError // IE trololo
              && resp.responseXML.parseError.errorCode
              && resp.responseXML.parseError.reason
            ? null
            : resp.responseXML
          break
        }
      }

      self._responseArgs.resp = resp
      self._fulfilled = true
      fn(resp)
      self._successHandler(resp)
      while (self._fulfillmentHandlers.length > 0) {
        resp = self._fulfillmentHandlers.shift()(resp)
      }

      complete(resp)
    }

    function timedOut() {
      self._timedOut = true
      self.request.abort()      
    }

    function error(resp, msg, t) {
      resp = self.request
      self._responseArgs.resp = resp
      self._responseArgs.msg = msg
      self._responseArgs.t = t
      self._erred = true
      while (self._errorHandlers.length > 0) {
        self._errorHandlers.shift()(resp, msg, t)
      }
      complete(resp)
    }

    this.request = getRequest.call(this, success, error)
  }

  Reqwest.prototype = {
    abort: function () {
      this._aborted = true
      this.request.abort()
    }

  , retry: function () {
      init.call(this, this.o, this.fn)
    }

    /**
     * Small deviation from the Promises A CommonJs specification
     * http://wiki.commonjs.org/wiki/Promises/A
     */

    /**
     * `then` will execute upon successful requests
     */
  , then: function (success, fail) {
      success = success || function () {}
      fail = fail || function () {}
      if (this._fulfilled) {
        this._responseArgs.resp = success(this._responseArgs.resp)
      } else if (this._erred) {
        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
      } else {
        this._fulfillmentHandlers.push(success)
        this._errorHandlers.push(fail)
      }
      return this
    }

    /**
     * `always` will execute whether the request succeeds or fails
     */
  , always: function (fn) {
      if (this._fulfilled || this._erred) {
        fn(this._responseArgs.resp)
      } else {
        this._completeHandlers.push(fn)
      }
      return this
    }

    /**
     * `fail` will execute when the request fails
     */
  , fail: function (fn) {
      if (this._erred) {
        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
      } else {
        this._errorHandlers.push(fn)
      }
      return this
    }
  , 'catch': function (fn) {
      return this.fail(fn)
    }
  }

  function reqwest(o, fn) {
    return new Reqwest(o, fn)
  }

  // normalize newline variants according to spec -> CRLF
  function normalize(s) {
    return s ? s.replace(/\r?\n/g, '\r\n') : ''
  }

  function serial(el, cb) {
    var n = el.name
      , t = el.tagName.toLowerCase()
      , optCb = function (o) {
          // IE gives value="" even where there is no value attribute
          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273
          if (o && !o['disabled'])
            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))
        }
      , ch, ra, val, i

    // don't serialize elements that are disabled or without a name
    if (el.disabled || !n) return

    switch (t) {
    case 'input':
      if (!/reset|button|image|file/i.test(el.type)) {
        ch = /checkbox/i.test(el.type)
        ra = /radio/i.test(el.type)
        val = el.value
        // WebKit gives us "" instead of "on" if a checkbox has no value, so correct it here
        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))
      }
      break
    case 'textarea':
      cb(n, normalize(el.value))
      break
    case 'select':
      if (el.type.toLowerCase() === 'select-one') {
        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)
      } else {
        for (i = 0; el.length && i < el.length; i++) {
          el.options[i].selected && optCb(el.options[i])
        }
      }
      break
    }
  }

  // collect up all form elements found from the passed argument elements all
  // the way down to child elements; pass a '<form>' or form fields.
  // called with 'this'=callback to use for serial() on each element
  function eachFormElement() {
    var cb = this
      , e, i
      , serializeSubtags = function (e, tags) {
          var i, j, fa
          for (i = 0; i < tags.length; i++) {
            fa = e[byTag](tags[i])
            for (j = 0; j < fa.length; j++) serial(fa[j], cb)
          }
        }

    for (i = 0; i < arguments.length; i++) {
      e = arguments[i]
      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)
      serializeSubtags(e, [ 'input', 'select', 'textarea' ])
    }
  }

  // standard query string style serialization
  function serializeQueryString() {
    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))
  }

  // { 'name': 'value', ... } style serialization
  function serializeHash() {
    var hash = {}
    eachFormElement.apply(function (name, value) {
      if (name in hash) {
        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])
        hash[name].push(value)
      } else hash[name] = value
    }, arguments)
    return hash
  }

  // [ { name: 'name', value: 'value' }, ... ] style serialization
  reqwest.serializeArray = function () {
    var arr = []
    eachFormElement.apply(function (name, value) {
      arr.push({name: name, value: value})
    }, arguments)
    return arr
  }

  reqwest.serialize = function () {
    if (arguments.length === 0) return ''
    var opt, fn
      , args = Array.prototype.slice.call(arguments, 0)

    opt = args.pop()
    opt && opt.nodeType && args.push(opt) && (opt = null)
    opt && (opt = opt.type)

    if (opt == 'map') fn = serializeHash
    else if (opt == 'array') fn = reqwest.serializeArray
    else fn = serializeQueryString

    return fn.apply(null, args)
  }

  reqwest.toQueryString = function (o, trad) {
    var prefix, i
      , traditional = trad || false
      , s = []
      , enc = encodeURIComponent
      , add = function (key, value) {
          // If value is a function, invoke it and return its value
          value = ('function' === typeof value) ? value() : (value == null ? '' : value)
          s[s.length] = enc(key) + '=' + enc(value)
        }
    // If an array was passed in, assume that it is an array of form elements.
    if (isArray(o)) {
      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in o) {
        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)
      }
    }

    // spaces should be + according to spec
    return s.join('&').replace(/%20/g, '+')
  }

  function buildParams(prefix, obj, traditional, add) {
    var name, i, v
      , rbracket = /\[\]$/

    if (isArray(obj)) {
      // Serialize array item.
      for (i = 0; obj && i < obj.length; i++) {
        v = obj[i]
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v)
        } else {
          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)
        }
      }
    } else if (obj && obj.toString() === '[object Object]') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
      }

    } else {
      // Serialize scalar item.
      add(prefix, obj)
    }
  }

  reqwest.getcallbackPrefix = function () {
    return callbackPrefix
  }

  // jQuery and Zepto compatibility, differences can be remapped here so you can call
  // .ajax.compat(options, callback)
  reqwest.compat = function (o, fn) {
    if (o) {
      o['type'] && (o['method'] = o['type']) && delete o['type']
      o['dataType'] && (o['type'] = o['dataType'])
      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']
      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])
    }
    return new Reqwest(o, fn)
  }

  reqwest.ajaxSetup = function (options) {
    options = options || {}
    for (var k in options) {
      globalSetupOptions[k] = options[k]
    }
  }

  return reqwest
});

},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/winchan/winchan.js":[function(require,module,exports){
var WinChan = (function() {
  var RELAY_FRAME_NAME = "__winchan_relay_frame";
  var CLOSE_CMD = "die";

  // a portable addListener implementation
  function addListener(w, event, cb) {
    if(w.attachEvent) w.attachEvent('on' + event, cb);
    else if (w.addEventListener) w.addEventListener(event, cb, false);
  }

  // a portable removeListener implementation
  function removeListener(w, event, cb) {
    if(w.detachEvent) w.detachEvent('on' + event, cb);
    else if (w.removeEventListener) w.removeEventListener(event, cb, false);
  }


  // checking for IE8 or above
  function isInternetExplorer() {
    var rv = -1; // Return value assumes failure.
    var ua = navigator.userAgent;
    if (navigator.appName === 'Microsoft Internet Explorer') {
      var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
      if (re.exec(ua) != null)
        rv = parseFloat(RegExp.$1);
    }
    // IE > 11
    else if (ua.indexOf("Trident") > -1) {
      var re = new RegExp("rv:([0-9]{2,2}[\.0-9]{0,})");
      if (re.exec(ua) !== null) {
        rv = parseFloat(RegExp.$1);
      }
    }

    return rv >= 8;
  }

  // checking Mobile Firefox (Fennec)
  function isFennec() {
    try {
      // We must check for both XUL and Java versions of Fennec.  Both have
      // distinct UA strings.
      var userAgent = navigator.userAgent;
      return (userAgent.indexOf('Fennec/') != -1) ||  // XUL
             (userAgent.indexOf('Firefox/') != -1 && userAgent.indexOf('Android') != -1);   // Java
    } catch(e) {}
    return false;
  }

  // feature checking to see if this platform is supported at all
  function isSupported() {
    return (window.JSON && window.JSON.stringify &&
            window.JSON.parse && window.postMessage);
  }

  // given a URL, extract the origin. Taken from: https://github.com/firebase/firebase-simple-login/blob/d2cb95b9f812d8488bdbfba51c3a7c153ba1a074/js/src/simple-login/transports/WinChan.js#L25-L30
  function extractOrigin(url) {
    if (!/^https?:\/\//.test(url)) url = window.location.href;
    var m = /^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(url);
    if (m) return m[1];
    return url;
  }

  // find the relay iframe in the opener
  function findRelay() {
    var loc = window.location;
    var frames = window.opener.frames;
    for (var i = frames.length - 1; i >= 0; i--) {
      try {
        if (frames[i].location.protocol === window.location.protocol &&
            frames[i].location.host === window.location.host &&
            frames[i].name === RELAY_FRAME_NAME)
        {
          return frames[i];
        }
      } catch(e) { }
    }
    return;
  }

  var isIE = isInternetExplorer();

  if (isSupported()) {
    /*  General flow:
     *                  0. user clicks
     *  (IE SPECIFIC)   1. caller adds relay iframe (served from trusted domain) to DOM
     *                  2. caller opens window (with content from trusted domain)
     *                  3. window on opening adds a listener to 'message'
     *  (IE SPECIFIC)   4. window on opening finds iframe
     *                  5. window checks if iframe is "loaded" - has a 'doPost' function yet
     *  (IE SPECIFIC5)  5a. if iframe.doPost exists, window uses it to send ready event to caller
     *  (IE SPECIFIC5)  5b. if iframe.doPost doesn't exist, window waits for frame ready
     *  (IE SPECIFIC5)  5bi. once ready, window calls iframe.doPost to send ready event
     *                  6. caller upon reciept of 'ready', sends args
     */
    return {
      open: function(opts, cb) {
        if (!cb) throw "missing required callback argument";

        // test required options
        var err;
        if (!opts.url) err = "missing required 'url' parameter";
        if (!opts.relay_url) err = "missing required 'relay_url' parameter";
        if (err) setTimeout(function() { cb(err); }, 0);

        // supply default options
        if (!opts.window_name) opts.window_name = null;
        if (!opts.window_features || isFennec()) opts.window_features = undefined;

        // opts.params may be undefined

        var iframe;

        // sanity check, are url and relay_url the same origin?
        var origin = extractOrigin(opts.url);
        if (origin !== extractOrigin(opts.relay_url)) {
          return setTimeout(function() {
            cb('invalid arguments: origin of url and relay_url must match');
          }, 0);
        }

        var messageTarget;

        if (isIE) {
          // first we need to add a "relay" iframe to the document that's served
          // from the target domain.  We can postmessage into a iframe, but not a
          // window
          iframe = document.createElement("iframe");
          // iframe.setAttribute('name', framename);
          iframe.setAttribute('src', opts.relay_url);
          iframe.style.display = "none";
          iframe.setAttribute('name', RELAY_FRAME_NAME);
          document.body.appendChild(iframe);
          messageTarget = iframe.contentWindow;
        }

        var w = opts.popup || window.open(opts.url, opts.window_name, opts.window_features);
        if (opts.popup) {
          w.location.href = opts.url;
        }

        if (!messageTarget) messageTarget = w;

        // lets listen in case the window blows up before telling us
        var closeInterval = setInterval(function() {
          if (w && w.closed) {
            cleanup();
            if (cb) {
              cb('User closed the popup window');
              cb = null;
            }
          }
        }, 500);

        var req = JSON.stringify({a: 'request', d: opts.params});

        // cleanup on unload
        function cleanup() {
          if (iframe) document.body.removeChild(iframe);
          iframe = undefined;
          if (closeInterval) closeInterval = clearInterval(closeInterval);
          removeListener(window, 'message', onMessage);
          removeListener(window, 'unload', cleanup);
          if (w) {
            try {
              w.close();
            } catch (securityViolation) {
              // This happens in Opera 12 sometimes
              // see https://github.com/mozilla/browserid/issues/1844
              messageTarget.postMessage(CLOSE_CMD, origin);
            }
          }
          w = messageTarget = undefined;
        }

        addListener(window, 'unload', cleanup);

        function onMessage(e) {
          if (e.origin !== origin) { return; }
          try {
            var d = JSON.parse(e.data);
            if (d.a === 'ready') messageTarget.postMessage(req, origin);
            else if (d.a === 'error') {
              cleanup();
              if (cb) {
                cb(d.d);
                cb = null;
              }
            } else if (d.a === 'response') {
              cleanup();
              if (cb) {
                cb(null, d.d);
                cb = null;
              }
            }
          } catch(err) { }
        }

        addListener(window, 'message', onMessage);

        return {
          close: cleanup,
          focus: function() {
            if (w) {
              try {
                w.focus();
              } catch (e) {
                // IE7 blows up here, do nothing
              }
            }
          }
        };
      },
      onOpen: function(cb) {
        var o = "*";
        var msgTarget = isIE ? findRelay() : window.opener;
        if (!msgTarget) throw "can't find relay frame";
        function doPost(msg) {
          msg = JSON.stringify(msg);
          if (isIE) msgTarget.doPost(msg, o);
          else msgTarget.postMessage(msg, o);
        }

        function onMessage(e) {
          // only one message gets through, but let's make sure it's actually
          // the message we're looking for (other code may be using
          // postmessage) - we do this by ensuring the payload can
          // be parsed, and it's got an 'a' (action) value of 'request'.
          var d;
          try {
            d = JSON.parse(e.data);
          } catch(err) { }
          if (!d || d.a !== 'request') return;
          removeListener(window, 'message', onMessage);
          o = e.origin;
          if (cb) {
            // this setTimeout is critically important for IE8 -
            // in ie8 sometimes addListener for 'message' can synchronously
            // cause your callback to be invoked.  awesome.
            setTimeout(function() {
              cb(o, d.d, function(r) {
                cb = undefined;
                doPost({a: 'response', d: r});
              });
            }, 0);
          }
        }

        function onDie(e) {
          if (e.data === CLOSE_CMD) {
            try { window.close(); } catch (o_O) {}
          }
        }
        addListener(isIE ? msgTarget : window, 'message', onMessage);
        addListener(isIE ? msgTarget : window, 'message', onDie);

        // we cannot post to our parent that we're ready before the iframe
        // is loaded. (IE specific possible failure)
        try {
          doPost({a: "ready"});
        } catch(e) {
          // this code should never be exectued outside IE
          addListener(msgTarget, 'load', function(e) {
            doPost({a: "ready"});
          });
        }

        // if window is unloaded and the client hasn't called cb, it's an error
        var onUnload = function() {
          try {
            // IE8 doesn't like this...
            removeListener(isIE ? msgTarget : window, 'message', onDie);
          } catch (ohWell) { }
          if (cb) doPost({ a: 'error', d: 'client closed window' });
          cb = undefined;
          // explicitly close the window, in case the client is trying to reload or nav
          try { window.close(); } catch (e) { }
        };
        addListener(window, 'unload', onUnload);
        return {
          detach: function() {
            removeListener(window, 'unload', onUnload);
          }
        };
      }
    };
  } else {
    return {
      open: function(url, winopts, arg, cb) {
        setTimeout(function() { cb("unsupported browser"); }, 0);
      },
      onOpen: function(cb) {
        setTimeout(function() { cb("unsupported browser"); }, 0);
      }
    };
  }
})();

if (typeof module !== 'undefined' && module.exports) {
  module.exports = WinChan;
}

},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/has-keys.js":[function(require,module,exports){
module.exports = hasKeys

function hasKeys(source) {
    return source !== null &&
        (typeof source === "object" ||
        typeof source === "function")
}

},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/index.js":[function(require,module,exports){
var Keys = require("object-keys")
var hasKeys = require("./has-keys")

module.exports = extend

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        if (!hasKeys(source)) {
            continue
        }

        var keys = Keys(source)

        for (var j = 0; j < keys.length; j++) {
            var name = keys[j]
            target[name] = source[name]
        }
    }

    return target
}

},{"./has-keys":"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/has-keys.js","object-keys":"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/index.js"}],"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/foreach.js":[function(require,module,exports){
var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var isFunction = function (fn) {
	var isFunc = (typeof fn === 'function' && !(fn instanceof RegExp)) || toString.call(fn) === '[object Function]';
	if (!isFunc && typeof window !== 'undefined') {
		isFunc = fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt;
	}
	return isFunc;
};

module.exports = function forEach(obj, fn) {
	if (!isFunction(fn)) {
		throw new TypeError('iterator must be a function');
	}
	var i, k,
		isString = typeof obj === 'string',
		l = obj.length,
		context = arguments.length > 2 ? arguments[2] : null;
	if (l === +l) {
		for (i = 0; i < l; i++) {
			if (context === null) {
				fn(isString ? obj.charAt(i) : obj[i], i, obj);
			} else {
				fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
			}
		}
	} else {
		for (k in obj) {
			if (hasOwn.call(obj, k)) {
				if (context === null) {
					fn(obj[k], k, obj);
				} else {
					fn.call(context, obj[k], k, obj);
				}
			}
		}
	}
};


},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/index.js":[function(require,module,exports){
module.exports = Object.keys || require('./shim');


},{"./shim":"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/shim.js"}],"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/isArguments.js":[function(require,module,exports){
var toString = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toString.call(value);
	var isArguments = str === '[object Arguments]';
	if (!isArguments) {
		isArguments = str !== '[object Array]'
			&& value !== null
			&& typeof value === 'object'
			&& typeof value.length === 'number'
			&& value.length >= 0
			&& toString.call(value.callee) === '[object Function]';
	}
	return isArguments;
};


},{}],"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/shim.js":[function(require,module,exports){
(function () {
	"use strict";

	// modified from https://github.com/kriskowal/es5-shim
	var has = Object.prototype.hasOwnProperty,
		toString = Object.prototype.toString,
		forEach = require('./foreach'),
		isArgs = require('./isArguments'),
		hasDontEnumBug = !({'toString': null}).propertyIsEnumerable('toString'),
		hasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype'),
		dontEnums = [
			"toString",
			"toLocaleString",
			"valueOf",
			"hasOwnProperty",
			"isPrototypeOf",
			"propertyIsEnumerable",
			"constructor"
		],
		keysShim;

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object',
			isFunction = toString.call(object) === '[object Function]',
			isArguments = isArgs(object),
			theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError("Object.keys called on a non-object");
		}

		if (isArguments) {
			forEach(object, function (value) {
				theKeys.push(value);
			});
		} else {
			var name,
				skipProto = hasProtoEnumBug && isFunction;

			for (name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(name);
				}
			}
		}

		if (hasDontEnumBug) {
			var ctor = object.constructor,
				skipConstructor = ctor && ctor.prototype === object;

			forEach(dontEnums, function (dontEnum) {
				if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
					theKeys.push(dontEnum);
				}
			});
		}
		return theKeys;
	};

	module.exports = keysShim;
}());


},{"./foreach":"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/foreach.js","./isArguments":"/home/strider/workspace/node_modules/auth0-js/node_modules/xtend/node_modules/object-keys/isArguments.js"}],"/home/strider/workspace/node_modules/bean/bean.js":[function(require,module,exports){
/*!
  * Bean - copyright (c) Jacob Thornton 2011-2012
  * https://github.com/fat/bean
  * MIT license
  */
(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
})('bean', this, function (name, context) {
  name    = name    || 'bean'
  context = context || this

  var win            = window
    , old            = context[name]
    , namespaceRegex = /[^\.]*(?=\..*)\.|.*/
    , nameRegex      = /\..*/
    , addEvent       = 'addEventListener'
    , removeEvent    = 'removeEventListener'
    , doc            = document || {}
    , root           = doc.documentElement || {}
    , W3C_MODEL      = root[addEvent]
    , eventSupport   = W3C_MODEL ? addEvent : 'attachEvent'
    , ONE            = {} // singleton for quick matching making add() do one()

    , slice          = Array.prototype.slice
    , str2arr        = function (s, d) { return s.split(d || ' ') }
    , isString       = function (o) { return typeof o == 'string' }
    , isFunction     = function (o) { return typeof o == 'function' }

      // events that we consider to be 'native', anything not in this list will
      // be treated as a custom event
    , standardNativeEvents =
        'click dblclick mouseup mousedown contextmenu '                  + // mouse buttons
        'mousewheel mousemultiwheel DOMMouseScroll '                     + // mouse wheel
        'mouseover mouseout mousemove selectstart selectend '            + // mouse movement
        'keydown keypress keyup '                                        + // keyboard
        'orientationchange '                                             + // mobile
        'focus blur change reset select submit '                         + // form elements
        'load unload beforeunload resize move DOMContentLoaded '         + // window
        'readystatechange message '                                      + // window
        'error abort scroll '                                              // misc
      // element.fireEvent('onXYZ'... is not forgiving if we try to fire an event
      // that doesn't actually exist, so make sure we only do these on newer browsers
    , w3cNativeEvents =
        'show '                                                          + // mouse buttons
        'input invalid '                                                 + // form elements
        'touchstart touchmove touchend touchcancel '                     + // touch
        'gesturestart gesturechange gestureend '                         + // gesture
        'textinput '                                                     + // TextEvent
        'readystatechange pageshow pagehide popstate '                   + // window
        'hashchange offline online '                                     + // window
        'afterprint beforeprint '                                        + // printing
        'dragstart dragenter dragover dragleave drag drop dragend '      + // dnd
        'loadstart progress suspend emptied stalled loadmetadata '       + // media
        'loadeddata canplay canplaythrough playing waiting seeking '     + // media
        'seeked ended durationchange timeupdate play pause ratechange '  + // media
        'volumechange cuechange '                                        + // media
        'checking noupdate downloading cached updateready obsolete '       // appcache

      // convert to a hash for quick lookups
    , nativeEvents = (function (hash, events, i) {
        for (i = 0; i < events.length; i++) events[i] && (hash[events[i]] = 1)
        return hash
      }({}, str2arr(standardNativeEvents + (W3C_MODEL ? w3cNativeEvents : ''))))

      // custom events are events that we *fake*, they are not provided natively but
      // we can use native events to generate them
    , customEvents = (function () {
        var isAncestor = 'compareDocumentPosition' in root
              ? function (element, container) {
                  return container.compareDocumentPosition && (container.compareDocumentPosition(element) & 16) === 16
                }
              : 'contains' in root
                ? function (element, container) {
                    container = container.nodeType === 9 || container === window ? root : container
                    return container !== element && container.contains(element)
                  }
                : function (element, container) {
                    while (element = element.parentNode) if (element === container) return 1
                    return 0
                  }
          , check = function (event) {
              var related = event.relatedTarget
              return !related
                ? related == null
                : (related !== this && related.prefix !== 'xul' && !/document/.test(this.toString())
                    && !isAncestor(related, this))
            }

        return {
            mouseenter: { base: 'mouseover', condition: check }
          , mouseleave: { base: 'mouseout', condition: check }
          , mousewheel: { base: /Firefox/.test(navigator.userAgent) ? 'DOMMouseScroll' : 'mousewheel' }
        }
      }())

      // we provide a consistent Event object across browsers by taking the actual DOM
      // event object and generating a new one from its properties.
    , Event = (function () {
            // a whitelist of properties (for different event types) tells us what to check for and copy
        var commonProps  = str2arr('altKey attrChange attrName bubbles cancelable ctrlKey currentTarget ' +
              'detail eventPhase getModifierState isTrusted metaKey relatedNode relatedTarget shiftKey '  +
              'srcElement target timeStamp type view which propertyName')
          , mouseProps   = commonProps.concat(str2arr('button buttons clientX clientY dataTransfer '      +
              'fromElement offsetX offsetY pageX pageY screenX screenY toElement'))
          , mouseWheelProps = mouseProps.concat(str2arr('wheelDelta wheelDeltaX wheelDeltaY wheelDeltaZ ' +
              'axis')) // 'axis' is FF specific
          , keyProps     = commonProps.concat(str2arr('char charCode key keyCode keyIdentifier '          +
              'keyLocation location'))
          , textProps    = commonProps.concat(str2arr('data'))
          , touchProps   = commonProps.concat(str2arr('touches targetTouches changedTouches scale rotation'))
          , messageProps = commonProps.concat(str2arr('data origin source'))
          , stateProps   = commonProps.concat(str2arr('state'))
          , overOutRegex = /over|out/
            // some event types need special handling and some need special properties, do that all here
          , typeFixers   = [
                { // key events
                    reg: /key/i
                  , fix: function (event, newEvent) {
                      newEvent.keyCode = event.keyCode || event.which
                      return keyProps
                    }
                }
              , { // mouse events
                    reg: /click|mouse(?!(.*wheel|scroll))|menu|drag|drop/i
                  , fix: function (event, newEvent, type) {
                      newEvent.rightClick = event.which === 3 || event.button === 2
                      newEvent.pos = { x: 0, y: 0 }
                      if (event.pageX || event.pageY) {
                        newEvent.clientX = event.pageX
                        newEvent.clientY = event.pageY
                      } else if (event.clientX || event.clientY) {
                        newEvent.clientX = event.clientX + doc.body.scrollLeft + root.scrollLeft
                        newEvent.clientY = event.clientY + doc.body.scrollTop + root.scrollTop
                      }
                      if (overOutRegex.test(type)) {
                        newEvent.relatedTarget = event.relatedTarget
                          || event[(type == 'mouseover' ? 'from' : 'to') + 'Element']
                      }
                      return mouseProps
                    }
                }
              , { // mouse wheel events
                    reg: /mouse.*(wheel|scroll)/i
                  , fix: function () { return mouseWheelProps }
                }
              , { // TextEvent
                    reg: /^text/i
                  , fix: function () { return textProps }
                }
              , { // touch and gesture events
                    reg: /^touch|^gesture/i
                  , fix: function () { return touchProps }
                }
              , { // message events
                    reg: /^message$/i
                  , fix: function () { return messageProps }
                }
              , { // popstate events
                    reg: /^popstate$/i
                  , fix: function () { return stateProps }
                }
              , { // everything else
                    reg: /.*/
                  , fix: function () { return commonProps }
                }
            ]
          , typeFixerMap = {} // used to map event types to fixer functions (above), a basic cache mechanism

          , Event = function (event, element, isNative) {
              if (!arguments.length) return
              event = event || ((element.ownerDocument || element.document || element).parentWindow || win).event
              this.originalEvent = event
              this.isNative       = isNative
              this.isBean         = true

              if (!event) return

              var type   = event.type
                , target = event.target || event.srcElement
                , i, l, p, props, fixer

              this.target = target && target.nodeType === 3 ? target.parentNode : target

              if (isNative) { // we only need basic augmentation on custom events, the rest expensive & pointless
                fixer = typeFixerMap[type]
                if (!fixer) { // haven't encountered this event type before, map a fixer function for it
                  for (i = 0, l = typeFixers.length; i < l; i++) {
                    if (typeFixers[i].reg.test(type)) { // guaranteed to match at least one, last is .*
                      typeFixerMap[type] = fixer = typeFixers[i].fix
                      break
                    }
                  }
                }

                props = fixer(event, this, type)
                for (i = props.length; i--;) {
                  if (!((p = props[i]) in this) && p in event) this[p] = event[p]
                }
              }
            }

        // preventDefault() and stopPropagation() are a consistent interface to those functions
        // on the DOM, stop() is an alias for both of them together
        Event.prototype.preventDefault = function () {
          if (this.originalEvent.preventDefault) this.originalEvent.preventDefault()
          else this.originalEvent.returnValue = false
        }
        Event.prototype.stopPropagation = function () {
          if (this.originalEvent.stopPropagation) this.originalEvent.stopPropagation()
          else this.originalEvent.cancelBubble = true
        }
        Event.prototype.stop = function () {
          this.preventDefault()
          this.stopPropagation()
          this.stopped = true
        }
        // stopImmediatePropagation() has to be handled internally because we manage the event list for
        // each element
        // note that originalElement may be a Bean#Event object in some situations
        Event.prototype.stopImmediatePropagation = function () {
          if (this.originalEvent.stopImmediatePropagation) this.originalEvent.stopImmediatePropagation()
          this.isImmediatePropagationStopped = function () { return true }
        }
        Event.prototype.isImmediatePropagationStopped = function () {
          return this.originalEvent.isImmediatePropagationStopped && this.originalEvent.isImmediatePropagationStopped()
        }
        Event.prototype.clone = function (currentTarget) {
          //TODO: this is ripe for optimisation, new events are *expensive*
          // improving this will speed up delegated events
          var ne = new Event(this, this.element, this.isNative)
          ne.currentTarget = currentTarget
          return ne
        }

        return Event
      }())

      // if we're in old IE we can't do onpropertychange on doc or win so we use doc.documentElement for both
    , targetElement = function (element, isNative) {
        return !W3C_MODEL && !isNative && (element === doc || element === win) ? root : element
      }

      /**
        * Bean maintains an internal registry for event listeners. We don't touch elements, objects
        * or functions to identify them, instead we store everything in the registry.
        * Each event listener has a RegEntry object, we have one 'registry' for the whole instance.
        */
    , RegEntry = (function () {
        // each handler is wrapped so we can handle delegation and custom events
        var wrappedHandler = function (element, fn, condition, args) {
            var call = function (event, eargs) {
                  return fn.apply(element, args ? slice.call(eargs, event ? 0 : 1).concat(args) : eargs)
                }
              , findTarget = function (event, eventElement) {
                  return fn.__beanDel ? fn.__beanDel.ft(event.target, element) : eventElement
                }
              , handler = condition
                  ? function (event) {
                      var target = findTarget(event, this) // deleated event
                      if (condition.apply(target, arguments)) {
                        if (event) event.currentTarget = target
                        return call(event, arguments)
                      }
                    }
                  : function (event) {
                      if (fn.__beanDel) event = event.clone(findTarget(event)) // delegated event, fix the fix
                      return call(event, arguments)
                    }
            handler.__beanDel = fn.__beanDel
            return handler
          }

        , RegEntry = function (element, type, handler, original, namespaces, args, root) {
            var customType     = customEvents[type]
              , isNative

            if (type == 'unload') {
              // self clean-up
              handler = once(removeListener, element, type, handler, original)
            }

            if (customType) {
              if (customType.condition) {
                handler = wrappedHandler(element, handler, customType.condition, args)
              }
              type = customType.base || type
            }

            this.isNative      = isNative = nativeEvents[type] && !!element[eventSupport]
            this.customType    = !W3C_MODEL && !isNative && type
            this.element       = element
            this.type          = type
            this.original      = original
            this.namespaces    = namespaces
            this.eventType     = W3C_MODEL || isNative ? type : 'propertychange'
            this.target        = targetElement(element, isNative)
            this[eventSupport] = !!this.target[eventSupport]
            this.root          = root
            this.handler       = wrappedHandler(element, handler, null, args)
          }

        // given a list of namespaces, is our entry in any of them?
        RegEntry.prototype.inNamespaces = function (checkNamespaces) {
          var i, j, c = 0
          if (!checkNamespaces) return true
          if (!this.namespaces) return false
          for (i = checkNamespaces.length; i--;) {
            for (j = this.namespaces.length; j--;) {
              if (checkNamespaces[i] == this.namespaces[j]) c++
            }
          }
          return checkNamespaces.length === c
        }

        // match by element, original fn (opt), handler fn (opt)
        RegEntry.prototype.matches = function (checkElement, checkOriginal, checkHandler) {
          return this.element === checkElement &&
            (!checkOriginal || this.original === checkOriginal) &&
            (!checkHandler || this.handler === checkHandler)
        }

        return RegEntry
      }())

    , registry = (function () {
        // our map stores arrays by event type, just because it's better than storing
        // everything in a single array.
        // uses '$' as a prefix for the keys for safety and 'r' as a special prefix for
        // rootListeners so we can look them up fast
        var map = {}

          // generic functional search of our registry for matching listeners,
          // `fn` returns false to break out of the loop
          , forAll = function (element, type, original, handler, root, fn) {
              var pfx = root ? 'r' : '$'
              if (!type || type == '*') {
                // search the whole registry
                for (var t in map) {
                  if (t.charAt(0) == pfx) {
                    forAll(element, t.substr(1), original, handler, root, fn)
                  }
                }
              } else {
                var i = 0, l, list = map[pfx + type], all = element == '*'
                if (!list) return
                for (l = list.length; i < l; i++) {
                  if ((all || list[i].matches(element, original, handler)) && !fn(list[i], list, i, type)) return
                }
              }
            }

          , has = function (element, type, original, root) {
              // we're not using forAll here simply because it's a bit slower and this
              // needs to be fast
              var i, list = map[(root ? 'r' : '$') + type]
              if (list) {
                for (i = list.length; i--;) {
                  if (!list[i].root && list[i].matches(element, original, null)) return true
                }
              }
              return false
            }

          , get = function (element, type, original, root) {
              var entries = []
              forAll(element, type, original, null, root, function (entry) {
                return entries.push(entry)
              })
              return entries
            }

          , put = function (entry) {
              var has = !entry.root && !this.has(entry.element, entry.type, null, false)
                , key = (entry.root ? 'r' : '$') + entry.type
              ;(map[key] || (map[key] = [])).push(entry)
              return has
            }

          , del = function (entry) {
              forAll(entry.element, entry.type, null, entry.handler, entry.root, function (entry, list, i) {
                list.splice(i, 1)
                entry.removed = true
                if (list.length === 0) delete map[(entry.root ? 'r' : '$') + entry.type]
                return false
              })
            }

            // dump all entries, used for onunload
          , entries = function () {
              var t, entries = []
              for (t in map) {
                if (t.charAt(0) == '$') entries = entries.concat(map[t])
              }
              return entries
            }

        return { has: has, get: get, put: put, del: del, entries: entries }
      }())

      // we need a selector engine for delegated events, use querySelectorAll if it exists
      // but for older browsers we need Qwery, Sizzle or similar
    , selectorEngine
    , setSelectorEngine = function (e) {
        if (!arguments.length) {
          selectorEngine = doc.querySelectorAll
            ? function (s, r) {
                return r.querySelectorAll(s)
              }
            : function () {
                throw new Error('Bean: No selector engine installed') // eeek
              }
        } else {
          selectorEngine = e
        }
      }

      // we attach this listener to each DOM event that we need to listen to, only once
      // per event type per DOM element
    , rootListener = function (event, type) {
        if (!W3C_MODEL && type && event && event.propertyName != '_on' + type) return

        var listeners = registry.get(this, type || event.type, null, false)
          , l = listeners.length
          , i = 0

        event = new Event(event, this, true)
        if (type) event.type = type

        // iterate through all handlers registered for this type, calling them unless they have
        // been removed by a previous handler or stopImmediatePropagation() has been called
        for (; i < l && !event.isImmediatePropagationStopped(); i++) {
          if (!listeners[i].removed) listeners[i].handler.call(this, event)
        }
      }

      // add and remove listeners to DOM elements
    , listener = W3C_MODEL
        ? function (element, type, add) {
            // new browsers
            element[add ? addEvent : removeEvent](type, rootListener, false)
          }
        : function (element, type, add, custom) {
            // IE8 and below, use attachEvent/detachEvent and we have to piggy-back propertychange events
            // to simulate event bubbling etc.
            var entry
            if (add) {
              registry.put(entry = new RegEntry(
                  element
                , custom || type
                , function (event) { // handler
                    rootListener.call(element, event, custom)
                  }
                , rootListener
                , null
                , null
                , true // is root
              ))
              if (custom && element['_on' + custom] == null) element['_on' + custom] = 0
              entry.target.attachEvent('on' + entry.eventType, entry.handler)
            } else {
              entry = registry.get(element, custom || type, rootListener, true)[0]
              if (entry) {
                entry.target.detachEvent('on' + entry.eventType, entry.handler)
                registry.del(entry)
              }
            }
          }

    , once = function (rm, element, type, fn, originalFn) {
        // wrap the handler in a handler that does a remove as well
        return function () {
          fn.apply(this, arguments)
          rm(element, type, originalFn)
        }
      }

    , removeListener = function (element, orgType, handler, namespaces) {
        var type     = orgType && orgType.replace(nameRegex, '')
          , handlers = registry.get(element, type, null, false)
          , removed  = {}
          , i, l

        for (i = 0, l = handlers.length; i < l; i++) {
          if ((!handler || handlers[i].original === handler) && handlers[i].inNamespaces(namespaces)) {
            // TODO: this is problematic, we have a registry.get() and registry.del() that
            // both do registry searches so we waste cycles doing this. Needs to be rolled into
            // a single registry.forAll(fn) that removes while finding, but the catch is that
            // we'll be splicing the arrays that we're iterating over. Needs extra tests to
            // make sure we don't screw it up. @rvagg
            registry.del(handlers[i])
            if (!removed[handlers[i].eventType] && handlers[i][eventSupport])
              removed[handlers[i].eventType] = { t: handlers[i].eventType, c: handlers[i].type }
          }
        }
        // check each type/element for removed listeners and remove the rootListener where it's no longer needed
        for (i in removed) {
          if (!registry.has(element, removed[i].t, null, false)) {
            // last listener of this type, remove the rootListener
            listener(element, removed[i].t, false, removed[i].c)
          }
        }
      }

      // set up a delegate helper using the given selector, wrap the handler function
    , delegate = function (selector, fn) {
        //TODO: findTarget (therefore $) is called twice, once for match and once for
        // setting e.currentTarget, fix this so it's only needed once
        var findTarget = function (target, root) {
              var i, array = isString(selector) ? selectorEngine(selector, root) : selector
              for (; target && target !== root; target = target.parentNode) {
                for (i = array.length; i--;) {
                  if (array[i] === target) return target
                }
              }
            }
          , handler = function (e) {
              var match = findTarget(e.target, this)
              if (match) fn.apply(match, arguments)
            }

        // __beanDel isn't pleasant but it's a private function, not exposed outside of Bean
        handler.__beanDel = {
            ft       : findTarget // attach it here for customEvents to use too
          , selector : selector
        }
        return handler
      }

    , fireListener = W3C_MODEL ? function (isNative, type, element) {
        // modern browsers, do a proper dispatchEvent()
        var evt = doc.createEvent(isNative ? 'HTMLEvents' : 'UIEvents')
        evt[isNative ? 'initEvent' : 'initUIEvent'](type, true, true, win, 1)
        element.dispatchEvent(evt)
      } : function (isNative, type, element) {
        // old browser use onpropertychange, just increment a custom property to trigger the event
        element = targetElement(element, isNative)
        isNative ? element.fireEvent('on' + type, doc.createEventObject()) : element['_on' + type]++
      }

      /**
        * Public API: off(), on(), add(), (remove()), one(), fire(), clone()
        */

      /**
        * off(element[, eventType(s)[, handler ]])
        */
    , off = function (element, typeSpec, fn) {
        var isTypeStr = isString(typeSpec)
          , k, type, namespaces, i

        if (isTypeStr && typeSpec.indexOf(' ') > 0) {
          // off(el, 't1 t2 t3', fn) or off(el, 't1 t2 t3')
          typeSpec = str2arr(typeSpec)
          for (i = typeSpec.length; i--;)
            off(element, typeSpec[i], fn)
          return element
        }

        type = isTypeStr && typeSpec.replace(nameRegex, '')
        if (type && customEvents[type]) type = customEvents[type].base

        if (!typeSpec || isTypeStr) {
          // off(el) or off(el, t1.ns) or off(el, .ns) or off(el, .ns1.ns2.ns3)
          if (namespaces = isTypeStr && typeSpec.replace(namespaceRegex, '')) namespaces = str2arr(namespaces, '.')
          removeListener(element, type, fn, namespaces)
        } else if (isFunction(typeSpec)) {
          // off(el, fn)
          removeListener(element, null, typeSpec)
        } else {
          // off(el, { t1: fn1, t2, fn2 })
          for (k in typeSpec) {
            if (typeSpec.hasOwnProperty(k)) off(element, k, typeSpec[k])
          }
        }

        return element
      }

      /**
        * on(element, eventType(s)[, selector], handler[, args ])
        */
    , on = function(element, events, selector, fn) {
        var originalFn, type, types, i, args, entry, first

        //TODO: the undefined check means you can't pass an 'args' argument, fix this perhaps?
        if (selector === undefined && typeof events == 'object') {
          //TODO: this can't handle delegated events
          for (type in events) {
            if (events.hasOwnProperty(type)) {
              on.call(this, element, type, events[type])
            }
          }
          return
        }

        if (!isFunction(selector)) {
          // delegated event
          originalFn = fn
          args       = slice.call(arguments, 4)
          fn         = delegate(selector, originalFn, selectorEngine)
        } else {
          args       = slice.call(arguments, 3)
          fn         = originalFn = selector
        }

        types = str2arr(events)

        // special case for one(), wrap in a self-removing handler
        if (this === ONE) {
          fn = once(off, element, events, fn, originalFn)
        }

        for (i = types.length; i--;) {
          // add new handler to the registry and check if it's the first for this element/type
          first = registry.put(entry = new RegEntry(
              element
            , types[i].replace(nameRegex, '') // event type
            , fn
            , originalFn
            , str2arr(types[i].replace(namespaceRegex, ''), '.') // namespaces
            , args
            , false // not root
          ))
          if (entry[eventSupport] && first) {
            // first event of this type on this element, add root listener
            listener(element, entry.eventType, true, entry.customType)
          }
        }

        return element
      }

      /**
        * add(element[, selector], eventType(s), handler[, args ])
        *
        * Deprecated: kept (for now) for backward-compatibility
        */
    , add = function (element, events, fn, delfn) {
        return on.apply(
            null
          , !isString(fn)
              ? slice.call(arguments)
              : [ element, fn, events, delfn ].concat(arguments.length > 3 ? slice.call(arguments, 5) : [])
        )
      }

      /**
        * one(element, eventType(s)[, selector], handler[, args ])
        */
    , one = function () {
        return on.apply(ONE, arguments)
      }

      /**
        * fire(element, eventType(s)[, args ])
        *
        * The optional 'args' argument must be an array, if no 'args' argument is provided
        * then we can use the browser's DOM event system, otherwise we trigger handlers manually
        */
    , fire = function (element, type, args) {
        var types = str2arr(type)
          , i, j, l, names, handlers

        for (i = types.length; i--;) {
          type = types[i].replace(nameRegex, '')
          if (names = types[i].replace(namespaceRegex, '')) names = str2arr(names, '.')
          if (!names && !args && element[eventSupport]) {
            fireListener(nativeEvents[type], type, element)
          } else {
            // non-native event, either because of a namespace, arguments or a non DOM element
            // iterate over all listeners and manually 'fire'
            handlers = registry.get(element, type, null, false)
            args = [false].concat(args)
            for (j = 0, l = handlers.length; j < l; j++) {
              if (handlers[j].inNamespaces(names)) {
                handlers[j].handler.apply(element, args)
              }
            }
          }
        }
        return element
      }

      /**
        * clone(dstElement, srcElement[, eventType ])
        *
        * TODO: perhaps for consistency we should allow the same flexibility in type specifiers?
        */
    , clone = function (element, from, type) {
        var handlers = registry.get(from, type, null, false)
          , l = handlers.length
          , i = 0
          , args, beanDel

        for (; i < l; i++) {
          if (handlers[i].original) {
            args = [ element, handlers[i].type ]
            if (beanDel = handlers[i].handler.__beanDel) args.push(beanDel.selector)
            args.push(handlers[i].original)
            on.apply(null, args)
          }
        }
        return element
      }

    , bean = {
          'on'                : on
        , 'add'               : add
        , 'one'               : one
        , 'off'               : off
        , 'remove'            : off
        , 'clone'             : clone
        , 'fire'              : fire
        , 'Event'             : Event
        , 'setSelectorEngine' : setSelectorEngine
        , 'noConflict'        : function () {
            context[name] = old
            return this
          }
      }

  // for IE, clean up on unload to avoid leaks
  if (win.attachEvent) {
    var cleanup = function () {
      var i, entries = registry.entries()
      for (i in entries) {
        if (entries[i].type && entries[i].type !== 'unload') off(entries[i].element, entries[i].type)
      }
      win.detachEvent('onunload', cleanup)
      win.CollectGarbage && win.CollectGarbage()
    }
    win.attachEvent('onunload', cleanup)
  }

  // initialize selector engine to internal default (qSA or throw Error)
  setSelectorEngine()

  return bean
});

},{}],"/home/strider/workspace/node_modules/blueimp-md5/js/md5.js":[function(require,module,exports){
/*
 * JavaScript MD5 1.0.1
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 * 
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*jslint bitwise: true */
/*global unescape, define */

(function ($) {
    'use strict';

    /*
    * Add integers, wrapping at 2^32. This uses 16-bit operations internally
    * to work around bugs in some JS interpreters.
    */
    function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF),
            msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    }

    /*
    * Bitwise rotate a 32-bit number to the left.
    */
    function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }

    /*
    * These functions implement the four basic operations the algorithm uses.
    */
    function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }
    function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    /*
    * Calculate the MD5 of an array of little-endian words, and a bit length.
    */
    function binl_md5(x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << (len % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var i, olda, oldb, oldc, oldd,
            a =  1732584193,
            b = -271733879,
            c = -1732584194,
            d =  271733878;

        for (i = 0; i < x.length; i += 16) {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;

            a = md5_ff(a, b, c, d, x[i],       7, -680876936);
            d = md5_ff(d, a, b, c, x[i +  1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i +  2], 17,  606105819);
            b = md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i +  4],  7, -176418897);
            d = md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);
            c = md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i +  7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);
            d = md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);

            a = md5_gg(a, b, c, d, x[i +  1],  5, -165796510);
            d = md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14,  643717713);
            b = md5_gg(b, c, d, a, x[i],      20, -373897302);
            a = md5_gg(a, b, c, d, x[i +  5],  5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10],  9,  38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i +  4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i +  9],  5,  568446438);
            d = md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);
            c = md5_gg(c, d, a, b, x[i +  3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);
            a = md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);
            d = md5_gg(d, a, b, c, x[i +  2],  9, -51403784);
            c = md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

            a = md5_hh(a, b, c, d, x[i +  5],  4, -378558);
            d = md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);
            d = md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);
            c = md5_hh(c, d, a, b, x[i +  7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13],  4,  681279174);
            d = md5_hh(d, a, b, c, x[i],      11, -358537222);
            c = md5_hh(c, d, a, b, x[i +  3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i +  6], 23,  76029189);
            a = md5_hh(a, b, c, d, x[i +  9],  4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16,  530742520);
            b = md5_hh(b, c, d, a, x[i +  2], 23, -995338651);

            a = md5_ii(a, b, c, d, x[i],       6, -198630844);
            d = md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i +  5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);
            d = md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);
            a = md5_ii(a, b, c, d, x[i +  4],  6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i +  2], 15,  718787259);
            b = md5_ii(b, c, d, a, x[i +  9], 21, -343485551);

            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return [a, b, c, d];
    }

    /*
    * Convert an array of little-endian words to a string
    */
    function binl2rstr(input) {
        var i,
            output = '';
        for (i = 0; i < input.length * 32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        }
        return output;
    }

    /*
    * Convert a raw string to an array of little-endian words
    * Characters >255 have their high-byte silently ignored.
    */
    function rstr2binl(input) {
        var i,
            output = [];
        output[(input.length >> 2) - 1] = undefined;
        for (i = 0; i < output.length; i += 1) {
            output[i] = 0;
        }
        for (i = 0; i < input.length * 8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        }
        return output;
    }

    /*
    * Calculate the MD5 of a raw string
    */
    function rstr_md5(s) {
        return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
    }

    /*
    * Calculate the HMAC-MD5, of a key and some data (raw strings)
    */
    function rstr_hmac_md5(key, data) {
        var i,
            bkey = rstr2binl(key),
            ipad = [],
            opad = [],
            hash;
        ipad[15] = opad[15] = undefined;
        if (bkey.length > 16) {
            bkey = binl_md5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
    }

    /*
    * Convert a raw string to a hex string
    */
    function rstr2hex(input) {
        var hex_tab = '0123456789abcdef',
            output = '',
            x,
            i;
        for (i = 0; i < input.length; i += 1) {
            x = input.charCodeAt(i);
            output += hex_tab.charAt((x >>> 4) & 0x0F) +
                hex_tab.charAt(x & 0x0F);
        }
        return output;
    }

    /*
    * Encode a string as utf-8
    */
    function str2rstr_utf8(input) {
        return unescape(encodeURIComponent(input));
    }

    /*
    * Take string arguments and return either raw or hex encoded strings
    */
    function raw_md5(s) {
        return rstr_md5(str2rstr_utf8(s));
    }
    function hex_md5(s) {
        return rstr2hex(raw_md5(s));
    }
    function raw_hmac_md5(k, d) {
        return rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d));
    }
    function hex_hmac_md5(k, d) {
        return rstr2hex(raw_hmac_md5(k, d));
    }

    function md5(string, key, raw) {
        if (!key) {
            if (!raw) {
                return hex_md5(string);
            }
            return raw_md5(string);
        }
        if (!raw) {
            return hex_hmac_md5(key, string);
        }
        return raw_hmac_md5(key, string);
    }

    if (typeof define === 'function' && define.amd) {
        define(function () {
            return md5;
        });
    } else {
        $.md5 = md5;
    }
}(this));

},{}],"/home/strider/workspace/node_modules/bonzo/bonzo.js":[function(require,module,exports){
/*!
  * Bonzo: DOM Utility (c) Dustin Diaz 2012
  * https://github.com/ded/bonzo
  * License MIT
  */
(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
})('bonzo', this, function() {
  var win = window
    , doc = win.document
    , html = doc.documentElement
    , parentNode = 'parentNode'
    , specialAttributes = /^(checked|value|selected|disabled)$/i
      // tags that we have trouble inserting *into*
    , specialTags = /^(select|fieldset|table|tbody|tfoot|td|tr|colgroup)$/i
    , simpleScriptTagRe = /\s*<script +src=['"]([^'"]+)['"]>/
    , table = ['<table>', '</table>', 1]
    , td = ['<table><tbody><tr>', '</tr></tbody></table>', 3]
    , option = ['<select>', '</select>', 1]
    , noscope = ['_', '', 0, 1]
    , tagMap = { // tags that we have trouble *inserting*
          thead: table, tbody: table, tfoot: table, colgroup: table, caption: table
        , tr: ['<table><tbody>', '</tbody></table>', 2]
        , th: td , td: td
        , col: ['<table><colgroup>', '</colgroup></table>', 2]
        , fieldset: ['<form>', '</form>', 1]
        , legend: ['<form><fieldset>', '</fieldset></form>', 2]
        , option: option, optgroup: option
        , script: noscope, style: noscope, link: noscope, param: noscope, base: noscope
      }
    , stateAttributes = /^(checked|selected|disabled)$/
    , ie = /msie/i.test(navigator.userAgent)
    , hasClass, addClass, removeClass
    , uidMap = {}
    , uuids = 0
    , digit = /^-?[\d\.]+$/
    , dattr = /^data-(.+)$/
    , px = 'px'
    , setAttribute = 'setAttribute'
    , getAttribute = 'getAttribute'
    , byTag = 'getElementsByTagName'
    , features = function() {
        var e = doc.createElement('p')
        e.innerHTML = '<a href="#x">x</a><table style="float:left;"></table>'
        return {
          hrefExtended: e[byTag]('a')[0][getAttribute]('href') != '#x' // IE < 8
        , autoTbody: e[byTag]('tbody').length !== 0 // IE < 8
        , computedStyle: doc.defaultView && doc.defaultView.getComputedStyle
        , cssFloat: e[byTag]('table')[0].style.styleFloat ? 'styleFloat' : 'cssFloat'
        , transform: function () {
            var props = ['transform', 'webkitTransform', 'MozTransform', 'OTransform', 'msTransform'], i
            for (i = 0; i < props.length; i++) {
              if (props[i] in e.style) return props[i]
            }
          }()
        , classList: 'classList' in e
        , opasity: function () {
            return typeof doc.createElement('a').style.opacity !== 'undefined'
          }()
        }
      }()
    , trimReplace = /(^\s*|\s*$)/g
    , whitespaceRegex = /\s+/
    , toString = String.prototype.toString
    , unitless = { lineHeight: 1, zoom: 1, zIndex: 1, opacity: 1, boxFlex: 1, WebkitBoxFlex: 1, MozBoxFlex: 1 }
    , query = doc.querySelectorAll && function (selector) { return doc.querySelectorAll(selector) }
    , trim = String.prototype.trim ?
        function (s) {
          return s.trim()
        } :
        function (s) {
          return s.replace(trimReplace, '')
        }

    , getStyle = features.computedStyle
        ? function (el, property) {
            var value = null
              , computed = doc.defaultView.getComputedStyle(el, '')
            computed && (value = computed[property])
            return el.style[property] || value
          }
        : !(ie && html.currentStyle)
          ? function (el, property) {
              return el.style[property]
            }
          :
          /**
           * @param {Element} el
           * @param {string} property
           * @return {string|number}
           */
          function (el, property) {
            var val, value
            if (property == 'opacity' && !features.opasity) {
              val = 100
              try {
                val = el['filters']['DXImageTransform.Microsoft.Alpha'].opacity
              } catch (e1) {
                try {
                  val = el['filters']('alpha').opacity
                } catch (e2) {}
              }
              return val / 100
            }
            value = el.currentStyle ? el.currentStyle[property] : null
            return el.style[property] || value
          }

  function isNode(node) {
    return node && node.nodeName && (node.nodeType == 1 || node.nodeType == 11)
  }


  function normalize(node, host, clone) {
    var i, l, ret
    if (typeof node == 'string') return bonzo.create(node)
    if (isNode(node)) node = [ node ]
    if (clone) {
      ret = [] // don't change original array
      for (i = 0, l = node.length; i < l; i++) ret[i] = cloneNode(host, node[i])
      return ret
    }
    return node
  }

  /**
   * @param {string} c a class name to test
   * @return {boolean}
   */
  function classReg(c) {
    return new RegExp('(^|\\s+)' + c + '(\\s+|$)')
  }


  /**
   * @param {Bonzo|Array} ar
   * @param {function(Object, number, (Bonzo|Array))} fn
   * @param {Object=} opt_scope
   * @param {boolean=} opt_rev
   * @return {Bonzo|Array}
   */
  function each(ar, fn, opt_scope, opt_rev) {
    var ind, i = 0, l = ar.length
    for (; i < l; i++) {
      ind = opt_rev ? ar.length - i - 1 : i
      fn.call(opt_scope || ar[ind], ar[ind], ind, ar)
    }
    return ar
  }


  /**
   * @param {Bonzo|Array} ar
   * @param {function(Object, number, (Bonzo|Array))} fn
   * @param {Object=} opt_scope
   * @return {Bonzo|Array}
   */
  function deepEach(ar, fn, opt_scope) {
    for (var i = 0, l = ar.length; i < l; i++) {
      if (isNode(ar[i])) {
        deepEach(ar[i].childNodes, fn, opt_scope)
        fn.call(opt_scope || ar[i], ar[i], i, ar)
      }
    }
    return ar
  }


  /**
   * @param {string} s
   * @return {string}
   */
  function camelize(s) {
    return s.replace(/-(.)/g, function (m, m1) {
      return m1.toUpperCase()
    })
  }


  /**
   * @param {string} s
   * @return {string}
   */
  function decamelize(s) {
    return s ? s.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase() : s
  }


  /**
   * @param {Element} el
   * @return {*}
   */
  function data(el) {
    el[getAttribute]('data-node-uid') || el[setAttribute]('data-node-uid', ++uuids)
    var uid = el[getAttribute]('data-node-uid')
    return uidMap[uid] || (uidMap[uid] = {})
  }


  /**
   * removes the data associated with an element
   * @param {Element} el
   */
  function clearData(el) {
    var uid = el[getAttribute]('data-node-uid')
    if (uid) delete uidMap[uid]
  }


  function dataValue(d) {
    var f
    try {
      return (d === null || d === undefined) ? undefined :
        d === 'true' ? true :
          d === 'false' ? false :
            d === 'null' ? null :
              (f = parseFloat(d)) == d ? f : d;
    } catch(e) {}
    return undefined
  }


  /**
   * @param {Bonzo|Array} ar
   * @param {function(Object, number, (Bonzo|Array))} fn
   * @param {Object=} opt_scope
   * @return {boolean} whether `some`thing was found
   */
  function some(ar, fn, opt_scope) {
    for (var i = 0, j = ar.length; i < j; ++i) if (fn.call(opt_scope || null, ar[i], i, ar)) return true
    return false
  }


  /**
   * this could be a giant enum of CSS properties
   * but in favor of file size sans-closure deadcode optimizations
   * we're just asking for any ol string
   * then it gets transformed into the appropriate style property for JS access
   * @param {string} p
   * @return {string}
   */
  function styleProperty(p) {
      (p == 'transform' && (p = features.transform)) ||
        (/^transform-?[Oo]rigin$/.test(p) && (p = features.transform + 'Origin')) ||
        (p == 'float' && (p = features.cssFloat))
      return p ? camelize(p) : null
  }

  // this insert method is intense
  function insert(target, host, fn, rev) {
    var i = 0, self = host || this, r = []
      // target nodes could be a css selector if it's a string and a selector engine is present
      // otherwise, just use target
      , nodes = query && typeof target == 'string' && target.charAt(0) != '<' ? query(target) : target
    // normalize each node in case it's still a string and we need to create nodes on the fly
    each(normalize(nodes), function (t, j) {
      each(self, function (el) {
        fn(t, r[i++] = j > 0 ? cloneNode(self, el) : el)
      }, null, rev)
    }, this, rev)
    self.length = i
    each(r, function (e) {
      self[--i] = e
    }, null, !rev)
    return self
  }


  /**
   * sets an element to an explicit x/y position on the page
   * @param {Element} el
   * @param {?number} x
   * @param {?number} y
   */
  function xy(el, x, y) {
    var $el = bonzo(el)
      , style = $el.css('position')
      , offset = $el.offset()
      , rel = 'relative'
      , isRel = style == rel
      , delta = [parseInt($el.css('left'), 10), parseInt($el.css('top'), 10)]

    if (style == 'static') {
      $el.css('position', rel)
      style = rel
    }

    isNaN(delta[0]) && (delta[0] = isRel ? 0 : el.offsetLeft)
    isNaN(delta[1]) && (delta[1] = isRel ? 0 : el.offsetTop)

    x != null && (el.style.left = x - offset.left + delta[0] + px)
    y != null && (el.style.top = y - offset.top + delta[1] + px)

  }

  // classList support for class management
  // altho to be fair, the api sucks because it won't accept multiple classes at once
  if (features.classList) {
    hasClass = function (el, c) {
      return el.classList.contains(c)
    }
    addClass = function (el, c) {
      el.classList.add(c)
    }
    removeClass = function (el, c) {
      el.classList.remove(c)
    }
  }
  else {
    hasClass = function (el, c) {
      return classReg(c).test(el.className)
    }
    addClass = function (el, c) {
      el.className = trim(el.className + ' ' + c)
    }
    removeClass = function (el, c) {
      el.className = trim(el.className.replace(classReg(c), ' '))
    }
  }


  /**
   * this allows method calling for setting values
   *
   * @example
   * bonzo(elements).css('color', function (el) {
   *   return el.getAttribute('data-original-color')
   * })
   *
   * @param {Element} el
   * @param {function (Element)|string}
   * @return {string}
   */
  function setter(el, v) {
    return typeof v == 'function' ? v(el) : v
  }

  function scroll(x, y, type) {
    var el = this[0]
    if (!el) return this
    if (x == null && y == null) {
      return (isBody(el) ? getWindowScroll() : { x: el.scrollLeft, y: el.scrollTop })[type]
    }
    if (isBody(el)) {
      win.scrollTo(x, y)
    } else {
      x != null && (el.scrollLeft = x)
      y != null && (el.scrollTop = y)
    }
    return this
  }

  /**
   * @constructor
   * @param {Array.<Element>|Element|Node|string} elements
   */
  function Bonzo(elements) {
    this.length = 0
    if (elements) {
      elements = typeof elements !== 'string' &&
        !elements.nodeType &&
        typeof elements.length !== 'undefined' ?
          elements :
          [elements]
      this.length = elements.length
      for (var i = 0; i < elements.length; i++) this[i] = elements[i]
    }
  }

  Bonzo.prototype = {

      /**
       * @param {number} index
       * @return {Element|Node}
       */
      get: function (index) {
        return this[index] || null
      }

      // itetators
      /**
       * @param {function(Element|Node)} fn
       * @param {Object=} opt_scope
       * @return {Bonzo}
       */
    , each: function (fn, opt_scope) {
        return each(this, fn, opt_scope)
      }

      /**
       * @param {Function} fn
       * @param {Object=} opt_scope
       * @return {Bonzo}
       */
    , deepEach: function (fn, opt_scope) {
        return deepEach(this, fn, opt_scope)
      }


      /**
       * @param {Function} fn
       * @param {Function=} opt_reject
       * @return {Array}
       */
    , map: function (fn, opt_reject) {
        var m = [], n, i
        for (i = 0; i < this.length; i++) {
          n = fn.call(this, this[i], i)
          opt_reject ? (opt_reject(n) && m.push(n)) : m.push(n)
        }
        return m
      }

    // text and html inserters!

    /**
     * @param {string} h the HTML to insert
     * @param {boolean=} opt_text whether to set or get text content
     * @return {Bonzo|string}
     */
    , html: function (h, opt_text) {
        var method = opt_text
              ? html.textContent === undefined ? 'innerText' : 'textContent'
              : 'innerHTML'
          , that = this
          , append = function (el, i) {
              each(normalize(h, that, i), function (node) {
                el.appendChild(node)
              })
            }
          , updateElement = function (el, i) {
              try {
                if (opt_text || (typeof h == 'string' && !specialTags.test(el.tagName))) {
                  return el[method] = h
                }
              } catch (e) {}
              append(el, i)
            }
        return typeof h != 'undefined'
          ? this.empty().each(updateElement)
          : this[0] ? this[0][method] : ''
      }

      /**
       * @param {string=} opt_text the text to set, otherwise this is a getter
       * @return {Bonzo|string}
       */
    , text: function (opt_text) {
        return this.html(opt_text, true)
      }

      // more related insertion methods

      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , append: function (node) {
        var that = this
        return this.each(function (el, i) {
          each(normalize(node, that, i), function (i) {
            el.appendChild(i)
          })
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , prepend: function (node) {
        var that = this
        return this.each(function (el, i) {
          var first = el.firstChild
          each(normalize(node, that, i), function (i) {
            el.insertBefore(i, first)
          })
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , appendTo: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          t.appendChild(el)
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , prependTo: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          t.insertBefore(el, t.firstChild)
        }, 1)
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , before: function (node) {
        var that = this
        return this.each(function (el, i) {
          each(normalize(node, that, i), function (i) {
            el[parentNode].insertBefore(i, el)
          })
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , after: function (node) {
        var that = this
        return this.each(function (el, i) {
          each(normalize(node, that, i), function (i) {
            el[parentNode].insertBefore(i, el.nextSibling)
          }, null, 1)
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , insertBefore: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          t[parentNode].insertBefore(el, t)
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , insertAfter: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          var sibling = t.nextSibling
          sibling ?
            t[parentNode].insertBefore(el, sibling) :
            t[parentNode].appendChild(el)
        }, 1)
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , replaceWith: function (node) {
         return bonzo(this[0].parentNode.replaceChild(bonzo(normalize(node))[0], this[0]))
      }

      /**
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , clone: function (opt_host) {
        var ret = [] // don't change original array
          , l, i
        for (i = 0, l = this.length; i < l; i++) ret[i] = cloneNode(opt_host || this, this[i])
        return bonzo(ret)
      }

      // class management

      /**
       * @param {string} c
       * @return {Bonzo}
       */
    , addClass: function (c) {
        c = toString.call(c).split(whitespaceRegex)
        return this.each(function (el) {
          // we `each` here so you can do $el.addClass('foo bar')
          each(c, function (c) {
            if (c && !hasClass(el, setter(el, c)))
              addClass(el, setter(el, c))
          })
        })
      }


      /**
       * @param {string} c
       * @return {Bonzo}
       */
    , removeClass: function (c) {
        c = toString.call(c).split(whitespaceRegex)
        return this.each(function (el) {
          each(c, function (c) {
            if (c && hasClass(el, setter(el, c)))
              removeClass(el, setter(el, c))
          })
        })
      }


      /**
       * @param {string} c
       * @return {boolean}
       */
    , hasClass: function (c) {
        c = toString.call(c).split(whitespaceRegex)
        return some(this, function (el) {
          return some(c, function (c) {
            return c && hasClass(el, c)
          })
        })
      }


      /**
       * @param {string} c classname to toggle
       * @param {boolean=} opt_condition whether to add or remove the class straight away
       * @return {Bonzo}
       */
    , toggleClass: function (c, opt_condition) {
        c = toString.call(c).split(whitespaceRegex)
        return this.each(function (el) {
          each(c, function (c) {
            if (c) {
              typeof opt_condition !== 'undefined' ?
                opt_condition ? !hasClass(el, c) && addClass(el, c) : removeClass(el, c) :
                hasClass(el, c) ? removeClass(el, c) : addClass(el, c)
            }
          })
        })
      }

      // display togglers

      /**
       * @param {string=} opt_type useful to set back to anything other than an empty string
       * @return {Bonzo}
       */
    , show: function (opt_type) {
        opt_type = typeof opt_type == 'string' ? opt_type : ''
        return this.each(function (el) {
          el.style.display = opt_type
        })
      }


      /**
       * @return {Bonzo}
       */
    , hide: function () {
        return this.each(function (el) {
          el.style.display = 'none'
        })
      }


      /**
       * @param {Function=} opt_callback
       * @param {string=} opt_type
       * @return {Bonzo}
       */
    , toggle: function (opt_callback, opt_type) {
        opt_type = typeof opt_type == 'string' ? opt_type : '';
        typeof opt_callback != 'function' && (opt_callback = null)
        return this.each(function (el) {
          el.style.display = (el.offsetWidth || el.offsetHeight) ? 'none' : opt_type;
          opt_callback && opt_callback.call(el)
        })
      }


      // DOM Walkers & getters

      /**
       * @return {Element|Node}
       */
    , first: function () {
        return bonzo(this.length ? this[0] : [])
      }


      /**
       * @return {Element|Node}
       */
    , last: function () {
        return bonzo(this.length ? this[this.length - 1] : [])
      }


      /**
       * @return {Element|Node}
       */
    , next: function () {
        return this.related('nextSibling')
      }


      /**
       * @return {Element|Node}
       */
    , previous: function () {
        return this.related('previousSibling')
      }


      /**
       * @return {Element|Node}
       */
    , parent: function() {
        return this.related(parentNode)
      }


      /**
       * @private
       * @param {string} method the directional DOM method
       * @return {Element|Node}
       */
    , related: function (method) {
        return bonzo(this.map(
          function (el) {
            el = el[method]
            while (el && el.nodeType !== 1) {
              el = el[method]
            }
            return el || 0
          },
          function (el) {
            return el
          }
        ))
      }


      /**
       * @return {Bonzo}
       */
    , focus: function () {
        this.length && this[0].focus()
        return this
      }


      /**
       * @return {Bonzo}
       */
    , blur: function () {
        this.length && this[0].blur()
        return this
      }

      // style getter setter & related methods

      /**
       * @param {Object|string} o
       * @param {string=} opt_v
       * @return {Bonzo|string}
       */
    , css: function (o, opt_v) {
        var p, iter = o
        // is this a request for just getting a style?
        if (opt_v === undefined && typeof o == 'string') {
          // repurpose 'v'
          opt_v = this[0]
          if (!opt_v) return null
          if (opt_v === doc || opt_v === win) {
            p = (opt_v === doc) ? bonzo.doc() : bonzo.viewport()
            return o == 'width' ? p.width : o == 'height' ? p.height : ''
          }
          return (o = styleProperty(o)) ? getStyle(opt_v, o) : null
        }

        if (typeof o == 'string') {
          iter = {}
          iter[o] = opt_v
        }

        if (!features.opasity && 'opacity' in iter) {
          // oh this 'ol gamut
          iter.filter = iter.opacity != null && iter.opacity !== ''
            ? 'alpha(opacity=' + (iter.opacity * 100) + ')'
            : ''
          // give it layout
          iter.zoom = o.zoom || 1
          ;delete iter.opacity
        }

        function fn(el, p, v) {
          for (var k in iter) {
            if (iter.hasOwnProperty(k)) {
              v = iter[k];
              // change "5" to "5px" - unless you're line-height, which is allowed
              (p = styleProperty(k)) && digit.test(v) && !(p in unitless) && (v += px)
              try { el.style[p] = setter(el, v) } catch(e) {}
            }
          }
        }
        return this.each(fn)
      }


      /**
       * @param {number=} opt_x
       * @param {number=} opt_y
       * @return {Bonzo|number}
       */
    , offset: function (opt_x, opt_y) {
        if (opt_x && typeof opt_x == 'object' && (typeof opt_x.top == 'number' || typeof opt_x.left == 'number')) {
          return this.each(function (el) {
            xy(el, opt_x.left, opt_x.top)
          })
        } else if (typeof opt_x == 'number' || typeof opt_y == 'number') {
          return this.each(function (el) {
            xy(el, opt_x, opt_y)
          })
        }
        if (!this[0]) return {
            top: 0
          , left: 0
          , height: 0
          , width: 0
        }
        var el = this[0]
          , de = el.ownerDocument.documentElement
          , bcr = el.getBoundingClientRect()
          , scroll = getWindowScroll()
          , width = el.offsetWidth
          , height = el.offsetHeight
          , top = bcr.top + scroll.y - Math.max(0, de && de.clientTop, doc.body.clientTop)
          , left = bcr.left + scroll.x - Math.max(0, de && de.clientLeft, doc.body.clientLeft)

        return {
            top: top
          , left: left
          , height: height
          , width: width
        }
      }


      /**
       * @return {number}
       */
    , dim: function () {
        if (!this.length) return { height: 0, width: 0 }
        var el = this[0]
          , de = el.nodeType == 9 && el.documentElement // document
          , orig = !de && !!el.style && !el.offsetWidth && !el.offsetHeight ?
             // el isn't visible, can't be measured properly, so fix that
             function (t) {
               var s = {
                   position: el.style.position || ''
                 , visibility: el.style.visibility || ''
                 , display: el.style.display || ''
               }
               t.first().css({
                   position: 'absolute'
                 , visibility: 'hidden'
                 , display: 'block'
               })
               return s
            }(this) : null
          , width = de
              ? Math.max(el.body.scrollWidth, el.body.offsetWidth, de.scrollWidth, de.offsetWidth, de.clientWidth)
              : el.offsetWidth
          , height = de
              ? Math.max(el.body.scrollHeight, el.body.offsetHeight, de.scrollHeight, de.offsetHeight, de.clientHeight)
              : el.offsetHeight

        orig && this.first().css(orig)
        return {
            height: height
          , width: width
        }
      }

      // attributes are hard. go shopping

      /**
       * @param {string} k an attribute to get or set
       * @param {string=} opt_v the value to set
       * @return {Bonzo|string}
       */
    , attr: function (k, opt_v) {
        var el = this[0]
          , n

        if (typeof k != 'string' && !(k instanceof String)) {
          for (n in k) {
            k.hasOwnProperty(n) && this.attr(n, k[n])
          }
          return this
        }

        return typeof opt_v == 'undefined' ?
          !el ? null : specialAttributes.test(k) ?
            stateAttributes.test(k) && typeof el[k] == 'string' ?
              true : el[k] : (k == 'href' || k =='src') && features.hrefExtended ?
                el[getAttribute](k, 2) : el[getAttribute](k) :
          this.each(function (el) {
            specialAttributes.test(k) ? (el[k] = setter(el, opt_v)) : el[setAttribute](k, setter(el, opt_v))
          })
      }


      /**
       * @param {string} k
       * @return {Bonzo}
       */
    , removeAttr: function (k) {
        return this.each(function (el) {
          stateAttributes.test(k) ? (el[k] = false) : el.removeAttribute(k)
        })
      }


      /**
       * @param {string=} opt_s
       * @return {Bonzo|string}
       */
    , val: function (s) {
        return (typeof s == 'string' || typeof s == 'number') ?
          this.attr('value', s) :
          this.length ? this[0].value : null
      }

      // use with care and knowledge. this data() method uses data attributes on the DOM nodes
      // to do this differently costs a lot more code. c'est la vie
      /**
       * @param {string|Object=} opt_k the key for which to get or set data
       * @param {Object=} opt_v
       * @return {Bonzo|Object}
       */
    , data: function (opt_k, opt_v) {
        var el = this[0], o, m
        if (typeof opt_v === 'undefined') {
          if (!el) return null
          o = data(el)
          if (typeof opt_k === 'undefined') {
            each(el.attributes, function (a) {
              (m = ('' + a.name).match(dattr)) && (o[camelize(m[1])] = dataValue(a.value))
            })
            return o
          } else {
            if (typeof o[opt_k] === 'undefined')
              o[opt_k] = dataValue(this.attr('data-' + decamelize(opt_k)))
            return o[opt_k]
          }
        } else {
          return this.each(function (el) { data(el)[opt_k] = opt_v })
        }
      }

      // DOM detachment & related

      /**
       * @return {Bonzo}
       */
    , remove: function () {
        this.deepEach(clearData)
        return this.detach()
      }


      /**
       * @return {Bonzo}
       */
    , empty: function () {
        return this.each(function (el) {
          deepEach(el.childNodes, clearData)

          while (el.firstChild) {
            el.removeChild(el.firstChild)
          }
        })
      }


      /**
       * @return {Bonzo}
       */
    , detach: function () {
        return this.each(function (el) {
          el[parentNode] && el[parentNode].removeChild(el)
        })
      }

      // who uses a mouse anyway? oh right.

      /**
       * @param {number} y
       */
    , scrollTop: function (y) {
        return scroll.call(this, null, y, 'y')
      }


      /**
       * @param {number} x
       */
    , scrollLeft: function (x) {
        return scroll.call(this, x, null, 'x')
      }

  }


  function cloneNode(host, el) {
    var c = el.cloneNode(true)
      , cloneElems
      , elElems
      , i

    // check for existence of an event cloner
    // preferably https://github.com/fat/bean
    // otherwise Bonzo won't do this for you
    if (host.$ && typeof host.cloneEvents == 'function') {
      host.$(c).cloneEvents(el)

      // clone events from every child node
      cloneElems = host.$(c).find('*')
      elElems = host.$(el).find('*')

      for (i = 0; i < elElems.length; i++)
        host.$(cloneElems[i]).cloneEvents(elElems[i])
    }
    return c
  }

  function isBody(element) {
    return element === win || (/^(?:body|html)$/i).test(element.tagName)
  }

  function getWindowScroll() {
    return { x: win.pageXOffset || html.scrollLeft, y: win.pageYOffset || html.scrollTop }
  }

  function createScriptFromHtml(html) {
    var scriptEl = document.createElement('script')
      , matches = html.match(simpleScriptTagRe)
    scriptEl.src = matches[1]
    return scriptEl
  }

  /**
   * @param {Array.<Element>|Element|Node|string} els
   * @return {Bonzo}
   */
  function bonzo(els) {
    return new Bonzo(els)
  }

  bonzo.setQueryEngine = function (q) {
    query = q;
    delete bonzo.setQueryEngine
  }

  bonzo.aug = function (o, target) {
    // for those standalone bonzo users. this love is for you.
    for (var k in o) {
      o.hasOwnProperty(k) && ((target || Bonzo.prototype)[k] = o[k])
    }
  }

  bonzo.create = function (node) {
    // hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
    return typeof node == 'string' && node !== '' ?
      function () {
        if (simpleScriptTagRe.test(node)) return [createScriptFromHtml(node)]
        var tag = node.match(/^\s*<([^\s>]+)/)
          , el = doc.createElement('div')
          , els = []
          , p = tag ? tagMap[tag[1].toLowerCase()] : null
          , dep = p ? p[2] + 1 : 1
          , ns = p && p[3]
          , pn = parentNode
          , tb = features.autoTbody && p && p[0] == '<table>' && !(/<tbody/i).test(node)

        el.innerHTML = p ? (p[0] + node + p[1]) : node
        while (dep--) el = el.firstChild
        // for IE NoScope, we may insert cruft at the begining just to get it to work
        if (ns && el && el.nodeType !== 1) el = el.nextSibling
        do {
          // tbody special case for IE<8, creates tbody on any empty table
          // we don't want it if we're just after a <thead>, <caption>, etc.
          if ((!tag || el.nodeType == 1) && (!tb || (el.tagName && el.tagName != 'TBODY'))) {
            els.push(el)
          }
        } while (el = el.nextSibling)
        // IE < 9 gives us a parentNode which messes up insert() check for cloning
        // `dep` > 1 can also cause problems with the insert() check (must do this last)
        each(els, function(el) { el[pn] && el[pn].removeChild(el) })
        return els
      }() : isNode(node) ? [node.cloneNode(true)] : []
  }

  bonzo.doc = function () {
    var vp = bonzo.viewport()
    return {
        width: Math.max(doc.body.scrollWidth, html.scrollWidth, vp.width)
      , height: Math.max(doc.body.scrollHeight, html.scrollHeight, vp.height)
    }
  }

  bonzo.firstChild = function (el) {
    for (var c = el.childNodes, i = 0, j = (c && c.length) || 0, e; i < j; i++) {
      if (c[i].nodeType === 1) e = c[j = i]
    }
    return e
  }

  bonzo.viewport = function () {
    return {
        width: ie ? html.clientWidth : win.innerWidth
      , height: ie ? html.clientHeight : win.innerHeight
    }
  }

  bonzo.isAncestor = 'compareDocumentPosition' in html ?
    function (container, element) {
      return (container.compareDocumentPosition(element) & 16) == 16
    } : 'contains' in html ?
    function (container, element) {
      return container !== element && container.contains(element);
    } :
    function (container, element) {
      while (element = element[parentNode]) {
        if (element === container) {
          return true
        }
      }
      return false
    }

  return bonzo
}); // the only line we care about using a semi-colon. placed here for concatenation tools

},{}],"/home/strider/workspace/node_modules/browserify/lib/_empty.js":[function(require,module,exports){

},{}],"/home/strider/workspace/node_modules/browserify/node_modules/events/events.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],"/home/strider/workspace/node_modules/browserify/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/home/strider/workspace/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/home/strider/workspace/node_modules/browserify/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/home/strider/workspace/node_modules/browserify/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":"/home/strider/workspace/node_modules/browserify/node_modules/util/support/isBufferBrowser.js","_process":"/home/strider/workspace/node_modules/browserify/node_modules/process/browser.js","inherits":"/home/strider/workspace/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/strider/workspace/node_modules/password-sheriff/index.js":[function(require,module,exports){
var format = require('util').format;

var _ = require('underscore');

var PasswordPolicyError = require('./lib/policy_error');

function isString(value) {
  return typeof value === 'string' || value instanceof String;
}

var charsets = require('./lib/rules/contains').charsets;

var upperCase         = charsets.upperCase;
var lowerCase         = charsets.lowerCase;
var numbers           = charsets.numbers;
var specialCharacters = charsets.specialCharacters;

var rulesToApply = {
  length:           require('./lib/rules/length'),
  contains:         require('./lib/rules/contains'),
  containsAtLeast:  require('./lib/rules/containsAtLeast'),
  identicalChars:   require('./lib/rules/identicalChars'),
};


var policiesByName = {
  none: {
    rules: {
      length: { minLength: 1 }
    }
  },
  low: {
    rules: {
      length: { minLength: 6 }
    },
  },
  fair: {
    rules: {
      length: { minLength: 8 },
      contains: {
        expressions: [lowerCase, upperCase, numbers]
      }
    }
  },
  good: {
    rules: {
      length: { minLength: 8 },
      containsAtLeast: {
        atLeast: 3,
        expressions: [lowerCase, upperCase, numbers, specialCharacters]
      }
    }
  },
  excellent: {
    rules: {
      length: { minLength: 10 },
      containsAtLeast: {
        atLeast: 3,
        expressions: [lowerCase, upperCase, numbers, specialCharacters]
      },
      identicalChars: { max: 2 }
    }
  }
};

function reducePolicy(policy, fn, value) {
  return Object.keys(policy.rules).reduce(function (result, ruleName) {
    var ruleOptions = policy.rules[ruleName];
    var rule = rulesToApply[ruleName];

    return fn(result, ruleOptions, rule);

  }, value);
}

function applyRules (policy, password) {
  return reducePolicy(policy, function (result, ruleOptions, rule) {
    // If previous result was false as this an &&, then nothing to do here!
    if (!result) {
      return false;
    }

    if (!rule) {
      return false;
    }

    return rule.assert(ruleOptions, password);
  }, true);
}

function missing (policy, password) {
  return reducePolicy(policy, function (result, ruleOptions, rule) {
    var missingRule = rule.missing(ruleOptions, password);
    result.rules.push(missingRule);
    result.verified = result.verified && !!missingRule.verified;
    return result;
  }, {rules: [], verified: true});
}

function explain (policy) {
  return reducePolicy(policy, function (result, ruleOptions, rule) {
    result.push(rule.explain(ruleOptions));
    return result;
  }, []);
}

function flatDescriptions (descriptions, index) {

  if (!descriptions.length) {
    return '';
  }

  function flatSingleDescription (description, index) {
    var spaces = (new Array(index+1)).join(' ');
    var result = spaces + '* ';
    if (description.format) {
      result += format.apply(null, [description.message].concat(description.format));
    } else {
      result += description.message;
    }

    if (description.items) {
      result += '\n' + spaces + flatDescriptions(description.items, index + 1);
    }
    return result;
  }

  var firstDescription = flatSingleDescription(descriptions[0], index);

  descriptions = descriptions.slice(1).reduce(function (result, description) {
    result += '\n' + flatSingleDescription(description, index);

    return result;
  }, firstDescription);

  return descriptions;
}



_.each(policiesByName, function (policy) {
  reducePolicy(policy, function (result, ruleOptions, rule) {
    rule.validate(ruleOptions);
  }, true);
});

/**
 * Creates a password policy.
 *
 * @param {String} policyName Name of policy to use.
 */
module.exports = function (policyName) {
  var policy = policiesByName[policyName] || policiesByName.none;

  return {
    /** 
     * Checks that a password meets this policy
     *
     * @method check
     * @param {String} password
     */
    check: function (password) {
      if (!isString(password)) {
        return false;
      }

      return applyRules(policy, password);
    },
    /**
     * @method assert
     * Asserts that a passord meets this policy else throws an exception.
     
     * @param {String} password
     */
    assert: function (password) {
      if (!this.check(password)) {
        throw new PasswordPolicyError('Password does not meet password policy');
      }
    },

    missing: function (password) {
      return missing(policy, password);
    },

    missingAsMarkdown: function (password) {
      return flatDescriptions(missing(policy, password), 1);
    },

    explain: function () {
      return explain(policy);
    },

    /**
     * Friendly string representation of the policy
     * @method toString
     */
    toString: function () {
      var descriptions = this.explain();
      return flatDescriptions(descriptions, 0);
    }
  };
};

module.exports.rulesToApply = rulesToApply;

},{"./lib/policy_error":"/home/strider/workspace/node_modules/password-sheriff/lib/policy_error.js","./lib/rules/contains":"/home/strider/workspace/node_modules/password-sheriff/lib/rules/contains.js","./lib/rules/containsAtLeast":"/home/strider/workspace/node_modules/password-sheriff/lib/rules/containsAtLeast.js","./lib/rules/identicalChars":"/home/strider/workspace/node_modules/password-sheriff/lib/rules/identicalChars.js","./lib/rules/length":"/home/strider/workspace/node_modules/password-sheriff/lib/rules/length.js","underscore":"/home/strider/workspace/node_modules/password-sheriff/node_modules/underscore/underscore.js","util":"/home/strider/workspace/node_modules/browserify/node_modules/util/util.js"}],"/home/strider/workspace/node_modules/password-sheriff/lib/policy_error.js":[function(require,module,exports){
/**
 * Error thrown when asserting a policy against a password.
 *
 * @class PasswordPolicyError
 * @constructor
 *
 * @param {String} msg Descriptive message of the error
 */
function PasswordPolicyError(msg) {
  var err = Error.call(this, msg);
  err.name = 'PasswordPolicyError';
  return err;
}

module.exports = PasswordPolicyError;

},{}],"/home/strider/workspace/node_modules/password-sheriff/lib/rules/contains.js":[function(require,module,exports){
var _ = require('underscore');

/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */
var specialCharacters = [' ', '!', '"', '#', '\\$', '%', '&', '\'', '\\(', '\\)', '\\*', '\\+', ',', '-', '\\.', '/', ':', ';', '<', '=', '>', '\\?', '@', '\\[', '\\\\', '\\]', '\\^', '_','`','{','\\|', '}','~'].join('|');

var specialCharactersRegexp = new RegExp(specialCharacters);

module.exports = {
  validate: function (options) {
    if (!_.isObject(options)) {
      throw new Error('options should be an object');
    }

    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {
      throw new Error('contains expects expressions to be a non-empty array');
    }

    var ok = options.expressions.every(function (expression) {
      return _.isFunction(expression.explain) && _.isFunction(expression.test);
    });

    if (!ok) {
      throw new Error('contains expressions are invalid: An explain and a test function should be provided');
    }
    return true;
  },
  explain: function (options) {
    return {
      message: 'Should contain:',
      code: 'shouldContain',
      items: options.expressions.map(function (expression) {
        return expression.explain();
      })
    };
  },
  missing: function (options, password) {
    var expressions = options.expressions.map(function (expression) {
      var explained = expression.explain();
      explained.verified = expression.test(password);
      return explained;
    });

    var verified = expressions.every(function (expression) {
      return expression.verified;
    });

    return {
      message: 'Should contain:',
      code: 'shouldContain',
      verified: verified,
      items: expressions
    };
  },
  assert: function (options, password) {
    if (!password) {
      return false;
    }

    return options.expressions.every(function (expression) {
      var result = expression.test(password);
      return result;
    });
  },
  charsets: {
    upperCase: {
      explain: function () { return {
        message: 'upper case letters (A-Z)',
        code: 'upperCase'
      }; },
      test: function (password) { return /[A-Z]/.test(password); }
    },
    lowerCase: {
      explain: function () { return {
        message: 'lower case letters (a-z)',
        code: 'lowerCase'
      }; },
      test: function (password) { return /[a-z]/.test(password); }
    },
    specialCharacters: {
      explain: function () { return {
        message: 'special characters (e.g. !@#$%^&*)',
        code: 'specialCharacters'
      }; },
      test: function (password) { return specialCharactersRegexp.test(password); }
    },
    numbers: {
      explain: function () { return {
        message: 'numbers (i.e. 0-9)',
        code: 'numbers'
      }; },
      test: function (password) { return /\d/.test(password); }
    }
  }
};

},{"underscore":"/home/strider/workspace/node_modules/password-sheriff/node_modules/underscore/underscore.js"}],"/home/strider/workspace/node_modules/password-sheriff/lib/rules/containsAtLeast.js":[function(require,module,exports){
var _ = require('underscore');

var contains = require('./contains');

function createIntroMessage() {
  return 'Contain at least %d of the following %d types of characters:';
}

module.exports = {
  // TODO validate atLeast to be a number > 0 and expressions to be a list of at least 1
  validate: function (options) {
    if (!_.isObject(options)) {
      throw new Error('options should be an object');
    }

    if (!_.isNumber(options.atLeast) || _.isNaN(options.atLeast) || options.atLeast < 1) {
      throw new Error('atLeast should be a valid, non-NaN number, greater than 0');
    }

    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {
      throw new Error('expressions should be an non-empty array');
    }

    if (options.expressions.length < options.atLeast) {
      throw new Error('expressions length should be greater than atLeast');
    }

    var ok = options.expressions.every(function (expression) {
      return _.isFunction(expression.explain) && _.isFunction(expression.test);
    });

    if (!ok) {
      throw new Error('containsAtLeast expressions are invalid: An explain and a test function should be provided');
    }

    return true;
  },
  explain: function (options) {
    return {
      message: createIntroMessage(),
      code: 'containsAtLeast',
      format: [options.atLeast, options.expressions.length],
      items: options.expressions.map(function (x) { return x.explain(); })
    };
  },
  missing: function (options, password) {
    var expressions = options.expressions && options.expressions.map(function (expression) {
      var explained = expression.explain();
      explained.verified = expression.test(password);
      return explained;
    });

    var verifiedCount = expressions.reduce(function (val, ex) { return val + !!ex.verified; }, 0);
    var verified = verifiedCount >= options.atLeast;

    return {
      message: createIntroMessage(),
      code: 'containsAtLeast',
      format: [options.atLeast, options.expressions.length],
      items: expressions,
      verified: verified
    };
  },
  assert: function (options, password) {
    if (!password) {
      return false;
    }

    var workingExpressions = options.expressions.filter(function (expression) {
      return expression.test(password);
    });

    return workingExpressions.length >= options.atLeast;
  },
  charsets: contains.charsets
};

},{"./contains":"/home/strider/workspace/node_modules/password-sheriff/lib/rules/contains.js","underscore":"/home/strider/workspace/node_modules/password-sheriff/node_modules/underscore/underscore.js"}],"/home/strider/workspace/node_modules/password-sheriff/lib/rules/identicalChars.js":[function(require,module,exports){
var _ = require('underscore');

function assert(options, password) {
  if (!password) {
    return false;
  }

  var i, current = {c: null, count: 0};

  for (i = 0; i < password.length; i++) {
    if (current.c !== password[i]) {
      current.c = password[i];
      current.count = 1;
    } else {
      current.count++;
    }

    if (current.count > options.max) {
      return false;
    }
  }

  return true;
}
function explain (options, verified) {
    var example = (new Array(options.max+2)).join('a');
    var d = {
      message: 'No more than %d identical characters in a row (e.g., "%s" not allowed)',
      code: 'identicalChars',
      format: [options.max, example]
    };
    if (verified !== undefined) {
      d.verified = verified;
    }
    return d;
  }

module.exports = {
  validate: function (options) {
    if (!_.isObject(options)) {
      throw new Error('options should be an object');
    }

    if (!_.isNumber(options.max) || _.isNaN(options.max) || options.max < 1 ) {
      throw new Error('max should be a number greater than 1');
    }

    return true;
  },
  explain: explain,
  missing: function (options, password) {
    return explain(options, assert(options, password));
  },
  assert: assert
};

},{"underscore":"/home/strider/workspace/node_modules/password-sheriff/node_modules/underscore/underscore.js"}],"/home/strider/workspace/node_modules/password-sheriff/lib/rules/length.js":[function(require,module,exports){
var _ = require('underscore');

/* A rule should contain explain and rule methods */
// TODO explain explain
// TODO explain missing
// TODO explain assert

function assert (options, password) {
  return !!password && options.minLength <= password.length;
}

function explain(options) {
  if (options.minLength === 1) {
    return {
      message: 'Non-empty password required',
      code: 'nonEmpty'
    };
  }

  return {
    message: 'At least %d characters in length',
    format: [options.minLength],
    code: 'lengthAtLeast'
  };
}

module.exports = {
  validate: function (options) {
    if (!_.isObject(options)) {
      throw new Error('options should be an object');
    }

    if (!_.isNumber(options.minLength) || _.isNaN(options.minLength)) {
      throw new Error('length expects minLength to be a non-zero number');
    }

    return true;
  },
  explain: explain,
  missing: function (options, password) {
    var explained = explain(options);
    explained.verified = !!assert(options, password);
    return explained;
  },
  assert: assert
};

},{"underscore":"/home/strider/workspace/node_modules/password-sheriff/node_modules/underscore/underscore.js"}],"/home/strider/workspace/node_modules/password-sheriff/node_modules/underscore/underscore.js":[function(require,module,exports){
//     Underscore.js 1.7.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.7.0';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var createCallback = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  _.iteratee = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return createCallback(value, context, argCount);
    if (_.isObject(value)) return _.matches(value);
    return _.property(value);
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    if (obj == null) return obj;
    iteratee = createCallback(iteratee, context);
    var i, length = obj.length;
    if (length === +length) {
      for (i = 0; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    if (obj == null) return [];
    iteratee = _.iteratee(iteratee, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length),
        currentKey;
    for (var index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index = 0, currentKey;
    if (arguments.length < 3) {
      if (!length) throw new TypeError(reduceError);
      memo = obj[keys ? keys[index++] : index++];
    }
    for (; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== + obj.length && _.keys(obj),
        index = (keys || obj).length,
        currentKey;
    if (arguments.length < 3) {
      if (!index) throw new TypeError(reduceError);
      memo = obj[keys ? keys[--index] : --index];
    }
    while (index--) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    predicate = _.iteratee(predicate, context);
    _.some(obj, function(value, index, list) {
      if (predicate(value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    predicate = _.iteratee(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    if (obj == null) return true;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    if (obj == null) return false;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (obj.length !== +obj.length) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = _.iteratee(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    for (var i = 0, length = input.length; i < length; i++) {
      var value = input[i];
      if (!_.isArray(value) && !_.isArguments(value)) {
        if (!strict) output.push(value);
      } else if (shallow) {
        push.apply(output, value);
      } else {
        flatten(value, shallow, strict, output);
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i];
      if (isSorted) {
        if (!i || seen !== value) result.push(value);
        seen = value;
      } else if (iteratee) {
        var computed = iteratee(value, i, array);
        if (_.indexOf(seen, computed) < 0) {
          seen.push(computed);
          result.push(value);
        }
      } else if (_.indexOf(result, value) < 0) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true, []));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(slice.call(arguments, 1), true, true, []);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function(array) {
    if (array == null) return [];
    var length = _.max(arguments, 'length').length;
    var results = Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var idx = array.length;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var Ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    args = slice.call(arguments, 2);
    bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      Ctor.prototype = func.prototype;
      var self = new Ctor;
      Ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (_.isObject(result)) return result;
      return self;
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = hasher ? hasher.apply(this, arguments) : key;
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last > 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed before being called N times.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      } else {
        func = null;
      }
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    if (!_.isObject(obj)) return obj;
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (hasOwnProperty.call(source, prop)) {
            obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = createCallback(iteratee, context);
      for (key in obj) {
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = concat.apply([], slice.call(arguments, 1));
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    if (!_.isObject(obj)) return obj;
    for (var i = 1, length = arguments.length; i < length; i++) {
      var source = arguments[i];
      for (var prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (
      aCtor !== bCtor &&
      // Handle Object.create(x) cases
      'constructor' in a && 'constructor' in b &&
      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
        _.isFunction(bCtor) && bCtor instanceof bCtor)
    ) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size, result;
    // Recursively compare objects and arrays.
    if (className === '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size === b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      size = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      result = _.keys(b).length === size;
      if (result) {
        while (size--) {
          // Deep compare each member
          key = keys[size];
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
  if (typeof /./ !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    var pairs = _.pairs(attrs), length = pairs.length;
    return function(obj) {
      if (obj == null) return !length;
      obj = new Object(obj);
      for (var i = 0; i < length; i++) {
        var pair = pairs[i], key = pair[0];
        if (pair[1] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = createCallback(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? object[property]() : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],"/home/strider/workspace/node_modules/sizzle/dist/sizzle.js":[function(require,module,exports){
/*!
 * Sizzle CSS Selector Engine v2.1.1
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-15
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 && nodeType !== 11 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

// EXPOSE
if ( typeof define === "function" && define.amd ) {
	define(function() { return Sizzle; });
// Sizzle requires that there be a global window in Common-JS like environments
} else if ( typeof module !== "undefined" && module.exports ) {
	module.exports = Sizzle;
} else {
	window.Sizzle = Sizzle;
}
// EXPOSE

})( window );

},{}],"/home/strider/workspace/node_modules/trim/index.js":[function(require,module,exports){

exports = module.exports = trim;

function trim(str){
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  return str.replace(/\s*$/, '');
};

},{}],"/home/strider/workspace/node_modules/underscore/underscore.js":[function(require,module,exports){
//     Underscore.js 1.5.2
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.5.2';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? void 0 : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed > result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array, using the modern version of the 
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from an array.
  // If **n** is not specified, returns a single random element from the array.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (arguments.length < 2 || guard) {
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, value, context) {
      var result = {};
      var iterator = value == null ? _.identity : lookupIterator(value);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n == null) || guard ? array[0] : slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) {
      return array[array.length - 1];
    } else {
      return slice.call(array, Math.max(array.length - n, 0));
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, "length").concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error("bindAll must be passed function names");
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    return function() {
      context = this;
      args = arguments;
      timestamp = new Date();
      var later = function() {
        var last = (new Date()) - timestamp;
        if (last < wait) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) result = func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

},{}],"/home/strider/workspace/standalone.js":[function(require,module,exports){
(function (global){
/*
 *
 * This is used to build the bundle with browserify.
 *
 * The bundle is used by people who doesn't use browserify.require
 * Those who use browserify will install with npm and require the module,
 * the package.json file points to index.js.
 */
var Auth0Lock = require('./');

// use amd or just throught to window object.
if (typeof global.window.define == 'function' && global.window.define.amd) {
  global.window.define('auth0-lock', function () { return Auth0Lock; });
} else if (global.window) {
  global.window.Auth0Lock = Auth0Lock;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./":"/home/strider/workspace/index.js"}]},{},["/home/strider/workspace/standalone.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJpMThuL2FyLmpzb24iLCJpMThuL2RhLmpzb24iLCJpMThuL2RlLmpzb24iLCJpMThuL2VuLmpzb24iLCJpMThuL2VzLmpzb24iLCJpMThuL2ZyLUZSLmpzb24iLCJpMThuL2hlLmpzb24iLCJpMThuL2l0Lmpzb24iLCJpMThuL2phLmpzb24iLCJpMThuL25iLU5PLmpzb24iLCJpMThuL25sLU5MLmpzb24iLCJpMThuL3B0LUJSLmpzb24iLCJpMThuL3B0Lmpzb24iLCJpMThuL3J1Lmpzb24iLCJpMThuL3RsaC5qc29uIiwiaTE4bi90ci5qc29uIiwiaTE4bi96aC5qc29uIiwiaW5kZXguanMiLCJsaWIvYmluZC9pbmRleC5qcyIsImxpYi9ib256by1hdWdtZW50ZWQvaW5kZXguanMiLCJsaWIvZ3JhdmF0YXIvaW5kZXguanMiLCJsaWIvaGVhZGVyL2ljb24tY29udGFpbmVyLmpzIiwibGliL2hlYWRlci9pbmRleC5qcyIsImxpYi9odG1sL21haW4uZWpzIiwibGliL2h0bWwvem9jaWFsLWJ1dHRvbi5lanMiLCJsaWIvaTE4bi9pbmRleC5qcyIsImxpYi9pbnNlcnQtY3NzL2luZGV4LmpzIiwibGliL2lzLXNtYWxsLXNjcmVlbi9pbmRleC5qcyIsImxpYi9tb2RlLWtlcmJlcm9zL2luZGV4LmpzIiwibGliL21vZGUta2VyYmVyb3MvbG9nZ2VkaW4uZWpzIiwibGliL21vZGUtbG9hZGluZy9pbmRleC5qcyIsImxpYi9tb2RlLWxvYWRpbmcvbG9hZGluZy5lanMiLCJsaWIvbW9kZS1sb2dnZWRpbi9pbmRleC5qcyIsImxpYi9tb2RlLWxvZ2dlZGluL2xvZ2dlZGluX2J1dHRvbi5lanMiLCJsaWIvbW9kZS1yZXNldC9pbmRleC5qcyIsImxpYi9tb2RlLXJlc2V0L3Jlc2V0LmVqcyIsImxpYi9tb2RlLXNpZ25pbi9pbmRleC5qcyIsImxpYi9tb2RlLXNpZ25pbi9sb2dpbl9hY3Rpb25zLmVqcyIsImxpYi9tb2RlLXNpZ25pbi9zaWduaW4uZWpzIiwibGliL21vZGUtc2lnbnVwL2luZGV4LmpzIiwibGliL21vZGUtc2lnbnVwL3NpZ251cC5lanMiLCJsaWIvb2JqZWN0LWNyZWF0ZS9pbmRleC5qcyIsImxpYi9vcHRpb25zLW1hbmFnZXIvaW5kZXguanMiLCJsaWIvcGFzc3dvcmQtc3RyZW5ndGgvaW5kZXguanMiLCJsaWIvcmVnZXgvaW5kZXguanMiLCJsaWIvc3RvcC1ldmVudC9pbmRleC5qcyIsImxpYi9zdHJhdGVnaWVzL2luZGV4LmpzIiwibGliL3N1cHBvcnRzLWFuaW1hdGlvbi9pbmRleC5qcyIsImxpYi9zdXBwb3J0cy1wbGFjZWhvbGRlci9pbmRleC5qcyIsImxpYi91dGlscy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hdXRoMC1qcy9saWIvTG9naW5FcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9hdXRoMC1qcy9saWIvYXNzZXJ0X3JlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL2xpYi9iYXNlNjRfdXJsX2RlY29kZS5qcyIsIm5vZGVfbW9kdWxlcy9hdXRoMC1qcy9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbGliL2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL2xpYi9qc29uLXBhcnNlLmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL2xpYi91c2VfanNvbnAuanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL0Jhc2U2NC9iYXNlNjQuanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL2RlYnVnL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL2RlYnVnL2RlYnVnLmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy9kZWJ1Zy9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL2pzb24tZmFsbGJhY2svaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL2pzb25wL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy9xcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hdXRoMC1qcy9ub2RlX21vZHVsZXMvcmVxd2VzdC9yZXF3ZXN0LmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy93aW5jaGFuL3dpbmNoYW4uanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL3h0ZW5kL2hhcy1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy94dGVuZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hdXRoMC1qcy9ub2RlX21vZHVsZXMveHRlbmQvbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ZvcmVhY2guanMiLCJub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL3h0ZW5kL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hdXRoMC1qcy9ub2RlX21vZHVsZXMveHRlbmQvbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2lzQXJndW1lbnRzLmpzIiwibm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy94dGVuZC9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9iZWFuL2JlYW4uanMiLCJub2RlX21vZHVsZXMvYmx1ZWltcC1tZDUvanMvbWQ1LmpzIiwibm9kZV9tb2R1bGVzL2JvbnpvL2JvbnpvLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbGliL19lbXB0eS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3Bhc3N3b3JkLXNoZXJpZmYvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcGFzc3dvcmQtc2hlcmlmZi9saWIvcG9saWN5X2Vycm9yLmpzIiwibm9kZV9tb2R1bGVzL3Bhc3N3b3JkLXNoZXJpZmYvbGliL3J1bGVzL2NvbnRhaW5zLmpzIiwibm9kZV9tb2R1bGVzL3Bhc3N3b3JkLXNoZXJpZmYvbGliL3J1bGVzL2NvbnRhaW5zQXRMZWFzdC5qcyIsIm5vZGVfbW9kdWxlcy9wYXNzd29yZC1zaGVyaWZmL2xpYi9ydWxlcy9pZGVudGljYWxDaGFycy5qcyIsIm5vZGVfbW9kdWxlcy9wYXNzd29yZC1zaGVyaWZmL2xpYi9ydWxlcy9sZW5ndGguanMiLCJub2RlX21vZHVsZXMvcGFzc3dvcmQtc2hlcmlmZi9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIiwibm9kZV9tb2R1bGVzL3NpenpsZS9kaXN0L3NpenpsZS5qcyIsIm5vZGVfbW9kdWxlcy90cmltL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvdW5kZXJzY29yZS5qcyIsInN0YW5kYWxvbmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDM3lDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMxS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcmZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDemtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDclBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDcjFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25YQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2bUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4Q0E7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcnVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNob0NBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2NENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzV2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiLy9cIjogXCJUaGlzIGlzIGFuIGF1dG9tYXRpYyB0cmFuc2xhdGlvbi4gSGVscCB1cyB0byBpbXByb3ZlIGl0LlwiLFxuICBcImxvYWRpbmdUaXRsZVwiOiBcItin2YTYsdis2KfYoSDYp9mE2KfZhtiq2LjYp9ixLi4uXCIsXG4gIFwiY2xvc2VcIjogXCLZgtmFINio2KXYutmE2KfZglwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcItiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmEXCIsXG4gICAgXCJhY3Rpb25cIjogXCLYqtiz2KzZitmEINin2YTYr9iu2YjZhFwiLFxuICAgIFwiYWxsXCI6IFwi2KXYuNmH2KfYsSDYp9mE2YPZhFwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEVtcHR5XCI6IFwi2LHYs9in2YTYqSDYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2Yog2YHYp9ix2LrYp9mLLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCLYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2Yog2LrZitixINi12KfZhNitLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6IFwie9in2YTZhdis2KfZhH0g2YTZhSDZitmD2YYg2KfZhNil2LnYr9in2K8uXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwi2KfZhNiq2LPYrNmK2YRcIixcbiAgICBcImZvcmdvdFRleHRcIjogXCLZh9mEINmG2LPZitiqINmD2YTZhdipINin2YTZhdix2YjYsSDYp9mE2K7Yp9i12Kkg2KjZg9ifXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwi2KfZhNio2LHZitivINin2YTYpdmE2YPYqtix2YjZhtmKXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwi2KfYs9mFINin2YTZhdiz2KrYrtiv2YVcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLZg9mE2YXYqSDYp9mE2YXYsdmI2LFcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCLYo9mIXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLYrdiv2Ksg2K7Yt9ijINij2KvZhtin2KEg2YXYudin2YTYrNipINiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmELlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwi2KLYrtixINmF2LHYqSDZgtmF2Kog2KjYqtiz2KzZitmEINin2YTYr9iu2YjZhCDYqNin2LPYqtiu2K/Yp9mFLi4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCLYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2Yog2LrZitixINi12K3ZititINij2Ygg2YPZhNmF2Kkg2KfZhNmF2LHZiNixLlwiLFxuICAgIFwib3JcIjogXCIuLiDYo9mIINmC2YUg2KjYqtiz2KzZitmEINin2YTYr9iu2YjZhCDYqNin2LPYqtiu2K/Yp9mFXCIsXG4gICAgXCJsb2FkaW5nTWVzc2FnZVwiOiBcItin2YTYqtmI2YLZiti5INmB2Yog2YXYuSB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCLYp9mE2KrYs9is2YrZhFwiLFxuICAgIFwiYWN0aW9uXCI6IFwi2KfZhNiq2LPYrNmK2YRcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2YpcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLYpdmG2LTYp9ihINmD2YTZhdipINmF2LHZiNixXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCLYpdmE2LrYp9ihINin2YTYo9mF2LFcIixcbiAgICBcImhlYWRlclRleHRcIjogXCLYp9mE2LHYrNin2KEg2KXYr9iu2KfZhCDYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2Yog2YjZg9mE2YXYqSDYp9mE2YXYsdmI2LEg2KfZhNiu2KfYtdipINio2YNcIixcbiAgICBcImZvb3RlclRleHRcIjogXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6IFwi2YfYsNinINin2YTZhdis2KfZhCB72KfZhNmF2KzYp9mEfSDZgtivINiq2YUg2KrZg9mI2YrZhtmHINmE2KrYs9is2YrZhCDYp9mE2K/YrtmI2YTYjCDZiNmE2Kcg2YrZhdmD2YYg2KPZhiDYqtmC2YjZhSDYqNil2YbYtNin2KEg2K3Ys9in2KguINit2KfZiNmEINiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmEINio2K/ZhNin2Ysg2YXZhiDYsNmE2YMuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLYrdiv2Ksg2K7Yt9ijINij2KvZhtin2KEg2YXYudin2YTYrNipINin2YTYudmE2KfZhdipINin2YTYqtiz2KzZitmELlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCLYpdi52KfYr9ipINiq2LnZitmK2YYg2YPZhNmF2Kkg2KfZhNmF2LHZiNixXCIsXG4gICAgXCJhY3Rpb25cIjogXCLYpdix2LPYp9mEXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwi2KfZhNio2LHZitivINin2YTYpdmE2YPYqtix2YjZhtmKXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi2YPZhNmF2Kkg2KfZhNmF2LHZiNixINin2YTYrNiv2YrYr9ipXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi2KrYo9mD2YrYryDZg9mE2YXYqSDYp9mE2YXYsdmI2LEg2KfZhNis2K/Zitiv2KlcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcItil2YTYutin2KEg2KfZhNij2YXYsVwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCLZhNmC2K8g2KPYsdiz2YTZhtinINmB2YLYtyDZhNmDINix2LPYp9mE2Kkg2KjYsdmK2K8g2KXZhNmD2KrYsdmI2YbZiiDYpdi52KfYr9ipINiq2LnZitmK2YYg2YPZhNmF2Kkg2KfZhNmF2LHZiNixINin2YTYrtin2LXYqSDYqNmDLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwi2KfZhNix2KzYp9ihINil2K/Yrtin2YQg2YPZhNmF2Kkg2KfZhNmF2LHZiNixINmG2YHYs9mH2KcuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwi2KfZhNix2KzYp9ihINil2K/Yrtin2YQg2KfZhNio2LHZitivINin2YTYpdmE2YPYqtix2YjZhtmKINin2YTYrtin2LUg2KjZgyDZiNmD2YTZhdipINin2YTZhdix2YjYsSDYp9mE2KzYr9mK2K/YqS4g2YjYs9mI2YEg2YbYsdiz2YQg2YTZgyDYsdiz2KfZhNipINio2KfZhNio2LHZitivINil2YTZg9iq2LHZiNmG2Yog2YTYqtij2YPZitivINiq2LrZitmK2LEg2YPZhNmF2Kkg2KfZhNmF2LHZiNixLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi2K3Yr9irINiu2LfYoyDYo9ir2YbYp9ihINmF2LnYp9mE2KzYqSDYpdi52KfYr9ipINiq2LnZitmK2YYg2YPZhNmF2Kkg2KfZhNmF2LHZiNixLlwiXG4gIH1cbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibG9hZGluZ1RpdGxlXCI6ICAgICAgICAgICAgICAgICAgXCJWZW50IHZlbmxpZ3N0Li4uXCIsXG4gIFwiY2xvc2VcIjogICAgICAgICAgICAgICAgICAgICAgICAgXCJMdWtcIixcbiAgXCJ3aW5kb3dzQXV0aFRpdGxlXCI6ICAgICAgICAgICAgICBcIldpbmRvd3MgQXV0aGVudGljYXRpb25cIixcbiAgXCJpbnZhbGlkXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIlVneWxkaWdcIixcbiAgXCJtdXN0TWF0Y2hcIjogICAgICAgICAgICAgICAgICAgICBcIlNrYWwgc3RlbW1lIG92ZXJlbnNcIixcbiAgXCJsb2dpblNvY2lhbEJ1dHRvblwiOiAgICAgICAgICAgICBcIkxvZ2luIG1lZCB7Y29ubmVjdGlvbjp0aXRsZX1cIixcbiAgXCJzaWdudXBTb2NpYWxCdXR0b25cIjogICAgICAgICAgICBcIk9wcmV0IG1lZCB7Y29ubmVjdGlvbjp0aXRsZX1cIixcbiAgXCJuZXR3b3JrRXJyb3JcIjogICAgICAgICAgICAgICAgICBcIlZpIGt1bm5lIGlra2UgZsOlIGtvbnRha3QgdGlsIHNlcnZlcmVuLjxici8+UHLDuHYgdmVubGlnc3QgaWdlbi5cIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiTG9nIGluZFwiLFxuICAgIFwiYWN0aW9uXCI6ICAgICAgICAgICAgICAgICAgICAgIFwiQWNjZXNzXCIsXG4gICAgXCJhY3Rpb25Eb21haW5cIjogICAgICAgICAgICAgICAgXCJMb2cgaW5kIHDDpSB7ZG9tYWlufVwiLFxuICAgIFwiYWxsXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiVmlzIGFsbGVcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiAgICAgICAgICBcIkVtYWlsIGVyIHRvbS5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6ICAgICAgICBcIkVtYWlsIGlzIHVneWxkaWcuXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogICAgICAgXCJEb23Dpm5ldCB7ZG9tYWlufSBlciBpa2tlIHNhdCBvcC5cIixcbiAgICBcInNpZ251cFRleHRcIjogICAgICAgICAgICAgICAgICBcIk9wcmV0XCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJHbGVtdCBrb2Rlb3JkXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJBbm51bGxlclwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogICAgICAgICBcIkJydWdlcm5hdm5cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIktvZGVvcmRcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogICAgICAgICAgICAgICBcImVsbGVyXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogICAgICAgICAgICAgXCJEZXIgb3BzdG9kIGVuIGZlamwgdW5kZXIgbG9naW4uXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogICAgICAgICAgICAgXCJWZWQgc2lkc3RlIGxvZyBpbmQgYmVueXR0ZWRlIGR1Li4uXCIsXG4gICAgXCJkb21haW5Vc2VyTGFiZWxcIjogICAgICAgICAgICAgXCJEdSBlciBmb3JidW5kZXQgZnJhIGRpbiB2aXJrc29taGVkcyBuZXR2w6Zyay4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwiRm9ya2VydCBlbWFpbCBlbGxlciBwYXNzd29yZC5cIixcbiAgICBcIm9yXCI6ICAgICAgICAgICAgICAgICAgICAgICAgICBcIi4uLiBlbGxlciBsb2cgaW5kIG1lZFwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogICAgICAgICAgICAgIFwiTG9nZ2VyIGluZCBtZWQge2Nvbm5lY3Rpb259Li4uXCIsXG4gICAgXCJwb3B1cENyZWRlbnRpYWxzXCI6ICAgICAgICAgICAgXCJJbmR0YXN0IGRpdCBsb2dpbiBpIHBvcC11cCB2aW5kdWV0XCIsXG4gICAgXCJ1c2VyQ2xvc2VkUG9wdXBcIjogICAgICAgICAgICAgXCJQb3B1cCB2aW5kdWV0IGx1a2tlZGUuIFByw7h2IGlnZW4uXCIsXG4gICAgXCJ1c2VyQ29uc2VudEZhaWxlZFwiOiAgICAgICAgICAgXCJUaWxsYWRlbHNlIGJsZXYgaWtrZSBnaXZldC4gUHLDuHYgaWdlbi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiAgICAgICAgICAgICAgICAgXCJcIixcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIk9wcmV0XCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJPcHJldFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogICAgICAgICBcIkJydWdlcm5hdm5cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIk9wcmV0IGV0IGtvZGVvcmRcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiAgICAgICAgICAgICAgICBcIkFubnVsbGVyXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJJbmR0YXN0IGRpbiBlbWFpbCBvZyBkaXQga29kZW9yZFwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiAgXCJEZXR0ZSBkb23Dpm5lIHtkb21haW59IGVyIGJsZXZldCBrb25maWd1cmVyZXQgdGlsIFNpbmdsZSBTaWduIE9uIG9nIGR1IGthbiBpa2tlIG9wcmV0dGUgZW4ga29udG8uIFByw7h2IGF0IGxvZ2dlIGluZCBpIHN0ZWRldC5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIkRlciBvcHN0b2QgZW4gZmVqbCB1bmRlciBvcHJldHRlbHNlLlwiLFxuICAgIFwidXNlckV4aXN0c0Vycm9yVGV4dFwiOiAgICAgICAgIFwiRGVubmUgYnJ1Z2VyIGVrc2lzdGVyZXIgYWxsZXJlZGUuXCIsXG4gICAgXCJ1c2VybmFtZUluVXNlRXJyb3JUZXh0XCI6ICAgICAgXCJCcnVnZXJuYXZuZXQgZXIgYWxsZXJlZGUgaSBicnVnLlwiLFxuICAgIFwiaW52YWxpZFBhc3N3b3JkXCI6ICAgICAgICAgICAgIFwiS29kZW9yZGV0IGVyIGZvciBzdmFndC5cIixcbiAgICBcbiAgICBcInBhc3N3b3JkU3RyZW5ndGhcIjoge1xuICAgICAgXCJub25FbXB0eVwiOiBcIkV0IGlra2UtdG9tdCBrb2Rlb3JkIGtyw6Z2ZXNcIixcbiAgICAgIFwibGVuZ3RoQXRMZWFzdFwiOiBcIk1pbmRzdCAlZCB0ZWduIGxhbmd0XCIsXG4gICAgICBcInNob3VsZENvbnRhaW5cIjogXCJTa2FsIGluZGVob2xkZTpcIixcbiAgICAgIFwiY29udGFpbnNBdExlYXN0XCIgOiBcIlNrYWwgaW5kZWhvbGRlIG1pbmRzdCAlZCBhZiBmw7hsZ2VuZGUgJWQgdHlwZXIgdGVnbjpcIixcbiAgICAgIFwibG93ZXJDYXNlXCI6IFwiU23DpSBib2dzdGF2ZXIgKGEteilcIixcbiAgICAgIFwidXBwZXJDYXNlXCI6IFwiU3RvcmUgYm9nc3RhdmVyIChBLVopXCIsXG4gICAgICBcIm51bWJlcnNcIjogXCJOdW1yZSAoMC05KVwiLFxuICAgICAgXCJzcGVjaWFsQ2hhcmFjdGVyc1wiIDogXCJTcGVjaWFsdGVnbiAoZi5la3MuICFAIyQlXiYqKVwiLFxuICAgICAgXCJpZGVudGljYWxDaGFyc1wiOiBcIklra2UgbWVyZSBlbmQgJWQgaWRlbnRpc2tlIHRlZ24gaSB0csOmayAoZi5la3MuIGVyIFxcXCIlc1xcXCIgaWtrZSB0aWxsYWR0KVwiXG4gICAgfVxuICAgIFxuICB9LFxuICBcInJlc2V0XCI6IHtcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIk51bHN0aWwgS29kZW9yZFwiLFxuICAgIFwiYWN0aW9uXCI6ICAgICAgICAgICAgICAgICAgICAgIFwiU2VuZFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIk55dCBLb2Rlb3JkXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgXCJCZWtyw6ZmdCBOeXQgS29kZW9yZFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6ICAgICAgICAgICAgICAgIFwiQW5udWxsZXJcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6ICAgICAgICAgICAgICAgICBcIlZpIGhhciBsaWdlIHNlbmR0IGRpZyBlbiBlbWFpbCBmb3IgYXQgbnVsc3RpbGxlIGRpdCBrb2Rlb3JkLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6ICAgICAgIFwiSW5kdGFzdCBkZXQgc2FtbWUga29kZW9yZC5cIixcbiAgICBcImhlYWRlclRleHRcIjogICAgICAgICAgICAgICAgICBcIkluZHRhc3QgdmVubGlnc3QgZGluIGVtYWlsIG9nIGRpdCBueWUga29kZW9yZC4gVmkgc2VuZGVyIGRpZyBlbiBlbWFpbCBmb3IgYXQgYmVrcsOmZnRlIMOmbmRyaW5nZW4uXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogICAgICAgICAgICAgXCJEZXIgb3BzdG9kIGVuIGZlamwgdW5kZXIgYmVoYW5kbGluZyBhZiBudWxzdGlsbGluZyBhZiBrb2Rlb3JkLlwiLFxuICAgIFwidXNlckRvZXNOb3RFeGlzdEVycm9yVGV4dFwiOiAgIFwiQnJ1Z2VyZW4gZmluZGVzIGlra2UuXCIsXG4gICAgXCJpbnZhbGlkUGFzc3dvcmRcIjogICAgICAgICAgICAgXCJLb2Rlb3JkZXQgZXIgZm9yIHN2YWd0LlwiXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwiQml0dGUgd2FydGVuLi4uXCIsXG4gIFwiY2xvc2VcIjogXCJTY2hsaWXDn2VuXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiQW5tZWxkZW5cIixcbiAgICBcImFjdGlvblwiOiBcIkFubWVsZGVuXCIsXG4gICAgXCJhbGxcIjogXCJBbGxlIGFuemVpZ2VuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCJEaWUgZS1NYWlsIGlzdCBsZWVyLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCJEaWUgZS1NYWlsIGlzdCB1bmfDvGx0aWcuXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCJ7ZG9tYWlufSB3dXJkZSBuaWNodCBlaW5nZXJpY2h0ZXQuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwiQW5tZWxkZW5cIixcbiAgICBcImZvcmdvdFRleHRcIjogXCJQYXNzd29ydCB2ZXJnZXNzZW4/XCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRS1NYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiQmVudXR6ZXJuYW1lXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiUGFzc3dvcnRcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCJvZGVyXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJHYWIgZXMgRmVobGVyIGJlaW0gVmVyYXJiZWl0ZW4gZGVyIGFubWVsZGVuLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwiTGV0enRlIE1hbCB1bnRlcnNjaHJpZWJlbiBTaWUgYmVpIGRlciBWZXJ3ZW5kdW5nLi4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCJGYWxzY2hlIGUtTWFpbCBvZGVyIFBhc3N3b3J0LlwiLFxuICAgIFwib3JcIjogXCIuLi4gb2RlciBtZWxkZW4gU2llIHNpY2ggbWl0XCIsXG4gICAgXCJsb2FkaW5nTWVzc2FnZVwiOiBcIkJlaSBkZXIgQW5tZWxkdW5nIG1pdCB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCJBbm1lbGRlblwiLFxuICAgIFwiYWN0aW9uXCI6IFwiQW5tZWxkZW5cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFLU1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJFcnN0ZWxsZW4gU2llIGVpbiBLZW5ud29ydFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwiQWJicmVjaGVuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiQml0dGUgZ2ViZW4gU2llIElocmUgZS1NYWlsIHVuZCBQYXNzd29ydFwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiBcIkR1cmNoIEtsaWNrZW4gYXVmIFxcXCJBbm1lbGRlblxcXCIsIHN0aW1tZW4gU2llIHVuc2VyZW4gTnV0enVuZ3NiZWRpbmd1bmdlbiBvZGVyIERhdGVuc2NodXR6cmljaHRsaW5pZW4uXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIkRpZXNlIERvbcOkbmUge2RvbWFpbn0gZsO8ciBTaW5nbGUgU2lnbiBPbiBrb25maWd1cmllcnQgd3VyZGUgdW5kIFNpZSBrw7ZubmVuIGVpbiBLb250byBlcnN0ZWxsZW4uIFZlcnN1Y2hlbiBTaWUgc3RhdHRkZXNzZW4gc2ljaCBhbnp1bWVsZGVuLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiR2FiIGVzIEZlaGxlciBiZWltIFZlcmFyYmVpdGVuIGRlciBaZWljaGVucyBhdWYuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIlBhc3N3b3J0IHp1csO8Y2tzZXR6ZW5cIixcbiAgICBcImFjdGlvblwiOiBcIlNlbmRlblwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkUtTWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk5ldWVzIFBhc3N3b3J0XCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiTmV1ZXMgS2VubndvcnQgYmVzdMOkdGlnZW5cIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFiYnJlY2hlblwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCJXaXIgaGFiZW4gU2llIG51ciBlaW5lIGUtTWFpbCB6dW0gWnVyw7xja3NldHplbiBJaHJlcyBQYXNzd29ydHMgZ2VzY2hpY2t0LlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwiQml0dGUgZ2ViZW4gU2llIGRhcyBnbGVpY2hlIEtlbm53b3J0LlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIkJpdHRlIGdlYmVuIFNpZSBJaHJlIGUtTWFpbCB1bmQgZGFzIG5ldWUgS2VubndvcnQuIFdpciBzZW5kZW4gSWhuZW4gZWluZSBlLU1haWwgenVyIEJlc3TDpHRpZ3VuZyBkZXIgUGFzc3dvcnTDpG5kZXJ1bmcuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJHYWIgZXMgRmVobGVyIGJlaW0gVmVyYXJiZWl0ZW4gZGVzIEtlbm53b3J0cyB6dXLDvGNrc2V0emVuLlwiXG4gIH1cbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibG9hZGluZ1RpdGxlXCI6ICAgICAgICAgICAgICAgICAgXCJQbGVhc2Ugd2FpdC4uLlwiLFxuICBcImNsb3NlXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2xvc2VcIixcbiAgXCJ3aW5kb3dzQXV0aFRpdGxlXCI6ICAgICAgICAgICAgICBcIldpbmRvd3MgQXV0aGVudGljYXRpb25cIixcbiAgXCJpbnZhbGlkXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIkludmFsaWRcIixcbiAgXCJtdXN0TWF0Y2hcIjogICAgICAgICAgICAgICAgICAgICBcIk11c3QgbWF0Y2hcIixcbiAgXCJsb2dpblNvY2lhbEJ1dHRvblwiOiAgICAgICAgICAgICBcIkxvZ2luIHdpdGgge2Nvbm5lY3Rpb246dGl0bGV9XCIsXG4gIFwic2lnbnVwU29jaWFsQnV0dG9uXCI6ICAgICAgICAgICAgXCJTaWdudXAgd2l0aCB7Y29ubmVjdGlvbjp0aXRsZX1cIixcbiAgXCJuZXR3b3JrRXJyb3JcIjogICAgICAgICAgICAgICAgICBcIldlIGNvdWxkIG5vdCByZWFjaCB0aGUgc2VydmVyLjxici8+UGxlYXNlIHRyeSBhZ2Fpbi5cIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiTG9nIGluXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJBY2Nlc3NcIixcbiAgICBcImFjdGlvbkRvbWFpblwiOiAgICAgICAgICAgICAgICBcIkxvZyBpbiB0byB7ZG9tYWlufVwiLFxuICAgIFwiYWxsXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiU2hvdyBhbGxcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiAgICAgICAgICBcIlRoZSBlbWFpbCBpcyBlbXB0eS5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6ICAgICAgICBcIlRoZSBlbWFpbCBpcyBpbnZhbGlkLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6ICAgICAgIFwiVGhlIGRvbWFpbiB7ZG9tYWlufSBoYXMgbm90IGJlZW4gc2V0IHVwLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiU2lnbiBVcFwiLFxuICAgIFwiZm9yZ290VGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiUmVzZXQgcGFzc3dvcmRcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiAgICAgICAgICAgICAgICBcIkNhbmNlbFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogICAgICAgICBcIlVzZXJuYW1lXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJQYXNzd29yZFwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiAgICAgICAgICAgICAgIFwib3JcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIlRoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSBsb2dpbi5cIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiAgICAgICAgICAgICBcIkxhc3QgdGltZSB5b3Ugc2lnbmVkIGluIHVzaW5nLi4uXCIsXG4gICAgXCJkb21haW5Vc2VyTGFiZWxcIjogICAgICAgICAgICAgXCJZb3UgYXJlIGNvbm5lY3RlZCBmcm9tIHlvdXIgY29ycG9yYXRlIG5ldHdvcmsuLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIldyb25nIGVtYWlsIG9yIHBhc3N3b3JkLlwiLFxuICAgIFwib3JcIjogICAgICAgICAgICAgICAgICAgICAgICAgIFwiLi4uIG9yIGxvZyBpbiB1c2luZ1wiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogICAgICAgICAgICAgIFwiTG9nZ2luZyBJbiB3aXRoIHtjb25uZWN0aW9ufS4uLlwiLFxuICAgIFwicG9wdXBDcmVkZW50aWFsc1wiOiAgICAgICAgICAgIFwiRW50ZXIgeW91ciBjcmVkZW50aWFscyBpbiB0aGUgcG9wLXVwIHdpbmRvd1wiLFxuICAgIFwidXNlckNsb3NlZFBvcHVwXCI6ICAgICAgICAgICAgIFwiUG9wdXAgd2luZG93IGNsb3NlZC4gVHJ5IGFnYWluLlwiLFxuICAgIFwidXNlckNvbnNlbnRGYWlsZWRcIjogICAgICAgICAgIFwiUGVybWlzc2lvbnMgd2VyZSBub3QgZ3JhbnRlZC4gVHJ5IGFnYWluLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6ICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiU2lnbiBVcFwiLFxuICAgIFwiYWN0aW9uXCI6ICAgICAgICAgICAgICAgICAgICAgIFwiU2lnbiBVcFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogICAgICAgICBcIlVzZXJuYW1lXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJDcmVhdGUgYSBQYXNzd29yZFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6ICAgICAgICAgICAgICAgIFwiQ2FuY2VsXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCBhbmQgcGFzc3dvcmRcIixcbiAgICBcImZvb3RlclRleHRcIjogICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogIFwiVGhpcyBkb21haW4ge2RvbWFpbn0gaGFzIGJlZW4gY29uZmlndXJlZCBmb3IgU2luZ2xlIFNpZ24gT24gYW5kIHlvdSBjYW4ndCBjcmVhdGUgYW4gYWNjb3VudC4gVHJ5IGxvZ2dpbmcgaW4gaW5zdGVhZC5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIlRoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSBzaWdudXAuXCIsXG4gICAgXCJ1c2VyRXhpc3RzRXJyb3JUZXh0XCI6ICAgICAgICAgXCJUaGUgdXNlciBhbHJlYWR5IGV4aXN0cy5cIixcbiAgICBcInVzZXJuYW1lSW5Vc2VFcnJvclRleHRcIjogICAgICBcIlRoZSB1c2VybmFtZSBpcyBhbHJlYWR5IGluIHVzZS5cIixcbiAgICBcImludmFsaWRQYXNzd29yZFwiOiAgICAgICAgICAgICBcIlBhc3N3b3JkIGlzIHRvbyB3ZWFrLlwiLFxuICAgIFxuICAgIFwicGFzc3dvcmRTdHJlbmd0aFwiOiB7XG4gICAgICBcIm5vbkVtcHR5XCI6IFwiTm9uLWVtcHR5IHBhc3N3b3JkIHJlcXVpcmVkXCIsXG4gICAgICBcImxlbmd0aEF0TGVhc3RcIjogXCJBdCBsZWFzdCAlZCBjaGFyYWN0ZXJzIGluIGxlbmd0aFwiLFxuICAgICAgXCJzaG91bGRDb250YWluXCI6IFwiU2hvdWxkIGNvbnRhaW46XCIsXG4gICAgICBcImNvbnRhaW5zQXRMZWFzdFwiIDogXCJDb250YWluIGF0IGxlYXN0ICVkIG9mIHRoZSBmb2xsb3dpbmcgJWQgdHlwZXMgb2YgY2hhcmFjdGVyczpcIixcbiAgICAgIFwibG93ZXJDYXNlXCI6IFwiTG93ZXIgY2FzZSBsZXR0ZXJzIChhLXopXCIsXG4gICAgICBcInVwcGVyQ2FzZVwiOiBcIlVwcGVyIGNhc2UgbGV0dGVycyAoQS1aKVwiLFxuICAgICAgXCJudW1iZXJzXCI6IFwiTnVtYmVycyAoaS5lLiAwLTkpXCIsXG4gICAgICBcInNwZWNpYWxDaGFyYWN0ZXJzXCIgOiBcIlNwZWNpYWwgY2hhcmFjdGVycyAoZS5nLiAhQCMkJV4mKilcIixcbiAgICAgIFwiaWRlbnRpY2FsQ2hhcnNcIjogXCJObyBtb3JlIHRoYW4gJWQgaWRlbnRpY2FsIGNoYXJhY3RlcnMgaW4gYSByb3cgKGUuZy4sIFxcXCIlc1xcXCIgbm90IGFsbG93ZWQpXCJcbiAgICB9XG4gICAgXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiUmVzZXQgUGFzc3dvcmRcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICBcIlNlbmRcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJOZXcgUGFzc3dvcmRcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICBcIkNvbmZpcm0gTmV3IFBhc3N3b3JkXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJDYW5jZWxcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6ICAgICAgICAgICAgICAgICBcIldlJ3ZlIGp1c3Qgc2VudCB5b3UgYW4gZW1haWwgdG8gcmVzZXQgeW91ciBwYXNzd29yZC5cIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiAgICAgICBcIlBsZWFzZSBlbnRlciB0aGUgc2FtZSBwYXNzd29yZC5cIixcbiAgICBcImhlYWRlclRleHRcIjogICAgICAgICAgICAgICAgICBcIlBsZWFzZSBlbnRlciB5b3VyIGVtYWlsIGFuZCB0aGUgbmV3IHBhc3N3b3JkLiBXZSB3aWxsIHNlbmQgeW91IGFuIGVtYWlsIHRvIGNvbmZpcm0gdGhlIHBhc3N3b3JkIGNoYW5nZS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIlRoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSBwYXNzd29yZCByZXNldC5cIixcbiAgICBcInVzZXJEb2VzTm90RXhpc3RFcnJvclRleHRcIjogICBcIlVzZXIgZG9lcyBub3QgZXhpc3QuXCIsXG4gICAgXCJpbnZhbGlkUGFzc3dvcmRcIjogICAgICAgICAgICAgXCJQYXNzd29yZCBpcyB0b28gd2Vhay5cIlxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibG9hZGluZ1RpdGxlXCI6ICAgICAgICAgICAgICAgICAgXCJQb3IgZmF2b3IgZXNwZXJlLi4uXCIsXG4gIFwiY2xvc2VcIjogICAgICAgICAgICAgICAgICAgICAgICAgXCJDZXJyYXJcIixcbiAgXCJpbnZhbGlkXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIkludsOhbGlkb1wiLFxuICBcIm11c3RNYXRjaFwiOiAgICAgICAgICAgICAgICAgICAgIFwiRGViZSBjb2luY2lkaXJcIixcbiAgXCJsb2dpblNvY2lhbEJ1dHRvblwiOiAgICAgICAgICAgICBcIkluZ3Jlc2FyIGNvbiB7Y29ubmVjdGlvbjp0aXRsZX1cIixcbiAgXCJzaWdudXBTb2NpYWxCdXR0b25cIjogICAgICAgICAgICBcIlJlZ2lzdHJhcnNlIGNvbiB7Y29ubmVjdGlvbjp0aXRsZX1cIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiSW5pY2lhciBzZXNpw7NuXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJJbmdyZXNhclwiLFxuICAgIFwiYWxsXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9zdHJhciB0b2Rhc1wiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEVtcHR5XCI6ICAgICAgICAgIFwiRWwgZW1haWwgZXN0YSB2YWPDrW8uXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiAgICAgICAgXCJFbCBlbWFpbCBubyBlcyB2w6FsaWRvLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6ICAgICAgIFwiRWwgZG9taW5pbyB7ZG9tYWlufSBubyBlc3RhIGNvbmZpZ3VyYWRvLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiUmVnaXN0cmFyc2VcIixcbiAgICBcImZvcmdvdFRleHRcIjogICAgICAgICAgICAgICAgICBcIlJlc2V0ZWFyIGNvbnRyYXNlw7FhXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6ICAgICAgICAgICAgXCJFbWFpbFwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiTm9tYnJlIGRlIHVzdWFyaW9cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIkNvbnRyYXNlw7FhXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6ICAgICAgICAgICAgICAgXCJvXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogICAgICAgICAgICAgXCJIdWJvIHVuIGVycm9yIGFsIGluaWNpYXIgc2VzacOzbi5cIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiAgICAgICAgICAgICBcIkxhIMO6bHRpbWEgdmV6IGluaWNpw7Mgc2VzacOzbiBjb24uLi5cIixcbiAgICBcImRvbWFpblVzZXJMYWJlbFwiOiAgICAgICAgICAgICBcIlVzdGVkIHNlIGVuY3VlbnRyYSBjb25lY3RhZG8gZGVzZGUgc3UgcmVkIGNvcnBvcmF0aXZhLi4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCJFbWFpbCBvIGNsYXZlIGluY29ycmVjdGEuXCIsXG4gICAgXCJvclwiOiAgICAgICAgICAgICAgICAgICAgICAgICAgXCIuLi4gbyBpbmljaWUgc2VzacOzbiB1c2FuZG9cIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6ICAgICAgICAgICAgICBcIkluaWNpYW5kbyBzZXNpw7NuIGNvbiB7Y29ubmVjdGlvbn0uLi5cIixcbiAgICBcInBvcHVwQ3JlZGVudGlhbHNcIjogICAgICAgICAgICBcIkluZ3Jlc2Ugc3VzIGNyZWRlbmNpYWxlcyBlbiBsYSB2ZW50YW5hIGVtZXJnZW50ZVwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6ICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiUmVnaXN0cmFyc2VcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICBcIlJlZ2lzdHJhclwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIkNvbnRyYXNlw7FhXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJDYW5jZWxhclwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiUG9yIGZhdm9yIGluZ3Jlc2UgZW1haWwgeSBjb250cmFzZcOxYVwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiAgXCJFbCBkb21pbmlvIHtkb21haW59IGhhIHNpZG8gY29uZmlndXJhZG8gcGFyYSBTaW5nbGUgU2lnbiBPbiB5IG5vIHB1ZWRlIGNyZWFyIHVuYSBjdWVudGEuIEludGVudGUgaW5pY2lhciBzZXNpw7NuIGRpcmVjdGFtZW50ZS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIkh1Ym8gdW4gZXJyb3IgYWwgcHJvY2VzYXIgc3UgcmVnaXN0cm8uXCIsXG4gICAgXCJ1c2VyRXhpc3RzRXJyb3JUZXh0XCI6ICAgICAgICAgXCJFbCB1c3VhcmlvIHlhIGV4aXN0ZS5cIlxuICB9LFxuICBcInJlc2V0XCI6IHtcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIlJlc2V0ZWFyIENvbnRyYXNlw7FhXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJFbnZpYXJcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJOdWV2YSBDb250cmFzZcOxYVwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgIFwiQ29uZmlybWUgbnVldmEgY29udHJhc2XDsWFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiAgICAgICAgICAgICAgICBcIkNhbmNlbGFyXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiAgICAgICAgICAgICAgICAgXCJIZW1vcyBlbnZpYWRvIHVuIGVtYWlsIHBhcmEgY29tcGxldGFyIGVsIHJlc2V0ZW8gZGUgc3UgY29udHJhc2XDsWEuXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogICAgICAgXCJQb3IgZmF2b3IgaW5ncmVzZSBsYSBtaXNtYSBjb250cmFzZcOxYS5cIixcbiAgICBcImhlYWRlclRleHRcIjogICAgICAgICAgICAgICAgICBcIlBvciBmYXZvciBpbmdyZXNlIHN1IGVtYWlsIHkgbGEgbnVldmEgY29udHJhc2XDsWEuIEVudmlhcmVtb3MgdW4gZW1haWwgcGFyYSBjb25maXJtYXIgZWwgY2FtYmlvLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6ICAgICAgICAgICAgIFwiSHVibyB1biBlcnJvciBhbCByZXNldGVhciBzdSBjb250cmFzZcOxYS5cIixcbiAgICBcInVzZXJEb2VzTm90RXhpc3RFcnJvclRleHRcIjogICBcIlVzdWFyaW8gaW52w6FsaWRvLlwiXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCJWZXVpbGxleiBwYXRpZW50ZXIuLi5cIixcbiAgXCJjbG9zZVwiOiBcIkZlcm1lclwiLFxuICBcIndpbmRvd3NBdXRoVGl0bGVcIjogXCJDb25uZXhpb24gV2luZG93c1wiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIkNvbm5leGlvblwiLFxuICAgIFwiYWN0aW9uXCI6IFwiQ29ubmV4aW9uXCIsXG4gICAgXCJhbGxcIjogXCJBZmZpY2hlciB0b3V0XCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCJMZSBjb3VycmllbCBlc3QgdmlkZS5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6IFwiTGUgY291cnJpZWwgbidlc3QgcGFzIHZhbGlkZS5cIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcIkxlIGRvbWFpbmUge2RvbWFpbn0gbidhIHBhcyDDqXTDqSBjb25maWd1csOpLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiBcIkluc2NyaXZlei12b3VzXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwiVm91cyBhdmV6IG91Ymxpw6kgdm90cmUgbW90IGRlIHBhc3NlID9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJDb3VycmllbFwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiBcIk5vbSBkJ3V0aWxpc2F0ZXVyXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiTW90IGRlIHBhc3NlXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6IFwib3VcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkVycmV1ciBsb3JzIGRlIGxhIGNvbm5leGlvbi5cIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiBcIkxvcnMgZGUgdm90cmUgZGVybmnDqHJlIGNvbm5leGlvbiB2b3VzIGF2ZXogdXRpbGlzw6kuLi5cIixcbiAgICBcImRvbWFpblVzZXJMYWJlbFwiOiBcIlZvdXMgw6p0ZXMgY29ubmVjdMOpIGRlcHVpcyBsZSByw6lzZWF1IGRlIHZvdHJlIGVudHJlcHJpc2UuLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIkNvdXJyaWVsIG91IG1vdCBkZSBwYXNzZSBpbmNvcnJlY3QuXCIsXG4gICAgXCJvclwiOiBcIi4uLiBvdSBjb25uZWN0ZXotdm91cyDDoCBsJ2FpZGUgZGVcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6IFwiQ29ubmV4aW9uIMOgIGwnYWlkZSBkZSB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCJJbnNjcml2ZXotdm91c1wiLFxuICAgIFwiYWN0aW9uXCI6IFwiSW5zY3JpdmV6LXZvdXNcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJDb3VycmllbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIkNyw6llciB1biBtb3QgZGUgcGFzc2VcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFubnVsZXJcIixcbiAgICBcImhlYWRlclRleHRcIjogXCJWZXVpbGxleiBlbnRyZXIgdm90cmUgY291cnJpZWwgZXQgbW90IGRlIHBhc3NlXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIkNlIGRvbWFpbmUge2RvbWFpbn0gYSDDqXTDqSBjb25maWd1csOpIHBvdXIgbGUgU2luZ2xlIFNpZ24gT24gZXQgdm91cyBuZSBwb3V2ZXogcGFzIGNyw6llciBkZSBjb21wdGUuIEVzc2F5ZXogZGUgdm91cyBjb25uZWN0ZXIgw6AgdW4gY29tcHRlIGV4aXN0YW50LlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiRXJyZXVyIGxvcnMgZGUgbCdpbnNjcmlwdGlvbi5cIixcbiAgICBcInVzZXJFeGlzdHNFcnJvclRleHRcIjogXCJDZXQgdXRpbGlzYXRldXIgZXhpc3RlIGTDqWrDoC5cIlxuICB9LFxuICBcInJlc2V0XCI6IHtcbiAgICBcInRpdGxlXCI6IFwiUsOpaW5pdGlhbGlzZXIgdm90cmUgbW90IGRlIHBhc3NlXCIsXG4gICAgXCJhY3Rpb25cIjogXCJFbnZveWVyXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiQ291cnJpZWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJOb3V2ZWF1IG1vdCBkZSBwYXNzZVwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIkNvbmZpcm1lciBsZSBub3V2ZWF1IG1vdCBkZSBwYXNzZVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwiQW5udWxlclwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCJWb3VzIGFsbGV6IHJlY2V2b2lyIHNvdXMgcXVlbHF1ZXMgbWludXRlcyB1biBjb3VycmllbCB2b3VzIGluZGlxdWFudCBjb21tZW50IHLDqWluaXRpYWxpc2VyIHZvdHJlIG1vdCBkZSBwYXNzZS5cIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIlMnaWwgdm91cyBwbGHDrnQgZW50cmV6IGxlIG3Dqm1lIG1vdCBkZSBwYXNzZS5cIixcbiAgICBcImhlYWRlclRleHRcIjogXCJWZXVpbGxleiBzYWlzaXIgdm90cmUgY291cnJpZWwgZXQgbW90IGRlIHBhc3NlLiBOb3VzIHZvdXMgZW52ZXJyb25zIHVuIGNvdXJyaWVsIHBvdXIgY29uZmlybWVyIGxlIGNoYW5nZW1lbnQgZGUgbW90IGRlIHBhc3NlLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiRXJyZXVyIGRlIHRyYWl0ZW1lbnQgbG9zIGRlIHLDqWluaXRpYWxpc2F0aW9uIGR1IG1vdCBkZSBwYXNzZS5cIixcbiAgICBcInVzZXJEb2VzTm90RXhpc3RFcnJvclRleHRcIjogXCJVdGlsaXNhdGV1ciBpbnRyb3V2YWJsZS5cIlxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiLy9cIjogXCJUaGlzIGlzIGFuIGF1dG9tYXRpYyB0cmFuc2xhdGlvbi4gSGVscCB1cyB0byBpbXByb3ZlIGl0LlwiLFxuICBcImxvYWRpbmdUaXRsZVwiOiBcIteX15vXlCDXkdeR16fXqdeULi4uXCIsXG4gIFwiY2xvc2VcIjogXCLXodeS15XXqFwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIteU15nXqNep151cIixcbiAgICBcImFjdGlvblwiOiBcIteU15nXqNep151cIixcbiAgICBcImFsbFwiOiBcIteU16bXkiDXlNeb15xcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIteU15PXldeQINecINeU15XXkCDXqNeZ16cuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiBcIteU15PXldeQINecINeQ15nXoNeVINeX15XXp9eZLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6IFwi15TXqteX15XXnSB7ZG9tYWlufSDXnNeQINeU15nXqteUINeq15XXm9eg15nXqiDXlNeU16rXp9eg15QuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwi15TXmdeo16nXnVwiLFxuICAgIFwiZm9yZ290VGV4dFwiOiBcItep15vXl9eqINeU16HXmdeh157XkD9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLXk9eV15BcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogXCLXqdedINee16nXqtee16lcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLXodeZ16HXnteUXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6IFwi15DXlVwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi15DXmdeo16LXlCDXqdeS15nXkNeUINeR16LXmdeR15XXkyDXlNeb16DXmdeh15QuXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCLXkdek16LXnSDXlNeQ15fXqNeV16DXlCDXoNeb16DXodeqINeR15DXntem16LXldeqLi4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCLXlNeT15XXkFxcXCLXnCDXmNeV16LXlCDXkNeVINeh15nXodee15QuXCIsXG4gICAgXCJvclwiOiBcIi4g15DXlSDXm9eg15nXodeUINeR15DXntem16LXldeqXCIsXG4gICAgXCJsb2FkaW5nTWVzc2FnZVwiOiBcIteb16DXmdeh15Qg16LXnSB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCLXlNeZ16jXqdedXCIsXG4gICAgXCJhY3Rpb25cIjogXCLXlNeZ16jXqdedXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwi15PXldeQXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi16bXldeoINeh15nXodee15RcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIteR15nXmNeV15xcIixcbiAgICBcImhlYWRlclRleHRcIjogXCLXlNeW15nXoNeVINeQ16og15vXqteV15HXqiDXlNee15nXmdecINeV15TXodeZ16HXnteQXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIteq15fXldedINeW15QsIHtkb21haW59INeg16fXkdei15Qg16LXkdeV16gg15vXoNeZ16HXlCDXmdeX15nXk9eULCDXkNeZ158g15HXkNek16nXqNeV16rXmiDXnNeZ16bXldeoINeX16nXkdeV158uINeg16HXlCDXnNeU15nXm9eg16Eg15HXnten15XXnS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIteQ15nXqNei15Qg16nXkteZ15DXlCDXkdei15nXkdeV15Mg15DXqiDXlNep15zXmCDXnNee16LXnNeULlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCLXkNeZ16TXldehINeh15nXodee15RcIixcbiAgICBcImFjdGlvblwiOiBcItep15zXl1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIteT15XXkFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIteh15nXodee15Qg15fXk9ep15RcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLXkNep16gg16HXmdeh157XlCDXl9eT16nXlFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwi15HXmdeY15XXnFwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCLXkNeg15fXoNeVINek16nXldeYINec16nXnNeV15cg15zXmiDXk9eV15DXqCDXkNec16fXmNeo15XXoNeZINeb15PXmSDXnNeQ16TXoSDXkNeqINeU16HXmdeh157XlCDXqdec15ouXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogXCLXlNeW15nXoNeVINeR15HXp9ep15Qg15DXqiDXkNeV16rXlCDXodeZ16HXnteULlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIteQ16DXkCDXlNeW158g15DXqiDXlNeT15XXkNeoINeU15DXnNen15jXqNeV16DXmSDXqdec15og15XXkNeqINeU16HXmdeh157XlCDXlNeX15PXqdeULiDXkNeg15Ug16DXqdec15cg15zXmiDXlNeV15PXoteqINeT15XXkNeoINeQ15zXp9eY16jXldeg15kg15vXk9eZINec15DXqdeoINep15nXoNeV15kg15TXodeZ16HXnteULlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi15DXmdeo16LXlCDXqdeS15nXkNeUINeR16LXmdeR15XXkyDXkNeZ16TXldehINeU16HXmdeh157XlC5cIlxuICB9XG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIi8vXCI6IFwiVGhpcyBpcyBhbiBhdXRvbWF0aWMgdHJhbnNsYXRpb24uIEhlbHAgdXMgdG8gaW1wcm92ZSBpdC5cIixcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCJBdHRlbmRlcmUgcHJlZ28uLi5cIixcbiAgXCJjbG9zZVwiOiBcIkNoaXVkZXJlXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiQWNjZWRpXCIsXG4gICAgXCJhY3Rpb25cIjogXCJBY2NlZGlcIixcbiAgICBcImFsbFwiOiBcIlZpc3VhbGl6emEgdHV0dGlcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIkwnZW1haWwgw6ggdnVvdGEuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiBcIkwnZW1haWwgbm9uIMOoIHZhbGlkby5cIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcIklsIGRvbWluaW8ge2RvbWFpbn0gbm9uIMOoIHN0YXRhIGwnaW5zdGFsbGF6aW9uZS5cIixcbiAgICBcInNpZ251cFRleHRcIjogXCJSZWdpc3RyYXRpXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwiSGFpIGRpbWVudGljYXRvIGxhIHBhc3N3b3JkP1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIlBvc3RhIGVsZXR0cm9uaWNhXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiTm9tZSB1dGVudGVcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJQYXNzd29yZFwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiBcIm9cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkMnw6ggc3RhdG8gdW4gZXJyb3JlIGR1cmFudGUgbCdlbGFib3JhemlvbmUgaWwgc2Vnbm8gaW4uXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCJVbHRpbWEgdm9sdGEgY2hlIGhhaSBlc2VndWl0byB1dGlsaXp6YW5kby4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwiRW1haWwgZXJyYXRvIG8gcGFzc3dvcmQuXCIsXG4gICAgXCJvclwiOiBcIi4uLiBvcHB1cmUgYWNjZWRpIHVzYW5kb1wiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCJBY2NlZGkgY29uIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlJlZ2lzdHJhdGlcIixcbiAgICBcImFjdGlvblwiOiBcIlJlZ2lzdHJhdGlcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJQb3N0YSBlbGV0dHJvbmljYVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIkNyZWFyZSB1bmEgUGFzc3dvcmRcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFubnVsbGFcIixcbiAgICBcImhlYWRlclRleHRcIjogXCJJbnNlcmlzY2kgbGEgdHVhIGVtYWlsIGUgbGEgcGFzc3dvcmRcIixcbiAgICBcImZvb3RlclRleHRcIjogXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6IFwiUXVlc3RvIGRvbWluaW8ge2RvbWFpbn0gw6ggc3RhdG8gY29uZmlndXJhdG8gcGVyIGlsIFNpbmdsZSBTaWduIE9uIGUgbm9uIMOoIHBvc3NpYmlsZSBjcmVhcmUgdW4gYWNjb3VudC4gUHJvdmEgYWQgYWNjZWRlcmUgaW52ZWNlLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiQyfDqCBzdGF0byB1biBlcnJvcmUgZHVyYW50ZSBsJ2VsYWJvcmF6aW9uZSBpbCBzZWdubyBmaW5vLlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCJSZWltcG9zdGFyZSBsYSBQYXNzd29yZFwiLFxuICAgIFwiYWN0aW9uXCI6IFwiSW52aWFcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJQb3N0YSBlbGV0dHJvbmljYVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk51b3ZhIFBhc3N3b3JkXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQ29uZmVybWEgbnVvdmEgUGFzc3dvcmRcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFubnVsbGFcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6IFwiTm9pIGFiYmlhbW8gYXBwZW5hIGludmlhdG8gdW4nZS1tYWlsIHBlciByZWltcG9zdGFyZSBsYSBwYXNzd29yZC5cIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIkluc2VyaXNjaSBsYSBzdGVzc2EgcGFzc3dvcmQuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiSW5zZXJpc2NpIGlsIHR1byBpbmRpcml6em8gZW1haWwgZSBsYSBwYXNzd29yZCBudW92YS4gVGkgaW52aWVyZW1vIHVuJ2VtYWlsIHBlciBjb25mZXJtYXJlIGxhIG1vZGlmaWNhIGRlbGxhIHBhc3N3b3JkLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiQyfDqCBzdGF0byB1biBlcnJvcmUgZHVyYW50ZSBsJ2VsYWJvcmF6aW9uZSBpbCBwYXNzd29yZCByZXNldC5cIlxuICB9XG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIi8vXCI6IFwiVGhpcyBpcyBhbiBhdXRvbWF0aWMgdHJhbnNsYXRpb24uIEhlbHAgdXMgdG8gaW1wcm92ZSBpdC5cIixcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCLjgYrlvoXjgaHjgY/jgaDjgZXjgYTjgILjgILjgIJcIixcbiAgXCJjbG9zZVwiOiBcIumWieOBmOOCi1wiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIuOCteOCpOODs+OCpOODs1wiLFxuICAgIFwiYWN0aW9uXCI6IFwi44K144Kk44Oz44Kk44OzXCIsXG4gICAgXCJhbGxcIjogXCLjgZnjgbnjgabooajnpLrjgZfjgb7jgZnjgIJcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIumbu+WtkOODoeODvOODq+OBjOepuuOBp+OBmeOAglwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCLpm7vlrZDjg6Hjg7zjg6vjga/mnInlirnjgafjgZnjgIJcIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcInvjg4njg6HjgqTjg7N9IOOCu+ODg+ODiOOCouODg+ODl+OBleOCjOOBpuOBhOOBvuOBm+OCk+OAglwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiBcIuOCteOCpOODs+OCouODg+ODl1wiLFxuICAgIFwiZm9yZ290VGV4dFwiOiBcIuODkeOCueODr+ODvOODieOCkuOBiuW/mOOCjOOBp+OBmeOBi++8n1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIumbu+WtkOODoeODvOODq1wiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiBcIuODpuODvOOCtuWQjVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuODkeOCueODr+ODvOODiVwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiBcIuOBvuOBn+OBr1wiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi44K144Kk44Oz44Kk44Oz44KS5Yem55CG5Lit44Gr44Ko44Op44O844GM44GC44KK44G+44GX44Gf44CCXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCLmnIDlvozjga7mmYLplpPjgpLkvb/nlKjjgZfjgabjgpLjgrXjgqTjg7PjgqTjg7PjgZfjgaYuXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCLplpPpgZXjgaPjgZ/jg6Hjg7zjg6sg44Ki44OJ44Os44K544G+44Gf44Gv44OR44K544Ov44O844OJ44Gn44GZ44CCXCIsXG4gICAgXCJvclwiOiBcIi4uLiDjgb7jgZ/jga/jgpLkvb/nlKjjgZfjgabjgrXjgqTjg7PjgqTjg7NcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6IFwi44Gn44K144Kk44Oz44Kk44OzIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIuOCteOCpOODs+OCouODg+ODl1wiLFxuICAgIFwiYWN0aW9uXCI6IFwi44K144Kk44Oz44Ki44OD44OXXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwi6Zu75a2Q44Oh44O844OrXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi44OR44K544Ov44O844OJ44KS5L2c5oiQ44GX44G+44GZ44CCXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCLjgq3jg6Pjg7Pjgrvjg6tcIixcbiAgICBcImhlYWRlclRleHRcIjogXCLjgYLjgarjgZ/jga7jg6Hjg7zjg6sg44Ki44OJ44Os44K544Go44OR44K544Ov44O844OJ44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GE44CCXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIuOBk+OBruODieODoeOCpOODsyB7fSDjgYzmp4vmiJDjgZXjgozjgabjgYTjgovjgrfjg7PjgrDjg6sg44K144Kk44Oz44Kq44OzIOODuyDjgqLjgqvjgqbjg7Pjg4jjgpLkvZzmiJDjgZnjgovjgZPjgajjga/jgafjgY3jgb7jgZvjgpPjgILku6Pjgo/jgorjgavjgrXjgqTjg7PjgqTjg7PjgZfjgabjgY/jgaDjgZXjgYTjgIJcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIuespuWPt+OCkuWHpueQhuS4reOBq+OCqOODqeODvOOBjOOBguOCiuOBvuOBl+OBn+OAglwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCLjg5Hjgrnjg6/jg7zjg4njga7jg6rjgrvjg4Pjg4hcIixcbiAgICBcImFjdGlvblwiOiBcIumAgeS/oVwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIumbu+WtkOODoeODvOODq1wiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuaWsOOBl+OBhOODkeOCueODr+ODvOODiVwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuaWsOOBl+OBhOODkeOCueODr+ODvOODieOCkueiuuiqjeOBl+OBvuOBmeOAglwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwi44Kt44Oj44Oz44K744OrXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiBcIuaIkeOAhSDjga/jgaHjgofjgYbjganjgYLjgarjgZ/jga7jg5Hjgrnjg6/jg7zjg4njgpLjg6rjgrvjg4Pjg4jjgZnjgovjg6Hjg7zjg6vjgpLpgIHkv6HjgZfjgb7jgZfjgZ/jgIJcIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIuWQjOOBmOODkeOCueODr+ODvOODieOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhOOAglwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIuOBguOBquOBn+OBruODoeODvOODqyDjgqLjg4njg6zjgrnjgajmlrDjgZfjgYTjg5Hjgrnjg6/jg7zjg4njgpLlhaXlipvjgZfjgabjgY/jgaDjgZXjgYTjgILmiJHjgIUg44Gv44CB44OR44K544Ov44O844OJ44Gu5aSJ5pu044KS56K66KqN44GZ44KL44Gf44KB44Gr44Oh44O844Or44GM6YCB5L+h44GV44KM44G+44GZ44CCXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLjg5Hjgrnjg6/jg7zjg4njga7jg6rjgrvjg4Pjg4jjgpLlh6bnkIbkuK3jgavjgqjjg6njg7zjgYzjgYLjgorjgb7jgZfjgZ/jgIJcIlxuICB9XG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcImxvYWRpbmdUaXRsZVwiOiAgICAgICAgICAgICAgICAgIFwiVmVubmxpZ3N0IHZlbnQuLi5cIixcbiAgXCJjbG9zZVwiOiAgICAgICAgICAgICAgICAgICAgICAgICBcIkx1a2tcIixcbiAgXCJ3aW5kb3dzQXV0aFRpdGxlXCI6ICAgICAgICAgICAgICBcIldpbmRvd3MtYXV0ZW50aXNlcmluZ1wiLFxuICBcImludmFsaWRcIjogICAgICAgICAgICAgICAgICAgICAgIFwiVWd5bGRpZ1wiLFxuICBcIm11c3RNYXRjaFwiOiAgICAgICAgICAgICAgICAgICAgIFwiTcOlIHRpbHN2YXJlXCIsXG4gIFwibG9naW5Tb2NpYWxCdXR0b25cIjogICAgICAgICAgICAgXCJMb2dnIGlubiBtZWQge2Nvbm5lY3Rpb246dGl0bGV9XCIsXG4gIFwic2lnbnVwU29jaWFsQnV0dG9uXCI6ICAgICAgICAgICAgXCJSZWdpc3RyZXIgbWVkIHtjb25uZWN0aW9uOnRpdGxlfVwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiAgICAgICAgICAgICAgICAgICAgICAgXCJJbm5sb2dnaW5nXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJMb2dnIGlublwiLFxuICAgIFwiYWN0aW9uRG9tYWluXCI6ICAgICAgICAgICAgICAgIFwiTG9nZyBpbm4ge2RvbWFpbn1cIixcbiAgICBcImFsbFwiOiAgICAgICAgICAgICAgICAgICAgICAgICBcIlZpcyBhbGxlXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogICAgICAgICAgXCJFLXBvc3RlbiBlciBpa2tlIHV0ZnlsdC5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6ICAgICAgICBcIkUtcG9zdGVuIGVyIHVneWxkaWcuXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogICAgICAgXCJEb21lbmV0IHtkb21haW59IGVyIGlra2Uga29uZmlndXJlcnQuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJSZWdpc3RyZXJcIixcbiAgICBcImZvcmdvdFRleHRcIjogICAgICAgICAgICAgICAgICBcIlRpbGJha2VzdGlsbCBwYXNzb3JkXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJBdmJyeXRcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkUtcG9zdFwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiQnJ1a2VybmF2blwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiUGFzc29yZFwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiAgICAgICAgICAgICAgIFwiZWxsZXJcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIkRldCBvcHBzdG9kIGVuIGZlaWwgdW5kZXIgaW5ubG9nZ2luZ1wiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6ICAgICAgICAgICAgIFwiU2lzdCBnYW5nIGxvZ2dldCBkdSBpbm4gbWVkLi4uXCIsXG4gICAgXCJkb21haW5Vc2VyTGFiZWxcIjogICAgICAgICAgICAgXCJEdSBlciB0aWxrb2JsZXQgZGl0dCBuZXR0dmVyay4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwiRmVpbCBlLXBvc3QgZWxsZXIgcGFzc29yZC5cIixcbiAgICBcIm9yXCI6ICAgICAgICAgICAgICAgICAgICAgICAgICBcIi4uLiBlbGxlciBsb2dnIGlubiBtZWRcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6ICAgICAgICAgICAgICBcIkxvZ2dlciBpbm4gbWVkIHtjb25uZWN0aW9ufS4uLlwiLFxuICAgIFwicG9wdXBDcmVkZW50aWFsc1wiOiAgICAgICAgICAgIFwiU2tyaXYgaW5uIGlkZW50aWZpa2Fzam9uIGkgcG9wLXVwLXZpbmR1ZXRcIixcbiAgICBcInVzZXJDbG9zZWRQb3B1cFwiOiAgICAgICAgICAgICBcIlBvcC11cC12aW5kdSBsdWtrZXQuIFByw7h2IGlnamVuLlwiLFxuICAgIFwidXNlckNvbnNlbnRGYWlsZWRcIjogICAgICAgICAgIFwiTsO4ZHZlbmRpZ2UgdGlsZ2FuZ2VyIGJsZSBpa2tlIGdpdHQuIFZlbm5saWdzdCBwcsO4diBpZ2plbi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiAgICAgICAgICAgICAgICAgXCJcIixcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIlJlZ2lzdHJlclwiLFxuICAgIFwiYWN0aW9uXCI6ICAgICAgICAgICAgICAgICAgICAgIFwiUmVnaXN0cmVyXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6ICAgICAgICAgICAgXCJFLXBvc3RcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIk9wcHJldHQgcGFzc29yZFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6ICAgICAgICAgICAgICAgIFwiQXZicnl0XCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJWZW5ubGlnc3Qgc2tyaXYgaW5uIGUtcG9zdCBvZyBwYXNzb3JkXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6ICBcIkRvbWVuZXQge2RvbWFpbn0gZXIga29uZmlndXJlcnQgbWVkIFNpbmdsZSBTaWduIE9uIG9nIGR1IGthbiBpa2tlIG9wcHJldHRlIGVuIGtvbnRvIHNlbHYuIEZvcnPDuGsgw6UgbG9nZ2UgaW5uIGlzdGVkZXQuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogICAgICAgICAgICAgXCJEZXQgb3Bwc3RvZCBlbiBmZWlsIHVuZGVyIGlubmxvZ2dpbmcuXCIsXG4gICAgXCJ1c2VyRXhpc3RzRXJyb3JUZXh0XCI6ICAgICAgICAgXCJCcnVrZXJlbiBmaW5uZXMgYWxsZXJlZGUuXCIsXG4gICAgXCJpbnZhbGlkUGFzc3dvcmRcIjogICAgICAgICAgICAgXCJQYXNzb3JkZXQgZXIgZm9yIHN2YWt0LlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiVGlsYmFrZXN0aWxsIHBhc3NvcmRcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICBcIlNlbmRcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkUtcG9zdFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiTnl0dCBwYXNzb3JkXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgXCJCZWtyZWZ0IG55dHQgcGFzc29yZFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6ICAgICAgICAgICAgICAgIFwiQXZicnl0XCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiAgICAgICAgICAgICAgICAgXCJEdSBoYXIgYmxpdHQgdGlsc2VuZHQgZW4gZS1wb3N0IGZvciDDpSB0aWxiYWtlc3RpbGxlIHBhc3NvcmRldCBkaXR0LlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6ICAgICAgIFwiVmVubmxpZ3N0IHNrcml2IGlubiBkZXQgc2FtbWUgcGFzc29yZGV0LlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiVmVubmxpZ3N0IHNrcml2IGlubiBlLXBvc3Qgb2cgZGl0dCBueWUgcGFzc29yZC4gVmkgc2VuZGVyIGRlZyBlbiBlLXBvc3QgZm9yIMOlIGJla3JlZnRlIGVuZHJpbmdlbi5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIkRldCBvcHBzdG9kIGVuIGZlaWwgdW5kZXIgdGlsYmFrZXN0aWxsaW5nIGF2IHBhc3NvcmRldC5cIixcbiAgICBcInVzZXJEb2VzTm90RXhpc3RFcnJvclRleHRcIjogICBcIkJydWtlcmVuIGZpbm5lcyBpa2tlLlwiXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwiRWVuIG9nZW5ibGlrIGdlZHVsZC4uLlwiLFxuICBcImNsb3NlXCI6IFwiU2x1aXRlblwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIkFhbm1lbGRlblwiLFxuICAgIFwiYWN0aW9uXCI6IFwiQWFubWVsZGVuXCIsXG4gICAgXCJhbGxcIjogXCJUb29uIGFsbGVzXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCJIZXQgdmVsZCBlLW1haWwgaXMgbGVlZy5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6IFwiSGV0IHZlbGQgZS1tYWlsIGlzIG9uZ2VsZGlnLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6IFwiSGV0IGRvbWVpbiB7ZG9tYWlufSBpcyBuaWV0IGdlYWN0aXZlZXJkLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiBcIkFhbm1lbGRlblwiLFxuICAgIFwiZm9yZ290VGV4dFwiOiBcIldhY2h0d29vcmQgdmVyZ2V0ZW4/XCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRS1tYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiVXNlcm5hbWVhXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiV2FjaHR3b29yZFwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiBcIm9mXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJFciBpcyBlZW4gZm91dCBvcGdldHJlZGVuIHRpamRlbnMgaGV0IGlubG9nZ2VuLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwiRGUgbGFhdHN0ZSBrZWVyIGxvZ2RlIGplIGluIG1ldC4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwiVmVya2VlcmQgZS1tYWlsIG9mIHdhY2h0d29vcmQuXCIsXG4gICAgXCJvclwiOiBcIi4uLiBvZiBtZWxkIHUgYWFuIG1ldFwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCJBYW5tZWxkZW4gbWV0IHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIkFhbm1lbGRlblwiLFxuICAgIFwiYWN0aW9uXCI6IFwiQWFubWVsZGVuXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRS1tYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiRWVuIHdhY2h0d29vcmQgbWFrZW5cIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFubnVsZXJlblwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIlZvZXIgamUgZW1haWwgZW4gd2FjaHR3b29yZCBpblwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogXCJEaXQgZG9tZWluIHtkb21haW59IGlzIGdlY29uZmlndXJlZXJkIHZvb3IgZWVubWFsaWdlIGFhbm1lbGRpbmcgZW4gdSBrdW50IGdlZW4gYWNjb3VudCBhYW5tYWtlbi4gUHJvYmVlciB1IGFhbiB0ZSBtZWxkZW4gaW4gcGxhYXRzIGRhYXJ2YW4uXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJFciBpcyBlZW4gZm91dCBvcGdldHJlZGVuIGJpaiBkZSB2ZXJ3ZXJraW5nIHZhbiB1dyBhYW5tZWxkaW5nLlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCJXYWNodHdvb3JkIHJlc2V0dGVuXCIsXG4gICAgXCJhY3Rpb25cIjogXCJWZXJ6ZW5kZW5cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFLW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJOaWV1dyB3YWNodHdvb3JkXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQmV2ZXN0aWcgaGV0IG5pZXV3ZSB3YWNodHdvb3JkXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCJBbm51bGVyZW5cIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6IFwiV2UgaGViYmVuIHUgem9qdWlzdCBlZW4gZS1tYWlsIGdlc3R1dXJkIG9tIHV3IHdhY2h0d29vcmQgdGUgcmVzZXR0ZW4uXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogXCJWb2VyIGhldHplbGZkZSB3YWNodHdvb3JkIGluLlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIlZvZXIgdXcgZS1tYWlsYWRyZXMgZW4gaGV0IG5pZXV3ZSB3YWNodHdvb3JkIGluLiBXaWogc3R1cmVuIHUgZWVuIGUtbWFpbCB0ZXIgYmV2ZXN0aWdpbmcgdmFuIGRlIHdhY2h0d29vcmRzd2lqemlnaW5nLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiRXIgaXMgZWVuIGZvdXQgb3BnZXRyZWRlbiBiaWogZGUgdmVyd2Vya2luZyB2YW4gaGV0IG5pZXV3ZSB3YWNodHdvb3JkLlwiXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJsb2FkaW5nVGl0bGVcIjogICAgICAgICAgICAgICAgICBcIkFndWFyZGUuLi5cIixcbiAgXCJjbG9zZVwiOiAgICAgICAgICAgICAgICAgICAgICAgICBcIkZlY2hhclwiLFxuICBcIndpbmRvd3NBdXRoVGl0bGVcIjogICAgICAgICAgICAgIFwiQXV0ZW50aWNhw6fDo28gZG8gV2luZG93c1wiLFxuICBcImludmFsaWRcIjogICAgICAgICAgICAgICAgICAgICAgIFwiSW52w6FsaWRvXCIsXG4gIFwibXVzdE1hdGNoXCI6ICAgICAgICAgICAgICAgICAgICAgXCJEZXZlIGNvcnJlc3BvbmRlclwiLFxuICBcImxvZ2luU29jaWFsQnV0dG9uXCI6ICAgICAgICAgICAgIFwiRW50cmUgY29tIHtjb25uZWN0aW9uOnRpdGxlfVwiLFxuICBcInNpZ251cFNvY2lhbEJ1dHRvblwiOiAgICAgICAgICAgIFwiQ2FkYXN0cmUgY29tIHtjb25uZWN0aW9uOnRpdGxlfVwiLFxuICBcIm5ldHdvcmtFcnJvclwiOiAgICAgICAgICAgICAgICAgIFwiTsOjbyBjb25zZWd1aW1vcyBhY2Vzc2FyIG8gc2Vydmlkb3IuPGJyLz5Qb3IgZmF2b3IsIHRlbnRlIG5vdmFtZW50ZS5cIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiRW50cmFyXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJFbnRyYXJcIixcbiAgICBcImFjdGlvbkRvbWFpblwiOiAgICAgICAgICAgICAgICBcIkVudHJhciBubyBkb23DrW5pbyB7ZG9tYWlufVwiLFxuICAgIFwiYWxsXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9zdHJhciB0b2Rvc1wiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEVtcHR5XCI6ICAgICAgICAgIFwiTyBlLW1haWwgbsOjbyBmb2kgaW5mb3JtYWRvLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogICAgICAgIFwiTyBlLW1haWwgZXN0w6EgaW5jb3JyZXRvLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6ICAgICAgIFwiTyBkb23DrW5pbyB7ZG9tYWlufSBuw6NvIGVzdMOhIGNvbmZpZ3VyYWRvLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiQ2FkYXN0cmUtc2VcIixcbiAgICBcImZvcmdvdFRleHRcIjogICAgICAgICAgICAgICAgICBcIkVzcXVlY2V1IHN1YSBzZW5oYT9cIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiAgICAgICAgICAgICAgICBcIkNhbmNlbGFyXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6ICAgICAgICAgICAgXCJFLW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogICAgICAgICBcIk5vbWUgZGUgdXN1w6FyaW9cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIlNlbmhhXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6ICAgICAgICAgICAgICAgXCJvdVwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6ICAgICAgICAgICAgIFwiSG91dmUgdW0gZXJybyBkdXJhbnRlIG8gbG9naW4uXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogICAgICAgICAgICAgXCJEYSDDumx0aW1hIHZleiB2b2PDqiBlbnRyb3UgdXNhbmRvLi4uXCIsXG4gICAgXCJkb21haW5Vc2VyTGFiZWxcIjogICAgICAgICAgICAgXCJWb2PDqiBlc3TDoSBjb25lY3RhZG8gZGEgc3VhIHJlZGUgY29ycG9yYXRpdmEuLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIkUtbWFpbCBvdSBzZW5oYSBpbnbDoWxpZG9zLlwiLFxuICAgIFwib3JcIjogICAgICAgICAgICAgICAgICAgICAgICAgIFwiLi4uIG91IGVudHJlIHVzYW5kb1wiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogICAgICAgICAgICAgIFwiRW50cmFyIGNvbSB7Y29ubmVjdGlvbn0uLi5cIixcbiAgICBcInBvcHVwQ3JlZGVudGlhbHNcIjogICAgICAgICAgICBcIkluZm9ybWUgc2V1cyBkYWRvcyBkZSBhY2Vzc28gbmEgamFuZWxhIHBvcC11cFwiLFxuICAgIFwidXNlckNsb3NlZFBvcHVwXCI6ICAgICAgICAgICAgIFwiQSBqYW5lbGEgcG9wLXVwIGVzdMOhIGZlY2hhZGEuIFBvciBmYXZvciwgdGVudGUgbm92YW1lbnRlLlwiLFxuICAgIFwidXNlckNvbnNlbnRGYWlsZWRcIjogICAgICAgICAgIFwiQXMgcGVybWlzc8O1ZXMgbsOjbyBmb3JhbSBjb25jZWRpZGFzLiBQb3IgZmF2b3IsIHRlbnRlIG5vdmFtZW50ZS5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiAgICAgICAgICAgICAgICAgXCJcIixcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIkNhZGFzdHJlLXNlXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJDYWRhc3RyZS1zZVwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRS1tYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJDcmllIHVtIG5vbWUgZGUgdXN1w6FyaW9cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIkNyaWUgdW1hIHNlbmhhXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJDYW5jZWxhclwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiUG9yIGZhdm9yLCBwcmVlbmNoYSBzZXUgZS1tYWlsIGUgc2VuaGFcIixcbiAgICBcImZvb3RlclRleHRcIjogICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogIFwiTyBkb23DrW5pbyB7ZG9tYWlufSBlc3TDoSBjb25maWd1cmFkbyBwYXJhIFNpbmdsZSBTaWduIE9uIGUgdm9jw6ogbsOjbyBwb2RlIGNyaWFyIHVtYSBjb250YS4gRW50cmUgdXNhbmRvIHVtYSBjb250YS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIk9jb3JyZXUgdW0gZXJybyBkdXJhbnRlIG8gY2FkYXN0cm8uXCIsXG4gICAgXCJ1c2VyRXhpc3RzRXJyb3JUZXh0XCI6ICAgICAgICAgXCJPIHVzdcOhcmlvIGrDoSBleGlzdGUuXCIsXG4gICAgXCJ1c2VybmFtZUluVXNlRXJyb3JUZXh0XCI6ICAgICAgXCJFc3RlIG5vbWUgZGUgdXN1w6FyaW8gasOhIGVzdMOhIGVtIHVzby5cIixcbiAgICBcImludmFsaWRQYXNzd29yZFwiOiAgICAgICAgICAgICBcIkEgc2VuaGEgbsOjbyBlc3TDoSBzZWd1cmEgbyBzdWZpY2llbnRlLlwiLFxuICAgIFxuICAgIFwicGFzc3dvcmRTdHJlbmd0aFwiOiB7XG4gICAgICBcIm5vbkVtcHR5XCI6IFwiQSBzZW5oYSBkZXZlIHNlciBwcmVlbmNoaWRhXCIsXG4gICAgICBcImxlbmd0aEF0TGVhc3RcIjogXCJEZXZlIHRlciBwZWxvIG1lbm9zICVkIGRlIGNvbXByaW1lbnRvXCIsXG4gICAgICBcInNob3VsZENvbnRhaW5cIjogXCJEZXZlIGNvbnRlcjpcIixcbiAgICAgIFwiY29udGFpbnNBdExlYXN0XCIgOiBcIkNvbnTDqW0gcGVsbyBtZW5vcyAlZCBkb3Mgc2VndWludGVzICVkIHRpcG9zIGRlIGNhcmFjdGVyZXM6XCIsXG4gICAgICBcImxvd2VyQ2FzZVwiOiBcIkxldHJhcyBtaW7DunNjdWxhcyAoYS16KVwiLFxuICAgICAgXCJ1cHBlckNhc2VcIjogXCJMZXRyYXMgbWFpw7pzY3VsYXMgKEEtWilcIixcbiAgICAgIFwibnVtYmVyc1wiOiBcIk7Dum1lcm9zICgwLTkpXCIsXG4gICAgICBcInNwZWNpYWxDaGFyYWN0ZXJzXCIgOiBcIlPDrW1ib2xvcyAoIUAjJCVeJiopXCIsXG4gICAgICBcImlkZW50aWNhbENoYXJzXCI6IFwiTcOheGltbyBkZSAlZCBjYXJhY3RlcmVzIGlndWFpcyBzZWd1aWRvcyAoZXguIFxcXCIlc1xcXCIgbsOjbyDDqSBwZXJtaXRpZG8pXCJcbiAgICB9XG4gICAgXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiUmVkZWZpbmlyIHNlbmhhXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJFbnZpYXJcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkUtbWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiTm92YSBzZW5oYVwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgIFwiQ29uZmlybWFyIG5vdmEgc2VuaGFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiAgICAgICAgICAgICAgICBcIkNhbmNlbGFyXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiAgICAgICAgICAgICAgICAgXCJUZSBlbnZpYW1vcyB1bSBlLW1haWwgcGFyYSByZWRlZmluaXIgc3VhIHNlbmhhLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6ICAgICAgIFwiUG9yIGZhdm9yLCB1c2UgYSBtZXNtYSBzZW5oYS5cIixcbiAgICBcImhlYWRlclRleHRcIjogICAgICAgICAgICAgICAgICBcIlBvciBmYXZvciwgaW5mb3JtZSBvIGUtbWFpbCBlIGEgbm92YSBzZW5oYS4gTsOzcyBlbnZpYXJlbW9zIHVtIGUtbWFpbCBwYXJhIHZvY8OqIGNvbmZpcm1hciBhIGFsdGVyYcOnw6NvIGRlIHNlbmhhLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6ICAgICAgICAgICAgIFwiT2NvcnJldSB1bSBlcnJvIGR1cmFudGUgYSByZWRlZmluacOnw6NvIGRlIHNlbmhhLlwiLFxuICAgIFwidXNlckRvZXNOb3RFeGlzdEVycm9yVGV4dFwiOiAgIFwiVXN1w6FyaW8gbsOjbyBleGlzdGUuXCIsXG4gICAgXCJpbnZhbGlkUGFzc3dvcmRcIjogICAgICAgICAgICAgXCJBIHNlbmhhIG7Do28gZXN0w6Egc2VndXJhIG8gc3VmaWNpZW50ZS5cIlxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiLy9cIjogXCJUaGlzIGlzIGFuIGF1dG9tYXRpYyB0cmFuc2xhdGlvbi4gSGVscCB1cyB0byBpbXByb3ZlIGl0LlwiLFxuICBcImxvYWRpbmdUaXRsZVwiOiBcIkFndWFyZGUuLi5cIixcbiAgXCJjbG9zZVwiOiBcIkZlY2hhclwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIkVudHJhclwiLFxuICAgIFwiYWN0aW9uXCI6IFwiRW50cmFyXCIsXG4gICAgXCJhbGxcIjogXCJNb3N0cmFyIHRvZG9zXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCJPIGUtbWFpbCDDqSB2YXppby5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6IFwiTyBlbWFpbCDDqSBpbnbDoWxpZG8uXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCJPIGRvbcOtbmlvIHtkb21haW59IG7Do28gZm9pIGEgaW5zdGFsYcOnw6NvLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiBcIkluc2NyacOnw6NvXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwiRXNxdWVjZXUgc3VhIHNlbmhhP1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkVtYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiTm9tZSBkZSBVc3XDoXJpb1wiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIlNlbmhhXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6IFwib3VcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkhvdXZlIHVtIGVycm8gYW8gcHJvY2Vzc2FyIG8gc2luYWwgZW0uXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCJEYSDDumx0aW1hIHZleiBxdWUgdm9jw6ogYXNzaW5vdSB1c2FuZG8uLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIlNlbmhhIG91IGUtbWFpbCBlcnJhZG8uXCIsXG4gICAgXCJvclwiOiBcIi4uLiBvdSBDYWRhc3RyZS1zZSBubyB1c28gZGVcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6IFwiRW50cmFyIGNvbSB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCJJbnNjcmnDp8Ojb1wiLFxuICAgIFwiYWN0aW9uXCI6IFwiSW5zY3Jpw6fDo29cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFbWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIkNyaWUgdW1hIHNlbmhhXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCJDYW5jZWxhclwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIlBvciBmYXZvciwgZGlnaXRlIHNldSBlLW1haWwgZSBzZW5oYVwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogXCJFc3RlIGRvbcOtbmlvIHtkb21haW59IHRpdmVyIHNpZG8gY29uZmlndXJhZG8gcGFyYSBTaWduLU9uIMO6bmljbyBlIHZvY8OqIG7Do28gcG9kZSBjcmlhciB1bWEgY29udGEuIFRlbnRlIGVudHJhciBlbSB2ZXogZGlzc28uXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJIb3V2ZSB1bSBlcnJvIGFvIHByb2Nlc3NhciBvIHNpbmFsIGRlIGNpbWEuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIlJlZGVmaW5pciBzZW5oYVwiLFxuICAgIFwiYWN0aW9uXCI6IFwiRW52aWFyXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJOb3ZhIHNlbmhhXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQ29uZmlybWFyIG5vdmEgc2VuaGFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkNhbmNlbGFyXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiBcIlPDsyB0ZSBlbnZpYW1vcyB1bSBlLW1haWwgcGFyYSByZWRlZmluaXIgc3VhIHNlbmhhLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwiUG9yIGZhdm9yIGRpZ2l0ZSBhIG1lc21hIHNlbmhhLlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIlBvciBmYXZvciwgZGlnaXRlIHNldSBlLW1haWwgZSBhIHNlbmhhIG5vdmEuIE7Ds3MgbGhlIGVudmlhcmVtb3MgdW0gZS1tYWlsIHBhcmEgY29uZmlybWFyIGEgYWx0ZXJhw6fDo28gZGUgc2VuaGEuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJIb3V2ZSB1bSBlcnJvIGFvIHByb2Nlc3NhciBhIHJlZGVmaW5pciBhIHNlbmhhLlwiXG4gIH1cbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiLy9cIjogXCJUaGlzIGlzIGFuIGF1dG9tYXRpYyB0cmFuc2xhdGlvbi4gSGVscCB1cyB0byBpbXByb3ZlIGl0LlwiLFxuICBcImxvYWRpbmdUaXRsZVwiOiAgICAgICAgICAgICAgICAgICBcItCf0L7QtNC+0LbQtNC40YLQtS4uLlwiLFxuICBcImNsb3NlXCI6ICAgICAgICAgICAgICAgICAgICAgICAgICBcItCX0LDQutGA0YvRgtGMXCIsXG4gIFwid2luZG93c0F1dGhUaXRsZVwiOiAgICAgICAgICAgICAgIFwiV2luZG93cyDQsNGD0YLQtdC90YLQuNGE0LjQutCw0YbQuNGPXCIsXG4gIFwiaW52YWxpZFwiOiAgICAgICAgICAgICAgICAgICAgICAgIFwi0J3QtdCy0LXRgNC90YvQuVwiLFxuICBcIm11c3RNYXRjaFwiOiAgICAgICAgICAgICAgICAgICAgICBcItCU0L7Qu9C20L3RiyDRgdC+0LLQv9Cw0LTQsNGC0YxcIixcbiAgXCJsb2dpblNvY2lhbEJ1dHRvblwiOiAgICAgICAgICAgICAgXCLQktGF0L7QtCDRh9C10YDQtdC3IHtjb25uZWN0aW9uOnRpdGxlfVwiLFxuICBcInNpZ251cFNvY2lhbEJ1dHRvblwiOiAgICAgICAgICAgICBcItCg0LXQs9C40YHRgtGA0LDRhtC40Y8g0YfQtdGA0LXQtyB7Y29ubmVjdGlvbjp0aXRsZX1cIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgICBcItCS0L7QudGC0LhcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICAgXCLQktC+0LnRgtC4XCIsXG4gICAgXCJhbGxcIjogICAgICAgICAgICAgICAgICAgICAgICAgIFwi0J/QvtC60LDQt9Cw0YLRjCDQstGB0LVcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiAgICAgICAgICAgXCJFbWFpbCDQv9GD0YHRgtC+0LkuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiAgICAgICAgIFwiRW1haWwg0L3QtdC00LXQudGB0YLQstC40YLQtdC70LXQvS5cIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiAgICAgICAgXCLQlNC+0LzQtdC9IHtkb21haW59INC90LUg0LHRi9C7INGD0YHRgtCw0L3QvtCy0LvQtdC9LlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiAgICAgICAgICAgICAgICAgICBcItCg0LXQs9C40YHRgtGA0LDRhtC40Y9cIixcbiAgICBcImZvcmdvdFRleHRcIjogICAgICAgICAgICAgICAgICAgXCLQl9Cw0LHRi9C70Lgg0LLQsNGIINC/0LDRgNC+0LvRjD9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICAgXCJFbWFpbFwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiAgICAgICAgICBcItCY0LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICAgXCLQn9Cw0YDQvtC70YxcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogICAgICAgICAgICAgICAgXCLQuNC70LhcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICAgXCLQn9GA0L7QuNC30L7RiNC70LAg0L7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0LLRhdC+0LTQsC5cIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiAgICAgICAgICAgICAgXCLQn9C+0YHQu9C10LTQvdC40Lkg0YDQsNC3INCy0Ysg0LfQsNGF0L7QtNC40LvQuCDRh9C10YDQtdC3Li4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogIFwi0J3QtdC/0YDQsNCy0LjQu9GM0L3Ri9C5IGVtYWlsINC40LvQuCDQv9Cw0YDQvtC70YwuXCIsXG4gICAgXCJvclwiOiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLi4uINC40LvQuCDQstC+0LnQtNC40YLQtSDRgSDQv9C+0LzQvtGJ0YzRjlwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogICAgICAgICAgICAgICBcItCS0YXQvtC0INGH0LXRgNC10Lcge2Nvbm5lY3Rpb259Li4uXCJcbiAgfSxcbiAgXCJzaWdudXBcIjoge1xuICAgIFwiZGVzY3JpcHRpb25cIjogICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgICBcItCg0LXQs9C40YHRgtGA0LDRhtC40Y9cIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICAgXCLQoNC10LPQuNGB0YLRgNCw0YbQuNGPXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6ICAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICAgXCLQodC+0LfQtNCw0LnRgtC1INC/0LDRgNC+0LvRjFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6ICAgICAgICAgICAgICAgICBcItCe0YLQvNC10L3QsFwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgICBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDRgdCy0L7QuSBlbWFpbCDQuCDQv9Cw0YDQvtC70YxcIixcbiAgICBcImZvb3RlclRleHRcIjogICAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiAgIFwi0K3RgtC+0YIg0LTQvtC80LXQvSB7ZG9tYWlufSDQsdGL0Lsg0L3QsNGB0YLRgNC+0LXQvSDQtNC70Y8g0LXQtNC40L3QvtCz0L4g0LLRhdC+0LTQsCDQuCDQvdC10LvRjNC30Y8g0YHQvtC30LTQsNGC0Ywg0YPRh9C10YLQvdGD0Y4g0LfQsNC/0LjRgdGMLCDQv9C+0L/RgNC+0LHRg9C50YLQtSDQstC+0LnRgtC4LlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6ICAgICAgICAgICAgICBcItCf0YDQvtC40LfQvtGI0LvQsCDQvtGI0LjQsdC60LAg0L/RgNC4INC+0LHRgNCw0LHQvtGC0LrQtSDRgNC10LPQuNGB0YLRgNCw0YbQuNC4LlwiLFxuICAgIFwidXNlckV4aXN0c0Vycm9yVGV4dFwiOiAgICAgICAgICBcItCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDRgdGD0YnQtdGB0YLQstGD0LXRgi5cIlxuICB9LFxuICBcInJlc2V0XCI6IHtcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgICAgXCLQodCx0YDQvtGBINC/0LDRgNC+0LvRj1wiLFxuICAgIFwiYWN0aW9uXCI6ICAgICAgICAgICAgICAgICAgICAgICBcItCe0YLQv9GA0LDQstC40YLRjFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgICBcIkVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICAgIFwi0J3QvtCy0YvQuSDQv9Cw0YDQvtC70YxcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgXCLQn9C+0LTRgtCy0LXRgNC00LjRgtC1INC90L7QstGL0Lkg0L/QsNGA0L7Qu9GMXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgIFwi0J7RgtC80LXQvdCwXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwi0JzRiyDQvtGC0L/RgNCw0LLQuNC70Lgg0LLQsNC8IGVtYWlsINC00LvRjyDRgdCx0YDQvtGB0LAg0L/QsNGA0L7Qu9GPLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6ICAgICAgICBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDRgtC+0YIg0LbQtSDQv9Cw0YDQvtC70YwuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6ICAgICAgICAgICAgICAgICAgIFwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INCy0LDRiCBlbWFpbCDQuCDQvdC+0LLRi9C5INC/0LDRgNC+0LvRjC4g0JzRiyDQstGL0YjQu9C10LwgZW1haWwg0LTQu9GPINC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPINC40LfQvNC10L3QtdC90LjRjyDQv9Cw0YDQvtC70Y8uXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogICAgICAgICAgICAgIFwi0J/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsCDQv9GA0Lgg0L7QsdGA0LDQsdC+0YLQutC1INGB0LHRgNC+0YHQsCDQv9Cw0YDQvtC70Y8uXCIsXG4gICAgXCJ1c2VyRG9lc05vdEV4aXN0RXJyb3JUZXh0XCI6ICAgIFwi0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINC90LUg0YHRg9GJ0LXRgdGC0LLRg9C10YIuXCJcblxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiLy9cIjogXCJUaGlzIGlzIGFuIGF1dG9tYXRpYyB0cmFuc2xhdGlvbi4gSGVscCB1cyB0byBpbXByb3ZlIGl0LlwiLFxuICBcImxvYWRpbmdUaXRsZVwiOiBcIkR1YmVsbW9IY2h1Z2ggbG9TLlwiLFxuICBcImNsb3NlXCI6IFwiU29RbW9IXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwicUknXCIsXG4gICAgXCJhY3Rpb25cIjogXCJxSSdcIixcbiAgICBcImFsbFwiOiBcImNoYScgSG9jaFwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEVtcHR5XCI6IFwiY2hJbSBlbWFpbC5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6IFwiZW1haWwgaW52YWxpZC5cIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcIntkb21haW59IHllciB3ZWogc2V0dXAuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwicUknXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwibXUnd0lqIGxJaj9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJlbWFpbFwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiBcInR1cyBuZWVnIHNpdiBsdWIgbnBlXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwibXUnd0lqXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6IFwiZ2hhcFwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiUWFnaCBxYVN0YUh2SVMgcUknIG1JdyB0dSdsdScuXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCJRYXYgcG9IIHFJJyBTb0ggcWFTdGFIdklTIGxvJy5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIlFJSCBlbWFpbCBwYWdoIG11J3dJai5cIixcbiAgICBcIm9yXCI6IFwiLi4uIHBhZ2ggcUknIHFhU3RhSHZJUyB5SWxvJ1wiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCJVa3ViaGFsaXNlbGEgSW4gbmdlIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcInFJJ1wiLFxuICAgIFwiYWN0aW9uXCI6IFwicUknXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiZW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJtdSd3SWogY2hlbm1vSFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwicUlsXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwibnVxbmVIIGVtYWlsIG11J3dJaiBqZVwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogXCJjb25maWd1cmVkIHtkb21haW59IHllciBWYXMgcUknICdlaiBhY2NvdW50IHBhZ2ggY2hlbm1vSCBTb0guIG5JRCwgcUknIGluc3RlYWQuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJRYWdoIHFJJyBtSXcgSGEnIHR1J2x1Jy5cIlxuICB9LFxuICBcInJlc2V0XCI6IHtcbiAgICBcInRpdGxlXCI6IFwibXUnd0lqIHJlc2V0XCIsXG4gICAgXCJhY3Rpb25cIjogXCJuZ2VIXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiZW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJtdSd3SWogY2h1J1wiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIm11J3dJaiBjaHUnIGNvbmZpcm1cIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcInFJbFwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCJqSWJvUXFhbmcgcmVzZXQgbXUnd0lqIG5lSCBuZ2VIIFNvSCBtYUguXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogXCJEdWJlbG1vSGNodWdoIG11J3dJaiByYXAgJ2VsLlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIm51cW5lSCBlbWFpbCBjaHUnIG11J3dJaiBqZS4gaklib1FxYW5nIG11J3dJaiBjaG9IIGNvbmZpcm0gbmdlSCBTb0ggbWFILlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiUWFnaCByZXNldCBtdSd3SWogbUl3IHR1J2x1Jy5cIlxuICB9XG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcImxvYWRpbmdUaXRsZVwiOiAgICAgICAgICAgICAgICAgXCJMw7x0ZmVuIGJla2xleWluaXouLi5cIixcbiAgXCJjbG9zZVwiOiAgICAgICAgICAgICAgICAgICAgICAgIFwiS2FwYXRcIixcbiAgXCJ3aW5kb3dzQXV0aFRpdGxlXCI6ICAgICAgICAgICAgIFwiV2luZG93cyBEb8SfcnVsYW1hXCIsXG4gIFwiaW52YWxpZFwiOiAgICAgICAgICAgICAgICAgICAgICBcIkdlw6dlcnNpelwiLFxuICBcIm11c3RNYXRjaFwiOiAgICAgICAgICAgICAgICAgICAgXCJFxZ9sZcWfbWVsaVwiLFxuICBcImxvZ2luU29jaWFsQnV0dG9uXCI6ICAgICAgICAgICAgXCJ7Y29ubmVjdGlvbjp0aXRsZX0gaWxlIEdpcmnFnyBZYXBcIixcbiAgXCJzaWdudXBTb2NpYWxCdXR0b25cIjogICAgICAgICAgIFwie2Nvbm5lY3Rpb246dGl0bGV9IGxpZSBLYXnEsXQgT2xcIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgXCJHaXJpxZ9cIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgIFwiRXJpxZ9pbVwiLFxuICAgIFwiYWxsXCI6ICAgICAgICAgICAgICAgICAgICAgICAgXCJIZXBzaW5pIEfDtnN0ZXJcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiAgICAgICAgIFwiQnUgZS1wb3N0YSBib8WfXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiAgICAgICBcIkJ1IGUtcG9zdHMgZ2XDp2Vyc2l6XCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogICAgICBcIntkb21haW59IEJ1IGFsYW4gaGVuw7x6IGt1cnVsbWFkxLFcIixcbiAgICBcInNpZ251cFRleHRcIjogICAgICAgICAgICAgICAgIFwiS2F5xLF0IE9sXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6ICAgICAgICAgICAgICAgICBcIsWeaWZyZW1pIHVudXR0dW1cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgIFwiRS1wb3N0YVwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiAgICAgICAgXCJLdWxsYW7EsWPEsSBBZMSxXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICBcIsWeaWZyZVwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiAgICAgICAgICAgICAgXCJ2ZXlhXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogICAgICAgICAgICBcIkthecSxdCBpxZ9sZW1pIHPEsXJhc8SxbmRhIGJpciBoYXRheWxhIGthcsWfxLFsYcWfxLFsZMSxXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogICAgICAgICAgICBcIi4uLiBpbGUgZW4gc29uIGdpcmnFn2luaXogXCIsXG4gICAgXCJkb21haW5Vc2VyTGFiZWxcIjogICAgICAgICAgICBcIsWeaXJrZXRpbml6ZSBhaXQgLi4uIGHEn8SxbmRhbiBiYcSfbGFuZMSxbsSxelwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6XCJIYXRhbMSxIGUtcG9zdGEgdmV5YSDFn2lmcmUuXCIsXG4gICAgXCJvclwiOiAgICAgICAgICAgICAgICAgICAgICAgICBcInZleWEgYnVubGFyZGFuIGJpcml5bGUgR2lyacWfIFlhcFwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogICAgICAgICAgICAgXCJ7Y29ubmVjdGlvbn0gaWxlIEdpcmnFnyBZYXBcIixcbiAgICBcInBvcHVwQ3JlZGVudGlhbHNcIjogICAgICAgICAgIFwiTMO8dGZlbiBhw6fEsWzEsXIgcGVuY2VyZXllIGtpbWxpayBiZWxnZWxlcmluaXppIGdpcmluaXpcIixcbiAgICBcInVzZXJDbG9zZWRQb3B1cFwiOiAgICAgICAgICAgIFwiQcOnxLFsxLFyIHBlbmNlcmUga2FwYW5kxLEuIEzDvHRmZW4gdGVrcmFyIGRlbmV5aW5pei5cIixcbiAgICBcInVzZXJDb25zZW50RmFpbGVkXCI6ICAgICAgICAgIFwixLB6aW4gdmVyaWxtZWRpLiBMw7x0ZmVuIHRla3JhciBkZW5leWluaXouXCJcbiAgfSxcbiAgXCJzaWdudXBcIjoge1xuICAgIFwiZGVzY3JpcHRpb25cIjogICAgICAgICAgICAgICAgXCJcIixcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgIFwiS2F5xLF0IE9sXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICBcIkthecSxdCBPbFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgXCJFLXBvc3RhXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICBcIsWeaWZyZSBPbHXFn3R1cnVuXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICBcIsSwcHRhbFwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgXCJMw7x0ZmVuIGUtcG9zdGFuxLF6xLEgdmUgxZ9pZnJlbml6aSBnaXJpbml6XCIsXG4gICAgXCJmb290ZXJUZXh0XCI6ICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogXCJCdSBhbGFuIHtkb21haW59IMO8emVyaW5kZWtpIHRlayBvdHVydW0gacOnaW4geWFwxLFsYW5kxLFyxLFsbcSxxZ90xLFyLCBidSB5w7x6ZGVuIGhlc2FwIG9sdcWfdHVyYW1henPEsW7EsXouIEJ1bnVuIHllcmluZSwgbMO8dGZlbiBnaXJpxZ8geWFwbWF5xLEgZGVuZXlpbml6LlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6ICAgICAgICAgICAgXCJLYXnEsXQgb2x1cmtlbiBiaXIgaGF0YSBpbGUga2FyxZ/EsWxhxZ/EsWxkxLEuXCIsXG4gICAgXCJ1c2VyRXhpc3RzRXJyb3JUZXh0XCI6ICAgICAgICBcIkJ1IGt1bGxhbsSxY8SxIGFkxLEgemF0ZW4gYWzEsW5txLHFny5cIixcbiAgICBcImludmFsaWRQYXNzd29yZFwiOiAgICAgICAgICAgIFwiQnUgxZ9pZnJlIMOnb2sgemF5xLFmLlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgXCLFnmlmcmV5aSBTxLFmxLFybGFcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgIFwiWW9sbGFcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgIFwiRS1wb3N0YVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgICAgICAgXCJZZW5pIMWeaWZyZVwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgXCJZZW5pIMWeaWZyZXlpIE9uYXlsYVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6ICAgICAgICAgICAgICAgXCLEsHB0YWxcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6ICAgICAgICAgICAgICAgIFwiU2l6ZSDFn2lmcmVuaXppIHPEsWbEsXJsYW1hbsSxeiBpw6dpbiBiaXIgZS1wb3N0YSB5b2xsYWTEsWsuXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogICAgICBcIkzDvHRmZW4gYXluxLEgxZ9pZnJleWkgdGVrcmFyIGdpcmluaXouXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6ICAgICAgICAgICAgICAgICBcIkzDvHRmZW4gZS1wb3N0YSBhZHJlc2luaXppIHZlIHllbmkgxZ9pZnJlbml6aSBnaXJpbml6LiBTaXplIMWfaWZyZSBkZcSfacWfaWtsacSfaW5pIG9uYXlsYW1hayBpw6dpbiBiaXIgZS1wb3N0YSB5b2xsYXlhY2HEn8Sxei5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgIFwixZ5pZnJlIHPEsWbEsXJsYW1hIGnFn2xlbWkgc8SxcmFzxLFuZGEgYmlyIGhhdGF5bGEga2FyxZ/EsWxhxZ/EsWxkxLEuXCIsXG4gICAgXCJ1c2VyRG9lc05vdEV4aXN0RXJyb3JUZXh0XCI6ICBcIkLDtnlsZSBiaXIga3VsbGFuxLFjxLEgYnVsdW5hbWFkxLEuXCJcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIi8vXCI6IFwiVGhpcyBpcyBhbiBhdXRvbWF0aWMgdHJhbnNsYXRpb24uIEhlbHAgdXMgdG8gaW1wcm92ZSBpdC5cIixcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCLor7fnqI3lgJnjgILjgILjgIJcIixcbiAgXCJjbG9zZVwiOiBcIuWFs+mXrVwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIueZu+W9lVwiLFxuICAgIFwiYWN0aW9uXCI6IFwi55m75b2VXCIsXG4gICAgXCJhbGxcIjogXCLlhajpg6jmmL7npLpcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIueUteWtkOmCruS7tuaYr+epuueahOOAglwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCLnlLXlrZDpgq7ku7bmmK/ml6DmlYjnmoTjgIJcIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcIuaMh+WumuWfnyB7ZG9tYWlufSDlsJrmnKrlronoo4XjgIJcIixcbiAgICBcInNpZ251cFRleHRcIjogXCLnmbvorrBcIixcbiAgICBcImZvcmdvdFRleHRcIjogXCLlv5jorrDkuobmgqjnmoTlr4bnoIHlkJfvvJ9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLnlLXlrZDpgq7ku7ZcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogXCLnlKjmiLflkI1cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLlr4bnoIFcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCLmiJZcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIuWkhOeQhuaJgOekuueahOagh+W/l+aXtuWHuumUmeOAglwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwi5pyA5ZCO5LiA5qyh5L2g5Zyo5L2/55So562+572yLi4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCLplJnor6/nmoTnlLXlrZDpgq7ku7bmiJblr4bnoIHjgIJcIixcbiAgICBcIm9yXCI6IFwiLi4u5oiW5L2/55So55m75b2VXCIsXG4gICAgXCJsb2FkaW5nTWVzc2FnZVwiOiBcIuetvue6puS4jiB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCLnmbvorrBcIixcbiAgICBcImFjdGlvblwiOiBcIueZu+iusFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIueUteWtkOmCruS7tlwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuWIm+W7uuS4gOS4quWvhueggVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwi5Y+W5raIXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwi6K+36L6T5YWl5oKo55qE55S15a2Q6YKu5Lu25ZKM5a+G56CBXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIuaMh+WumuatpOWfnyB7ZG9tYWlufSDlt7LphY3nva7kuLrljZXkuIDnmbvlvZXlkozmgqjkuI3og73liJvlu7rkuIDkuKrluJDmiLfjgILor7flsJ3or5XnmbvlvZXnm7jlj43jgIJcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIuWkhOeQhuagh+W/l+WQkeS4iuaXtuWHuumUmeOAglwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCLph43nva7lr4bnoIFcIixcbiAgICBcImFjdGlvblwiOiBcIuWPkemAgVwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIueUteWtkOmCruS7tlwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuaWsOWvhueggVwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuehruiupOaWsOWvhueggVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwi5Y+W5raIXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiBcIuaIkeS7rOWImuWImuW3sue7j+WQkeaCqOWPkemAgeS4gOWwgeeUteWtkOmCruS7tu+8jOmHjee9ruaCqOeahOWvhueggeOAglwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwi6K+36L6T5YWl55u45ZCM55qE5a+G56CB44CCXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwi6K+36L6T5YWl5oKo55qE55S15a2Q6YKu5Lu25ZKM5paw55qE5a+G56CB44CC5oiR5Lus5bCG5ZCR5oKo5Y+R6YCB6YKu5Lu25Lul56Gu6K6k5a+G56CB5pu05pS544CCXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLlpITnkIbph43nva7lr4bnoIHml7blh7rplJnjgIJcIlxuICB9XG59IiwiLyoqXG4gKiBJbnNlcnQgY3NzIHdoZW4gZmlyc3QgbG9hZGVkXG4gKi9cblxucmVxdWlyZSgnLi9saWIvaW5zZXJ0LWNzcycpO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGJvbnpvID0gcmVxdWlyZSgnYm9uem8nKTtcbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyIEF1dGgwID0gcmVxdWlyZSgnYXV0aDAtanMnKTtcbnZhciAkID0gcmVxdWlyZSgnLi9saWIvYm9uem8tYXVnbWVudGVkJyk7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgc3RyYXRlZ2llcyA9IHJlcXVpcmUoJy4vbGliL3N0cmF0ZWdpZXMnKTtcbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJy4vbGliL2h0bWwvbWFpbi5lanMnKTtcblxudmFyIEhlYWRlclZpZXcgPSByZXF1aXJlKCcuL2xpYi9oZWFkZXInKTtcblxudmFyIFNpZ25pblBhbmVsID0gcmVxdWlyZSgnLi9saWIvbW9kZS1zaWduaW4nKTtcbnZhciBTaWdudXBQYW5lbCA9IHJlcXVpcmUoJy4vbGliL21vZGUtc2lnbnVwJyk7XG52YXIgUmVzZXRQYW5lbCA9IHJlcXVpcmUoJy4vbGliL21vZGUtcmVzZXQnKTtcbnZhciBMb2dnZWRpblBhbmVsID0gcmVxdWlyZSgnLi9saWIvbW9kZS1sb2dnZWRpbicpO1xudmFyIEtlcmJlcm9zUGFuZWwgPSByZXF1aXJlKCcuL2xpYi9tb2RlLWtlcmJlcm9zJyk7XG52YXIgTG9hZGluZ1BhbmVsID0gcmVxdWlyZSgnLi9saWIvbW9kZS1sb2FkaW5nJyk7XG52YXIgT3B0aW9uc01hbmFnZXIgPSByZXF1aXJlKCcuL2xpYi9vcHRpb25zLW1hbmFnZXInKTtcblxuLy9icm93c2VyIGluY29tcGF0aWJpbGl0aWVzIGZpeGVzXG52YXIgcGxhY2Vob2xkZXJTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2xpYi9zdXBwb3J0cy1wbGFjZWhvbGRlcicpO1xudmFyIGhhc19hbmltYXRpb25zID0gcmVxdWlyZSgnLi9saWIvc3VwcG9ydHMtYW5pbWF0aW9uJyk7XG52YXIgb2NyZWF0ZSA9IHJlcXVpcmUoJy4vbGliL29iamVjdC1jcmVhdGUnKTtcbnZhciBzdG9wID0gcmVxdWlyZSgnLi9saWIvc3RvcC1ldmVudCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi9saWIvdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9saWIvYmluZCcpO1xuXG4vKipcbiAqIEV4cG9zZSBgQXV0aDBMb2NrYCBjb25zdHJ1Y3RvclxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aDBMb2NrO1xuXG4vKipcbiAqIENyZWF0ZSBgQXV0aDBMb2NrYCBpbnN0YW5jZVxuICogcmVzb2x2aW5nIGBvcHRpb25zYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xpZW50SURcbiAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiAgICAgLSBjZG5cbiAqICAgICAtIGFzc2V0c1VybFxuICogQHJldHVybiB7QXV0aDBMb2NrfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxuZnVuY3Rpb24gQXV0aDBMb2NrIChjbGllbnRJRCwgZG9tYWluLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBdXRoMExvY2spKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoMExvY2soY2xpZW50SUQsIGRvbWFpbiwgb3B0aW9ucyk7XG4gIH1cblxuICAvLyB2YWxpZGF0ZSByZXF1aXJlZCBvcHRpb25zXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGNsaWVudElEKSB0aHJvdyBuZXcgRXJyb3IoJ2BDbGllbnRJRGAgcmVxdWlyZWQgYXMgZmlyc3QgcGFyYW1ldGVyLicpO1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBkb21haW4pIHRocm93IG5ldyBFcnJvcignYGRvbWFpbmAgcmVxdWlyZWQgYXMgc2Vjb25kIHBhcmFtZXRlci4nKTtcblxuICAvLyBJbml0aWF0ZSBgRXZlbnRFbWl0dGVyYFxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAvLyBJbnN0YW5jZSBwcm9wZXJ0aWVzIGFuZCBvcHRpb25zXG4gIHRoaXMuJG9wdGlvbnMgPSBfLmV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cbiAgLy8gU2F2ZSBjbGllbnRJRCBhbmQgZG9tYWluIGluICRvcHRpb25zXG4gIHRoaXMuJG9wdGlvbnMuY2xpZW50SUQgPSBjbGllbnRJRDtcbiAgdGhpcy4kb3B0aW9ucy5kb21haW4gPSBkb21haW47XG5cbiAgLy8gSG9sZHMgY29weSBmb3IgYWxsIHN1cHBwb3J0ZWQgc3RyYXRlZ2llc1xuICB0aGlzLiRzdHJhdGVnaWVzID0gc3RyYXRlZ2llcztcblxuICAvLyBIb2xkcyBhdXRoMC1qcycgaW5zdGFuY2VcbiAgdGhpcy4kYXV0aDAgPSBuZXcgQXV0aDAoe1xuICAgIGNsaWVudElEOiB0aGlzLiRvcHRpb25zLmNsaWVudElELFxuICAgIGRvbWFpbjogdGhpcy4kb3B0aW9ucy5kb21haW4sXG4gICAgdXNlQ29yZG92YVNvY2lhbFBsdWdpbnM6IHRoaXMuJG9wdGlvbnMudXNlQ29yZG92YVNvY2lhbFBsdWdpbnNcbiAgfSk7XG5cbiAgLy8gdXNlIGRvbWFpbiBhcyBhc3NldHNVcmwgaWYgbm8gYXNzZXRzVXJsIHByb3ZpZGVkXG4gIC8vIGFuZCBkb21haW4gaXMgbm90ICouYXV0aDAuY29tLiBGYWxsYmFjayB0byBTMyB1cmxcbiAgdGhpcy4kb3B0aW9ucy5hc3NldHNVcmwgPSB0aGlzLiRvcHRpb25zLmFzc2V0c1VybCB8fCAodGhpcy5pc0F1dGgwRG9tYWluKCkgPyAnaHR0cHM6Ly9jZG4uYXV0aDAuY29tLycgOiAnaHR0cHM6Ly8nICsgdGhpcy4kb3B0aW9ucy5kb21haW4gKyAnLycpO1xuXG4gIC8vIFRoaXMgY2RuIGlzIG9ubHkgdXNlZCBmb3IgdGhlIFwibG9hZGluZ1wiIGltYWdlXG4gIHRoaXMuJG9wdGlvbnMuY2RuID0gdGhpcy4kb3B0aW9ucy5jZG4gfHwgKHRoaXMuaXNBdXRoMERvbWFpbigpID8gJ2h0dHBzOi8vZDE5cDR6ZW1jeWNtN2EuY2xvdWRmcm9udC5uZXQvdzIvJyA6ICdodHRwczovLycgKyB0aGlzLiRvcHRpb25zLmRvbWFpbiArICcvdzIvJyk7XG5cbiAgLy8gSG9sZHMgU1NPIERhdGEgZm9yIHJldHVybiB1c2VyIGV4cGVyaWVuY2VcbiAgdGhpcy4kc3NvRGF0YSA9IG51bGw7XG5cbiAgLy8gSG9sZHMgd2lkZ2V0J3MgRE9NIGAkY29udGFpbmVyYCByZWZcbiAgdGhpcy4kY29udGFpbmVyID0gbnVsbDtcblxuICAvLyBob2xkcyBjbGllbnQncyBjb25uZWN0aW9ucyBjb25maWd1cmF0aW9uXG4gIC8vIHJldHJpZXZlZCBmcm9tIFMzIG9yIENETi9hc3NldHNVcmwgcHJvdmlkZWRcbiAgdGhpcy4kY2xpZW50ID0ge307XG4gIHRoaXMuZ2V0Q2xpZW50Q29uZmlndXJhdGlvbihiaW5kKHRoaXMuc2V0Q2xpZW50Q29uZmlndXJhdGlvbiwgdGhpcykpO1xufVxuXG4vKipcbiAqIEV4cG9zZSBjdXJyZW50IGBBdXRoMExvY2tgJ3MgdmVyc2lvblxuICovXG5cbkF1dGgwTG9jay52ZXJzaW9uID0gXCI3LjAuMFwiO1xuXG4vKipcbiAqIEluaGVyaXQgZnJvbSBgRXZlbnRFbWl0dGVyYFxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUgPSBvY3JlYXRlKEV2ZW50RW1pdHRlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIEdldCBjbGllbnQgY29uZmlndXJhdGlvbi5cbiAqIFhYWDogV2h5IG5vdCB1c2UganNvbnA/IHRoYXQgd291ZGxkIGFsbG93IHRoZVxuICogZ2xvYmFsIG5hbWVzcGFjZSBkZWZpbml0aW9uIHRvIGJlIG9wdGlvbmFsLi4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZVxuICogQHJldHVybiB7QXV0aDBMb2NrfVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLmdldENsaWVudENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gU2F2ZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb25jZVxuICAvLyBjbGllbnQgY29uZmlndXJhdGlvbiBnZXRzIGxvYWRlZFxuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRvbmUpIHtcbiAgICB0aGlzLm9uY2UoJ2NsaWVudCBsb2FkZWQnLCBmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICBkb25lKGNsaWVudCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBJZiBub3QgbG9hZGluZywgY2hlY2sgZm9yIGFscmVhZHkgc3RvcmVkXG4gIC8vIGluIGEgcHJldmlvdXMgd2lkZ2V0IGluc3RhbnRpYXRpb25cbiAgZ2xvYmFsLndpbmRvdy5BdXRoMCA9IGdsb2JhbC53aW5kb3cuQXV0aDAgfHwgeyBjbGllbnRzOiB7fSwgc2NyaXB0X3RhZ3M6IHt9IH07XG5cbiAgaWYgKCFnbG9iYWwud2luZG93LkF1dGgwLmNsaWVudHMpIHtcbiAgICBnbG9iYWwud2luZG93LkF1dGgwLmNsaWVudHMgPSB7fTtcbiAgICBnbG9iYWwud2luZG93LkF1dGgwLnNjcmlwdF90YWdzID0ge307XG4gIH1cblxuICB2YXIgY2xpZW50cyA9IGdsb2JhbC53aW5kb3cuQXV0aDAuY2xpZW50cztcbiAgdmFyIGNsaWVudCA9IGNsaWVudHNbdGhpcy4kb3B0aW9ucy5jbGllbnRJRF07XG4gIGlmIChjbGllbnQpIHJldHVybiB0aGlzLmVtaXQoJ2NsaWVudCBsb2FkZWQnLCBjbGllbnQpO1xuXG4gIC8vIGNoZWNrIGlmIGxvYWRpbmcgc3RhdGVcbiAgLy8gYW5kIHRoZW4gYXdhaXQgZm9yIHJlc3BvbnNlXG4gIC8vIG5vIG5lZWQgdG8gbW9ua2V5LXBhdGNoIGFnYWluXG4gIGlmICh0aGlzLmxvYWRTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLmxvYWRTdGF0ZSA9IHRydWU7XG5cbiAgLy8gTW9ua2V5IHBhdGNoIEF1dGguc2V0Q2xpZW50IHRvIGxvYWQgY2xpZW50XG4gIHZhciBzZXRDbGllbnQgPSBnbG9iYWwud2luZG93LkF1dGgwLnNldENsaWVudCB8fCBmdW5jdGlvbiBzZXRDbGllbnQoKSB7fTtcbiAgZ2xvYmFsLndpbmRvdy5BdXRoMC5zZXRDbGllbnQgPSBmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgc2V0Q2xpZW50LmFwcGx5KHdpbmRvdy5BdXRoMCwgYXJndW1lbnRzKTtcblxuICAgIC8vIElmIG5vdCB0aGlzIGNsaWVudCwgcmV0dXJuXG4gICAgaWYgKHNlbGYuJG9wdGlvbnMuY2xpZW50SUQgIT09IGNsaWVudC5pZCkgcmV0dXJuO1xuXG4gICAgLy8gc3RvcmUgdGhlIGNsaWVudFxuICAgIGNsaWVudHNbc2VsZi4kb3B0aW9ucy5jbGllbnRJRF0gPSBjbGllbnQ7XG5cbiAgICAvLyBub3RpZnkgaW5pdGlhbGl6ZWQgYW5kIHBhc3MgdGhlIGNsaWVudCB3aXRoIGl0XG4gICAgc2VsZi5lbWl0KCdjbGllbnQgbG9hZGVkJywgY2xpZW50KTtcbiAgfTtcblxuICB2YXIgc2NyaXB0ID0gZ2xvYmFsLndpbmRvdy5BdXRoMC5zY3JpcHRfdGFnc1t0aGlzLiRvcHRpb25zLmNsaWVudElEXTtcblxuICBpZiAoIXNjcmlwdCkge1xuICAgIC8vIExvYWQgY2xpZW50IGZyb20gYXNzZXRzIHVybFxuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQuc3JjID0gdGhpcy4kb3B0aW9ucy5hc3NldHNVcmwgKyAnY2xpZW50LycgKyB0aGlzLiRvcHRpb25zLmNsaWVudElEICsgJy5qcycgKyAnP3QnICsgKCtuZXcgRGF0ZSgpKTtcblxuICAgIC8vIFNhdmUgc2NyaXB0IHJlZmVyZW5jZSBmb3Igb3RoZXIgaW50YW5jZXMgdXNpbmcgdGhlIHNhbWUgY2xpZW50SURcbiAgICBnbG9iYWwud2luZG93LkF1dGgwLnNjcmlwdF90YWdzW3RoaXMuJG9wdGlvbnMuY2xpZW50SURdID0gc2NyaXB0O1xuXG4gICAgLy8gSW5zZXJ0IHNjcmlwdCBpbiBET00gaGVhZFxuICAgIHZhciBmaXJzdFNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgICBmaXJzdFNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGZpcnN0U2NyaXB0KTtcbiAgfVxuXG4gIC8vIEhhbmRsZSBsb2FkIGFuZCBlcnJvciBmb3IgY2xpZW50IGNvbmZpZ1xuICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGJpbmQodGhpcy5vbmNsaWVudGxvYWRzdWNjZXNzLCB0aGlzKSk7XG4gIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGJpbmQodGhpcy5vbmNsaWVudGxvYWRlcnJvciwgdGhpcykpO1xuICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGJpbmQodGhpcy5vbmNsaWVudGxvYWRlcnJvciwgdGhpcyksIDUwMDApO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgc3VjY2VzcyBmb3Igc2NyaXB0IGxvYWQgb2YgY2xpZW50J3MgY29uZmlndXJhdGlvblxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5vbmNsaWVudGxvYWRzdWNjZXNzID0gZnVuY3Rpb24oKSB7XG5cbiAgLy8gY2xlYXIgZXJyb3IgdGltZW91dFxuICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgdGhpcy50aW1lb3V0ID0gbnVsbDtcblxuICAvLyBjbGVhciBkaXNwbGF5ZWQgZXJyb3JzIGlmIGFueVxuICBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgdGhpcy5fc2hvd0Vycm9yKCk7XG4gIH1cblxuICAvLyBXZSBzaG91bGQgdXNlIGRlYnVnIGFuZCBsb2cgc3R1ZmYgd2l0aG91dCBjb25zb2xlLmxvZ1xuICAvLyBhbmQgb25seSBmb3IgZGVidWdnaW5nXG4gIGlmICh3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmxvZykge1xuICAgIGNvbnNvbGUubG9nKCdDbGllbnQgY29uZmlndXJhdGlvbiBsb2FkZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIEhhbmRsZSBlcnJvciBmb3Igc2NyaXB0IGxvYWQgb2YgY2xpZW50J3MgY29uZmlndXJhdGlvblxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5vbmNsaWVudGxvYWRlcnJvciA9IGZ1bmN0aW9uKGVycikge1xuXG4gIC8vIHRpbWVvdXQgaGFzIGJlZW4gY2xlYXJlZFxuICBpZiAoIXRoaXMudGltZW91dCkgcmV0dXJuO1xuXG4gIC8vIGNsZWFyIGVycm9yIHRpbWVvdXRcbiAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gIHRoaXMudGltZW91dCA9IG51bGw7XG5cbiAgLy8gSWYgVUkgcHJlc2VudCwgZGVsYXkgdGhlIHNob3cgZXJyb3IganVzdCBhIGxpdHRsZSBtb3JlLFxuICAvLyBiZWNhdXNlIHNvbWV0aW1lcyB0aGlzIGxvYWRzIGJlZm9yZSBpbiB0aGUgYXN5bmMgY2FsbFxuICAvLyBjb21wYXJlZCB0byB0aGUgYGxvYWRgIGV2ZW50IHN1Y2Nlc3MuXG4gIGlmICh0aGlzLm9wdGlvbnMpIHNldFRpbWVvdXQoYmluZCh0aGlzLnNob3dOZXR3b3JrRXJyb3IsIHRoaXMpLCA1MDApO1xuXG4gIC8vIHJlc2V0IGxvYWRzdGF0ZVxuICB0aGlzLmxvYWRTdGF0ZSA9IGZhbHNlO1xuXG4gIC8vIHJlc2V0IHNjcmlwdCBsb2FkaW5nIHN0YXRlXG4gIGdsb2JhbC53aW5kb3cuQXV0aDAuc2NyaXB0X3RhZ3NbdGhpcy4kb3B0aW9ucy5jbGllbnRJRF0gPSBudWxsO1xuXG4gIGlmICh3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmxvZykge1xuICAgIGNvbnNvbGUubG9nKG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgY2xpZW50IGNvbmZpZ3VyYXRpb24gZm9yICcgKyB0aGlzLiRvcHRpb25zLmNsaWVudElEKSk7XG4gIH07XG59XG5cbkF1dGgwTG9jay5wcm90b3R5cGUuc2hvd05ldHdvcmtFcnJvciA9IGZ1bmN0aW9uKCkge1xuICAvLyBjbGllbnQgaGFzIGJlZW4gbG9hZGVkIGluIHNvbWUgYXN5bmMgY2FsbFxuICBpZiAoZ2xvYmFsLndpbmRvdy5BdXRoMC5jbGllbnRzW3RoaXMub3B0aW9ucy4kY2xpZW50SURdKSByZXR1cm47XG5cbiAgLy8gRXhoaWJpdCBsb2NrJ3Mgd29ya2luZyBjYW52YXNcbiAgdGhpcy5leGhpYml0KCk7XG5cbiAgLy8gWFhYOiBTaG91bGQgd2UgY3JlYXRlIGFuIFwiZXJyb3ItbW9kZVwiIGZvciBzdWNoIGNhc2VzP1xuICAvLyBYWFg6IG9yIGFyZSB3ZSBvayB3aXRoIHRoaXMgZGlzcGxheT9cbiAgdGhpcy5fbG9hZGluZ1BhbmVsKHRoaXMub3B0aW9ucyk7XG5cbiAgLy8gVHVybiBvZmYgdGhlIGxvYWRpbmcgc3Bpbm5lclxuICB0aGlzLnF1ZXJ5KCcuYTAtc3Bpbm5lcicpLmFkZENsYXNzKCdhMC1oaWRlJyk7XG5cbiAgLy8gZGlzcGxheSBlcnJvclxuICB0aGlzLl9zaG93RXJyb3IodGhpcy5vcHRpb25zLmkxOG4udCgnbmV0d29ya0Vycm9yJykpO1xufVxuXG4vKipcbiAqIFNldCdzIHRoZSBjbGllbnQgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY2xpZW50XG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuc2V0Q2xpZW50Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgdGhpcy4kY2xpZW50ID0gXy5jbG9uZShjbGllbnQpO1xuICB0aGlzLmVtaXQoJ2NsaWVudCBpbml0aWFsaXplZCcpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUXVlcnkgZm9yIGVsZW1lbnRzIGJ5IGBzZWxlY3RvcmAgd2l0aGluIG9wdGlvbmFsIGBjb250ZXh0YC5cbiAqIExhc3QgZGVmYXVsdHMgdG8gd2lkZ2V0J3MgaW5zdGFuY2UgYCRjb250YWluZXJgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtOb2RlRWxlbWVudH0gY29udGV4dFxuICogQHJldHVybiB7Qm9uem9BdWdtZW50ZWR9XG4gKiBAcHVibGljXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuICQoc2VsZWN0b3IsIGNvbnRleHQgfHwgdGhpcy4kY29udGFpbmVyKTtcbiAgfVxuICByZXR1cm4gJCgnI2EwLWxvY2snLCBzZWxlY3RvciB8fCB0aGlzLiRjb250YWluZXIpO1xufTtcblxuLyoqXG4gKiBSZW5kZXIgdGVtcGxhdGUgZnVuY3Rpb24gd2l0aCBkZWZhdWx0IGluY2FuY2VcbiAqIGBfbG9jYWxzYCByZXNvbHZlZC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0bXBsXG4gKiBAcGFyYW0ge09iamVjdH0gbG9jYWxzXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbih0bXBsLCBsb2NhbHMpIHtcbiAgdmFyIF9sb2NhbHMgPSBfLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBsb2NhbHMpO1xuICByZXR1cm4gdG1wbChfbG9jYWxzKTtcbn07XG5cbi8qKlxuICogUmVuZGVyIHdpZGdldCBjb250YWluZXIgdG8gRE9NXG4gKiBYWFg6IGNvbnNpZGVyIHJlbmFtaW5nIVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLiRjb250YWluZXIpIHsgcmV0dXJuIHRoaXM7IH1cblxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgdmFyIGNpZCA9IG9wdGlvbnMuY29udGFpbmVyO1xuICB2YXIgbG9jYWxzID0ge1xuICAgIG9wdGlvbnM6ICAgICAgb3B0aW9ucyxcbiAgICBjb3Jkb3ZhOiAgICAgIHV0aWxzLmlzQ29yZG92YSgpLFxuICAgIGlvczogICAgICAgICAgdXRpbHMuaXNJT1MoKSxcbiAgICBhbHRfc3Bpbm5lcjogICFoYXNfYW5pbWF0aW9ucygpID9cbiAgICAgICh0aGlzLiRvcHRpb25zLmNkbiArICdpbWcvYWpheC1sb2FkZXIuZ2lmJykgOlxuICAgICAgbnVsbFxuICB9O1xuXG4gIC8vIHdpZGdldCBjb250YWluZXJcbiAgaWYgKGNpZCkge1xuICAgIHRoaXMuJGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNpZCk7XG4gICAgaWYgKCF0aGlzLiRjb250YWluZXIpIHsgdGhyb3cgbmV3IEVycm9yKCdOb3QgZm91bmQgZWxlbWVudCB3aXRoIFxcJ2lkXFwnICcgKyBjaWQpOyB9XG5cbiAgICB0aGlzLiRjb250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5yZW5kZXIodGVtcGxhdGUsIGxvY2Fscyk7XG5cbiAgfSBlbHNlIHtcbiAgICB0aGlzLiRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBib256byh0aGlzLiRjb250YWluZXIpLmFkZENsYXNzKCdhMC1sb2NrLWNvbnRhaW5lcicpO1xuXG4gICAgdGhpcy4kY29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMucmVuZGVyKHRlbXBsYXRlLCBsb2NhbHMpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy4kY29udGFpbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFeGhpYml0IExvY2sncyB3b3JraW5nIHNwYWNlXG4gKiBiZWZvcmUgbG9hZGluZyBhbnkgb3RoZXIgcGFuZWxcbiAqXG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuZXhoaWJpdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAvLyBDcmVhdGUgYW5kIHNldCB0aGUgaGVhZGVyXG4gIHRoaXMuaGVhZGVyID0gbmV3IEhlYWRlclZpZXcodGhpcywgdGhpcy5xdWVyeSgnLmEwLWhlYWRlcicpLmdldCgwKSwgb3B0aW9ucyk7XG5cbiAgLy8gYWN0aXZhdGUgcGFuZWxcbiAgLy8gWFhYOiAoPykgdGhpcyBJIGRvbid0IGdldC4uLiB3aHkgcmVtb3ZlIGFuZCBhZGQ/XG4gIHRoaXMucXVlcnkoJ2Rpdi5hMC1wYW5lbCcpLnJlbW92ZUNsYXNzKCdhMC1hY3RpdmUnKTtcbiAgdGhpcy5xdWVyeSgnZGl2LmEwLW92ZXJsYXknKS5hZGRDbGFzcygnYTAtYWN0aXZlJyk7XG4gIHRoaXMucXVlcnkoJy5hMC1wYW5lbC5hMC1vbmVzdGVwJykuYWRkQ2xhc3MoJ2EwLWFjdGl2ZScpO1xuXG4gIGlmICghb3B0aW9ucy5jb250YWluZXIpIHtcbiAgICBib256byhkb2N1bWVudC5ib2R5KS5hZGRDbGFzcygnYTAtbG9jay1vcGVuJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5xdWVyeSgnLmEwLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhMC1vdmVybGF5Jyk7XG4gIH1cblxuICB0aGlzLnF1ZXJ5KCcuYTAtcG9wdXAgLmEwLWludmFsaWQnKS5yZW1vdmVDbGFzcygnYTAtaW52YWxpZCcpO1xuXG4gIHRoaXMucXVlcnkoJy5hMC1vdmVybGF5JylcbiAgICAudG9nZ2xlQ2xhc3MoJ2EwLW5vLXBsYWNlaG9sZGVyLXN1cHBvcnQnLCAhcGxhY2Vob2xkZXJTdXBwb3J0ZWQpO1xuXG4gIC8vIGJ1dHRvbnMgYWN0aW9uc1xuICB0aGlzLnF1ZXJ5KCcuYTAtb25lc3RlcCBhLmEwLWNsb3NlJykuYTBfb24oJ2NsaWNrJywgYmluZCh0aGlzLm9uY2xvc2VjbGljaywgdGhpcykpO1xuXG4gIC8vIGNsb3NlIHBvcHVwIHdpdGggRVNDIGtleVxuICBpZiAob3B0aW9ucy5jbG9zYWJsZSkge1xuICAgIHRoaXMucXVlcnkoJycpLmEwX29uKCdrZXl1cCcsIGJpbmQodGhpcy5vbmVzY3ByZXNzZWQsIHRoaXMpKTtcbiAgfVxuXG4gIC8vIGFmdGVyIHByZS1zZXR0aW5nIGNsYXNzZXMgYW5kIGRvbSBoYW5kbGVyc1xuICAvLyBlbWl0IGFzIHNob3duXG4gIHRoaXMuZW1pdCgnc2hvd24nKTtcbn1cblxuLyoqXG4gKiBTaG93IHRoZSB3aWRnZXQgcmVzb2x2aW5nIGBvcHRpb25zYFxuICogd2l0aCBkZWZhdWx0IG1vZGUgYXMgJ3NpZ25pbidcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge0F1dGgwTG9ja31cbiAqIEBwdWJsaWNcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgcGFyYW1zID0gZ2V0U2hvd1BhcmFtcyhvcHRpb25zLCBjYWxsYmFjayk7XG4gIHZhciBvcHRzID0gXy5leHRlbmQoeyBtb2RlOiAnc2lnbmluJyB9LCBwYXJhbXMub3B0aW9ucyk7XG4gIHJldHVybiB0aGlzLmRpc3BsYXkob3B0cywgcGFyYW1zLmNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogU2hvdyB3aWRnZXQgb24gYHNpZ25pbmAgbW9kZSB3aXRoXG4gKiBzaWdudXAgYW5kIHJlc2V0IGFjdGlvbnMgZGlzYWJsZWRcbiAqIGJ5IGRlZmF1bHQgc28gbm8gYWN0aW9uIGJ1dHRvbnNcbiAqIGFyZSBwcmVzZW50IG9uIHdpZGdldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge0F1dGgwTG9ja31cbiAqIEBwdWJsaWNcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLnNob3dTaWduaW4gPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuXG4gIHZhciBwYXJhbXMgPSBnZXRTaG93UGFyYW1zKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgdmFyIG9wdGlvbmFsID0geyBkaXNhYmxlU2lnbnVwQWN0aW9uOiB0cnVlLCBkaXNhYmxlUmVzZXRBY3Rpb246IHRydWUgfTtcbiAgdmFyIHJlcXVpcmVkID0geyBtb2RlOiAnc2lnbmluJyB9O1xuXG4gIC8vIG1lcmdlIGFuZCBmb3JjZSBgc2lnbmluYCBtb2RlXG4gIHZhciBvcHRzID0gXy5leHRlbmQob3B0aW9uYWwsIHBhcmFtcy5vcHRpb25zLCByZXF1aXJlZCk7XG4gIHJldHVybiB0aGlzLnNob3cuY2FsbCh0aGlzLCBvcHRzLCBwYXJhbXMuY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBTaG93IHdpZGdldCBvbiBgcmVzZXRgIG1vZGUgd2l0aFxuICogc2lnbnVwIGFuZCByZXNldCBhY3Rpb25zIGRpc2FibGVkXG4gKiBieSBkZWZhdWx0IHNvIG5vIGFjdGlvbiBidXR0b25zXG4gKiBhcmUgcHJlc2VudCBvbiB3aWRnZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHVibGljXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5zaG93U2lnbnVwID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHBhcmFtcyA9IGdldFNob3dQYXJhbXMob3B0aW9ucywgY2FsbGJhY2spO1xuICB2YXIgb3B0aW9uYWwgPSB7IGRpc2FibGVTaWdudXBBY3Rpb246IHRydWUsIGRpc2FibGVSZXNldEFjdGlvbjogdHJ1ZSB9O1xuICB2YXIgcmVxdWlyZWQgPSB7IG1vZGU6ICdzaWdudXAnIH07XG5cbiAgLy8gbWVyZ2UgYW5kIGZvcmNlIGBzaWduaW5gIG1vZGVcbiAgdmFyIG9wdHMgPSBfLmV4dGVuZChvcHRpb25hbCwgcGFyYW1zLm9wdGlvbnMsIHJlcXVpcmVkKTtcbiAgcmV0dXJuIHRoaXMuc2hvdy5jYWxsKHRoaXMsIG9wdHMsIHBhcmFtcy5jYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFNob3cgd2lkZ2V0IG9uIGByZXNldGAgbW9kZSB3aXRoXG4gKiBzaWdudXAgYW5kIHJlc2V0IGFjdGlvbnMgZGlzYWJsZWRcbiAqIGJ5IGRlZmF1bHQgc28gbm8gYWN0aW9uIGJ1dHRvbnNcbiAqIGFyZSBwcmVzZW50IG9uIHdpZGdldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge0F1dGgwTG9ja31cbiAqIEBwdWJsaWNcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLnNob3dSZXNldCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBwYXJhbXMgPSBnZXRTaG93UGFyYW1zKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgdmFyIG9wdGlvbmFsID0geyBkaXNhYmxlU2lnbnVwQWN0aW9uOiB0cnVlLCBkaXNhYmxlUmVzZXRBY3Rpb246IHRydWUgfTtcbiAgdmFyIHJlcXVpcmVkID0geyBtb2RlOiAncmVzZXQnIH07XG5cbiAgLy8gbWVyZ2UgYW5kIGZvcmNlIGBzaWduaW5gIG1vZGVcbiAgdmFyIG9wdHMgPSBfLmV4dGVuZChvcHRpb25hbCwgcGFyYW1zLm9wdGlvbnMsIHJlcXVpcmVkKTtcbiAgcmV0dXJuIHRoaXMuc2hvdy5jYWxsKHRoaXMsIG9wdHMsIHBhcmFtcy5jYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEhpZGUgdGhlIHdpZGdldCBhbmQgY2FsbCBgY2FsbGJhY2tgIHdoZW4gZG9uZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7QXV0aDBMb2NrfVxuICogQHB1YmxpY1xuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAvLyBpbW1lZGlhdGVsbHkgaGlkZSB3aWRnZXRcbiAgYm9uem8oZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoJ2EwLWxvY2stb3BlbicpO1xuXG4gIC8vIFJlbW92ZSB3aWRnZXQgYW5kL29yIGl0J3MgY29udGFpbmVyXG4gIGlmICh0aGlzLiRjb250YWluZXIgJiYgdGhpcy5vcHRpb25zLmNvbnRhaW5lcikge1xuICAgIC8vIHJlbW92ZSBgI2EwLWxvY2tgXG4gICAgdGhpcy5xdWVyeSgpLnJlbW92ZSgpO1xuICB9IGVsc2UgaWYodGhpcy4kY29udGFpbmVyKSB7XG4gICAgLy8gcmVtb3ZlIGAuYTAtbG9jay1jb250YWluZXJgXG4gICAgdGhpcy5xdWVyeSgpLnBhcmVudCgnLmEwLWxvY2stY29udGFpbmVyJykucmVtb3ZlKCk7XG4gIH1cblxuICB0aGlzLiRjb250YWluZXIgPSBudWxsO1xuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIHRoaXMuZW1pdCgnaGlkZGVuJyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFByb3h5IGBhdXRoMC5qc2AgaW5zdGFuY2UgYC5sb2dvdXQoKWAgbWV0aG9kXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5XG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHVibGljXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5sb2dvdXQgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgdGhpcy4kYXV0aDAubG9nb3V0KHF1ZXJ5KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERpc3BsYXkgdGhlIHdpZGdldCBpbiBcInNpZ25pblwiIG9yIFwic2lnbnVwXCJcbiAqIG9yIFwicmVzZXRcIiBtb2RlLCByZXNvbHZlZCBmcm9tIGRpc3BsYXkgYG9wdGlvbnNgLlxuICogT3B0aW9uYWx5IHNldCBcInBvcHVwQ2FsbGJhY2tcIiB0byBgY2FsbGJhY2tgIGlmIHByZXNlbnRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge0F1dGgwTG9ja31cbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5kaXNwbGF5ID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgLy8gcHJlLWZvcm1hdCBvcHRpb25zXG4gIHZhciBvcHRzID0gXy5leHRlbmQoeyBwb3B1cENhbGxiYWNrOiBjYWxsYmFjayB9LCBvcHRpb25zKTtcblxuICAvLyBJbnN0YW50aWF0ZSBPcHRpb25zTWFuYWdlciBhcyBgdGhpcy5vcHRpb25zYFxuICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9uc01hbmFnZXIodGhpcywgb3B0cyk7XG5cbiAgLy8gU3RhcnQgYnkgcmVuZGVyIHdpZGdldCdzIGNvbnRhaW5lclxuICB0aGlzLmluc2VydCgpO1xuXG4gIHRoaXMub3B0aW9ucy5yZWFkeShiaW5kKG9ub3B0aW9uc3JlYWR5LCB0aGlzKSk7XG5cbiAgLy8gSW5pdGlhbGl6ZSB3aWRnZXQncyB2aWV3XG4gIC8vIHdoZW4gb3B0aW9ucyBnZXQgbG9hZGVkXG4gIGZ1bmN0aW9uIG9ub3B0aW9uc3JlYWR5KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZShiaW5kKG9uaW5pdGlhbGl6ZWQsIHRoaXMpKTtcbiAgfVxuXG4gIC8vIGFuZCByaWdodCBhZnRlciB0aGF0IHJlbmRlciBtb2RlXG4gIGZ1bmN0aW9uIG9uaW5pdGlhbGl6ZWQoKSB7XG4gICAgLy8gZm9jdXMgb25jZSByZWFkeVxuICAgIHRoaXMub25jZSh0aGlzLm9wdGlvbnMubW9kZSArICcgcmVhZHknLCBiaW5kKHRoaXMuZm9jdXNJbnB1dCwgdGhpcykpO1xuXG4gICAgLy8gcmVzb2x2ZSB2aWV3XG4gICAgaWYgKCdzaWduaW4nID09PSB0aGlzLm9wdGlvbnMubW9kZSkge1xuICAgICAgLy8gaWYgdXNlciBpbiBBRCBpcCByYW5nZVxuICAgICAgaWYgKHRoaXMuJHNzb0RhdGEgJiYgdGhpcy4kc3NvRGF0YS5jb25uZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXJiZXJvc1BhbmVsKHRoaXMub3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB1c2VyIGxvZ2dlZCBpbiBzaG93IGxvZ2dlZCBpbiBleHBlcmllbmNlXG4gICAgICBpZiAodGhpcy5vcHRpb25zLl9zaG91bGRTaG93TGFzdExvZ2luKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ2dlZGluUGFuZWwodGhpcy5vcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIC8vIG90aGVyd2lzZSwganVzdCBzaG93IHNpZ25pblxuICAgICAgdGhpcy5fc2lnbmluUGFuZWwodGhpcy5vcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKCdzaWdudXAnID09PSB0aGlzLm9wdGlvbnMubW9kZSkge1xuICAgICAgdGhpcy5fc2lnbnVwUGFuZWwodGhpcy5vcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKCdyZXNldCcgPT09IHRoaXMub3B0aW9ucy5tb2RlKSB7XG4gICAgICB0aGlzLl9yZXNldFBhbmVsKHRoaXMub3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgd2lkZ2V0IGZvciB0aGUgYGRpc3BsYXlgIG1ldGhvZFxuICogYW5kIGNhbGxzIGBkb25lYCB3aGVuIHJlYWR5IHRvIGNvbnRpbnVlIG1vZGVcbiAqIHNldHVwLi4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZVxuICogQHJldHVybiB7QXV0aDBMb2NrfVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihkb25lKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgLy8gV2FpdCBmb3IgQXV0aDAuc2V0Q2xpZW50KCkgdG8gYmUgc3VyZVxuICAvLyB3ZSBoYXZlIHRoZSBjbGllbnQncyBjb25maWd1cmF0aW9uXG4gIC8vIGJlZm9yZSBzZXR0aW5nIHVwXG4gIGlmIChfLmlzRW1wdHkodGhpcy4kY2xpZW50KSkge1xuICAgIHZhciBhcmdzICA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gdGhpcy5nZXRDbGllbnRDb25maWd1cmF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuaW5pdGlhbGl6ZS5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9pc0ZyZWVTdWJzY3JpcHRpb24oKSkge1xuICAgIC8vIGhpZGUgZm9vdGVyIGZvciBub24gZnJlZS9kZXYgc3Vic2NyaXB0aW9uc1xuICAgIHRoaXMucXVlcnkoJy5hMC1mb290ZXInKS50b2dnbGVDbGFzcygnYTAtaGlkZScsIHRydWUpO1xuICAgIHRoaXMucXVlcnkoJy5hMC1mcmVlLXN1YnNjcmlwdGlvbicpLnJlbW92ZUNsYXNzKCdhMC1mcmVlLXN1YnNjcmlwdGlvbicpO1xuICB9XG5cbiAgLy8gRXhoaWJpdCBsb2NrJ3Mgd29ya2luZyBjYW52YXNcbiAgdGhpcy5leGhpYml0KCk7XG5cbiAgZnVuY3Rpb24gZmluaXNoKGVyciwgc3NvRGF0YSkge1xuICAgIC8vIFhYWDogYXV0aDAuZ2V0U1NPRGF0YSgpIG5ldmVyIHJldHVybnMgZXJyXG4gICAgLy8gc2VlIHNvdXJjZSBhdDogaHR0cHM6Ly9naXRodWIuY29tL2F1dGgwL2F1dGgwLmpzL2Jsb2IvbWFzdGVyL2xpYi9pbmRleC5qc1xuICAgIHNlbGYuJHNzb0RhdGEgPSBzc29EYXRhO1xuICAgIGRvbmUoKTtcbiAgICBzZWxmLmVtaXQoJ3JlYWR5Jyk7XG4gIH1cblxuICAvLyBkbyBub3QgZ2V0IFNTTyBkYXRhIG9uIHNpZ251cCBvciByZXNldCBtb2Rlc1xuICB2YXIgbm90U2lnbmluTW9kZSA9IH5bJ3Jlc2V0JywgJ3NpZ251cCddLmluZGV4T2Yob3B0aW9ucy5tb2RlKTtcbiAgaWYgKG5vdFNpZ25pbk1vZGUpIHtcbiAgICByZXR1cm4gZmluaXNoKG51bGwsIHt9KSwgdGhpcztcbiAgfVxuXG4gIHZhciBkaXNhYmxlZFJldHVyblVzZXJFeHBlcmllbmNlID0gZmFsc2UgPT09IG9wdGlvbnMucmVtZW1iZXJMYXN0TG9naW4gJiZcbiAgICAoIW9wdGlvbnMuX2lzVGhlcmVBbnlBRENvbm5lY3Rpb24oKSB8fCBmYWxzZSA9PT0gb3B0aW9ucy5pbnRlZ3JhdGVkV2luZG93c0xvZ2luKTtcblxuICBpZiAoZGlzYWJsZWRSZXR1cm5Vc2VyRXhwZXJpZW5jZSkge1xuICAgIHJldHVybiBmaW5pc2gobnVsbCwge30pLCB0aGlzO1xuICB9XG5cbiAgdGhpcy5fbG9hZGluZ1BhbmVsKG9wdGlvbnMpO1xuXG4gIC8vIGdldCBTU08gZGF0YSBhbmQgdGhlbiByZW5kZXJcbiAgdGhpcy4kYXV0aDAuZ2V0U1NPRGF0YShvcHRpb25zLl9pc1RoZXJlQW55QURDb25uZWN0aW9uKCksIGZpbmlzaCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgc2V0IGEgbmV3IFNpZ25pblBhbmVsIHdpdGhcbiAqIGBvcHRpb25zYCwgYW5kIGFsc28gc2V0IHdpZGdldCdzIHRpdGxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge0F1dGgwTG9ja31cbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5fc2lnbmluUGFuZWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgcGFuZWwgPSBTaWduaW5QYW5lbCh0aGlzLCB7IG9wdGlvbnM6IG9wdGlvbnMgfHwge30gfSk7XG5cbiAgLy8gWFhYOiBmdXR1cmUgUGFuZWwgQVBJIHBsYWNlaG9sZGVyXG4gIC8vIHBhbmVsLm9uKCdzdWJtaXQnLCB0aGlzLnNldExvYWRpbmdNb2RlKTtcbiAgLy8gcGFuZWwub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyb3JzKSB7XG4gIC8vICAgLy8gZXJyb3JzIGFyZSBhbHJlYWR5IHNhdmVkIGluIGBzaWduaW5gIGluc3RhbmNlXG4gIC8vICAgc2VsZi51bnNldExvYWRpbk1vZGUoKTtcbiAgLy8gICBzZWxmLnF1ZXJ5KCcuYTAtcGFuZWwnKS5odG1sKHNpZ25pbi5jcmVhdGUoKSk7XG4gIC8vIH0pO1xuXG4gIC8vIHBhbmVsLm9uKCdzdWNjZXNzJywgZnVuY3Rpb24oKSB7XG4gIC8vICAgc2VsZi5oaWRlKCk7ICAvLyB3aWxsIHVuc2V0IGxvYWRpbmcgbW9kZVxuICAvLyAgICAgICAgICAgICAgICAgLy8gYW5kIGRlc3Ryb3kgYW5kIGRldGFjaFxuICAvLyAgICAgICAgICAgICAgICAgLy8gd2lkZ2V0IGNvbnRhaW5lciBmcm9tIERPTVxuICAvLyB9KTtcblxuICB0aGlzLl9zZXRUaXRsZSh0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWduaW46dGl0bGUnKSk7XG5cbiAgdGhpcy5zZXRQYW5lbChwYW5lbCk7XG5cbiAgcmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuZCBzZXQgYSBuZXcgU2lnbnVwUGFuZWwgd2l0aFxuICogYG9wdGlvbnNgLCBhbmQgYWxzbyBzZXQgd2lkZ2V0J3MgdGl0bGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7QXV0aDBMb2NrfVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9zaWdudXBQYW5lbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBwYW5lbCA9IFNpZ251cFBhbmVsKHRoaXMsIHsgb3B0aW9uczogb3B0aW9ucyB8fCB7fSB9KTtcblxuICB0aGlzLl9zZXRUaXRsZSh0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWdudXA6dGl0bGUnKSk7XG5cbiAgdGhpcy5zZXRQYW5lbChwYW5lbCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgc2V0IGEgbmV3IFJlc2V0UGFuZWwgd2l0aFxuICogYG9wdGlvbnNgLCBhbmQgYWxzbyBzZXQgd2lkZ2V0J3MgdGl0bGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7QXV0aDBMb2NrfVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9yZXNldFBhbmVsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIHBhbmVsID0gUmVzZXRQYW5lbCh0aGlzLCB7IG9wdGlvbnM6IG9wdGlvbnMgfHwge30gfSk7XG5cbiAgdGhpcy5fc2V0VGl0bGUodGhpcy5vcHRpb25zLmkxOG4udCgncmVzZXQ6dGl0bGUnKSk7XG5cbiAgdGhpcy5zZXRQYW5lbChwYW5lbCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgc2V0IGEgbmV3IExvYWRpbmdQYW5lbCB3aXRoXG4gKiBgb3B0aW9uc2AsIGFuZCBhbHNvIHNldCB3aWRnZXQncyB0aXRsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuX2xvYWRpbmdQYW5lbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBwYW5lbCA9IExvYWRpbmdQYW5lbCh0aGlzLCB7IG9wdGlvbnM6IG9wdGlvbnMgfSk7XG5cbiAgaWYgKG9wdGlvbnMudGl0bGUpIHtcbiAgICB0aGlzLl9zZXRUaXRsZSh0aGlzLm9wdGlvbnMuaTE4bi50KG9wdGlvbnMudGl0bGUgKyAnOnRpdGxlJykpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3NldFRpdGxlKHRoaXMub3B0aW9ucy5pMThuLnQoKG9wdGlvbnMubW9kZSB8fCAnc2lnbmluJykgKyAnOnRpdGxlJykpO1xuICB9XG5cbiAgdGhpcy5zZXRQYW5lbChwYW5lbCk7XG5cbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgIHBhbmVsLnF1ZXJ5KCcnKS5hZGRDbGFzcygnYTAtd2l0aC1tZXNzYWdlJyk7XG4gICAgcGFuZWwucXVlcnkoJy5hMC1zcGluLW1lc3NhZ2Ugc3BhbicpLmh0bWwob3B0aW9ucy5tZXNzYWdlLnJlcGxhY2UoJy0nLCAnICcpKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYW5kIHNldCBhIG5ldyBMb2dnZWRpblBhbmVsIHdpdGhcbiAqIGBvcHRpb25zYCwgYW5kIGFsc28gc2V0IHdpZGdldCdzIHRpdGxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge0F1dGgwTG9ja31cbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5fbG9nZ2VkaW5QYW5lbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBwYW5lbCA9IExvZ2dlZGluUGFuZWwodGhpcywgeyBvcHRpb25zOiBvcHRpb25zIHx8IHt9IH0pO1xuXG4gIHRoaXMuX3NldFRpdGxlKHRoaXMub3B0aW9ucy5pMThuLnQoJ3NpZ25pbjp0aXRsZScpKTtcblxuICB0aGlzLnNldFBhbmVsKHBhbmVsKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuZCBzZXQgYSBuZXcgS2VyYmVyb3NQYW5lbCB3aXRoXG4gKiBgb3B0aW9uc2AsIGFuZCBhbHNvIHNldCB3aWRnZXQncyB0aXRsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuX2tlcmJlcm9zUGFuZWwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgcGFuZWwgPSBLZXJiZXJvc1BhbmVsKHRoaXMsIHsgb3B0aW9uczogb3B0aW9ucyB8fCB7fSB9KTtcblxuICB0aGlzLl9zZXRUaXRsZSh0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWduaW46dGl0bGUnKSk7XG5cbiAgdGhpcy5zZXRQYW5lbChwYW5lbCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCBgcGFuZWxgIHRvIC5hMC1tb2RlLWNvbnRhaW5lciBlbGVtZW50IGFuZFxuICogZW1pdCBpdCdzIGBuYW1lYCBhcyByZWFkeVxuICpcbiAqIEBwYXJhbSB7U2lnbmluUGFuZWx8U2lnbnVwUGFuZWx8Li4ufSBwYW5lbFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5zZXRQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsLCBuYW1lKSB7XG4gIHZhciBlbCA9ICdmdW5jdGlvbicgPT09IHR5cGVvZiBwYW5lbC5yZW5kZXIgPyBwYW5lbC5yZW5kZXIoKSA6IHBhbmVsO1xuICB2YXIgcG5hbWUgPSAnZnVuY3Rpb24nID09PSB0eXBlb2YgcGFuZWwucmVuZGVyID8gcGFuZWwubmFtZSA6IChuYW1lIHx8ICdzaWduaW4nKTtcblxuICB0aGlzLnF1ZXJ5KCcuYTAtbW9kZS1jb250YWluZXInKS5odG1sKGVsKTtcbiAgdGhpcy5lbWl0KCclcyByZWFkeScucmVwbGFjZSgnJXMnLCBwbmFtZSkpO1xufTtcblxuXG4vKipcbiAqIFJlc29sdmUgd2hldGhlciBpbnN0YW5jZSBgJG9wdGlvbnMuZG9tYWluYCBpcyBhblxuICogQXV0aDAncyBkb21haW4gb3Igbm90XG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5pc0F1dGgwRG9tYWluID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZG9tYWluVXJsID0gdXRpbHMucGFyc2VVcmwoJ2h0dHBzOi8vJyArIHRoaXMuJG9wdGlvbnMuZG9tYWluKTtcbiAgcmV0dXJuIHV0aWxzLmVuZHNXaXRoKGRvbWFpblVybC5ob3N0bmFtZSwgJy5hdXRoMC5jb20nKTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZSB3aGV0aGVyIGlnbm9yZSBvciBub3QgYGlucHV0c2AgZW1haWwgdmFsaWRhdGlvblxuICpcbiAqIEBwYXJhbSB7Tm9kZUVsZW1lbnR9IGlucHV0XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9pZ25vcmVFbWFpbFZhbGlkYXRpb25zID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5hdHRyKCd0eXBlJykgIT09ICdlbWFpbCc7XG59O1xuXG4vKipcbiAqIFNldCBhbiBlcnJvciBgbWVzc2FnZWAgb3IgY2xlYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9zaG93RXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXG4gIC8vIGlmIG5vIGVycm9yLCBjbGVhblxuICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAvLyByZXNldCBlcnJvcnNcbiAgICB0aGlzLnF1ZXJ5KCcuYTAtZXJyb3InKS5odG1sKCcnKS5hZGRDbGFzcygnYTAtaGlkZScpO1xuICAgIHRoaXMucXVlcnkoJy5hMC1lcnJvcnMnKS5yZW1vdmVDbGFzcygnYTAtZXJyb3JzJyk7XG4gICAgLy8gcmVzZXQgYW5pbWF0aW9uc1xuICAgIHJldHVybiBhbmltYXRpb25fc2hha2VfcmVzZXQodGhpcy4kY29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIGVsc2UsIHNob3cgYW5kIHJlbmRlciBlcnJvciBtZXNzYWdlXG4gIHNldFRpbWVvdXQoYW5pbWF0aW9uX3NoYWtlLCAwLCB0aGlzLiRjb250YWluZXIpO1xuXG4gIHRoaXMucXVlcnkoJy5hMC1zdWNjZXNzJykuYWRkQ2xhc3MoJ2EwLWhpZGUnKTtcbiAgdGhpcy5xdWVyeSgnLmEwLWVycm9yJykuaHRtbChtZXNzYWdlKS5yZW1vdmVDbGFzcygnYTAtaGlkZScpO1xuICB0aGlzLmVtaXQoJ19lcnJvcicsIG1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBTZXQgYSBzdWNjZXNzIGBtZXNzYWdlYCBvciBjbGVhbiBlbGVtZW50LlxuICogWFhYOiBUaGlzIGlzIG1vc3RseSB1c2VkIG9uIHBhc3N3b3JkIHJlc2V0LFxuICogd2Ugc2hvdWxkIGNvbnNpZGVyIG1vdmluZyBpdCB0byBgUmVzZXRQYW5lbGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9zaG93U3VjY2VzcyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIC8vIGlmIG5vIG1lc3NhZ2UsIGNsZWFuIHN1Y2Nlc3Mgc3BhblxuICBpZiAoIW1lc3NhZ2UpIHJldHVybiB0aGlzLnF1ZXJ5KCcuYTAtc3VjY2VzcycpLmh0bWwoJycpLmFkZENsYXNzKCdhMC1oaWRlJyk7XG4gIC8vIGVsc2UsIHNob3cgYW5kIHJlbmRlciBzdWNjZXNzIG1lc3NhZ2VcbiAgdGhpcy5xdWVyeSgnLmEwLWVycm9yJykuYWRkQ2xhc3MoJ2EwLWhpZGUnKTtcbiAgdGhpcy5xdWVyeSgnLmEwLXN1Y2Nlc3MnKS5odG1sKG1lc3NhZ2UpLnJlbW92ZUNsYXNzKCdhMC1oaWRlJyk7XG59O1xuXG4vKipcbiAqIFNldCBhbiBgaW5wdXRgcyBzdHlsZSB0byBmb2N1cyBzb21lXG4gKiBlcnJvciBnb2luZyBvbiwgYW5kIG9wdGlvbmFseVxuICogYXBwZW5kIGEgYG1lc3NhZ2VgXG4gKlxuICogQHBhcmFtIHtOb2RlRWxlbWVudH0gaW5wdXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuX2ZvY3VzRXJyb3IgPSBmdW5jdGlvbihpbnB1dCwgbWVzc2FnZSkge1xuICAvLyByZW1vdmUgYWxsIGBfZm9jdXNFcnJvcmAgcmVzb3VyY2VzXG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIC8vIHJlc2V0IGVycm9yc1xuICAgIHRoaXMucXVlcnkoJy5hMC1lcnJvcnMnKS5yZW1vdmVDbGFzcygnYTAtZXJyb3JzJyk7XG4gICAgdGhpcy5xdWVyeSgnLmEwLWVycm9yLWlucHV0JykucmVtb3ZlQ2xhc3MoJ2EwLWVycm9yLWlucHV0Jyk7XG4gICAgdGhpcy5xdWVyeSgnLmEwLWVycm9yLW1lc3NhZ2UnKS5yZW1vdmUoKTtcbiAgICAvLyByZXNldCBhbmltYXRpb25zXG4gICAgcmV0dXJuIGFuaW1hdGlvbl9zaGFrZV9yZXNldCh0aGlzLiRjb250YWluZXIpO1xuICB9XG5cbiAgLy8gYW5pbWF0aW9uXG4gIHNldFRpbWVvdXQoYW5pbWF0aW9uX3NoYWtlLCAwLCB0aGlzLiRjb250YWluZXIpO1xuXG4gIGlucHV0XG4gICAgLnBhcmVudCgpXG4gICAgLmFkZENsYXNzKCdhMC1lcnJvci1pbnB1dCcpO1xuXG4gIGlmICghbWVzc2FnZSkgcmV0dXJuO1xuICBpbnB1dC5wYXJlbnQoKVxuICAgIC5hcHBlbmQoJC5jcmVhdGUoJzxzcGFuIGNsYXNzPVwiYTAtZXJyb3ItbWVzc2FnZVwiPicgKyBtZXNzYWdlICsgJzwvc3Bhbj4nKSk7XG59O1xuXG4vKipcbiAqIFNldCB3aWRnZXQncyBgdGl0bGVgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRpdGxlXG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuX3NldFRpdGxlID0gZnVuY3Rpb24odGl0bGUpIHtcbiAgdGhpcy5oZWFkZXIuc2V0VGl0bGUodGl0bGUpO1xufTtcblxuLyoqXG4gKiBSZXN0b3JlIHdpZGdldCdzIGltYWdlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRpdGxlXG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUucmVzdG9yZUltYWdlID0gZnVuY3Rpb24odGl0bGUpIHtcbiAgdGhpcy5oZWFkZXIucmVzdG9yZUltYWdlKHRpdGxlKTtcbn07XG5cbi8qKlxuICogU2V0IHdpZGdldCdzIGltYWdlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRpdGxlXG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuc2V0SW1hZ2UgPSBmdW5jdGlvbih0aXRsZSkge1xuICB0aGlzLmhlYWRlci5zZXRJbWFnZSh0aXRsZSk7XG59O1xuXG4vKipcbiAqIFNpZ25pbiBlbnRyeSBwb2ludCBtZXRob2QgZm9yIHJlc29sdmluZ1xuICogdXNlcm5hbWUgYW5kIHBhc3N3b3JkIGNvbm5lY3Rpb25zIG9yIGVudGVycHJpc2VcbiAqXG4gKiBAcGFyYW0ge1NpZ25pblBhbmVsfFNpZ251cFBhbmVsfSBwYW5lbFxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9zaWduaW4gPSBmdW5jdGlvbiAocGFuZWwpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcblxuICB2YXIgbWVzc2FnZTtcblxuICB2YXIgZW1haWxEID0gcGFuZWwucXVlcnkoJy5hMC1lbWFpbCcpO1xuICB2YXIgZW1haWxfaW5wdXQgPSBwYW5lbC5xdWVyeSgnaW5wdXRbbmFtZT1lbWFpbF0nKTtcblxuICAvLyBTZW5kIG91dCB0aGUgc2lnbmluIGV2ZW50LCBhbGxvd2luZyB1c2VycyB0byBkeW5hbWljYWxseSBjaGFuZ2UgdGhlIG9wdGlvbnMuXG4gIHRoaXMuZW1pdCgnc2lnbmluIHN1Ym1pdCcsIHRoaXMub3B0aW9ucywgeyBlbWFpbDogZW1haWxfaW5wdXQudmFsKCkgfSk7XG5cbiAgdmFyIGVtYWlsID0gbnVsbCwgZG9tYWluLCBjb25uZWN0aW9uO1xuXG4gIHZhciBpbnB1dF9lbWFpbF9kb21haW4gPSB0aGlzLm9wdGlvbnMuX2V4dHJhY3RFbWFpbERvbWFpbihlbWFpbF9pbnB1dC52YWwoKS50b0xvd2VyQ2FzZSgpKTtcblxuICB2YXIgY29ubl9vYmogPSB0aGlzLm9wdGlvbnMuX2ZpbmRDb25uZWN0aW9uQnlEb21haW4oXG4gICAgaW5wdXRfZW1haWxfZG9tYWluLFxuICAgIHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzXG4gICk7XG5cbiAgLy8gR2V0cyBzdWZmaXhcbiAgaWYgKCFjb25uX29iaikge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0aDBTdHJhdGVnaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9zaWduaW5XaXRoQXV0aDAocGFuZWwpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dF9lbWFpbF9kb21haW4gPT09ICdnbWFpbC5jb20nKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2lnbmluU29jaWFsKCdnb29nbGUtb2F1dGgyJywgbnVsbCwgbnVsbCwgcGFuZWwpO1xuICAgIH1cblxuICAgIG1lc3NhZ2UgPSB0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWduaW46c3RyYXRlZ3lEb21haW5JbnZhbGlkJyk7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgne2RvbWFpbn0nLCBpbnB1dF9lbWFpbF9kb21haW4pO1xuXG4gICAgdGhpcy5fc2hvd0Vycm9yKG1lc3NhZ2UpO1xuICAgIHRoaXMuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZG9tYWluID0gY29ubl9vYmouZG9tYWluO1xuICBlbWFpbCA9IGVtYWlsX2lucHV0LnZhbCgpO1xuICBjb25uZWN0aW9uID0gY29ubl9vYmoubmFtZTtcblxuICB2YWxpZCAmPSAoIWRvbWFpbiAmJiAhZW1haWxELmFkZENsYXNzKCdhMC1pbnZhbGlkJykpIHx8ICghIWRvbWFpbiAmJiAhIWVtYWlsRC5yZW1vdmVDbGFzcygnYTAtaW52YWxpZCcpKTtcblxuICAvLyBYWFg6IFdlIHNob3VsZCB0aHJvdyBzb21ldGhpbmcgaGVyZS4uLlxuICAvLyBUaGVyZSBoYXMgdG8gYmUgYW4gYWN0aW9uIVxuICBpZiAoIXZhbGlkKSB7IHJldHVybjsgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMucG9wdXAgJiYgJ3Rva2VuJyA9PT0gdGhpcy5vcHRpb25zLnJlc3BvbnNlVHlwZSkge1xuICAgIHJldHVybiB0aGlzLl9zaWduaW5Qb3B1cE5vUmVkaXJlY3QoY29ubmVjdGlvbiwgdGhpcy5vcHRpb25zLnBvcHVwQ2FsbGJhY2ssIHVuZGVmaW5lZCwgcGFuZWwpO1xuICB9XG5cbiAgbWVzc2FnZSA9IHRoaXMub3B0aW9ucy5pMThuLnQoJ3NpZ25pbjpsb2FkaW5nTWVzc2FnZScpLnJlcGxhY2UoJ3tjb25uZWN0aW9ufScsIGNvbm5lY3Rpb24pO1xuICB0aGlzLl9sb2FkaW5nUGFuZWwoeyBtb2RlOiAnc2lnbmluJywgbWVzc2FnZTogbWVzc2FnZSB9KTtcblxuICB2YXIgbG9naW5PcHRpb25zID0gXy5leHRlbmQoe30sIHtcbiAgICBjb25uZWN0aW9uOiBjb25uZWN0aW9uLFxuICAgIHBvcHVwOiB0aGlzLm9wdGlvbnMucG9wdXAsXG4gICAgcG9wdXBPcHRpb25zOiB0aGlzLm9wdGlvbnMucG9wdXBPcHRpb25zLFxuICAgIHNzbzogdGhpcy5vcHRpb25zLnNzbyxcbiAgfSwgdGhpcy5vcHRpb25zLmF1dGhQYXJhbXMpO1xuXG4gIHRoaXMuJGF1dGgwLmxvZ2luKGxvZ2luT3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIFNpZ25pbiBtZXRob2QgZm9yIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBjcmVkZW50aWFsc1xuICpcbiAqIEBwYXJhbSB7U2lnbmluUGFuZWx8U2lnbnVwUGFuZWx9IHBhbmVsXG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuX3NpZ25pbldpdGhBdXRoMCA9IGZ1bmN0aW9uIChwYW5lbCwgY29ubmVjdGlvbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICB2YXIgZW1haWxfaW5wdXQgPSBwYW5lbC5xdWVyeSgnaW5wdXRbbmFtZT1lbWFpbF0nKTtcbiAgdmFyIHBhc3N3b3JkX2lucHV0ID0gcGFuZWwucXVlcnkoJ2lucHV0W25hbWU9cGFzc3dvcmRdJyk7XG4gIHZhciB1c2VybmFtZSA9IGVtYWlsX2lucHV0LnZhbCgpO1xuICB2YXIgcGFzc3dvcmQgPSBwYXNzd29yZF9pbnB1dC52YWwoKTtcbiAgY29ubmVjdGlvbiA9IGNvbm5lY3Rpb24gfHwgb3B0aW9ucy5fZ2V0QXV0aDBDb25uZWN0aW9uKHVzZXJuYW1lKTtcblxuICB2YXIgbG9naW5PcHRpb25zID0ge1xuICAgIGNvbm5lY3Rpb246IGNvbm5lY3Rpb24ubmFtZSxcbiAgICB1c2VybmFtZTogY29ubmVjdGlvbi5kb21haW4gPyB1c2VybmFtZS5yZXBsYWNlKCdAJyArIGNvbm5lY3Rpb24uZG9tYWluLCAnJykgOiB1c2VybmFtZSxcbiAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgcG9wdXA6IHNlbGYub3B0aW9ucy5wb3B1cCxcbiAgICBwb3B1cE9wdGlvbnM6IHNlbGYub3B0aW9ucy5wb3B1cE9wdGlvbnMsXG4gICAgc3NvOiBzZWxmLm9wdGlvbnMuc3NvXG4gIH07XG5cbiAgLy8gV2UgbWlnaHQgYmUgbG9vc2luZyBzb21lIGluc3RhbmNlIHBhcmFtZXRlcnMgaGVyZVxuICAvLyBYWFg6IEFuIG9wdGlvbnMgbWV0aG9kIHRvIGdldCAkYXV0aDAgbG9naW4gb3B0aW9uc1xuICAvLyByZXNvbHZlZCBmcm9tIGV4aXN0aW5nIG9wdGlvbnMgY29tYmluZWQgd2l0aCBpbnN0YW5jZVxuICAvLyBtYXkgYmUgYSBnb29kIGlkZWEuLi5cbiAgbG9naW5PcHRpb25zID0gXy5leHRlbmQoe30sIGxvZ2luT3B0aW9ucywgdGhpcy5vcHRpb25zLmF1dGhQYXJhbXMpO1xuXG4gIHZhciBzdHJhdGVneSA9IG9wdGlvbnMuX2dldENsaWVudFN0cmF0ZWd5QnlDb25uZWN0aW9uTmFtZShjb25uZWN0aW9uLm5hbWUpIHx8IHt9O1xuXG4gIC8vIENsZWFuIGVycm9yIGNvbnRhaW5lclxuICB0aGlzLl9zaG93RXJyb3IoKTtcbiAgdGhpcy5fZm9jdXNFcnJvcigpO1xuXG4gIGlmICh0aGlzLm9wdGlvbnMucG9wdXAgJiYgdGhpcy5vcHRpb25zLnNzbyAmJiAndG9rZW4nID09PSB0aGlzLm9wdGlvbnMucmVzcG9uc2VUeXBlKSB7XG4gICAgLy9UaGlzIHdpbGwgdXNlIHdpbmNoYW4gZXRjLi4uXG4gICAgcmV0dXJuIHRoaXMuX3NpZ25pblBvcHVwTm9SZWRpcmVjdChjb25uZWN0aW9uLm5hbWUsIHRoaXMub3B0aW9ucy5wb3B1cENhbGxiYWNrLCBsb2dpbk9wdGlvbnMsIHBhbmVsKTtcbiAgfVxuXG4gIC8vIFRPRE86IEhhbmRsZSBzc28gY2FzZSB3aXRob3V0IHBvcHVwXG4gIHZhciBtZXNzYWdlID0gc3RyYXRlZ3kubmFtZSAhPT0gJ2F1dGgwJyA/IC8vIGRvbnQgc2hvdyBsb2FkaW5nIG1lc3NhZ2UgZm9yIGRiQ29ubmVjdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWduaW46bG9hZGluZ01lc3NhZ2UnKS5yZXBsYWNlKCd7Y29ubmVjdGlvbn0nLCBjb25uZWN0aW9uLm5hbWUpIDogJyc7XG5cbiAgdGhpcy5fbG9hZGluZ1BhbmVsKHsgbW9kZTogJ3NpZ25pbicsIG1lc3NhZ2U6IG1lc3NhZ2UgfSk7XG5cbiAgdGhpcy4kYXV0aDAubG9naW4obG9naW5PcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFlcnIpIHJldHVybjtcblxuICAgIC8vIGRpc3BsYXkgYHBhbmVsYFxuICAgIHNlbGYuc2V0UGFuZWwocGFuZWwpO1xuXG4gICAgLy8gZGlzcGxheSBlcnJvcnNcbiAgICBzZWxmLl9mb2N1c0Vycm9yKGVtYWlsX2lucHV0KTtcbiAgICBzZWxmLl9mb2N1c0Vycm9yKHBhc3N3b3JkX2lucHV0KTtcblxuICAgIGlmIChlcnIuc3RhdHVzICE9PSA0MDEpIHtcbiAgICAgIHNlbGYuX3Nob3dFcnJvcihlcnIubWVzc2FnZSB8fCBzZWxmLm9wdGlvbnMuaTE4bi50KCdzaWduaW46c2VydmVyRXJyb3JUZXh0JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLl9zaG93RXJyb3Ioc2VsZi5vcHRpb25zLmkxOG4udCgnc2lnbmluOndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dCcpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBTaWduaW4gbWV0aG9kIGZvciBzb2NpYWwgY29ubmVjdGlvbnNcbiAqXG4gKiBAcGFyYW0ge0V2ZW50fFN0cmluZ30gZVxuICogQHBhcmFtIHtTdHJpbmd9IGNvbm5lY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBhdXRoUGFyYW1zXG4gKiBAcGFyYW0ge1NpZ25pblBhbmVsfFNpZ251cFBhbmVsfSBwYW5lbFxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9zaWduaW5Tb2NpYWwgPSBmdW5jdGlvbiAoZSwgY29ubmVjdGlvbiwgZXh0cmFQYXJhbXMsIHBhbmVsKSB7XG4gIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgfHwgZS5kZWxlZ2F0ZVRhcmdldCB8fCBlLnRhcmdldCB8fCBlO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBvcHRpb25zID0gcGFuZWwub3B0aW9ucztcbiAgdmFyIHN0cmF0ZWd5TmFtZSA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gdGFyZ2V0IDogdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zdHJhdGVneScpO1xuICB2YXIgc3RyYXRlZ3kgPSBvcHRpb25zLl9nZXRDbGllbnRTdHJhdGVneUJ5TmFtZShzdHJhdGVneU5hbWUpO1xuXG4gIHZhciBjb25uZWN0aW9uTmFtZSA9IGNvbm5lY3Rpb24gfHwgc3RyYXRlZ3kuY29ubmVjdGlvbnNbMF0ubmFtZTtcblxuICAvLyB1c2UgYXV0aFBhcmFtc1xuICB2YXIgZXh0cmEgPSBzZWxmLm9wdGlvbnMuYXV0aFBhcmFtcztcblxuICBpZiAoZXh0cmEuY29ubmVjdGlvbl9zY29wZXMpIHtcbiAgICAvLyBpZiBubyBjb25uZWN0aW9uX3Njb3BlIHdhcyBzZXQgZm9yIHRoZSBjb25uZWN0aW9uIHdlIGFyZSBvayB3aXRoIHNlbmRpbmcgdW5kZWZpbmVkXG4gICAgZXh0cmEuY29ubmVjdGlvbl9zY29wZSA9IGV4dHJhLmNvbm5lY3Rpb25fc2NvcGVzW2Nvbm5lY3Rpb25OYW1lXTtcbiAgfVxuXG4gIGlmIChzdHJhdGVneSkge1xuICAgIC8vIElmIHdlIGFyZSBpbiBwb3B1cCBtb2RlIGFuZCByZXNwb25zZVR5cGUgPT0gJ3Rva2VuJyB3YXMgc3BlY2lmaWVkXG4gICAgLy8gd2UgbmVlZCB0byBwYXNzIGEgY2FsbGJhY2suXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wb3B1cCAmJiAndG9rZW4nID09PSB0aGlzLm9wdGlvbnMucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0aGlzLl9zaWduaW5Qb3B1cE5vUmVkaXJlY3QoY29ubmVjdGlvbk5hbWUsIHNlbGYub3B0aW9ucy5wb3B1cENhbGxiYWNrLCBleHRyYVBhcmFtcywgcGFuZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9naW5PcHRpb25zID0gXy5leHRlbmQoe30sIHtcbiAgICAgICAgY29ubmVjdGlvbjogY29ubmVjdGlvbk5hbWUsXG4gICAgICAgIHBvcHVwOiBzZWxmLm9wdGlvbnMucG9wdXAsXG4gICAgICAgIHBvcHVwT3B0aW9uczogc2VsZi5vcHRpb25zLnBvcHVwT3B0aW9ucyxcbiAgICAgICAgc3NvOiBzZWxmLm9wdGlvbnMuc3NvXG4gICAgICB9LCBzZWxmLm9wdGlvbnMuYXV0aFBhcmFtcywgZXh0cmFQYXJhbXMpO1xuXG4gICAgICB0aGlzLiRhdXRoMC5sb2dpbihsb2dpbk9wdGlvbnMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJbnZva2UgYGF1dGgwLmpzYCBzaWduaW4gd2l0aCBwb3B1cCBwYXJhbWV0ZXJzXG4gKiBhbmQgY2FsbCBgcG9wdXBDYWxsYmFja2Agb24gY29tcGxldGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY29ubmVjdGlvbk5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBvcHVwQ2FsbGJhY2tcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdXRoUGFyYW1zXG4gKiBAcGFyYW0ge1NpZ25pblBhbmVsfFNpZ251cFBhbmVsfSBwYW5lbFxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLl9zaWduaW5Qb3B1cE5vUmVkaXJlY3QgPSBmdW5jdGlvbiAoY29ubmVjdGlvbk5hbWUsIHBvcHVwQ2FsbGJhY2ssIGV4dHJhUGFyYW1zLCBwYW5lbCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBlbWFpbF9pbnB1dCA9IHBhbmVsLnF1ZXJ5KCdpbnB1dFtuYW1lPWVtYWlsXScpO1xuICB2YXIgcGFzc3dvcmRfaW5wdXQgPSBwYW5lbC5xdWVyeSgnaW5wdXRbbmFtZT1wYXNzd29yZF0nKTtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gIHZhciBjYWxsYmFjayA9IHBvcHVwQ2FsbGJhY2sgfHwgb3B0aW9ucy5wb3B1cENhbGxiYWNrO1xuXG4gIGV4dHJhUGFyYW1zID0gZXh0cmFQYXJhbXMgfHwge307XG5cbiAgdmFyIGxvZ2luT3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCB7XG4gICAgICAgIGNvbm5lY3Rpb246IGNvbm5lY3Rpb25OYW1lLFxuICAgICAgICBwb3B1cDogc2VsZi5vcHRpb25zLnBvcHVwLFxuICAgICAgICBwb3B1cE9wdGlvbnM6IHNlbGYub3B0aW9ucy5wb3B1cE9wdGlvbnMsXG4gICAgICAgIHNzbzogc2VsZi5vcHRpb25zLnNzb1xuICAgICAgfSwgb3B0aW9ucy5hdXRoUGFyYW1zLCBleHRyYVBhcmFtcyk7XG5cbiAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiBjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcignUG9wdXAgbW9kZSBuZWVkcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGFmdGVyIGF1dGhlbnRpY2F0aW9uIHN1Y2Nlc3Mgb3IgZmFpbHVyZS4nKTtcbiAgfVxuXG4gIC8vIENsZWFuIGVycm9yIGNvbnRhaW5lclxuICB0aGlzLl9zaG93RXJyb3IoKTtcbiAgdGhpcy5fZm9jdXNFcnJvcigpO1xuXG4gIC8vIHNldCBsb2FkaW5nIG1lc3NhZ2VcbiAgLy8gdW5sZXNzIGl0J3MgYSAvcm8gY2FsbCBmb3IgdXNlcm5hbWUvZW1haWwgYW5kIHBhc3N3b3JkXG4gIHZhciBtZXNzYWdlID0gbnVsbCA9PSBsb2dpbk9wdGlvbnMudXNlcm5hbWUgPyB0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWduaW46cG9wdXBDcmVkZW50aWFscycpIDogbnVsbDtcbiAgdGhpcy5fbG9hZGluZ1BhbmVsKHsgbW9kZTogJ3NpZ25pbicsIG1lc3NhZ2U6IG1lc3NhZ2UgfSk7XG5cbiAgdGhpcy4kYXV0aDAubG9naW4obG9naW5PcHRpb25zLCBmdW5jdGlvbihlcnIsIHByb2ZpbGUsIGlkX3Rva2VuLCBhY2Nlc3NfdG9rZW4sIHN0YXRlKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgIGlmICghZXJyKSByZXR1cm4gY2FsbGJhY2suYXBwbHkoc2VsZiwgYXJncyksIHNlbGYuaGlkZSgpO1xuXG4gICAgLy8gZGlzcGxheSBzaWduaW5cbiAgICBzZWxmLnNldFBhbmVsKHBhbmVsKTtcblxuICAgIC8vIHJlbmRlciBlcnJvcnNcbiAgICBpZiAoZXJyLm1lc3NhZ2UgPT09ICdVc2VyIGNsb3NlZCB0aGUgcG9wdXAgd2luZG93Jykge1xuICAgICAgLy8gQ2xvc2VkIHdpbmRvd1xuICAgICAgc2VsZi5fc2hvd0Vycm9yKHNlbGYub3B0aW9ucy5pMThuLnQoJ3NpZ25pbjp1c2VyQ2xvc2VkUG9wdXAnKSk7XG4gICAgfSBlbHNlIGlmIChlcnIubWVzc2FnZSA9PT0gJ2FjY2Vzc19kZW5pZWQnKSB7XG4gICAgICAvLyBQZXJtaXNzaW9ucyBub3QgZ3JhbnRlZFxuICAgICAgc2VsZi5fc2hvd0Vycm9yKHNlbGYub3B0aW9ucy5pMThuLnQoJ3NpZ25pbjp1c2VyQ29uc2VudEZhaWxlZCcpKTtcbiAgICB9IGVsc2UgaWYgKGVyci5zdGF0dXMgIT09IDQwMSkge1xuICAgICAgc2VsZi5fc2hvd0Vycm9yKHNlbGYub3B0aW9ucy5pMThuLnQoJ3NpZ25pbjpzZXJ2ZXJFcnJvclRleHQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuX3Nob3dFcnJvcihzZWxmLm9wdGlvbnMuaTE4bi50KCdzaWduaW46d3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0JykpO1xuICAgICAgc2VsZi5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCk7XG4gICAgICBzZWxmLl9mb2N1c0Vycm9yKHBhc3N3b3JkX2lucHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJncyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXQgYGF1dGgwLmpzYCBpbnN0YW5jZSBjbGllbnRcbiAqXG4gKiBAcmV0dXJuIHtBdXRoMH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLmdldENsaWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuJGF1dGgwO1xufTtcblxuLyoqXG4gKiBQcm94eSBgYXV0aDAuanNgIGluc3RhbmNlIHRvIGBwYXJzZUhhc2hgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhhc2hcbiAqIEByZXR1cm4ge09iamVjdHxFcnJvcn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLnBhcnNlSGFzaCA9IGZ1bmN0aW9uIChoYXNoKSB7XG4gIHJldHVybiB0aGlzLiRhdXRoMC5wYXJzZUhhc2goaGFzaCk7XG59O1xuXG4vKipcbiAqIFByb3h5IGBhdXRoMC5qc2AgaW5zdGFuY2UgdG8gYGdldFByb2ZpbGVgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7QXV0aDBMb2NrfVxuICogQHB1YmxpY1xuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuZ2V0UHJvZmlsZSA9IGZ1bmN0aW9uICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgdGhpcy4kYXV0aDAuZ2V0UHJvZmlsZSh0b2tlbiwgY2FsbGJhY2spO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogSGFuZGxlIGBlYCB3aGVuIC5hMC1jbG9zZSBpcyBjbGlja2VkXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZVxuICogQHByaXZhdGVcbiAqL1xuXG5BdXRoMExvY2sucHJvdG90eXBlLm9uY2xvc2VjbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgc3RvcChlKTtcbiAgdGhpcy5oaWRlKCk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBgZWAgd2hlbiBrZXlwcmVzc2VkIEVTQ1xuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGVcbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDBMb2NrLnByb3RvdHlwZS5vbmVzY3ByZXNzZWQgPSBmdW5jdGlvbihlKSB7XG4gIGlmICgoZS53aGljaCA9PSAyNyB8fCBlLmtleWNvZGUgPT0gMjcpKSB0aGlzLmhpZGUoKTtcbn07XG5cbi8qKlxuICogU2V0IGZvY3VzIG9uIGZpcmlzdCBgaW5wdXRgIGlmIHN1cHBvcnRlZFxuICogYnV0IGF2b2lkIG1vYmllIG1lZGlhIHNjcmVlbnMgYW5kIGVtYmVkZWRcbiAqIGJ5IGRlZmF1bHRcbiAqXG4gKiBAcmV0dXJuIHtBdXRoMExvY2t9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwTG9jay5wcm90b3R5cGUuZm9jdXNJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5vcHRpb25zLl9mb2N1c0Rpc2FibGVkKCkpIHJldHVybiB0aGlzO1xuXG4gIHZhciBlbCA9IHRoaXMucXVlcnkoJ2lucHV0JykuZmlyc3QoKTtcbiAgdHJ5e1xuICAgIGVsLmZvY3VzKCk7XG4gIH0gY2F0Y2goZXJyKSB7fVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBQcml2YXRlIGhlbHBlcnNcbiAqL1xuXG4vKipcbiAqIEFkZCBhbmltYXRlIGNzcyBjbGFzcyB0byBzaGFrZSBgYTAtcGFuZWxgXG4gKiBvbiBlcnJvcm9ycy4uLiB3aXRoaW5nIHdpZGdldCdzIGAkY29udGFpbmVyYFxuICogKGJ5IGBjb250ZXh0YCkgZWxlbWVudC4uLlxuICpcbiAqIEBwYXJhbSB7Tm9kZUVsZW1lbnR9IGNvbnRleHRcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gYW5pbWF0aW9uX3NoYWtlKGNvbnRleHQpIHtcbiAgJCgnLmEwLXBhbmVsJywgY29udGV4dClcbiAgICAuYWRkQ2xhc3MoJ2EwLWVycm9ycycpXG4gICAgLmFkZENsYXNzKCdhMC1hbmltYXRlZCBhMC1zaGFrZScpO1xufVxuXG4vKipcbiAqIFJlc3RvcmUgYW5pbWF0ZSBjc3MgY2xhc3NlcyBzdG9wIHNoYWtpbmcgYGEwLXBhbmVsYFxuICogYWZ0ZXIgZXJyb3JzIHJlc2V0Li4uIHdpdGhpbmcgd2lkZ2V0J3MgYCRjb250YWluZXJgXG4gKiAoYnkgYGNvbnRleHRgKSBlbGVtZW50Li4uXG4gKlxuICogQHBhcmFtIHtOb2RlRWxlbWVudH0gY29udGV4dFxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBhbmltYXRpb25fc2hha2VfcmVzZXQoY29udGV4dCkge1xuICAkKCcuYTAtYW5pbWF0ZWQnLCBjb250ZXh0KVxuICAgIC5yZW1vdmVDbGFzcygnYTAtZXJyb3JzJylcbiAgICAucmVtb3ZlQ2xhc3MoJ2EwLWFuaW1hdGVkIGEwLXNoYWtlJyk7XG59XG5cbi8qKlxuICogUGFyc2UgYW5kIHJldHJpZXZlIHNob3cgcGFyYW1ldGVyc1xuICogYW5kIGludm9rZSBjYWxsYmFjayBhZnRlciBpdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRTaG93UGFyYW1zKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciByZWFsT3B0aW9ucyA9IG9wdGlvbnM7XG4gIHZhciByZWFsQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgIHJlYWxDYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgcmVhbE9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY2FsbGJhY2s6IHJlYWxDYWxsYmFjayxcbiAgICBvcHRpb25zOiByZWFsT3B0aW9uc1xuICB9O1xufTtcbiIsIi8qKlxuICogRXhwb3NlIGBiaW5kYFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gYmluZDtcblxuLyoqXG4gKiBCaW5kIGBmbmAgdG8gYG9iamBcbiAqL1xuZnVuY3Rpb24gYmluZChmbiwgb2JqKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaW5kZWQoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgfVxufVxuIiwidmFyIHNpenpsZSAgICAgICA9IHJlcXVpcmUoJ3NpenpsZScpO1xudmFyIGJvbnpvICAgICAgID0gcmVxdWlyZSgnYm9uem8nKTtcbnZhciBiZWFuICAgICAgICA9IHJlcXVpcmUoJ2JlYW4nKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGJlYW5bbmFtZV0oZWwsIGV2ZW50LCBoYW5kbGVyKTtcbiAgICB9KTtcbiAgfVxufVxuXG5ib256by5hdWcoe1xuICBhMF9vbjogICAgZ2VuZXJhdGUoJ29uJyksXG4gIGEwX29mZjogICBnZW5lcmF0ZSgnb2ZmJyksXG4gIGEwX29uZTogICBnZW5lcmF0ZSgnb25lJyksXG5cbiAgLy8gYTBfb25jZSBpcyBhbiBhbGlhcyBvZiBvbmVcbiAgYTBfb25jZTogIGdlbmVyYXRlKCdvbmUnKVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlbGVjdG9yLCByb290KSB7XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGJvbnpvKHNpenpsZSgoc2VsZWN0b3IgfHwgJycpLCByb290KSk7XG4gIH1cblxuICByZXR1cm4gYm9uem8oc2VsZWN0b3IpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlID0gZnVuY3Rpb24gKGh0bWwpIHtcbiAgcmV0dXJuIGJvbnpvLmNyZWF0ZShodG1sKTtcbn07XG4iLCJ2YXIgbWQ1ID0gcmVxdWlyZSgnYmx1ZWltcC1tZDUnKS5tZDU7XG52YXIgcmVnZXggPSByZXF1aXJlKCcuLi9yZWdleCcpO1xudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG5cbi8qKlxuICogQ3JlYXRlIGdyYXZhdGFyIHVybFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVVSTChwYXJzZWRFbWFpbCkge1xuICAvLyBUcmltIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgcGFyc2VkRW1haWwgPSB0cmltKHBhcnNlZEVtYWlsKTtcblxuICAvLyBGb3JjZSBhbGwgY2hhcmFjdGVycyB0byBsb3dlci1jYXNlXG4gIHBhcnNlZEVtYWlsID0gcGFyc2VkRW1haWwudG9Mb3dlckNhc2UoKTtcblxuICAvLyBBcHBseSBNRDVcbiAgLy8gV2UgYXJlIG5vdCB1c2luZzpcbiAgLy8gIHZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3J5cHRvJykuY3JlYXRlSGFzaDtcbiAgLy8gIHZhciBtZDVzdW0gPSBjcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUocGFyc2VkRW1haWwpO1xuICAvLyBBcyBpdCBkb2VzIG5vdCB3b3JrIGluIElFOSA6KFxuXG4gIHJldHVybiAnaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci8nICsgbWQ1KHBhcnNlZEVtYWlsKSArICc/ZD00MDQnO1xuXG59XG5cbi8qKlxuICogU2V0cyB0aGUgaGVhZGVyIGltYWdlIHVzaW5nIGEgR3JhdmF0YXIgYXNvY2lhdGVkIHdpdGggYVxuICogZ2l2ZW4gbWFpbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gd2lkZ2V0XG4gKiBAcGFyYW0ge1N0cmluZ30gbWFpbFxuICpcbiAqIEBzdGF0aWNcbiAqIEBwdWJsaWNcbiAqL1xuLy8gVE9ETyBDaGFuZ2Ugd2lkZ2V0IHRvIGhlYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAod2lkZ2V0LCBtYWlsKSB7XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gcmVnZXguZW1haWxfcGFyc2VyLmV4ZWMobWFpbC50b0xvd2VyQ2FzZSgpKTtcblxuICAgIC8vIHZhbGlkIGVtYWlsPyBUaGVuIGZldGNoIGl0IGluIEdyYXZhdGFyXG4gICAgaWYgKHBhcnNlUmVzdWx0KSB7XG4gICAgICB2YXIgcGFyc2VkRW1haWwgPSBwYXJzZVJlc3VsdFswXTtcblxuICAgICAgd2lkZ2V0LnNldEltYWdlKGNyZWF0ZVVSTChwYXJzZWRFbWFpbCkpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZGdldC5yZXN0b3JlSW1hZ2UoKTtcbiAgICB9XG59O1xuXG4iLCJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgd2hpY2hBbmltYXRpb25FdmVudCA9IHJlcXVpcmUoJy4uL3N1cHBvcnRzLWFuaW1hdGlvbicpO1xudmFyIG9jcmVhdGUgPSByZXF1aXJlKCcuLi9vYmplY3QtY3JlYXRlJyk7XG5cbi8vIFhYWCBUaGlzIG51bWJlciBzaG91bGQgbWF0Y2ggdGhlIHZhbHVlIGluIGxlc3MgLmFuaW1hdGlvbi5tYXRjaCBkdXJhdGlvblxudmFyIEFOSU1BVElPTl9USU1FT1VUX01TID0gMzAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEljb25Db250YWluZXJWaWV3O1xuXG4vKipcbiAqXG4gKiBJY29uQ29udGFpbmVyVmlld1xuICpcbiAqIENsYXNzIHRoYXQgaGFuZGxlcyBhbGwgdGhlIGNvbXBsZXhpdHkgb2YgdGhlIGFuaW1hdGlvblxuICogYW5kIGRpc3BsYXkgb2YgaWNvbiBhbmQgYXZhdGFyIGluIGhlYWRlci5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSB3aWRnZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEljb25Db250YWluZXJWaWV3IChoZWFkZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5oZWFkZXIgPSBoZWFkZXI7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgdGhpcy5hbmltYXRpb25FbmQgPSB3aGljaEFuaW1hdGlvbkV2ZW50KCk7XG5cbiAgdGhpcy5xdWV1ZSA9IFtdO1xufVxuXG4vKipcbiAqIEluaGVyaXQgZnJvbSBgRXZlbnRFbWl0dGVyYFxuICovXG5cbkljb25Db250YWluZXJWaWV3LnByb3RvdHlwZSA9IG9jcmVhdGUoRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogUXVlcnkgZm9yIGVsZW1lbnRzIGF0IGB0aGlzLmhlYWRlci5lbGAgY29udGV4dFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7Qm9uem9BdWdtZW50ZWR9XG4gKiBAcHVibGljXG4gKi9cblxuSWNvbkNvbnRhaW5lclZpZXcucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMuaGVhZGVyLnF1ZXJ5KHNlbGVjdG9yKTtcbn1cblxuSWNvbkNvbnRhaW5lclZpZXcucHJvdG90eXBlLmF2YXRhciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5xdWVyeSgnLmEwLWF2YXRhcicpO1xufVxuXG5JY29uQ29udGFpbmVyVmlldy5wcm90b3R5cGUuaW1nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnF1ZXJ5KCcuYTAtaW1hZ2UgaW1nJyk7XG59XG5cbkljb25Db250YWluZXJWaWV3LnByb3RvdHlwZS5pbWdDb250YWluZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucXVlcnkoJy5hMC1pbWFnZScpO1xufVxuXG4vLyBUT0RPIFJlZmFjdG9yIG1lISBJJ20gaWRlbnRpY2FsIHRvIF9oaWRlXG5JY29uQ29udGFpbmVyVmlldy5wcm90b3R5cGUuX3Nob3cgPSBmdW5jdGlvbiAoZWwsIGNiKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZighZWwuaGFzQ2xhc3MoJ2EwLWhpZGUnKSkge1xuICAgIHJldHVybiBjYigpO1xuICB9XG5cbiAgLy8gSUUgOSA6KFxuICBpZiAoIXNlbGYuYW5pbWF0aW9uRW5kKXtcbiAgICBlbC5yZW1vdmVDbGFzcygnYTAtaGlkZScpO1xuICAgIHJldHVybiBjYigpO1xuICB9XG5cbiAgZWwucmVtb3ZlQ2xhc3MoJ2EwLWFuaW1hdGVkIGEwLWZhc3QgYTAtZmxpcEluWCBhMC1mbGlwT3V0WCcpO1xuICBlbC5hMF9vbmNlKHNlbGYuYW5pbWF0aW9uRW5kLCBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlQ2xhc3MoJ2EwLWFuaW1hdGVkIGEwLWZhc3QgYTAtZmxpcEluWCBhMC1mbGlwT3V0WCcpO1xuICAgIGNiKCk7XG4gIH0pO1xuICBlbC5hZGRDbGFzcygnYTAtYW5pbWF0ZWQgYTAtZmFzdCBhMC1mbGlwSW5YJyk7XG4gIGVsLnJlbW92ZUNsYXNzKCdhMC1oaWRlJyk7XG59O1xuXG5JY29uQ29udGFpbmVyVmlldy5wcm90b3R5cGUuX2hpZGUgPSBmdW5jdGlvbiAoZWwsIGNiKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZihlbC5oYXNDbGFzcygnYTAtaGlkZScpKSB7XG4gICAgcmV0dXJuIGNiKCk7XG4gIH1cblxuICAvLyBJRSA5IDooXG4gIGlmICghc2VsZi5hbmltYXRpb25FbmQpe1xuICAgIGVsLmFkZENsYXNzKCdhMC1oaWRlJyk7XG4gICAgcmV0dXJuIGNiKCk7XG4gIH1cblxuICBlbC5yZW1vdmVDbGFzcygnYTAtYW5pbWF0ZWQgYTAtZmFzdCBhMC1mbGlwSW5YIGEwLWZsaXBPdXRYJyk7XG4gIGVsLmEwX29uY2Uoc2VsZi5hbmltYXRpb25FbmQsIGZ1bmN0aW9uICgpIHtcbiAgICBlbC5yZW1vdmVDbGFzcygnYTAtYW5pbWF0ZWQgYTAtZmFzdCBhMC1mbGlwT3V0WCBhMC1mbGlwSW5YJyk7XG4gICAgZWwuYWRkQ2xhc3MoJ2EwLWhpZGUnKTtcblxuICAgIGNiKCk7XG4gIH0pO1xuICBlbC5hZGRDbGFzcygnYTAtYW5pbWF0ZWQgYTAtZmFzdCBhMC1mbGlwT3V0WCcpO1xufTtcblxuSWNvbkNvbnRhaW5lclZpZXcucHJvdG90eXBlLl9zaG93SWNvbiA9IGZ1bmN0aW9uIChjYikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzLl9zaG93KHRoaXMuaW1nQ29udGFpbmVyKCksIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLmVtaXQoJ2ljb24gc2hvd24nKTtcbiAgICBjYigpO1xuICB9KTtcbn07XG5cbkljb25Db250YWluZXJWaWV3LnByb3RvdHlwZS5fc2hvd0F2YXRhciA9IGZ1bmN0aW9uIChjYikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzLl9zaG93KHRoaXMuYXZhdGFyKCksIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLmVtaXQoJ2F2YXRhciBzaG93bicpO1xuICAgIGNiKCk7XG4gIH0pO1xufTtcblxuSWNvbkNvbnRhaW5lclZpZXcucHJvdG90eXBlLl9oaWRlSWNvbiA9IGZ1bmN0aW9uIChjYikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzLl9oaWRlKHRoaXMuaW1nQ29udGFpbmVyKCksIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLmVtaXQoJ2ljb24gaGlkZGVuJyk7XG4gICAgY2IoKTtcbiAgfSk7XG59O1xuXG5JY29uQ29udGFpbmVyVmlldy5wcm90b3R5cGUuX2hpZGVBdmF0YXIgPSBmdW5jdGlvbiAoY2IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gdGhpcy5faGlkZSh0aGlzLmF2YXRhcigpLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdhdmF0YXIgaGlkZGVuJyk7XG4gICAgY2IoKTtcbiAgfSk7XG59O1xuXG5JY29uQ29udGFpbmVyVmlldy5wcm90b3R5cGUuX29uRXJyb3IgPSBjYWxsYmFja2lmeShmdW5jdGlvbiAoY2IsIHNlbGYpIHtcbiAgY2xlYXJUaW1lb3V0KHNlbGYudGltZXIpO1xuICBzZWxmLmltZygpLmEwX29mZignbG9hZCcpO1xuICBzZWxmLmltZygpLmEwX29mZignZXJyb3InKTtcblxuICBzZWxmLmltZ0NvbnRhaW5lcigpLnJlbW92ZUNsYXNzKCdhMC1ncmF2YXRhcicpO1xuXG4gIHNlbGYuX2hpZGVJY29uKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VsZi5vcHRpb25zLmljb24pIHtcbiAgICAgIHNlbGYuaW1nKCkuYXR0cignc3JjJywgc2VsZi5vcHRpb25zLmljb24pO1xuICAgICAgc2VsZi5fc2hvd0ljb24oY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLl9zaG93QXZhdGFyKGNiKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbkljb25Db250YWluZXJWaWV3LnByb3RvdHlwZS5fb25Mb2FkID0gY2FsbGJhY2tpZnkoZnVuY3Rpb24gKGNiLCBzZWxmKSB7XG4gIGNsZWFyVGltZW91dChzZWxmLnRpbWVyKTtcbiAgc2VsZi5pbWcoKS5hMF9vZmYoJ2Vycm9yJyk7XG4gIHNlbGYuaW1nKCkuYTBfb2ZmKCdsb2FkJyk7XG5cbiAgc2VsZi5xdWVyeSgnLmEwLWltYWdlJykuYWRkQ2xhc3MoJ2EwLWdyYXZhdGFyJyk7XG5cbiAgc2VsZi5faGlkZUF2YXRhcihmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fc2hvd0ljb24oY2IpO1xuICB9KTtcbn0pO1xuXG5JY29uQ29udGFpbmVyVmlldy5wcm90b3R5cGUuX3Byb2Nlc3NRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5xdWV1ZS5sZW5ndGggfHwgdGhpcy5wcm9jZXNzaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSB0aGlzLnF1ZXVlLnBvcCgpO1xuXG4gIHNlbGYucHJvY2Vzc2luZyA9IHRydWU7XG4gIGVsZW1lbnQoZnVuY3Rpb24gKCkge1xuICAgIHNlbGYucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIHNlbGYuX3Byb2Nlc3NRdWV1ZSgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogU2hvdyBpbWFnZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwcml2YXRlXG4gKi9cblxuSWNvbkNvbnRhaW5lclZpZXcucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHVybCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5xdWV1ZS5wdXNoKGZ1bmN0aW9uIChjYikge1xuICAgIC8vIFVSTCBhbHJlYWR5IHNldCwgbm90aGluZyB0byBkbyBoZXJlIDopXG4gICAgaWYgKHNlbGYuaW1nKCkuYXR0cignc3JjJykgPT09IHVybCkge1xuICAgICAgcmV0dXJuIGNiKCk7XG4gICAgfVxuICAgIC8vIFhYWCBTdXBlciBoYWNrOiBzb21ldGltZXMgbmVpdGhlciBlcnJvciBub3IgbG9hZFxuICAgIC8vIGV4ZWN1dGVzLCB0aGF0J3Mgd2h5IHRoaXMgdGltZXIgaXMgcmVxdWlyZWQuXG4gICAgc2VsZi50aW1lciA9IHNldFRpbWVvdXQoY2IsIEFOSU1BVElPTl9USU1FT1VUX01TKTtcbiAgICBzZWxmLmltZygpLmEwX29uY2UoJ2Vycm9yJywgc2VsZi5fb25FcnJvcihjYiwgc2VsZikpO1xuICAgIHNlbGYuaW1nKCkuYTBfb25jZSgnbG9hZCcsIHNlbGYuX29uTG9hZChjYiwgc2VsZikpO1xuXG5cbiAgICBzZWxmLl9oaWRlSWNvbihmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmltZygpLmF0dHIoJ3NyYycsIHVybCk7XG4gICAgfSk7XG5cbiAgfSk7XG4gIHRoaXMuX3Byb2Nlc3NRdWV1ZSgpO1xufTtcblxuXG4vKipcbiAqIFJlc3RvcmUgaW1hZ2UgdG8gZGVmYXVsdCBpbWFnZVxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuSWNvbkNvbnRhaW5lclZpZXcucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5pY29uKSB7XG4gICAgdGhpcy5xdWV1ZS5wdXNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgaWYgKHNlbGYuaW1nKCkuYXR0cignc3JjJykgIT09IHNlbGYub3B0aW9ucy5pY29uKSB7XG4gICAgICAgIHNlbGYuX2hpZGVJY29uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLmltZ0NvbnRhaW5lcigpLnJlbW92ZUNsYXNzKCdhMC1ncmF2YXRhcicpO1xuICAgICAgICAgIHNlbGYuaW1nKCkuYXR0cignc3JjJywgc2VsZi5vcHRpb25zLmljb24pO1xuICAgICAgICAgIHNlbGYuX3Nob3dJY29uKGNiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlbGYuaW1nQ29udGFpbmVyKCkucmVtb3ZlQ2xhc3MoJ2EwLWdyYXZhdGFyJyk7XG4gICAgICBjYigpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucXVldWUucHVzaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgIHNlbGYuX2hpZGVJY29uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5pbWdDb250YWluZXIoKS5yZW1vdmVDbGFzcygnYTAtZ3JhdmF0YXInKTtcbiAgICAgICAgc2VsZi5fc2hvd0F2YXRhcihjYik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICB0aGlzLl9wcm9jZXNzUXVldWUoKTtcbn07XG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoY2IsIHNlbGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm4uYXBwbHkoc2VsZiwgW2NiLCBzZWxmXSk7XG4gICAgfTtcbiAgfTtcbn1cbiIsInZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyICQgPSByZXF1aXJlKCcuLi9ib256by1hdWdtZW50ZWQnKTtcbnZhciBJY29uQ29udGFpbmVyVmlldyA9IHJlcXVpcmUoJy4vaWNvbi1jb250YWluZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIZWFkZXJWaWV3O1xuXG52YXIgdmFsaWRPcHRpb25zUHJvcGVydGllcyA9IFsnaWNvbiddO1xuXG4vKipcbiAqIEhlYWRlclZpZXdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gd2lkZ2V0XG4gKiBAcGFyYW0ge09iamVjdH0gZWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEhlYWRlclZpZXcod2lkZ2V0LCBlbCwgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5lbCA9IGVsO1xuICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgdGhpcy5vcHRpb25zID0gXy5maWx0ZXIob3B0aW9ucywgZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIC8qanNoaW50IGJpdHdpc2U6IGZhbHNlKi9cbiAgICByZXR1cm4gISF+dmFsaWRPcHRpb25zUHJvcGVydGllcy5pbmRleE9mKG9wdGlvbik7XG4gICAgLypqc2hpbnQgYml0d2lzZTogdHJ1ZSovXG4gIH0pO1xuXG4gIHRoaXMuaW1hZ2UgPSBuZXcgSWNvbkNvbnRhaW5lclZpZXcodGhpcywgb3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gcmVkaXJlY3RFdmVudChzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpZGdldC5lbWl0KHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgZXZlbnRzID0gWyAnaWNvbiBzaG93bicsICdpY29uIGhpZGRlbicsICdhdmF0YXIgc2hvd24nLCAnYXZhdGFyIGhpZGRlbicgXTtcblxuICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgc2VsZi5pbWFnZS5vbihldmVudE5hbWUsIHJlZGlyZWN0RXZlbnQoZXZlbnROYW1lKSk7XG4gIH0pO1xuXG59XG5cbi8qKlxuICogU2V0IHdpZGdldCdzIGgxIHRvIGB0aXRsZWBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGl0bGVcbiAqIEBwcml2YXRlXG4gKi9cblxuSGVhZGVyVmlldy5wcm90b3R5cGUuc2V0VGl0bGUgPSBmdW5jdGlvbih0aXRsZSkge1xuICB2YXIgaDEgPSB0aGlzLnF1ZXJ5KCdoMScpO1xuICBoMS5odG1sKHRpdGxlKTtcbiAgaDEuY3NzKCdkaXNwbGF5JywgJycpO1xufTtcblxuLyoqXG4gKiBRdWVyeSBmb3IgZWxlbWVudHMgYXQgYHRoaXMuZWxgIGNvbnRleHRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4ge0JvbnpvQXVnbWVudGVkfVxuICogQHB1YmxpY1xuICovXG5cbkhlYWRlclZpZXcucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgaWYgKCF0aGlzLmVsKSB7IHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBnZXQgZWxlbWVudCBzaW5jZSBubyBgZWxgIGlzIHNldCB0byBsb2NhbCBjb250ZXh0Jyk7IH1cbiAgcmV0dXJuICQoc2VsZWN0b3IsIHRoaXMuZWwpO1xufTtcblxuLyoqXG4gKiBTZXQgaW1hZ2UgdG8gZGlzcGxheSBvbiBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybCBJbWFnZSB0byBkaXNwbGF5XG4gKiBAcHVibGljXG4gKi9cblxuSGVhZGVyVmlldy5wcm90b3R5cGUuc2V0SW1hZ2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgdGhpcy5pbWFnZS5zZXQodXJsKTtcbn07XG5cbi8qKlxuICogUmVzZXQgaW1hZ2UgdG8gZGlzcGxheSBvbiBoZWFkZXIgdG8gZGVmYXVsdC5cbiAqXG4gKiBAcHVibGljXG4gKi9cblxuSGVhZGVyVmlldy5wcm90b3R5cGUucmVzdG9yZUltYWdlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmltYWdlLnJlc2V0KCk7XG59O1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGUsIHJldGhyb3cpIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/ISM/W2EtekEtWjAtOV0rOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IGlkPVwiYTAtbG9ja1wiIGNsYXNzPVwiYTAtbG9jaycsIGVzY2FwZSgoMSwgIChsb2NhbHMgJiYgbG9jYWxzLm9wdGlvbnMudGhlbWUpID8gJyBhMC10aGVtZS0nICsgbG9jYWxzLm9wdGlvbnMudGhlbWUgOiAnJykpLCAnXCIgZGlyPVwiYXV0b1wiPlxcbiAgPGRpdiBjbGFzcz1cImEwLXNpZ25pblwiPlxcbiAgICA8ZGl2IGNsYXNzPVwiYTAtcG9wdXAgJywgZXNjYXBlKCgzLCAgKGxvY2FscyAmJiBsb2NhbHMuY29yZG92YSkgPyAnYTAtY29yZG92YScgOiAnJyApKSwgJyAnLCBlc2NhcGUoKDMsICAobG9jYWxzICYmIGxvY2Fscy5pb3MpID8gJ2EwLWlvcycgOiAnJyApKSwgJ1wiPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJhMC1vdmVybGF5XCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiJywgZXNjYXBlKCg1LCAgbG9jYWxzICYmIGxvY2Fscy5vcHRpb25zLmNvbnRhaW5lciA/ICcnIDogJ2EwLWNlbnRyaXgnICkpLCAnXCI+XFxuICAgICAgICAgICcgKyAoZnVuY3Rpb24oKXt2YXIgYnVmID0gW107XG4gYnVmLnB1c2goJzxkaXYgaWQ9XCJhMC1vbmVzdGVwXCIgY2xhc3M9XCJhMC1wYW5lbCBhMC1vbmVzdGVwIGEwLWZyZWUtc3Vic2NyaXB0aW9uXCI+XFxuICAgICcgKyAoZnVuY3Rpb24oKXt2YXIgYnVmID0gW107XG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1oZWFkZXIgYTAtdG9wLWhlYWRlciAnLCBlc2NhcGUoKDEsICBsb2NhbHMuZW1iZWRkZWQgPyAnYTAtaGlkZScgOiAnJykpLCAnXCI+XFxuXFxuICAgIDxkaXYgY2xhc3M9XCJhMC1iZy1ncmFkaWVudFwiPjwvZGl2PlxcblxcbiAgICA8ZGl2IGNsYXNzPVwiYTAtaWNvbi1jb250YWluZXJcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiYTAtaW1hZ2UgJywgZXNjYXBlKCg2LCAgb3B0aW9ucy5pY29uID8gJycgOiAnYTAtaGlkZScgKSksICdcIj5cXG4gICAgICAgICAgPGltZyBzcmM9XCInLCBlc2NhcGUoKDcsICBvcHRpb25zLmljb24gfHwgJycgKSksICdcIj5cXG4gICAgICA8L2Rpdj5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVwiYTAtYXZhdGFyICcsIGVzY2FwZSgoMTAsICAhb3B0aW9ucy5pY29uID8gJycgOiAnYTAtaGlkZScgKSksICdcIj5cXG4gICAgICAgICAgPGkgY2xhc3M9XCJhMC1hdmF0YXItZ3Vlc3QgYTAtaWNvbi1idWRpY29uLTJcIj48L2k+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgICA8aDE+JywgZXNjYXBlKCgxNSwgIG9wdGlvbnMuaTE4bi50KCdzaWduaW46dGl0bGUnKSApKSwgJzwvaDE+XFxuICAgIDxoMiBjbGFzcz1cImEwLWVycm9yIGEwLWhpZGVcIj4mbmJzcDs8L2gyPlxcbiAgICA8aDIgY2xhc3M9XCJhMC1zdWNjZXNzIGEwLWhpZGVcIj4mbmJzcDs8L2gyPlxcblxcbiAgICA8IS0tIGlmIHN0YW5kYWxvbmUsIHlvdSBzaG91bGRuXFwndCBiZSBhYmxlIHRvIGNsb3NlIHRoZSB3aWRnZXQgLS0+XFxuICAgIDxhIGNsYXNzPVwiYTAtY2xvc2UgYTAtaWNvbi1idWRpY29uLTMgJywgZXNjYXBlKCgyMCwgIG9wdGlvbnMuY2xvc2FibGUgPyAnJyA6ICdhMC1oaWRlJyApKSwgJ1wiIGhyZWY9XCIjXCI+PC9hPlxcbjwvZGl2PlxcbicpO1xucmV0dXJuIGJ1Zi5qb2luKCcnKTt9KSgpICsgJ1xcblxcbiAgICA8ZGl2IGNsYXNzPVwiYTAtbW9kZS1jb250YWluZXJcIj48L2Rpdj5cXG5cXG4gICAgJyArIChmdW5jdGlvbigpe3ZhciBidWYgPSBbXTtcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cXCdhMC1mb290ZXJcXCc+XFxuICAgIDxhIGhyZWY9XCJodHRwOi8vYXV0aDAuY29tXCIgdGFyZ2V0PVwiX25ld1wiIGNsYXNzPVwiYTAtbG9nb1wiPlxcbiAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJhZGdlXCI+PC9pPlxcbiAgICA8L2E+XFxuPC9kaXY+XFxuJyk7XG5yZXR1cm4gYnVmLmpvaW4oJycpO30pKCkgKyAnXFxuPC9kaXY+XFxuJyk7XG5yZXR1cm4gYnVmLmpvaW4oJycpO30pKCkgKyAnXFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGUsIHJldGhyb3cpIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/ISM/W2EtekEtWjAtOV0rOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCcnKTsxOyB2YXIgaWNvbl9jbGFzcyA9ICF1c2VfYmlnX2J1dHRvbnMgPyAnYTAtaWNvbicgOiAnYTAtYmxvY2snIDsgYnVmLnB1c2goJ1xcbjxkaXYgdGFiaW5kZXg9XCIwXCJcXG5cdFx0ZGF0YS1zdHJhdGVneT1cIicsIGVzY2FwZSgoMywgIG5hbWUgKSksICdcIlxcblx0XHR0aXRsZT1cIicsIGVzY2FwZSgoNCwgIHRpdGxlICkpLCAnXCJcXG5cdFx0Y2xhc3M9XCJhMC16b2NpYWwgJywgZXNjYXBlKCg1LCAgaWNvbl9jbGFzcyApKSwgJyBhMC0nLCBlc2NhcGUoKDUsICBjc3MgKSksICcgJywgZXNjYXBlKCg1LCAgbG9jYWxzLmltYWdlaWNvbiA/ICdhMC1pbWFnZS1pY29uJyA6ICcnICkpLCAnXCIgZGlyPVwibHRyXCI+XFxuXFxuXFxuXHQ8c3Bhbj4nLCBlc2NhcGUoKDgsICB0aXRsZSApKSwgJzwvc3Bhbj5cXG48L2Rpdj4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufSkiLCJ2YXIgZGljc19kYXRhID0ge1xuICAnYXInOiByZXF1aXJlKCcuLi8uLi9pMThuL2FyLmpzb24nKSxcbiAgJ2RhJzogcmVxdWlyZSgnLi4vLi4vaTE4bi9kYS5qc29uJyksXG4gICdkZSc6IHJlcXVpcmUoJy4uLy4uL2kxOG4vZGUuanNvbicpLFxuICAnZW4nOiByZXF1aXJlKCcuLi8uLi9pMThuL2VuLmpzb24nKSxcbiAgJ2VzJzogcmVxdWlyZSgnLi4vLi4vaTE4bi9lcy5qc29uJyksXG4gICdmcic6IHJlcXVpcmUoJy4uLy4uL2kxOG4vZnItRlIuanNvbicpLFxuICAnZnItRlInOiByZXF1aXJlKCcuLi8uLi9pMThuL2ZyLUZSLmpzb24nKSxcbiAgJ2hlJzogcmVxdWlyZSgnLi4vLi4vaTE4bi9oZS5qc29uJyksXG4gICdpdCc6IHJlcXVpcmUoJy4uLy4uL2kxOG4vaXQuanNvbicpLFxuICAnamEnOiByZXF1aXJlKCcuLi8uLi9pMThuL2phLmpzb24nKSxcbiAgJ25iLU5PJzogcmVxdWlyZSgnLi4vLi4vaTE4bi9uYi1OTy5qc29uJyksXG4gICdubCc6IHJlcXVpcmUoJy4uLy4uL2kxOG4vbmwtTkwuanNvbicpLFxuICAnbmwtTkwnOiByZXF1aXJlKCcuLi8uLi9pMThuL25sLU5MLmpzb24nKSxcbiAgJ3B0JzogcmVxdWlyZSgnLi4vLi4vaTE4bi9wdC5qc29uJyksXG4gICdwdC1CUic6IHJlcXVpcmUoJy4uLy4uL2kxOG4vcHQtQlIuanNvbicpLFxuICAncnUnOiByZXF1aXJlKCcuLi8uLi9pMThuL3J1Lmpzb24nKSxcbiAgJ3RsaCc6IHJlcXVpcmUoJy4uLy4uL2kxOG4vdGxoLmpzb24nKSxcbiAgJ3RyJzogcmVxdWlyZSgnLi4vLi4vaTE4bi90ci5qc29uJyksXG4gICd6aCc6IHJlcXVpcmUoJy4uLy4uL2kxOG4vemguanNvbicpXG59O1xuXG52YXIgZGVmYXVsdF9kaWN0ID0gZGljc19kYXRhWydlbiddO1xuXG5mdW5jdGlvbiBmaW5kUHJvcChvLCBzKSB7XG4gICAgcyA9IHMucmVwbGFjZSgvXFxbKFxcdyspXFxdL2csICc6JDEnKTsgLy8gY29udmVydCBpbmRleGVzIHRvIHByb3BlcnRpZXNcbiAgICBzID0gcy5yZXBsYWNlKC9eXFw6LywgJycpOyAgICAgICAgICAgLy8gc3RyaXAgYSBsZWFkaW5nIGRvdFxuICAgIHZhciBhID0gcy5zcGxpdCgnOicpO1xuICAgIHdoaWxlIChhLmxlbmd0aCkge1xuICAgICAgICB2YXIgbiA9IGEuc2hpZnQoKTtcbiAgICAgICAgaWYgKG4gaW4gbykge1xuICAgICAgICAgICAgbyA9IG9bbl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIERpY3Rpb25hcnkgKGRhdGEpIHtcbiAgdGhpcy5fZGF0YSA9IGRhdGE7XG59XG5cbkRpY3Rpb25hcnkucHJvdG90eXBlLnQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBmaW5kUHJvcCh0aGlzLl9kYXRhLCBrZXkpIHx8IGZpbmRQcm9wKGRlZmF1bHRfZGljdCwga2V5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmdldERpY3QgPSBmdW5jdGlvbiAoIGxhbmdPckRpY3QgKSB7XG5cbiAgaWYgKCFsYW5nT3JEaWN0KSB7XG4gICAgcmV0dXJuIG5ldyBEaWN0aW9uYXJ5KGRlZmF1bHRfZGljdCk7XG4gIH1cblxuICBpZiAoIHR5cGVvZiBsYW5nT3JEaWN0ID09PSAnc3RyaW5nJyApIHtcbiAgICB2YXIgZGljdCA9IGRpY3NfZGF0YVtsYW5nT3JEaWN0XSB8fCBkaWNzX2RhdGFbbGFuZ09yRGljdC5zcGxpdCgnLScpWzBdXTtcbiAgICByZXR1cm4gbmV3IERpY3Rpb25hcnkoZGljdCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEaWN0aW9uYXJ5KGxhbmdPckRpY3QpO1xuICB9XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgc3R5bGUgPSBcIiNhMC1sb2NrIGFydGljbGUsI2EwLWxvY2sgYXNpZGUsI2EwLWxvY2sgZGV0YWlscywjYTAtbG9jayBmaWdjYXB0aW9uLCNhMC1sb2NrIGZpZ3VyZSwjYTAtbG9jayBmb290ZXIsI2EwLWxvY2sgaGVhZGVyLCNhMC1sb2NrIGhncm91cCwjYTAtbG9jayBuYXYsI2EwLWxvY2sgc2VjdGlvbiwjYTAtbG9jayBzdW1tYXJ5e2Rpc3BsYXk6YmxvY2t9I2EwLWxvY2sgYXVkaW8sI2EwLWxvY2sgY2FudmFzLCNhMC1sb2NrIHZpZGVve2Rpc3BsYXk6aW5saW5lLWJsb2NrOypkaXNwbGF5OmlubGluZTsqem9vbToxfSNhMC1sb2NrIGF1ZGlvOm5vdChbY29udHJvbHNdKXtkaXNwbGF5Om5vbmU7aGVpZ2h0OjB9I2EwLWxvY2sgW2hpZGRlbl17ZGlzcGxheTpub25lfSNhMC1sb2NrIGh0bWx7Zm9udC1zaXplOjEwMCU7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCU7LW1zLXRleHQtc2l6ZS1hZGp1c3Q6MTAwJX0jYTAtbG9jayBhLCNhMC1sb2NrIGJ1dHRvbiwjYTAtbG9jayBkaXYsI2EwLWxvY2sgaDEsI2EwLWxvY2sgaDIsI2EwLWxvY2sgaHRtbCwjYTAtbG9jayBpbnB1dCwjYTAtbG9jayBzZWxlY3QsI2EwLWxvY2sgc3BhbiwjYTAtbG9jayB0ZXh0YXJlYXtmb250LWZhbWlseTpzYW5zLXNlcmlmfSNhMC1sb2NrIGJvZHl7bWFyZ2luOjB9I2EwLWxvY2sgYTpmb2N1c3tvdXRsaW5lOnRoaW4gZG90dGVkfSNhMC1sb2NrIGE6YWN0aXZlLCNhMC1sb2NrIGE6aG92ZXJ7b3V0bGluZTowfSNhMC1sb2NrIGg0e2ZvbnQtc2l6ZToxZW07bWFyZ2luOjEuMzNlbSAwfSNhMC1sb2NrIGg1e2ZvbnQtc2l6ZTouODNlbTttYXJnaW46MS42N2VtIDB9I2EwLWxvY2sgaDZ7Zm9udC1zaXplOi43NWVtO21hcmdpbjoyLjMzZW0gMH0jYTAtbG9jayBhYmJyW3RpdGxlXXtib3JkZXItYm90dG9tOjFweCBkb3R0ZWR9I2EwLWxvY2sgYiwjYTAtbG9jayBzdHJvbmd7Zm9udC13ZWlnaHQ6NzAwfSNhMC1sb2NrIGJsb2NrcXVvdGV7bWFyZ2luOjFlbSA0MHB4fSNhMC1sb2NrIGRmbntmb250LXN0eWxlOml0YWxpY30jYTAtbG9jayBtYXJre2JhY2tncm91bmQ6I2ZmMDtjb2xvcjojMDAwfSNhMC1sb2NrIHAsI2EwLWxvY2sgcHJle21hcmdpbjoxZW0gMH0jYTAtbG9jayBjb2RlLCNhMC1sb2NrIGtiZCwjYTAtbG9jayBwcmUsI2EwLWxvY2sgc2FtcHtmb250LWZhbWlseTptb25vc3BhY2Usc2VyaWY7X2ZvbnQtZmFtaWx5Oidjb3VyaWVyIG5ldycsbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19I2EwLWxvY2sgcHJle3doaXRlLXNwYWNlOnByZTt3aGl0ZS1zcGFjZTpwcmUtd3JhcDt3b3JkLXdyYXA6YnJlYWstd29yZH0jYTAtbG9jayBxe3F1b3Rlczpub25lfSNhMC1sb2NrIHE6YWZ0ZXIsI2EwLWxvY2sgcTpiZWZvcmV7Y29udGVudDonJztjb250ZW50Om5vbmV9I2EwLWxvY2sgc21hbGx7Zm9udC1zaXplOjgwJX0jYTAtbG9jayBzdWIsI2EwLWxvY2sgc3Vwe2ZvbnQtc2l6ZTo3NSU7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjpyZWxhdGl2ZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX0jYTAtbG9jayBzdXB7dG9wOi0uNWVtfSNhMC1sb2NrIHN1Yntib3R0b206LS4yNWVtfSNhMC1sb2NrIGRsLCNhMC1sb2NrIG1lbnUsI2EwLWxvY2sgb2wsI2EwLWxvY2sgdWx7bWFyZ2luOjFlbSAwfSNhMC1sb2NrIGRke21hcmdpbjowIDAgMCA0MHB4fSNhMC1sb2NrIG1lbnUsI2EwLWxvY2sgb2wsI2EwLWxvY2sgdWx7cGFkZGluZzowIDAgMCA0MHB4fSNhMC1sb2NrIG5hdiBvbCwjYTAtbG9jayBuYXYgdWx7bGlzdC1zdHlsZTpub25lO2xpc3Qtc3R5bGUtaW1hZ2U6bm9uZX0jYTAtbG9jayBpbWd7Ym9yZGVyOjA7LW1zLWludGVycG9sYXRpb24tbW9kZTpiaWN1YmljfSNhMC1sb2NrIHN2Zzpub3QoOnJvb3Qpe292ZXJmbG93OmhpZGRlbn0jYTAtbG9jayBmaWd1cmUsI2EwLWxvY2sgZm9ybXttYXJnaW46MH0jYTAtbG9jayBmaWVsZHNldHtib3JkZXI6MXB4IHNvbGlkIHNpbHZlcjttYXJnaW46MCAycHg7cGFkZGluZzouMzVlbSAuNjI1ZW0gLjc1ZW19I2EwLWxvY2sgbGVnZW5ke2JvcmRlcjowO3BhZGRpbmc6MDt3aGl0ZS1zcGFjZTpub3JtYWw7Km1hcmdpbi1sZWZ0Oi03cHh9I2EwLWxvY2sgYnV0dG9uLCNhMC1sb2NrIGlucHV0LCNhMC1sb2NrIHNlbGVjdCwjYTAtbG9jayB0ZXh0YXJlYXtmb250LXNpemU6MTAwJTttYXJnaW46MDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTsqdmVydGljYWwtYWxpZ246bWlkZGxlfSNhMC1sb2NrIGJ1dHRvbiwjYTAtbG9jayBpbnB1dHtsaW5lLWhlaWdodDpub3JtYWx9I2EwLWxvY2sgYnV0dG9uLCNhMC1sb2NrIGh0bWwgaW5wdXRbdHlwZT1idXR0b25dLCNhMC1sb2NrIGlucHV0W3R5cGU9cmVzZXRdLCNhMC1sb2NrIGlucHV0W3R5cGU9c3VibWl0XXstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2N1cnNvcjpwb2ludGVyOypvdmVyZmxvdzp2aXNpYmxlfSNhMC1sb2NrIGJ1dHRvbltkaXNhYmxlZF0sI2EwLWxvY2sgaW5wdXRbZGlzYWJsZWRde2N1cnNvcjpkZWZhdWx0fSNhMC1sb2NrIGlucHV0W3R5cGU9Y2hlY2tib3hdLCNhMC1sb2NrIGlucHV0W3R5cGU9cmFkaW9dey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjA7KmhlaWdodDoxM3B4Oyp3aWR0aDoxM3B4fSNhMC1sb2NrIGlucHV0W3R5cGU9c2VhcmNoXXstd2Via2l0LWFwcGVhcmFuY2U6dGV4dGZpZWxkOy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDstd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveH0jYTAtbG9jayBpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sI2EwLWxvY2sgaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uey13ZWJraXQtYXBwZWFyYW5jZTpub25lfSNhMC1sb2NrIGJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lciwjYTAtbG9jayBpbnB1dDo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MDtwYWRkaW5nOjB9I2EwLWxvY2sgdGV4dGFyZWF7b3ZlcmZsb3c6YXV0bzt2ZXJ0aWNhbC1hbGlnbjp0b3B9I2EwLWxvY2sgdGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlci1zcGFjaW5nOjB9I2EwLWxvY2sgYSwjYTAtbG9jayBidXR0b24sI2EwLWxvY2sgZm9vdGVyLCNhMC1sb2NrIGZvcm0sI2EwLWxvY2sgZm9ybSBsYWJlbCwjYTAtbG9jayBoMSwjYTAtbG9jayBoMiwjYTAtbG9jayBoMywjYTAtbG9jayBoZWFkZXIsI2EwLWxvY2sgaW5wdXRbdHlwZT1idXR0b25dLCNhMC1sb2NrIGlucHV0W3R5cGU9ZW1haWxdLCNhMC1sb2NrIGlucHV0W3R5cGU9cGFzc3dvcmRdLCNhMC1sb2NrIGlucHV0W3R5cGU9dGV4dF0sI2EwLWxvY2sgc3Bhbntmb250LXNtb290aDpuZXZlcjstd2Via2l0LWZvbnQtc21vb3RoaW5nOmF1dG87YWxpZ25tZW50LWJhc2VsaW5lOmJhc2VsaW5lOy13ZWJraXQtYW5pbWF0aW9uOm5vbmUgMCBlYXNlIDAgMSBub3JtYWw7LW1vei1hbmltYXRpb246bm9uZSAwIGVhc2UgMCAxIG5vcm1hbDthbmltYXRpb246bm9uZSAwIGVhc2UgMCAxIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbi1wbGF5LXN0YXRlOnJ1bm5pbmc7LW1vei1hbmltYXRpb24tcGxheS1zdGF0ZTpydW5uaW5nO2FuaW1hdGlvbi1wbGF5LXN0YXRlOnJ1bm5pbmc7YXBwZWFyYW5jZTpub3JtYWw7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGU7LW1vei1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGU7LW1zLWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTtiYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGU7YmFja2dyb3VuZDpub25lIDAgMCBhdXRvIHJlcGVhdCBzY3JvbGwgcGFkZGluZy1ib3ggdHJhbnNwYXJlbnQ7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7YmFzZWxpbmUtc2hpZnQ6YmFzZWxpbmU7YmluZGluZzpub25lO2JsZWVkOjZwdDtib29rbWFyay1sYWJlbDpjb250ZW50KCk7Ym9va21hcmstbGV2ZWw6bm9uZTtib29rbWFyay1zdGF0ZTpvcGVuO2Jvb2ttYXJrLXRhcmdldDpub25lO2JvcmRlcjowIG5vbmUgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJhZGl1czowO2JvdHRvbTphdXRvOy13ZWJraXQtYm94LWFsaWduOnN0cmV0Y2g7LXdlYmtpdC1hbGlnbi1pdGVtczpzdHJldGNoOy1tb3otYm94LWFsaWduOnN0cmV0Y2g7LW1zLWZsZXgtYWxpZ246c3RyZXRjaDtib3gtYWxpZ246c3RyZXRjaDtib3gtZGVjb3JhdGlvbi1icmVhazpzbGljZTstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstd2Via2l0LWZsZXgtZGlyZWN0aW9uOm5vcm1hbDstbW96LWJveC1vcmllbnQ6dmVydGljYWw7LW1vei1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246bm9ybWFsO2JveC1kaXJlY3Rpb246bm9ybWFsOy13ZWJraXQtYm94LWZsZXg6MDstd2Via2l0LWZsZXg6MDstbW96LWJveC1mbGV4OjA7LW1zLWZsZXg6MDtib3gtZmxleDowO2JveC1mbGV4LWdyb3VwOjE7Ym94LWxpbmVzOnNpbmdsZTstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjI7LXdlYmtpdC1vcmRlcjoxOy1tb3otYm94LW9yZGluYWwtZ3JvdXA6MjstbXMtZmxleC1vcmRlcjoxO2JveC1vcmRpbmFsLWdyb3VwOjE7Ym94LW9yaWVudDppbmxpbmUtYXhpczstd2Via2l0LWJveC1wYWNrOnN0YXJ0Oy13ZWJraXQtanVzdGlmeS1jb250ZW50OnN0YXJ0Oy1tb3otYm94LXBhY2s6c3RhcnQ7LW1zLWZsZXgtcGFjazpzdGFydDtib3gtcGFjazpzdGFydDstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy13ZWJraXQtYnJlYWstYWZ0ZXI6YXV0bzstbW96LWJyZWFrLWFmdGVyOmF1dG87YnJlYWstYWZ0ZXI6YXV0bzstd2Via2l0LWJyZWFrLWJlZm9yZTphdXRvOy1tb3otYnJlYWstYmVmb3JlOmF1dG87YnJlYWstYmVmb3JlOmF1dG87LXdlYmtpdC1icmVhay1pbnNpZGU6YXV0bzstbW96LWJyZWFrLWluc2lkZTphdXRvO2JyZWFrLWluc2lkZTphdXRvO2NhcHRpb24tc2lkZTp0b3A7Y2xlYXI6bm9uZTtjbGlwOmF1dG87Y29sb3I6aW5oZXJpdDtjb2xvci1wcm9maWxlOmF1dG87LXdlYmtpdC1jb2x1bW4tY291bnQ6YXV0bzstbW96LWNvbHVtbi1jb3VudDphdXRvO2NvbHVtbi1jb3VudDphdXRvOy13ZWJraXQtY29sdW1uLWZpbGw6YmFsYW5jZTstbW96LWNvbHVtbi1maWxsOmJhbGFuY2U7Y29sdW1uLWZpbGw6YmFsYW5jZTstd2Via2l0LWNvbHVtbi1nYXA6bm9ybWFsOy1tb3otY29sdW1uLWdhcDpub3JtYWw7Y29sdW1uLWdhcDpub3JtYWw7LXdlYmtpdC1jb2x1bW4tcnVsZTptZWRpdW0gbWVkaXVtICMxZjFmMWY7LW1vei1jb2x1bW4tcnVsZTptZWRpdW0gbWVkaXVtICMxZjFmMWY7Y29sdW1uLXJ1bGU6bWVkaXVtIG1lZGl1bSAjMWYxZjFmOy13ZWJraXQtY29sdW1uLXNwYW46MTstbW96LWNvbHVtbi1zcGFuOjE7Y29sdW1uLXNwYW46MTstd2Via2l0LWNvbHVtbi13aWR0aDphdXRvOy1tb3otY29sdW1uLXdpZHRoOmF1dG87Y29sdW1uLXdpZHRoOmF1dG87LXdlYmtpdC1jb2x1bW5zOmF1dG8gYXV0bzstbW96LWNvbHVtbnM6YXV0byBhdXRvO2NvbHVtbnM6YXV0byBhdXRvO2NvbnRlbnQ6bm9ybWFsO2NvdW50ZXItaW5jcmVtZW50Om5vbmU7Y291bnRlci1yZXNldDpub25lO2Nyb3A6YXV0bztjdXJzb3I6YXV0bztkaXJlY3Rpb246YXV0bztkaXNwbGF5OmF1dG87ZG9taW5hbnQtYmFzZWxpbmU6YXV0bztkcm9wLWluaXRpYWwtYWZ0ZXItYWRqdXN0OnRleHQtYWZ0ZXItZWRnZTtkcm9wLWluaXRpYWwtYWZ0ZXItYWxpZ246YmFzZWxpbmU7ZHJvcC1pbml0aWFsLWJlZm9yZS1hZGp1c3Q6dGV4dC1iZWZvcmUtZWRnZTtkcm9wLWluaXRpYWwtYmVmb3JlLWFsaWduOmNhcHMtaGVpZ2h0O2Ryb3AtaW5pdGlhbC1zaXplOmF1dG87ZHJvcC1pbml0aWFsLXZhbHVlOmluaXRpYWw7ZWxldmF0aW9uOmxldmVsO2VtcHR5LWNlbGxzOnNob3c7Zml0OmZpbGw7Zml0LXBvc2l0aW9uOjAgMDtmbG9hdDpub25lO2Zsb2F0LW9mZnNldDowIDA7Zm9udC1zaXplLWFkanVzdDpub25lO2ZvbnQtc3RyZXRjaDpub3JtYWw7Zm9udDpub3JtYWwgbm9ybWFsIDEwMCUgXFxcIkhlbHZldGljYSBOZXVlXFxcIixBcmlhbCxzYW5zLXNlcmlmO2dyaWQtY29sdW1uczpub25lO2dyaWQtcm93czpub25lO2hhbmdpbmctcHVuY3R1YXRpb246bm9uZTtoZWlnaHQ6YXV0bztoeXBoZW5hdGUtYWZ0ZXI6YXV0bztoeXBoZW5hdGUtYmVmb3JlOmF1dG87aHlwaGVuYXRlLWNoYXJhY3RlcjphdXRvO2h5cGhlbmF0ZS1saW5lczpuby1saW1pdDtoeXBoZW5hdGUtcmVzb3VyY2U6bm9uZTstd2Via2l0LWh5cGhlbnM6bWFudWFsOy1tb3otaHlwaGVuczptYW51YWw7LW1zLWh5cGhlbnM6bWFudWFsO2h5cGhlbnM6bWFudWFsO2ljb246YXV0bztpbWFnZS1vcmllbnRhdGlvbjphdXRvO2ltYWdlLXJlbmRlcmluZzphdXRvO2ltYWdlLXJlc29sdXRpb246bm9ybWFsO2lubGluZS1ib3gtYWxpZ246bGFzdDtsZWZ0OmF1dG87bGV0dGVyLXNwYWNpbmc6bm9ybWFsO2xpbmUtaGVpZ2h0Om5vcm1hbDtsaW5lLXN0YWNraW5nOmlubGluZS1saW5lLWhlaWdodCBleGNsdWRlLXJ1YnkgY29uc2lkZXItc2hpZnRzO2xpc3Qtc3R5bGU6ZGlzYyBvdXRzaWRlIG5vbmU7bWFyZ2luOjA7bWFya3M6bm9uZTttYXJxdWVlLWRpcmVjdGlvbjpmb3J3YXJkO21hcnF1ZWUtbG9vcDoxO21hcnF1ZWUtcGxheS1jb3VudDoxO21hcnF1ZWUtc3BlZWQ6bm9ybWFsO21hcnF1ZWUtc3R5bGU6c2Nyb2xsO21heC1oZWlnaHQ6bm9uZTttYXgtd2lkdGg6bm9uZTttaW4taGVpZ2h0OjA7bWluLXdpZHRoOjA7bW92ZS10bzpub3JtYWw7bmF2LWRvd246YXV0bztuYXYtaW5kZXg6YXV0bztuYXYtbGVmdDphdXRvO25hdi1yaWdodDphdXRvO25hdi11cDphdXRvO29wYWNpdHk6MTtvcnBoYW5zOjI7b3V0bGluZTppbnZlcnQgbm9uZSBtZWRpdW0haW1wb3J0YW50O291dGxpbmUtb2Zmc2V0OjA7b3ZlcmZsb3c6dmlzaWJsZTtvdmVyZmxvdy1zdHlsZTphdXRvO3BhZGRpbmc6MDtwYWdlOmF1dG87cGFnZS1icmVhay1hZnRlcjphdXRvO3BhZ2UtYnJlYWstYmVmb3JlOmF1dG87cGFnZS1icmVhay1pbnNpZGU6YXV0bztwYWdlLXBvbGljeTpzdGFydDstd2Via2l0LXBlcnNwZWN0aXZlOm5vbmU7LW1vei1wZXJzcGVjdGl2ZTpub25lOy1tcy1wZXJzcGVjdGl2ZTpub25lO3BlcnNwZWN0aXZlOm5vbmU7LXdlYmtpdC1wZXJzcGVjdGl2ZS1vcmlnaW46NTAlIDUwJTstbW96LXBlcnNwZWN0aXZlLW9yaWdpbjo1MCUgNTAlOy1tcy1wZXJzcGVjdGl2ZS1vcmlnaW46NTAlIDUwJTtwZXJzcGVjdGl2ZS1vcmlnaW46NTAlIDUwJTtwb3NpdGlvbjpzdGF0aWM7cHJlc2VudGF0aW9uLWxldmVsOjA7cHVuY3R1YXRpb24tdHJpbTpub25lO3F1b3Rlczpub25lO3JlbmRlcmluZy1pbnRlbnQ6YXV0bztyZXNpemU6bm9uZTtyaWdodDphdXRvO3JvdGF0aW9uOjA7cm90YXRpb24tcG9pbnQ6NTAlIDUwJTtydWJ5LWFsaWduOmF1dG87cnVieS1vdmVyaGFuZzpub25lO3J1YnktcG9zaXRpb246YmVmb3JlO3J1Ynktc3Bhbjpub25lO3NpemU6YXV0bztzdHJpbmctc2V0Om5vbmU7dGFibGUtbGF5b3V0OmF1dG87dGV4dC1hbGlnbjphdXRvO3RleHQtYWxpZ24tbGFzdDpzdGFydDt0ZXh0LWRlY29yYXRpb246bm9uZTt0ZXh0LWVtcGhhc2lzOm5vbmU7dGV4dC1oZWlnaHQ6YXV0bzt0ZXh0LWluZGVudDowO3RleHQtanVzdGlmeTphdXRvO3RleHQtb3V0bGluZTowO3RleHQtc2hhZG93Om5vbmU7dGV4dC10cmFuc2Zvcm06bm9uZTt0ZXh0LXdyYXA6bm9ybWFsO3RvcDphdXRvOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7LW1vei10cmFuc2Zvcm06bm9uZTstbXMtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmU7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCUgMDstbW96LXRyYW5zZm9ybS1vcmlnaW46NTAlIDUwJSAwOy1tcy10cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCUgMDt0cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCUgMDstd2Via2l0LXRyYW5zZm9ybS1zdHlsZTpmbGF0Oy1tb3otdHJhbnNmb3JtLXN0eWxlOmZsYXQ7LW1zLXRyYW5zZm9ybS1zdHlsZTpmbGF0O3RyYW5zZm9ybS1zdHlsZTpmbGF0Oy13ZWJraXQtdHJhbnNpdGlvbjphbGwgMCBlYXNlIDA7LW1vei10cmFuc2l0aW9uOmFsbCAwIGVhc2UgMDt0cmFuc2l0aW9uOmFsbCAwIGVhc2UgMDt1bmljb2RlLWJpZGk6bm9ybWFsO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lO3Zpc2liaWxpdHk6dmlzaWJsZTt3aGl0ZS1zcGFjZTpub3JtYWw7d2hpdGUtc3BhY2UtY29sbGFwc2U6Y29sbGFwc2U7d2lkb3dzOjI7d2lkdGg6YXV0bzt3b3JkLWJyZWFrOm5vcm1hbDt3b3JkLXNwYWNpbmc6bm9ybWFsO3dvcmQtd3JhcDpub3JtYWw7ei1pbmRleDphdXRvO2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoZW5hYmxlZD1mYWxzZSl9QC13ZWJraXQta2V5ZnJhbWVzIGFwcGVhcntmcm9te29wYWNpdHk6MH10b3tvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBmYWRlaW57ZnJvbXtvcGFjaXR5Oi4zfXRve29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIHNob3dQYW5lbHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45NSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZTNkKDAsMCwwKX19QC13ZWJraXQta2V5ZnJhbWVzIHNob3dQYW5lbHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45NSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZTNkKDAsMCwwKX19QC1tcy1rZXlmcmFtZXMgc2hvd1BhbmVsezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjk1KSB0cmFuc2xhdGUzZCgwLDAsMCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlM2QoMCwwLDApfX1Aa2V5ZnJhbWVzIHNob3dQYW5lbHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45NSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZTNkKDAsMCwwKX19QC1tb3ota2V5ZnJhbWVzIGhpZGVQYW5lbHswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUzZCgwLDAsMCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjk4KSB0cmFuc2xhdGUzZCgwLDAsMCl9fUAtd2Via2l0LWtleWZyYW1lcyBoaWRlUGFuZWx7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45OCkgdHJhbnNsYXRlM2QoMCwwLDApfX1ALW1zLWtleWZyYW1lcyBoaWRlUGFuZWx7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45OCkgdHJhbnNsYXRlM2QoMCwwLDApfX1Aa2V5ZnJhbWVzIGhpZGVQYW5lbHswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUzZCgwLDAsMCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjk4KSB0cmFuc2xhdGUzZCgwLDAsMCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbCwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IGEuYTAtem9jaWFse2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpsZWZ0O3RleHQtZGVjb3JhdGlvbjpub25lO3doaXRlLXNwYWNlOm5vd3JhcDstbW96LXVzZXItc2VsZWN0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjA7bWFyZ2luLWJvdHRvbTo2cHg7Y3Vyc29yOnBvaW50ZXI7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4ycyBlYXNlOy1tb3otdHJhbnNpdGlvbjpvcGFjaXR5IC4ycyBlYXNlO3RyYW5zaXRpb246b3BhY2l0eSAuMnMgZWFzZX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWw6aG92ZXJ7b3BhY2l0eToxfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbCBzcGFuLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgYS5hMC16b2NpYWwgc3Bhbnt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc2l6ZToxMXB4O2xpbmUtaGVpZ2h0OjQwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZy1sZWZ0OjQlO3dpZHRoOjg2JTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRyYW5zaXRpb246YWxsIC4ycyBlYXNlOy1tb3otdHJhbnNpdGlvbjphbGwgLjJzIGVhc2U7dHJhbnNpdGlvbjphbGwgLjJzIGVhc2V9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtc3RyYXRlZ3kgZGl2LmEwLXpvY2lhbCBzcGFue3RleHQtdHJhbnNmb3JtOmxvd2VyY2FzZTtmb250LXNpemU6MTJweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWw6aG92ZXIgc3BhbiwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IGEuYTAtem9jaWFsLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgYS5hMC16b2NpYWw6aG92ZXIgc3BhbntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjIpfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbDpiZWZvcmV7Zm9udDoxNHB4IHpvY2lhbDtmb250LXdlaWdodDo0MDA7ZmxvYXQ6bGVmdDtkaXNwbGF5OmlubGluZS1ibG9jaztsaW5lLWhlaWdodDo0MHB4O3dpZHRoOjE2JTtjdXJzb3I6cG9pbnRlcjt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjMpOy13ZWJraXQtdHJhbnNpdGlvbjphbGwgLjJzIGVhc2U7LW1vei10cmFuc2l0aW9uOmFsbCAuMnMgZWFzZTt0cmFuc2l0aW9uOmFsbCAuMnMgZWFzZX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWw6YWN0aXZlLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbDpmb2N1c3tvdXRsaW5lOjA7b3BhY2l0eTouNH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtaWNvbntvdmVyZmxvdzpoaWRkZW47d2hpdGUtc3BhY2U6bm93cmFwfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1pY29uOmJlZm9yZXstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7Ym9yZGVyOjB9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtc3RyYXRlZ3l7bWFyZ2luOjEwcHggMH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtYW1hem9uOmJlZm9yZXtjb250ZW50OlxcXCJhXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZHJvcGJveDpiZWZvcmV7Y29udGVudDpcXFwiZFxcXCI7Y29sb3I6IzFmNzVjY30jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZmFjZWJvb2s6YmVmb3Jle2NvbnRlbnQ6XFxcImZcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1naXRodWI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFwwMEU4XFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZ21haWw6YmVmb3Jle2NvbnRlbnQ6XFxcIm1cXFwiO2NvbG9yOnJlZH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZ29vZ2xlOmJlZm9yZXtjb250ZW50OlxcXCJHXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZ29vZ2xlcGx1czpiZWZvcmV7Y29udGVudDpcXFwiK1xcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLWd1ZXN0OmJlZm9yZXtjb250ZW50OlxcXCI/XFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtaWU6YmVmb3Jle2NvbnRlbnQ6XFxcIjZcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1saW5rZWRpbjpiZWZvcmV7Y29udGVudDpcXFwiTFxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLW9wZW5pZDpiZWZvcmV7Y29udGVudDpcXFwib1xcXCI7Y29sb3I6I2ZmOTIxZH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtcGF5cGFsOmJlZm9yZXtjb250ZW50OlxcXCIkXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtc3RhY2tvdmVyZmxvdzpiZWZvcmV7Y29udGVudDpcXFwiXFxcXDAwRUNcXFwiO2NvbG9yOiNmZjdhMTV9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXR3aXR0ZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlRcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC12azpiZWZvcmV7Y29udGVudDpcXFwiTlxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXdpbmRvd3M6YmVmb3Jle2NvbnRlbnQ6XFxcIldcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC15YWhvbzpiZWZvcmV7Y29udGVudDpcXFwiWVxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLW9mZmljZTM2NTpiZWZvcmV7Y29udGVudDpcXFwiV1xcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXRoaXJ0eXNldmVuc2lnbmFsczpiZWZvcmV7Y29udGVudDpcXFwiYlxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXNhbGVzZm9yY2U6YmVmb3Jle2NvbnRlbnQ6XFxcIipcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC13YWFkOmJlZm9yZXtjb250ZW50OlxcXCJXXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtYm94OmJlZm9yZXtjb250ZW50OlxcXCJ4XFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtYW9sOmJlZm9yZXtjb250ZW50OlxcXCJsXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtcmVucmVuOmJlZm9yZXtjb250ZW50OlxcXCJyXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtYmFpZHU6YmVmb3Jle2NvbnRlbnQ6XFxcInVcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1maXRiaXQ6YmVmb3Jle2NvbnRlbnQ6XFxcIiNcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC15YW5kZXg6YmVmb3Jle2NvbnRlbnQ6XFxcIiZcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC13b3JkcHJlc3M6YmVmb3Jle2NvbnRlbnQ6XFxcIndcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1kd29sbGE6YmVmb3Jle2NvbnRlbnQ6XFxcIkRcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1zaG9waWZ5OmJlZm9yZXtjb250ZW50OlxcXCJzXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAteWFtbWVyOmJlZm9yZXtjb250ZW50OlxcXCIhXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtbWlpY2FyZDpiZWZvcmV7Y29udGVudDpcXFwibVxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXNvdW5kY2xvdWQ6YmVmb3Jle2NvbnRlbnQ6XFxcInRcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1ldmVybm90ZTpiZWZvcmV7Y29udGVudDpcXFwiblxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLWViYXk6YmVmb3Jle2NvbnRlbnQ6XFxcImVcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1zaGFyZXBvaW50OmJlZm9yZXtjb250ZW50OlxcXCJwXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtd2VpYm86YmVmb3Jle2NvbnRlbnQ6XFxcIlNcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1pbnN0YWdyYW06YmVmb3Jle2NvbnRlbnQ6XFxcImlcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC10aGVjaXR5OmJlZm9yZXtjb250ZW50OlxcXCJjXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtcGxhbm5pbmdjZW50ZXI6YmVmb3Jle2NvbnRlbnQ6XFxcInlcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1leGFjdDpiZWZvcmV7Y29udGVudDpcXFwiXFxcXGU5XFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtYW1hem9ue2JhY2tncm91bmQtY29sb3I6I2ZmYWQxZDtjb2xvcjojMDMwMDM3fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1kcm9wYm94e2JhY2tncm91bmQtY29sb3I6IzAwN2VlNTtjb2xvcjojZmZmfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1mYWNlYm9va3tiYWNrZ3JvdW5kLWNvbG9yOiM0ODYzYWV9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLWdpdGh1YntiYWNrZ3JvdW5kLWNvbG9yOiNlZWU7Y29sb3I6IzA1MDUwNX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtd29yZHByZXNze2JhY2tncm91bmQtY29sb3I6IzFlOGNiZTtjb2xvcjojZmZmfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1kd29sbGF7YmFja2dyb3VuZC1jb2xvcjojRjU4OTFGO2NvbG9yOiNmYmZiZmJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLWdtYWlse2JhY2tncm91bmQtY29sb3I6I2VmZWZlZjtjb2xvcjojMjIyfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1nb29nbGV7YmFja2dyb3VuZC1jb2xvcjojNGU2Y2Y3fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1nb29nbGVwbHVze2JhY2tncm91bmQtY29sb3I6I2RkNGIzOX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZ3Vlc3R7YmFja2dyb3VuZC1jb2xvcjojMWI0ZDZkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1pZXtiYWNrZ3JvdW5kLWNvbG9yOiMwMGExZDl9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLWxpbmtlZGlue2JhY2tncm91bmQtY29sb3I6IzAwODNhOH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtb3Blbmlke2JhY2tncm91bmQtY29sb3I6I2Y1ZjVmNTtjb2xvcjojMzMzfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1wYXlwYWx7YmFja2dyb3VuZC1jb2xvcjojZWVlO2NvbG9yOiMzMjY4OWF9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXR3aXR0ZXJ7YmFja2dyb3VuZC1jb2xvcjojNDZjMGZifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC12a3tiYWNrZ3JvdW5kLWNvbG9yOiM0NTY4OEV9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLW9mZmljZTM2NXtiYWNrZ3JvdW5kLWNvbG9yOiMwMEFDRUQ7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtd2FhZHtiYWNrZ3JvdW5kLWNvbG9yOiMwMEFERUY7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtdGhpcnR5c2V2ZW5zaWduYWxze2JhY2tncm91bmQtY29sb3I6IzZBQzA3MTtjb2xvcjojZmZmfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1ib3h7YmFja2dyb3VuZC1jb2xvcjojMjY3YmI2O2NvbG9yOiNmZmZ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXNhbGVzZm9yY2V7YmFja2dyb3VuZC1jb2xvcjojZWVlO2NvbG9yOnJlZH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtd2luZG93c3tiYWNrZ3JvdW5kLWNvbG9yOiMyNjcyRUM7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAteWFob297YmFja2dyb3VuZC1jb2xvcjojYTIwMGMyO2NvbG9yOiNmZmZ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLWFvbHtiYWNrZ3JvdW5kLWNvbG9yOiMwODYxQTg7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtcmVucmVue2JhY2tncm91bmQtY29sb3I6IzAwNTZCNTtjb2xvcjojZmZmfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1iYWlkdXtiYWNrZ3JvdW5kLWNvbG9yOiMyODMyRTE7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZml0Yml0e2JhY2tncm91bmQtY29sb3I6IzQ1QzJDNTtjb2xvcjojZmZmfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC15YW5kZXh7YmFja2dyb3VuZC1jb2xvcjpyZWQ7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtc2hvcGlmeXtiYWNrZ3JvdW5kLWNvbG9yOiM5Q0MyNEM7Y29sb3I6I2ZiZmJmYn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAteWFtbWVye2JhY2tncm91bmQtY29sb3I6IzAwNzJjNjtjb2xvcjojZmRmZGZkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1taWljYXJke2JhY2tncm91bmQtY29sb3I6I0M3RUFGRjtjb2xvcjojMzAzMDMwfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1zb3VuZGNsb3Vke2JhY2tncm91bmQtY29sb3I6I2ZmNDUwMH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtZXZlcm5vdGV7YmFja2dyb3VuZC1jb2xvcjojNmJiMTMwO2NvbG9yOiNmZmZ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLWViYXl7YmFja2dyb3VuZC1jb2xvcjojMDAwMDk4O2NvbG9yOiNmZmZ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXNoYXJlcG9pbnR7YmFja2dyb3VuZC1jb2xvcjojMDA3MkM2O2NvbG9yOiNmZmZ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXdlaWJve2JhY2tncm91bmQtY29sb3I6I2ZhZjZmMTtjb2xvcjojZTYxNjJkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1pbnN0YWdyYW17YmFja2dyb3VuZC1jb2xvcjojMjU1MzdCO2NvbG9yOiNmZmZ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXRoZWNpdHl7YmFja2dyb3VuZC1jb2xvcjojNzY3NTcxO2NvbG9yOiNkMWQxZDF9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9jaWFsLmEwLXBsYW5uaW5nY2VudGVye2JhY2tncm91bmQtY29sb3I6IzRlNGU0ZTtjb2xvcjojZDFkMWQxfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1leGFjdHtiYWNrZ3JvdW5kLWNvbG9yOiNFRDFDMjQ7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IGJ1dHRvbjotbW96LWZvY3VzLWlubmVye2JvcmRlcjowO3BhZGRpbmc6MH1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OnpvY2lhbDtzcmM6dXJsKGh0dHBzOi8vY2RuLmF1dGgwLmNvbS93Mi9mb250L3pvY2lhbC1yZWd1bGFyLXdlYmZvbnQuZW90KX1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OnpvY2lhbDtzcmM6dXJsKGRhdGE6YXBwbGljYXRpb24vZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGQwOUdSZ0FCQUFBQUFFemtBQXNBQUFBQVRKZ0FBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCUFV5OHlBQUFCQ0FBQUFHQUFBQUJnRHhNT0ZtTnRZWEFBQUFGb0FBQUEzQUFBQU53RW9RWDlaMkZ6Y0FBQUFrUUFBQUFJQUFBQUNBQUFBQkJuYkhsbUFBQUNUQUFBUjZRQUFFZWtyNXBsMUdobFlXUUFBRW53QUFBQU5nQUFBRFlHb0JtNmFHaGxZUUFBU2lnQUFBQWtBQUFBSkFsN0JhaG9iWFI0QUFCS1RBQUFBTFFBQUFDMHJ0c0ZJbXh2WTJFQUFFc0FBQUFBWEFBQUFGeHVzNEJVYldGNGNBQUFTMXdBQUFBZ0FBQUFJQUE3QVhKdVlXMWxBQUJMZkFBQUFVVUFBQUZGVnhtbTduQnZjM1FBQUV6RUFBQUFJQUFBQUNBQUF3QUFBQU1FQUFHUUFBVUFBQUtaQXN3QUFBQ1BBcGtDekFBQUFlc0FNd0VKQUFBQUFBQUFBQUFBQUFBQUFBQUFBd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQU93RHdQL0FBRUFEd0FCQUFBQUFBUUFBQUFBQUFBQUFBQUFBSUFBQUFBQUFBZ0FBQUFNQUFBQVVBQU1BQVFBQUFCUUFCQURJQUFBQUxnQWdBQVFBRGdBQkFDUUFKZ0FyQURBQVB3QkZBRWNBVEFCT0FGUUFWd0JaQUdjQWFRQnRBSEFBZFFCNUFPa0E3UC85Ly84QUFBQUFBQ0FBSmdBcUFEQUFQd0JFQUVjQVRBQk9BRk1BVmdCWkFHRUFhUUJzQUc4QWNnQjNBT2dBN1AvOS8vOEFBZi9qLytMLzMvL2IvODMveWYvSS84VC93LysvLzc3L3ZmKzIvN1gvcy8reS83SC9zUDlDLzBBQUF3QUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFILy93QVBBQUVBQUFBQUFBQUFBQUFDQUFBM09RRUFBQUFBQVFBQUFBQUFBQUFBQUFJQUFEYzVBUUFBQUFBQkFBQUFBQUFBQUFBQUFnQUFOemtCQUFBQUFBUUFHQUFiQStnRFV3QkRBR0lBZ1FDZ0FBQVRCaFlYSGdFWEhnRVhIZ0VYRGdFSERnRUhEZ0VuSWlZSERnRUhCaFlYRmpZM1BnRTNQZ0UzUGdFM1BnRTNOaVluSmdZSERnRUhEZ0VIRkFZSEF5NEJCeUlHQndVT0FRY09BUWNPQVFjT0FSVVVGaGNXTmpjK0FUYytBVGMrQVNjdUFRY1REZ0VIRGdFSERnRUhIZ0VYSGdFWEhnRVhIZ0VYRmpZM05pWW5KZ1lIQlFZVUZ4NEJGeDRCRng0QkZ4NEJOejRCTnpZbUp5NEJKeTRCSnlZaUJ4Z0JBZ01hTlJzYU5Sc0JCQUVFQ1FNSEZCRU9KUk1LRkFvTkVnSURGaElkUEIwV0pnNFRIQXNkT2g0ZE9oNEdFaElTSndnVUtSUVZLUlVDQXE0SEhCQVRIZ01ESVJFZkVSdzJHZzhkRFFJR0JnSUtGQW9XS1JVbVN5UVBDQWNISXhGZEtsTXBFaVFSQmd3RUFnVURDQkVKRmk4WEtFNG5FaHdDQXhZVEN4WUwvcmtFQWdRTEJoWXhHUnMzSFFnVkNnMFRBUUVPRFN0WkxoRWtFd1lMQlFNb0NSRUlRSUJCUUlCQkJBY0ZDUklLRXlRT0RBb0JBd01FRkEwU0lBTUVBZ2tIR3hJWk9SMUprVWxKa1VnVEpnWUhEeEUyYkRZMmF6WUNBd0lCdVE4U0FSa1NQQWtXQ3hNb0Znd1pEd1FJQlFJQ0FRRUVBZ2NRQ0JBbEZBb2tFQkFQQmY3d0JBb0lBd2dHQWdVR0F3VUNCQVlDQlFjQ0JBSUJBUm9TRWlFRUFRTUJyUUVKQWdjTUJoWW1FeE1uRWdZQkJBUVpEdzBiQmhZckVnY01Bd0VCQUFBQUFBWC85UC9sQkFRRGx3QXJBRndBZFFCOUFJVUFBQUVlQVJjVUJnY09BUWNPQVFjT0FRY0dKaWN1QVNjdUFTYzFQZ0UzUGdFM1BnRVhGalkzUGdFWEhnRVhBVDRCTno0Qk55WUdCdzRCQnc0Qkp5NEJKeTRCTno0Qk56NEJGeFkyTnk0QkJ3NEJCdzRCQndZV0Z4NEJGeDRCTnhNeU5qYytBVGMySmljdUFRY09BUWNPQVJVVUZoY2VBVE1ERVM0Qk5UNEJOeE1SSGdFWEZnWUhBOVFZRndFVUZSRVlBUU5DTmplVFZHQ3NSVVZoRmdRTkJnVU5BaHR2VFUyOWFSczdHaWhQSXlROUYvNXlSbTRtSmlrQk9oVUhDME14TW4xR1BXc25KeWNJQ2tFeE1YNUhMaDRDT0hrNk9tb3BMREFEQkNFbUpXZzlQSU5Bd2lwTEhCMGhBUUVqSGg1TUtTaEpIUndoSVJ3Y1N5b1lSVVFCUVVjeVBVZ0ZCRVpJQTBjZlF5TWpSeU1lUlNKWW9ENCtUd2dKS2pBdmpsb1BIUTV2Q2hNTGFKd3ZMeDBXQlFVSURRTUlDU2dmL09ZVVREWTJpRkFCRHl4SWNpWW1JUWtJUXpFd2RUcEpkeWNvSkFrSElTVVhCUkFSUXpJMmVqOC9mem81VXhjWEJ4SUJzUjhiRzBrcUtVMGVIaU1CQVNNZUhVc29La2tjR3lBQlovN0dEbEpBUEZBTy9zd0JLUVJIT3oxVUVnQU5BQ0QvNHdQZ0E0OEFEQUFaQUNZQU13QkFBRTBBV2dCbkFIUUFnUUNPQUpzQXFBQUFKUlFXTXpJMk56UW1CeUlHRlNVMEppTW1CaFVlQVRNV05qVWxGQll6UGdFM05DWWpKZ1lWQlJRV016STJOUzRCSXlJR0ZTRVVGak15TmpVdUFTTWlCaFVGTkNZakpnWUhGQll6TWpZM055SUdGeFFXTXpJMk5UWW1JeE15TmpVdUFRY2lCaFVlQVRNUk1qWTFOQ1lqSmdZVkZCWVhFelFtSXlJR0J4UVdNejRCTlFVVUZqTXlOalUwSmlNaUJoVUJEZ0VIRkJZek1qWTFMZ0VqQnpJMk5UUW1KeUlHRng0Qk13S0dLUjRkS2dFckhoMHBBVm9uSGg0ckFTa2RIaW4rcGlvZEhTb0JLaDBlS3YyYUtSMGVLZ0VxSFI4bkFtWXFIUjByQVNvZEh5ais5Q2NlSHlvQkxCMGNLUUdGSFNvQktoMGRLZ0VxSHdFZUtRRXFIQndyQVNrZEhTb3FIUndyS2gxSEtoMGNLZ0VySFJ3cS9xY29IUjBwS0IwZkp3RVNIaWdCS1IwZktRRXBIY3dlSnljZUhpc0JBU29kOEIwb0tCMGNLd0VvSHNnZkp3RXBIUndxQVNrZHlSMHBBU2tjSENvQktSN0lIU2txSFJ3b0p4NGNLaW9kSENnbkhnRWVLQUVvSGh3cUtCMUdLQjBkS1NnZEhpZ0JCeWtkSENrQktSMGNLUHplS1IwY0tBRXFIQndvQVFFT0hDa3BIQndxQVNnZEFSMG9LQjBjS2lnZUFkWUJKaDBjS1NnZEhDaUpKeDRkSmdFcEhCd29BQUFFQUFEL3hRUGRBOFVBSEFCQ0FGRUFZQUFBTnlFVE16STJOejRCTno0Qk56NEJOelkwSnk0Qkp5NEJKeTRCSXlFRE56TVRNekkyTno0Qk56NEJOejRCTnpZbUp4NEJCdzRCQnc0QkJ3NEJCdzRCS3dFRElRRTNNeklXRng0QkZ5NEJLd0VISXo4Qk14d0JCd1lVRlE0QkJ3NEJCd0FCQjBHN0lrRWRIamNhR1NvUkVCZ0lCd2NIR3hNVExCZ1lNUnIrUUdFTTNVQzhJa0FlSGpjYUdTb1JFQmdIQ3dZUkpSVU9CeGdSRUNvYUdUY2VIa0FqdkVEKytBRUlPSUFRSFF3TUVBUUhDUUdBSzFXQUhuVUJBUVlhRmhVdUdEVUJMd29LQ2g0VUZDOGJIRDRqS0VVZEhUQVVFeHdLQ1FuOEFESUJMZ29LQ2g0VUZDOGJIRDRqTVZjbUszQkZJejRiSEM4VUZCNEtDZ3IrMGdKTitna0pDUmdQQVFLN0FZZ0JBd0lDQXdFWkt4SVNFd0VBQUFBQ0FRTC82Z0sxQTVZQUl3QXpBQUFCTWhZVkVSUUdLd0VpSmpVUkl3TU9BU3NCSWlZM0V5NEJKeTRCTlRRMk56NEJPd0VERVNNaUJnY09BUlVVRmhjZUFUc0JBcWdHQndVRlN3UUZQYWtCQ0FWWEJ3Y0V1eVU3RXhRVktDTWlYRE9MVVQ0Y05SUVZHUnNXRmprZU13T1dCZ2Y4YXdRR0JnTUJVLzZ0QkFVTUNBRmFFVEloSVZBdlRuVW9KeWorQVFHdUdSb2JVenM0VUJrYUZ3QUNBQUQveGdRQUE4WUFQd0I1QUFBVEZCWVhFeDRCRng0Qk16STJOejRCTno0Qk55NEJKemNlQVJjZUFUTXlOamMrQVRVMEppY3VBU2N1QVNjdUFTY3VBU2N1QVRVME5qY0hEZ0VIRGdFVkJSUVdGeDRCRng0QkZ4NEJGUlFHQnpjK0FUYytBVFUwSmljRExnRW5MZ0VqSWdZSERnRUhEZ0VqSGdFWEJ5NEJKeTRCSXlJR0J3NEJGUUFCQWFnRERRc0tHQTBIRVFnSkZBc0xFQVV0U1IxUkZUWWdJRDRlRnlrU0VoSUpDUWtZRGc4YkRnMGNEa0ZoSUNFZ0lDREtEUlVJQ0FnQnJSWVdGVUlzT2w4a0pDUVlHSlVORlFnSUNBRUJxQU1OQ3dvWURRY1dEZzhrRmhZWEFqRmZMejhOTFNBZk9Ca1ZKeElTRWdMU0F3a0cvVUFORlFnSENRSUNBUVVFQXdRQ0R4OFF0eE1mREFzTURRd01JaGNPSEE0TkdBc0tFUWNIRFFVWlBpUWtWQzh4VmlVd0F3MExDaGdOTHhVbkVoSWdEeE00SlNWZE9TcE9KQ01ERFFzS0dBMERDUVlDd0EwVkNBZ0lBd01EQ1FjR0JnY2hHSzRPR0FrSkNRb0xDaDRVQUFBQUFBUUFBUC9EQkx3RHd3QkpBSGNBa0FDZEFBQTNGQllYSGdFek1qWTNQZ0UzUGdFMU5DWW5MZ0VuTGdFbkxnRTFORFkzUGdFM1BnRTFOQ1luTGdFbk16Y2hJZ1lIRGdFVkZCWVhIZ0V6T2dFM0RnRVZGQllYSXlJR0J3NEJGVGMwTmpjK0FSY3lGaGNlQVJjZUFSY2VBUmNlQVJjZUFSY2VBUmNlQVJjZUFSVVVCZ2NPQVNNaUppY3VBVFVUSmpZM1BnRVhIZ0VYSGdFWEZnWUhEZ0VuTGdFbkxnRW5CVE1WTXpVek5TTTFJeFVqRlFBdkx5OTBSQ1JBSEIweEZTb3FEQXdNS3lBTkhBNE5Ed1lHQlJrVExTME5EZzBtR1dWSC9zSTJYeW9xS2lFaUlsYzFDZzhGQ0FnVkZqaEFiaTR1TFhNaUl5SlJMaE1vRkFRTkNna01CQVFLQndjS0F3TUhCQVFIQWdFRUFnSUNHeHdiV0QwdFNoNGVIa01GRFJJU01COGZOeG9aSHdVRkRCSVNNQjhmTnhvWkh3WUNPY3cwemMwMHpIMHFReG9aR2drSUNSa1JJbEF1SXpvWEZ5MFdDaG9PRHhrS0RSVUpDQmdQSTFNd0h6Z2FHU1FKTXlNaklsRXZNVkloSWlFQkR4MFBHQ3dVSXlNaVVDMGlJam9aR1JnQkJnWURDUVlIQ1FJREJ3VUZDUU1FQ0FVRUNnVUZDd1VIRUFvbFBCY1dGeGtaR1R3akFqMG9ReHNiR2dFQkhSd2NSU2tvUkJ3Y0dnRUJIUjBkUmlrWnpzNHp6YzB6QUFYLzlmK29CQU1EdGdBSUFBc0FKQUE5QUZZQUFBRVhNd01qQXpNM015Y2pOd1UwSmljdUFTTWlCZ2NPQVJVVUZoY2VBVE15TmpjK0FUVUJNaFlYSGdFVkZBWUhEZ0VqSWlZbkxnRTFORFkzUGdFekJ6SVdGeDRCRlJRR0J3NEJJeUltSnk0Qk5UUTJOejRCTXdKVEdKbXlvTE9XRjZjZmFEUUNBMUZIUnIxc2E3MUhSbEpTUmtlOWEyeTlSa2RSL2Y1UmpUVTFQVDAxTlkxUlVZMDFOVDA5TlRXTlVRRkpnREF3Tnpjd01JQkpTWUF3TURjM01EQ0FTUUU0VGdIYS9pWk9aNnFhYkwxR1IxRlJSMGE5Ykd1OVIwWlNVa1pIdldzQmd6MDFOWTFSVVkwMU5UMDlOVFdOVVZHTk5UVTlKVGN3TDRCSlNZQXdNRGMzTURDQVNVbUFMekEzQUFBQUFBRUFBdi9GQXd3RFh3Qk1BQUEzRkJZWEhnRVhIZ0VYSGdFWEhnRTdBVG9CTnpZeU16STJOejRCTno0Qk56NEJOejRCTno0Qk56NEJOVFFtSnk0Qkp6NEJOVFFtSnk0Qkl5SUdCdzRCRlJRV0Z3NEJCdzRCQnc0QkZRSVRGQWtWRFFRTkNRVXRLU2hDR25zQkF3TUNCQUVCRXhRVEhRb0pHUkFRR1FrSkRBTUZCd0lsSlNRa0pWbzNLQ2NnSUI5TkxDeE1JQ0FnS0NrclRDQWdMUXdHQnBvakt3Z0lDd0lORmdnUEZ3Z0lDUUVCQXdJREJBSUNCZ1VFQ2djR0R3Z0lEZ1VITmk4M1ppNHVRQlFnVWpJclN4OGZIeDhmSDBvc01sTWdFRFVsSkZFc0ZpRUxBQUVBQVAvS0FuZ0R2d0IyQUFBM0ZCWVhIZ0UzUGdFL0FqSTJOejRCTno0Qk56NEJOejRCTno0Qk56NEJOVFFtSnk0Qkp5NEJKeTRCSnk0Qkp5NEJKeTRCSnk0Qkp5NEJKeTRCSnk0Qkp5NEJOVDRCTno0Qk5TNEJCdzRCRHdJT0FRY09BUWNPQVFjT0FRY09BUWNHRmhjZUFSY2VBUmNlQVJjT0FRY09BUWNPQVJVQUdCa1pReXdLR1JFa1hBRUxDd29TQ0JNZ0N3b2JFaEFZQ0FrT0JnY0hCQVFFQndVRURRa0tEZ1VGRVF3TURnUUNFQTRORWdRRURnb0tEQVFEQndNREFnRWhJQTBPQWcwS0RpMGRSekFHRHdrSkRBSUVGeE1QRmdZU0ZnTUVDQXdNS0J3RUh4b1JIQXNFUHpvTkhBOGRIV0FvUHhjV0RBb0NDd2dUS0FVRkJBZ0RDQTRHQkJBTENoUUtDaG9SRHlNVEVCNE9EeGdMQ2hjT0RSUUdCaE1ORFJFRUF4SVFEeFVGQkJRT0RoY0tDaGdPRHgwUEpqc1VCdzBGQ1FNRkNCUU5IeFlDQmdRRUJRRUNEUXNKRUFnU0xoMGRQU0FnUVNJRkpCOFRJeEFDSEJrRkR3b1RPU2NBQUFBREFBRC94Z05aQThZQXpnRGxBUFlBQUJNVUZoY2VBUmNlQVJjZUFSY2VBUmNlQVRzQlBnRS9BVDRCTlRRMk16SVdGUlFXRng0QkZ4NEJGeDRCRlJRR0J3NEJLd0VxQVNjdUFTY3VBU2N1QVRVK0FTY21OamMrQVRVbU5qYytBVEUwTmpzQk1qWTNQQUVuTGdFMVBBRTNQZ0UzUGdFM05pWW5KaUlyQVNvQkJ3NEJCdzRCQnc0QkZSUVdGeDRCTXpJMk56NEJOejRCTno0Qk56NEJOejRCTno0Qk56NEJOVFFtSnk0Qkp5NEJKeTRCSnk0Qkp5NEJJeW9CQnk0Qkp5NEJKeU1pQmdjT0FRY09BUjBCRmhRVkZBWUhEZ0VyQVNJR0J3NEJCdzRCRlRjK0FUYytBVHNCTWpZMU5DWTFORFkvQVNJd0ZRY1ZBVDRCTno0Qk93RWVBUlV1QVNjaUJnY0FBZ0lEREFrS0Vna0dFd3dsWlVFUUd3d0hEUk1GQ1FrSkFRSUJBUnNiRUQwdEV4NEpDZ2tJQ0FnbUhTRUVDd2dIQ1FJQ0JBSUNBZ0VCQVFFQ0F3TURBUVFGQkFVRkJSOERBd0VCQVFFQkFRRUJBUUVCQVFFQkFRSUNIUTBVQ0F3WERRd1FCUVVGRXhNVFN6Y1VIZ29LRmd3TEV3Y0hEZ2NIRGdnSERBWUZDZ1FCQWdNQ0FnUURBZ1VDQmhzV0VFSXlFaTRiQ3hnT0JCWVVGRElmRXhZYkJSSVpDQWNHQVFVR0JnMElZQThZQ1FrTkJRY0lCZ0lGQWcwZkVWOEZCUUVHQlFRQnZBSkdBZ2tJQnhjUEF4OGdFeWtYRFJjTEFvb0tHaEVVUkRBd1FoSVBGQVlRR0FnRUJBRU1EUmtiUFNNQkFRRUJNendMQlFvRkF4QU9EVFVuR1NBSUJ3WUNBUU1EQWdjRkJBd0lBd1lDQXdVQ0FRTUNBUUlCQVFFQkFRRUNBUVlGQlFrRkF3Y0VBd1lDQWdRQ0FRTUJBUUVCQndVR0V3NE5KUmNwTmc0TkRRRUJBUVFEQkF3SUNCVU9EU1FXRlRVaElFMHNEU1FYSGtzdUtFSWJHeWtPSENJSEJnd0dBZ01CR0NBSUJ3a0JBd01GRUFzS0ZnMDhEQllMQ0EwR0JRWUVCUVFLQ0FrZUZIb0JBZ0lGQmdVRktUWUxEaGdMQmdHNEF2N1hFQm9MQ2dvQkxDd0pDUUVCQWdBQUFBQURBQUQvd3dLV0E4TUFTUUI0QUprQUFEY1VGaGNlQVRNeU5qYytBVGMrQVRVMEppY3VBU2N1QVNjdUFUVTBOamMrQVRjK0FUVTBKaWN1QVNjek55RWlCZ2NPQVJVVUZoY2VBVE02QVRjT0FSVVVGaGNqSWdZSERnRVZOelEyTno0Qk93RXlGaGNlQVJjZUFSY2VBUmNlQVJjZUFSY2VBUmNlQVJjZUFSVVVCZ2NPQVNNaUppY3VBVFVUTGdFMU5EWTNQZ0U3QVI0QkZ4NEJGeDRCRlJRR0J3NEJLd0V1QVNjdUFTY0FMeTh2ZEVRa1FCd2RNUlVxS2d3TURDc2dEUndPRFE4R0JnVVpFeTB0RFE0TkpobGxSLzdDTmw4cUtpb2hJaUpYTlFvUEJRZ0lGUlk0UUc0dUxpMXpJaU1pVHl3RUV5Z1VCQTBLQ1F3RUJBb0hCd29EQXdjRUJBY0NBUVFDQWdJYkhCdFlQUzFLSGg0ZVF3RUJEZzRSTHgwRUh6Y2FHUjhGQVFFTkRoSXVIUVFmTnhvWkh3WjlLa01hR1JvSkNBa1pFU0pRTGlNNkZ4Y3RGZ29hRGc4WkNnMFZDUWdZRHlOVE1CODRHaGtrQ1RNakl5SlJMekZTSVNJaEFROGREeGdzRkNNaklsQXRJaUk2R1JnWUJnWURDUVlIQ1FJREJ3VUZDUU1FQ0FVRUNnVUZDd1VIRUFvbFBCY1dGeGtaR1R3akFqMElFUWdkTXhVYUdnRWRIQnhGS1FrUkNCMHpGaG9iQVIwZEhVWXBBQUFELy92L3lnUWdBOEFBR1FBZUFFMEFBQU1VRmhjZUFUc0JNalkzUGdFMU5DWW5MZ0VqSWdZSERnRVZFek1SSXhFaFBnRTFOalExUEFFbk5DWW5NeFVITXpVK0FUTXlGaGNlQVJjZUFSVVJJeEUwSmlNaUJnY09BUWNPQVJVUkl3VVJFaEV0SFFFZEx4SVJFaElTRVM0Y0hDOFNFaElONU9RQllRRUJBUUVCQWVRQkFTVm5RanBmSkJJYkNRa0o1RGs1RmlVT0R4VUlCQVRrQTBvWkt4RVFFaEVSRUNrWkd5d1JFQkVRRVJFcUd2eUFBcXo5VkUySlBEeG5LeXRFR1JvaUNHRUNBams1S0NjVE1SMGNReWIrZUFGdVRVME1EQXdkRWdvYkV2NkNBQUgvOXdCRkJOZ0RFZ0VuQUFBREZCWVhIZ0VYSGdFWEhnRVhIZ0VYSGdFWEhnRVhIZ0VYSGdFWEhnRVhIZ0V6TWpZM1BnRTNQZ0UzUGdFM05oWVhIZ0VYSGdFWEhnRVhIZ0VYTXo0Qk16SVdGeDRCTXpJMk56NEJOVFFtSnk0Qkp5NEJKeTRCSnk0Qkp5NEJKeTRCTlRRMk56NEJOejRCTno0Qk56NEJOejRCTno0Qk56NEJOVFFtSnk0Qkp5NEJKeVlpSXdZaUJ3WWlJeUltSnk0Qkt3RWlCZ2NPQVRVbUJnY09BVEVIRGdFSERnRUhEZ0VQQVE0QkJ3NEJJeTRCSnk0Qk5UUTJOelEyTno0Qk5TWTBOUzRCSnpZbUp5NEJNU2MwSmlNbUlqRWpJZ1lIRGdFSEhnRVhIZ0VYSGdFWEhnRVZIQUVIRGdFSEJpSW5JaVluTGdFbkxnRW5MZ0VuTGdFbkxnRW5MZ0VuTGdFbkxnRW5MZ0VuTGdFbkxnRW5LZ0VuS2dFSERnRWpLZ0VuSmlJckFTSUdCdzRCQndrQkFRRUZBd0lGQWdJR0JRUUZBaGd4R1JrMEd4WXBFeE0wSUNGSUtCTWpEaUlvQndRRUFnRUVCQVFQREFjTkNBY0xCUVFNQndjSUFpVkhJZ2NLRmc0SUV3c0xGZ3NOR3c0YUdoVVVGVGtsQVFZRkJRY0NBUVVFQXdVQ0FRSUNBd01HQXdNSkJnWUhBUVVURGc0WUNRa1NDQklTQVFJQ0J3VUZEUWdJRHdnSEVBb0tEUVVIR0JFTkdBb0tDeE1JQ0FnQkJnWUZCZ29ZTUJnQkJRVUVCZ0lNQkFjRkJBY0ZEUkFDQVFFQkFnSUNBUUlCQVFVRkJBY0tDZ29YRFE0TkRqWWZNaElTR1FnRURBZ0hEUVVGQ0FNSENBRUJFQThEQmdNREJnTUNCZ0lEQlFNREJBSUNCUUlDQkFFY01CUUJCZ1FEQmdJREJRUUVCZ1FHRUFvRkRBY0hEd2dRRXdNRkVRc0hEUVVKQmd3SUJ3MEZBdU1IRFFjSERnZ0hEQVVFRGdnSkN3TXdXaWtwVENJZEx4TVNJaEVRRkFVQ0Fnd05CeGtSRWg0TkRROENBUU1FQkFrRkJBMEpDQXNDS2pBR0FnTUJBUUVDQWdJRUZSRU1KaHNhUENJQkJRVUVCd0lDQmdVRUJ3UUVCd1FIRFFjSERBUUVEUWdJQ1FJR0dCRVNIUTBNR2c4ZUxRNEVCd01FQndJQ0F3RUJBUUVCQVFFQkFRTUVDZ2dFQkFvT0RRNFhORk1nQVFZSEJ3Z0NEQVFGQWdFRENCOFhDaFFKREJnTEJSc1ZFQnNMQkFZRURCWUpBZ2NGQlFVRkFRSUJCQVVGRXc0REJRTURCZ01FQ1FVT05TWUlFZ281UEFJQkFRTUNBZ1VDQWdZREJBWUNBZ1lGQkFVQ0tWUXFBZ3dJQ0EwRkJBc0ZCQWNDQXdRQkFRRUJBUUVCQWdJQ0JnUUFBQUFBQndBQS84QUU4UVBBQUZJQWZRQ2lBTWNBNUFFdkFXOEFBQk1VRmhjZUFSY2VBUmNlQVRNeU5qYytBVGMrQVRjK0FUVTBKaWN1QVNjdUFTY3VBU2NtTmpjK0FUVTBKaWN1QVNNaUJnOEJCaUluTGdFM1BnRTFOQ1luTGdFaklnWUhEZ0VIRGdFSERnRUhEZ0VWRnlZME5UUTJOejRCTno0Qk56NEJNeklXRng0QkZ4UVdGUlFHQnc0QkJ3NEJCdzRCSXlJbUp5NEJKeGNlQVJjZUFUTXlOamMrQVRjK0FUVTBKaWN1QVNjdUFTTWlCZ2NPQVFjT0FSVVVGaGMzTGdFMU5EWTNQZ0UzUGdFek1oWVhIZ0VYSGdFVkZBWUhEZ0VIRGdFaklpWW5MZ0VuTnpVME5qYytBVGMyTWhjZUFSY1dCZ2NPQVFjT0FTTWlKaWN1QVNjQkhnRVhIZ0V6T2dFM1BnRXpNaFlYSGdFWEhnRVhIZ0VWRkFZSEZRNEJGUlFXRng0QkZ4NEJNekkyTno0Qk56VStBVFUwSmljdUFTY3VBU2N1QVNNaUJnY09BUWNPQVJVVUZoVVhIZ0VYSGdFek9nRTNQZ0V6TWhZWEhnRVZGQVlIRGdFVkZCWVhIZ0VYSGdFek1qWTNQZ0UzUGdFMU5DWW5MZ0VuTGdFaklnWUhEZ0VIRGdFVkZCWVZBQ2NvSjJNOEhqNGZJRUVoUG5VM04xd2tKRGtWRlJVV0Z4WTNJQVVJQWdFRkFnSUJCQWdJQndnUU55WWxWeklLQkFrREJBRUJCd1lORGcwbUZ4VXhIUjQ5SGg4OEhpOUdHQmNZZ0FFVEZCWkJLaXBkTkJBZUR6eHJNRHBCQlFFdkx4bzdJU0ZJSnhBZUR6eHJMenRBQmFRT015WVJJeEVXTFJjb054RUhDQWtJRVRnbkRSd09HQzhYSlRVUUNRa0dCemtCQVFZRkJ4VU9CdzBHQncwSERBOERBUUlGQlFjWERnWU1CZ2NPQnd3UUE1RUJBZ0lJQmdVSkJRVUdBZ0VCQWdNSUJnSUZBZ0lHQWdVR0FnRklBZ3NJQmcwSEF3VUREUmdORWlRUkh6UVdGaHdIQWdJRkJnRUJBd0lFRGdvRUJ3UUdDd1lJREFNSUNRUUVDU2NmSDBrckdUTWFFU1FSQ2c4RkJBUUJLUUlKQ0FRTUJRSUZBZ1VMQlJBY0N3b01BZ0lCQVFJQ0JBd0lBd2NFQkFrRkJ3c0NCQVVCQWdVVURoazZJd2tUQ2drTkJRTURBUUVRTWxvbkp6c1VDZzRGQlFVUkVSQXNHaG81SUI4K0hpRTNGaFlmQ2dFREFnRUVCQU1KQlJRbEVBOGJDeFlWRlJRRUFRSUJDUWNWSlJBWUpBNE5Ed3dNRENBVkZUSWVNRndzTEZZcE1RUUpCUnc1R3g4ekZSVWFCUUVDR0JvZlVUUUVDUVV1VlNZVklRME1FQVFCQWhnYUgxSTBRQ0VzREFVR0NRb1JOU1VRSVJFU0lSRWZLZ3NFQXdvS0VESWhFaVFSRUI0UEZBTUdCQWtSQ0FzUUJRSURBd01FRWd3RUNBUUlFQWdORUFVQ0FnTURCUklOVVFZREJnTUVCd0lCQVFFSEJRUUpCUVVIQWdFQkFRRUNCd1VDZXdvUEJRUUVBUUlEQmdVS0lSZ1lPQ0FOR0F3VEl4SUJBd2dFQlFzR0NBd0RBUUVEQWdRT0NnRVlNaG9SSXhJc1RpSWlNQTRIQ0FNRUF3c0lCZ3dIQXdVRG9BZ05CUVFEQVFFQkRRNExHZzRHRFFjRUJnUUVDUVVIQ3dNQkFRTUNCQXdJREJrTUNCRUpGaVlSR3hzQ0FnSUpDQVVMQlFNRkFnQUFBQUFCQUFEL3RnVHNBN1lBWlFBQU54NEJGeDRCTXpJMk56NEJOejRCTno0Qk56NEJOejRCUFFFK0FUY09BUWMrQVRjT0FRY3VBU01pQmdjT0FSVVVGaGN1QVNjdUFTY3VBU2N1QVNjT0FSVVVGaGNlQVJjdUFTY1ZGQllYSGdFWERnRWpJaVluSGdFWEhnRVhEZ0VIRGdFaklpWW5BQzVmTVRKbk5TSkVJQ0EvSGp4bkt5dEtIeDh1RHc4UUowQVpKVWttS2prT0pWTXNKbDg0TlZ3bUpTY0VCQ2hOSlNWSUl5SkJIUjAyR0JJU0VBOFFLaHNmUEJzZUhSMUxMUkFqRWcwWUN3MHRJU0pMS2lOTUtDaFdMUThmRHlrZEt3NFBEZ1VHQlJBTEZqb2xKVlV2TDJNMU5HYzBJaHhFSmhBVUJSbEhMeFlnQ1NncUppWW1XelVOSGhFQ0RBb0tIQklTS1JnWU5oNGZRQ01pUFIwY0xoSUJFQThETGxNakpDd0pCQVVDQWljL0doa1pBUndwRGc0T0FRSUFBUUFBLzhZRWxnUEdBSXdBQUJNWFBnRTNQZ0UzTmpJWEhnRVhIZ0VWSGdFWEhnRVhIZ0VYSGdFWEhnRVhIZ0VYSGdFek1qWTNQZ0UzUGdFM1BnRTNQZ0UzUGdFM1BnRTFOQ1luTGdFbkppSWpJZ1lIRGdFSERnRUhQZ0V6TWhZWEhnRVhIZ0VWRkFZSERnRUhEZ0VqSWlZbkxnRW5MZ0VuTGdFbkxnRW5MZ0VuTGdFbkxnRW5MZ0VqSWdZUEFRNEJCdzRCQnc0QkJ3NEJCd0F3RGhvTERCSUlCd3dGQlFjQ0FRTUVFUTBNSVJRVUlRME1FUVVIRkF3TEhSRVJJeE1US0JZVExoc2JQeVVrUXlBZk94b2FKQWtEQkFvSkUwYzBCZzBHTGxnc0hDNFJFaFlHR1NvU0J3d0ZGaG9GQVFFTkRob3dGaFloRFFzVkNnb2FFUVFIQkFRSEF3TUhCUVFNQmdjUENBZ1dEUWdTQ2dZTkJoRUlHQkVRSmhVVU1Sd2NPQjBDc0Q4S0VnVUdCd0lCQVFFREFRRUNBUVVwSkNSbVEwTnBKaVl3Q2c4ZERnNFlDd3NMREEwTkloY1dQQ1lsVUNrcVlEWTNhalFRSUE4WkxSUXFMZ1FCSGg4VUx4c2JQQ0VORFFJQ0J5RWFCUXdIRmk0Wk1VMGRIQjBiR3hwYlFBNGtGeFlvRXhNbkZSWWtFQkFjREEwU0JRTURBUUVFQXdzSUNSVU9EU2thR1R3aEFBQUFBQVFBQVAvR0JPOER4Z0FoQUVNQVpRQ0hBQUEzUGdFM1BnRTNQZ0V6TWhZZkFSNEJGeDRCRnhNdUFTY3VBU01IRGdFSERnRUhOejRCTno0Qk56WXlNeklXSHdFZUFSY2VBUmNUTGdFbkxnRWpCdzRCQnc0QkJ3RWVBUmNlQVRNM1BnRTNQZ0UzRXc0QkJ3NEJCd1lpSXlJbUx3RXVBU2N1QVNjM0hnRVhIZ0V6Tno0Qk56NEJOeE1PQVFjT0FRY09BU01pSmk4QkxnRW5MZ0VuQUE4dEhSMHJEZzBXQ0JBaEVob05JeFlXS1JOcUZrazBIRFVhSWhFckdoa3RFUlVRTEI0ZEt3NE5GZ2dQSVJJYURTTVdGaWtUYWhaSk5CczJHaUVSS3hvYUxSRUJUUlpMTkJzMUdpSVJLeG9hTEJKckR5MGRIU3NPRFJZSUVDSVJHZzBpRnhZcEV4QVdTelFhTlJvaUVTd2FHaXdTYXhBc0hSMHJEZzBYQ0JBaEVSb05JaGNXS1JNMENoRUdCd1lCQVFFQkFnUUJDd2tKR0E0QmV4VWZDZ1VHQVFFSEJnVVFDbXdLRWdVR0J3RUJBUUlFQVFzSkNSY1BBWHdWSHdzRkJRRUJCZ1lHRHd2OGR4VWZDd1VGQWdFR0JRWVBDd0Y4Q2hFR0JnY0JBUUVDQkFFTENRa1lEbW9WSHdvR0JnSUJCZ1lHRUFzQmVnb1JCZ1lHQVFFQkFRSUVBZ3NJQ1JnT0FBTUFBQUNCQllBRHRRQnJBRzhBY3dBQUV6VStBVE1oT2dFWEhnRWRBUlFHQnc0Qkl3WWlJd2NPQVNjakV6Y2pMd0l1QVNjdUFUVTNJVG9CRng0QkZ4VVVCZzhCRGdFckFRNEJCdzRCRHdFT0FRY09BUjBCRkJZN0FUSVdGeDRCSFFFaE5UUTJNejRCT3dFK0FUYytBVDBCTkNZbkFTTXZBaTRCSnlVVEZ4TURGemNuQUFFRkJBSDRBUUlCQVFFQkFRRURBUUVCQVVZRUN3Y3E2ZFIyRWhjREFRSUNBUUVIQWNFQkFRRUJBUUVEQXhFRkNRV0lRV0lpSWlRREF3SUNBZ0VCQlFXVkFRSUNBUUg5OEFVRkVFZzZBd0VEQVFFQ0JnWCsybklUQXdVQ0JBSUV2U28rVmJCeEJIRURSUWdEQkFJQkFnSU9Bd1FDQWdNQkZnSURBZjdXeUFjWEJBSUZBd1FHQXdZQkFRSUNEZ1lKQkJNRUF6MWRJQ0FpQXdNQ0JBSUJCQUxQQndnQkFRRUNBanM1QkFVQkFnRUNBZ0lHQk1VSERBY0JZQW9DQlFJRkJJUDl0d01DUlB6NkJIRUVBQVQvLy8vR0JHVUR4Z0EyQUtFQXdRRDhBQUEzRGdFVkZCWVhIZ0VYSGdFWEhnRVhIZ0V6TWpZM1BnRTNQZ0UzUGdFbkxnRUhEZ0VIRGdFSERnRUhEZ0VqSWlZbkxnRW5KaUlIQVJRV0Z4NEJNekkyTno0Qk54NEJGeDRCSHdFZUFSY1dOamMrQVRjK0FUVTBKaWN1QVNjdUFTY3VBVDBCTkNZMUxnRXZBUzRCSnk0Qkp5NEJKeTRCS3dFT0FRY09BUWNHRkJVVUZoOEJQZ0UzUGdFM1BnRTNNeklXRng0QkhRRU9BUWNPQVFjT0FRY09BUlUzTkRZM1BnRXpGUlFHRlJRR0J3NEJCdzRCQnlJR0l3WWlJeUltSnk0Qk5RRVVCaFVjQVJjZUFUTStBVGMrQVRNeUZoY2VBUlVVQmdjR0ZoY1dNak15TmpjK0FUYytBVDBCTkNZbkxnRW5MZ0VIRGdFSERnRUhEZ0VIQVFFQkF3TWNQQ0FnUXlRa1NTWW1UU2cwYWpZM1lpd09HQWtIQWdRRURBZ0JCd1VGQ0FJeFl6RXlaREpMa1VWR2hrQUZDUUlCTkJrYUdVRW5HaXNSSERnZEFnY0ZCUWdDRUFVTUNBZ1BCZ1F1S3dRRUF3TUlEQVFFQndRRUF3RUJBUUlHQVFVREFnY0ZCQW9GSUZzN0dpMVBJeUlyQ0FFSkNIWUlDZ0lFRUF3TkhCRUpGaUlMQndnZkxnNG9SQndlTUJFUkVyQXRMUkF0SGdFREF3TUlCZ3doRmdFREF3TUVBaEFiQ3dvS0FhNEJBUUVGQXdvWURRc1ZDUmNkQlFJQ0VoUUJBUU1CQWdFQ0JRTVJHd29LQ1FJQ0JCd1hCQW9GRXlVVURCZ05BZ01DcXdFREFnSUdBaGt1RXhRaERnNFZCd2NIRHc0T0tSb0lEd2NGREFZR0F3TUJBd0lDQXdFVEhBa0tDUklURWpnbEJBVUJKQ3hGR0JrWUJRVUhKeUFDQ2dnSEN3SVFCZ3dHQkFFRkF5Z2xBd2NFQkFnRkNoQUZCQkVMQ2hrTitBSU5Dd3NQQXhnSkRRVUVDd1lGREFVZUhnSVpGaFpETGdJREFnY0tBZzRCREFvUUdnb0pDZ0lQRUFzc0lSRURBd0lGRVF3TkpSb1pQU01WS3prTkJBVWFFQmdIQnhNTERCVUtGaHdGQVFFTURBd2dGUDYyQVFFQkFRSUJBUUVCQXdJQkFRWUdBd2dHRVQ0dEJBVUNBUUlDRHljWkdDb1NCd1lLQXdVSUFnRUJBUUVGQlFNTUNRRUZBZ0FBQUFJQUpBQUxCQzBEWlFCWkFMUUFBRGN1QVNjbU5EMEJORFkzUGdFM1BnRTNQZ0UzUGdFM1BnRTNQZ0UzUGdFek5qSTdBVElXTXg0QkZ4NEJGeDRCRng0QkZ4NEJGeDRCRng0QkZ4NEJCdzRCQnc0QkJ3NEJCdzRCQndZaUp5NEJKeTRCSnk0Qkp5NEJKemNHRmhjVUZoY2VBUmNlQVJjZUFSY2VBVGMrQVRjK0FUYytBVGMySmljdUFTY3VBU2N1QVNjdUFTY3VBU2N1QVNjdUFRY09BUWNPQVFjT0FRY09BUWNpSmljdUFTY3VBUWNPQVFjT0FRY09BUWNPQVFjT0FRY09BUWNvQVFFQkFRSUNDUjBVRXpNZ0hrY3BGUzBYREJnTkJnMEdBd2NEQkFjRU1BTUhBdzBZREJZc0ZTZEVIUjgxRmhvbURBRUNBZ01IQWdJREFRRUlCZ2NRQ1NKTktpOWtNelp1T0M1ZUxpZEtJQkFiRFFjTEJrUUJBUUVCQVFRS0JobEVKUzFlTHpScE5USmxMeWhKRndFQkFRd1JEQTRhRHd3Y0RnOGZFUk1vRmdNR0FnSUZBd1VNQlF3VENCUWpFaEFqRlFjU0NnY09CZzRXQ2hJdUh4VWlEZ2dQQndjT0NBMGFDUUlEQWdFQkFjNEJBZ0lCQXdJUEJ3NElOMncwTVYwcUowWWREaGtKQkFnREFRTUJBUUVCQWdNR0JBY1NDeFU1SVNSUEtqRnFOd1FLQlF3WkRRd1lDd29TQ0FvUUNCOHZFUk1XQlFZRUJCRVBEU1FhREJzT0J4QUlMZ0VDQWdFQ0FRZ1FDQjhzRGhFU0JRVUJCQU1URXc4d0pnRUNBaGt6RnhneUdCUWxFaElqRVJNbEVRSUVBd0lEQWdJQkFnUVRDUlV2R0JVcUVRWU1BUU1EQmhVTEV5OEtCeUlSQ2hjTEN4Y0xGeThhQncwSEF3Y0VBQUFBQmdBUS85WUQwd1BEQUZNQWNBQ0tBS0VBcGdDckFBQVRNVDRCTno0Qk16SVdGeDRCRng0QkZ4NEJCeFFHQnc0QkJ3NEJCdzRCQnc0Qkp5WTJOejRCTnpZbUp5NEJJdzRCQnc0QkZ4UVdGeDRCRng0QkZ4NEJCd1ltSnk0Qkp5WUdCdzRCSXlJbU5TWTJOeE1GTVRZV0Z4NEJGeFlHQnc0QkZ4NEJKeTRCSnk0Qkp5NEJOVFEyTndFeFBnRVhIZ0VIRGdFSERnRWpJaVluTGdFbkpqWTNQZ0UzQlRFMkZoY2VBVE15QmdjT0FRY0dKaWN1QVRVME5qY0ZOd2NGSndVSEZ6Y25UUk1pS0NpV2gzK1ZLaWtsRHhZZENBZ0hBUXNYRHlzUEZUTVpHaThTRmlJTEVBd2ZHeDRFQkE0VElucENRbmdnRHcwQkVSQUtOU0FoUVJZSEFRVUhHaG96VXlRbFFpSWJLZ1FCQWdFQkFRWUJlQ3BpSGhZWEFRSVNFeG9NREE4Q0R3NDVMQ3M2RVJFT1NDTUIyQ0lxREFzSEFRRURBd01PRFFrOUpDUkZFZ0lkRnh3NEcvMFdKVm95RmpJTEV4TVpHRUFaS2xRaElTbElKd0lHQ1h3Qmx4SDl1dzUxZmxvRG1SQVJCQVFCQWdNRURnd1JLUndkVERSTEpnRUJBd0VCSGhnWVB5TXJKUVVISmpRclVDWW1TQ1JEUWdGRVF4OUNJU0U5R2hJeUdSa3BDQUlRQ2dzREVTRXBDQWtJRHdvUUxDWW1aVG9CR0g4T0Z5RVhNeHdkUHlNdUxBNFNEZ1VFSGhvYkxSWVdNQjRsWWczKzR3OERFQkZKUDBOR0R3OERGaEFRSVF3Qk95a3hQUXZIRFJJZ0RSUkJLaWxOQ3hJS0ZoWkpMaVZrRG4wRnVnUlNSd2tEeUFjQUFBQUFCUC8wLzlZRURBUEFBQXNBRWdBV0FCd0FBQU1GTnhjbEp6Y2xCeWNGRndNRkVTY0hKeFVUSlEwQkF5VTFCeWNIREFFKzBOQUJPc3JLL3N2VjBQN0Myd0VCTVFIUVlBVUJMd0V0L3RFQkFUaG16d0lCbzcyZ29MMnVxY2F5c3RDbS9sak1BV3dCbnprN0FhcTVyc2orUjh0QlBwOEJBQUFBQ3dBQUFFUUZsQUtxQURvQVZBQmRBSk1BbndERkFOWUJDZ0U0QVVvQlV3QUFFeFFXRng0QkZ4NEJGeDRCTXpJMk56NEJOelVqRkFZaklpWW5MZ0VuTGdFbkxnRTFJVFV1QVNjdUFTTWlCZ2NPQVFjT0FRY09BUWNPQVJVM1BBRTNQZ0UzUGdFM1BnRXpNaFlYSGdFWEhnRVhIZ0VWSXdVeU5qYytBVGNqRlRFVk16VXpIZ0V6TWpZM1BnRTNQZ0UzUGdFM0xnRTFORFkzTGdFaklnWUhJelVqRlI0QkZ4NEJGUlFHRlNNVk13NEJCdzRCSXpVek5EWTFOQ1luTGdFbkZSYzBOalUrQVRjK0FUYytBVE15RmhjZUFSY2VBUlVlQVIwQkZBWUhEZ0VqSWlZbkxnRTFOeFFXRnpVMk5DY3VBU2N1QVNjT0FSVTNNelEyTno0Qk16SVdGeDRCSFFFaklnWUhIZ0VYSGdFWEZSWXlNekkyTnpNWE16UW1KeTRCUFFFbkxnRWpJZ1lIRGdFVkZ5WTBOejRCSnlZMk56NEJKeVkyTno0Qk1UYzZBVGN6RlJZVUJ4d0JCdzRCQnc0QkJ3NEJCdzRCSXlJbU5STVhIZ0VYSGdFZEFSY1ZNelVUSXdjbkl4OEJOVFFtSnk0Qkp3QUZCUVFVRGc0dEhoNU9MeXBNSXc4ZERud3JMQkFaQ2dvTkJBUUVBUUVCQVN3S0hoUWZTeTBtUWh3Ykt3OFFHQWdJQ3dNQ0E4c0JBUVFFQkEwS0Nob1FFQndMQ2c0RUJBTUJBUUcyQVN3QkFnRWxKZ0ZRYVFFT0x5QVFIQXNMRVFZRkNBSUNBd0VuSnhVVURTTVdIUzBSQW0wYkl3Z0hCd0ZUVUFFbEpnRUNBVk1CQndjSEpCdHRBUUVDQWdFSEJRVU5DQWtPQlFRSEFnSURBUUVGQlFRVER3MFNCUVFGZWljbkFRRUJCQVVFRGdrVUZRaHVBd1FFRUE0TkVnVUVCUmt4UlJRSkRRVUVCUUVFRFFvaU14RUNCV2NCQVFFQmJoY1pBaUkwRWhRVlpBVUdCZ0lEQkFRSEJnVUNBUVFJQndjUEFRa0hFUUVCQVFFQ0FnRUZBd01JQlFVTEJ4VVZSQnNoTEFzS0RDeVF3Wkp3WnA0YmJnc0xDeXdoQVRVWEpoQVBIQTRORkFjR0J3Z0lBd2tIV3g4ZkJBVUVEZ29KRHdjR0VRdWxCUWtFQndjRkJRUU5DQWNVREF3WURBc2JFQ0lJRFFVRURBZ0lEQVFFQXdNRUJBb0lDQXdFQkE0S3VnRUJFeXdhVzFFckdSb0dCd1lUREEwWUN3d2JFUWsvTlNVMER3ME9GaGZQdXd3ZkZCQW5Gd1lNQmlnYUxCTUJBWU1HREFZV0p4RVRJQXlsQ3hNY0NBa1RDd29RQkFRRkJBUUVEZ3NLRkFnSUd4SUZLRFlRRUE4UEVCQTJLRVkxUHdrMUZpQUxDaDBTRWhzSkR6UWxvZzhYQ0FnSUJ3Z0hGZzhmRHc4Skd4SVNIQXQyQVIwZU5RUVJEZzBUQjJuZkFRSU5EUTB4STUwRUN3VUZDUUlDQmdNREJBRUJBd0lCQWdJQkZBZ01CUVFNQ0FjTkJBUUtCUVFJQWdJRElDQUJTalVFRlJBUUxCMWRXOFBEQVcvdDdUWGZYUndzRVJBVUJRQUFBQUVCSC8vR0EwWUR4Z0FhQUFBQk14RXpFVE0xSXpVME5qYytBVHNCTlNNaUJnY09BUjBCSXhVQkg1M0Z4Y1VHQmdjTkNKMmRNVk1qSXlPZEFhRCtKZ0hheEdRTkZBa0lDTVFsSmlWYk5XTEVBQUFBQUFZQUFQL0dBOElEeGdCSUFHRUFlZ0NUQUpnQXhnQUFOelEyTno0Qk55NEJOVFEyTnk0Qkp5NEJOVFEyTno0Qk16SVdGek15TmpjVkRnRUhIZ0VWRkFZSERnRUhEZ0VWRkJZWE1qWTdBVElXRng0QkZSUUdCdzRCSXlJbUp5NEJOUk1VRmhjZUFUTXlOamMrQVRVMEppY3VBU01pQmdjT0FSVVRGQllYSGdFek1qWTNQZ0UxTkNZbkxnRWpJZ1lIRGdFVkFSUVdGeDRCTXpJMk56NEJOVFFtSnk0Qkl5SUdCdzRCRlJNekVTTVJFelV6TlRNVk14VWpGUllVRlJjZUFSY1dNak15TmpjUEFRNEJCdzRCS3dFdUFTY3VBU2N1QVNjdUFTY1JJd0FPRGcwbUZ3ME5EZzRVSVF3TURSc2NHMEVuSERRWEJ4ODRHUWdYRGdRREdSa1pQaVFNRFEwTUFRRUJBeTFOSUNBZ0lDQWZUaTB0VFNBZklId0xDd3NhRHc4YUN3b0xDZ3NLR3c4UEdnc0xDd01ORFEwZ0V4TWdEZzBORFEwTklSTVRJQTBORFFGVERBd01IaEVSSGd3TkRBd05EQjRSRVI0TURBd1Rpb3E2T0g1ZFhRRUVBZzRNQVFZQ0RDRVdBd2NERUFzTEdRNFVCaEFKQ2hNS0NoRUlDQW9DT0dNVkpoSVJIQXNUSnhNVEpoSU5JUlFVTFJnbVFSb2JHZzhRRUJCMUJRY0RDeG9PSkQ0YUdod0NEaHdORFJrTEFSY1hGamtnSURnWEZ4Y1hGeGM0SUFHNkVCNE1EQXdNREF3ZEVSRWREQXdNREF3TUhSSCtSZzBYQ2dvS0Nnb0tGZzROR0FrS0NRa0tDUmNPQXhBUkhnd05EQXdOREI0UkVSNE1EQXdNREF3ZUVmMXFBZXIrRmdHQ2FGOWZhUFFCQVFJTkJ3Z0NBUWNHWlFrRUNBVUVCQUVEQXdRSUJRVVFDd3NhRUFFa0FBQUFBQVVBQVAvREEvc0R3d0FqQUVVQVZnQjFBSUlBQUFFZUFSVVVCZ2NPQVNNaUppY3VBVFUwTmpjaEVSUVdGeDRCTXlFeU5qYytBVFVSSVNVMEppY3VBU01oRlNNMUl4VWpOUTRCQnhVak5RNEJIUUVoUGdFek1oWVhJVFVuRlJRR0t3RWlKajBCTkRZN0FUSVdGUUVVRmhjZUFUTXlOamMrQVRVMEppY3VBU2N1QVNNaUJnY09BUWNPQVJVek5EWXpNaFlWRkFZaklpWTFBdEVXR2lrakkxODJObDhqSkNrWkYvN1lJQnNiU1NvQ2FDcEpIQnNnL3RZQktpQWJIRWtxL2RvcUhDa0hEd2dwSmk4QlF5TmdOelpnSXdGRlhCTU9iUTBURXcxdERSVDlsU0FiRzBrcUtVa2JHeUFrSUFzWURoTXFGaFlxRXcwYUN4OGxOVlkrUFZoWFBqMVhBbFVmVFNzMlh5TWpLU2tqSTE4Mkswd2cvamNxU1JzYklDQWJHMGtxQWNtbEtra2JHeUQrL3Y3NUFnVUQ3OWtjVmpLRkpDb3FKSVZVYncwVEVnNXZEUlFURHY1d0tVa2JHeUFnR3h0SktTMU9IQW9RQmdrSkNRa0dFQW9jVGkwOVdGYytQVmRXUGdBR0FCc0FwUVd5QXQ0QUdBQWxBRElBTndBL0FFTUFBQUV5RmhjZUFSVVVCZ2NPQVNNaUppY3VBVFUwTmpjK0FUTVZJZ1lWRkJZek1qWTFOQ1lIQlRRbUl5SUdGUlFXTXpJMk5RY1JJeEV6SVRNM014Y3pBeU1USndjekF5OHdVeDRmSWlNZkgxSXZMbElmSHlNaUhoOVNNQ2s4UENrcU96c3FBb011SUNBdUxpQWdMdU43ZS90TW5SckNHcHpjYzNNNU9uTUNaQ01lSDFFdk1WSWRIaUVoSGgxU01TNVNIaDhqZHowc0t6NDlMQ3crQWZvZ0xpNGdJQzR1SUVBQ0svM1ZUMDhDSy82WHVyb0FBQUFHQUNILzVBWEZBNklBTmdCR0FGWUFwd0MyQUw4QUFBRStBVGMrQVRNeUZoY2VBUmNlQVJjZUFSVVVCZ2NHQkFjR0JDTWlKaWN1QVNjdUFTY3VBU2N1QVRVK0FUYytBVGMrQVRjK0FUY0ZKZ1lIRGdFWEhnRVhGalkzTmlZbklTWUdCdzRCRng0QkZ4WTJOelltSndVdUFTTW1CZ2NHSmk4Qkl3NEJGekFXRlJRV0ZSY3pFemMrQVRjK0FSY2VBUmNlQVI4Qk16YzBOamMrQVRjK0FSY2VBUmNlQVI4Qk16VTBKalV1QVNjdUFTY21JZ2NPQVFjT0FROEJKeTRCSndVMUp5b0JCeFFHRlJ3QkZSY3pOU0UxSnlvQkJ4RXpOUUs0aU5SSlNrOEVGaVFURUJvRkFoa09EeGM4TEJMK210RFIvcWtFS0VBT0FRY0ZCUThLRFJBRUJBSUJCd1lNS1JjQ1hVNU96blFCVVE4Y0N3b0dCQU1TQ2hBZEN4RU5HUUVCRUJzTEN3WUVBeElLRUI0S0VnMFovSnNFRXdvc1JSb0NBZ0lCSlJnTkFRRUJBVklDQkFjT0NSYzZHaEFYQndJQkFRRlJBUUVEQmhvT0RpVVJHU01KQXdFQkFWSUJBUVFEQ3pRb0RUTU5EUnNMQ3gwSUJ3WU5MQm9DZlNvWUVRRUJBVlFCQUNrWkVRRlVBMVVUSEFvS0Nnc05EQ2NVQ2JacWE3RUdMRWNIQXpFY0hDNHZKd01vSlNac1IyRjBIeDhZQmc4WURSWWhCZ0VOQ3dzY0VDZ0VCZ3NLR3hBS0V3SUVCd3NVTndnRUJnc0tHeEFLRXdJRUJ3c1VOd2ltQVFNQkpDY0VEQ1lVQVFFQ0pCNGVVQzNhQVNjS0VCWUtGd29OQnlFV0NpdHVsWlZ2S0FrU0lRa0tCZ01GSlNBS0ttMlNqemhCRWhNVURDNDZDd01EQkFzSUNCNExDdzBhSkFmaTNRRUNBU01lSGxFdDI5M2RBUUwrUjkwQUFBTUFBUC9HQkZVRHhnQlJBRllBYXdBQUV4Y2VBUmNlQVJjZUFSY2VBUmNlQVJjZUFSYzFKeTRCSnk0Qkp5NEJKeTRCSnk0Qkp5NEJOVFEyUHdFK0FUYytBVGMrQVRjK0FUYytBVGMrQVRjMUJ3NEJCdzRCQnc0QkJ3NEJCdzRCQnc0QkZ3RTNFUWNSRXpVWEhnRVhIZ0VYTnhVbE55Y3VBU2N1QVNzQkFBRUJCQVVFRFFnSUdoSVNLaGtaUUNrb1dUSVRDUmdQRHlFU0VpSVJFUjRPRFJRR0JBTUJBZ0lCQkFNRUNnWUdFZ3dMR3hBUEtCZ1pOUjBhRFNNV0ZpOGFHVFFhR2k4VkZpSU5EUTBCQWdxU2tyUTJHMEFsSlRvVWJ2Ni9WUlVMSVJZVEp4UUdBVEFTQ0JjT0RpQVNFU1VTRXlJUUVCME5EUklGYWdNQkJ3VUVDd2NHRVFzS0Z3d05IUklLRmdzSER3Z05CZzhLQ2hZTURCZ05EUmNMQ2hNSUNBb0NmZ01CQndVRkRRZ0lGdzROSVJJU0xoc2NPeUQrbGxBRHNHVDhaQUpkZGdVRER3NE5JeGMvKzFBakVBY1JDQWNJQUFBREFISC80UVJsQTZjQUlRQlZBS0lBQUFFK0FUYytBVHNCRVNjdUFTY3VBU01pSmpVbU5EVThBVFUyTkRFd05qYytBVGNYSmdZSERnRVhIZ0VYSGdFWEZnWUhEZ0VqTGdFdkFSVVhIZ0VYTWpZM1BnRW5MZ0VuTGdFbkpqWXpNaFlmQVRVbkxnRW5KVDRCRng0QkZSOEJIZ0VmQVRjMkZoY2VBUWNPQVM4QkJ3NEJEd0VWRGdFSERnRUhJaVl2QVRVM1BnRVhGalkzUGdFL0FTY21OajhCSnk0Qkx3RUhEZ0VIQmlZdkFUVTBOamMrQVRjQmhEaGxKaWN1QWdrSkxiZGRYSXdCQVFFQkFTd2xKV1E0SnhreUVqRVJLUVVaREJrVEFnRUNCQWNSRGhFZ0RnOEpFaDRkR1JFTEhoMENBaUlvRFJjRkZCZ2dDaUVMRFFjRERnY0JWQW9ORGlZeUFSUWtPQkVJREFZUUNTMGdHUTB4RlF3TEVqb2dFZ0VNRGhBYkZoUWRDd2tKR1VJWUNoQVdGQ1VMREFjWEFSY0dEQXd3RnhRSUJBOEhGaklVQ3dFQ0JROE1BM1VLRWdjSENQdzZBZ2dnRVJBWkx6QXdrR0JQakRRMVBBZ0dCeElLNXdRR0NSbCtLZ1VUQ0JFWUVBa0tCZ2tJQVEwTURsTUdDZ2NCQWdVT095a2lNQnNJRWdVV05Rb0hDRklEQVFNQ2pnUURBUUUySnhJTUV6c2tFUUVCQWdNTld5Z1VHZ0lDRnlJN0VBb1RGQ0FPRUFzQkN3c0lnd2dVQWhRSkFnNE5LQllZQ1I1RkhRY1lHREVNQ2dnRUNRTUtCeEFKUVNRZ0FnWUpCUUFBQlFBbkFLOER4UUs1QUJzQUtBQTRBRUlBVEFBQUFSWUdGUjRCRng0QkZ4WTJOejRCTnpZbU53NEJCdzRCSnk0Qkp3RStBVGMrQVNjT0FRY0dGaGNCRkFZWEhnRVhGalkzUGdFbkxnRW5BdzRCQnhZMk55NEJKd1V1QVNjT0FRY2VBVGNCVmdJREFRZ09DaDBTTkVzeklCb0RBd1FDSWp3WUdDRVlGajRrL3Z3NlJoQVJBUWxJWmhZWEVqQUNzUVVIQjBBMUVCVUxKUWNZR0dSR09CazRIamx3Tng0NUd2N0lIemNaR2pnZE9IQTJBcmtvVENRa1JDRVpMeFE4QjBBcFZ5NHVZVE1UR3hRVEFoWVVHeFQrUkIxWk56aUJSd3RjUGorTlBBR3ZPRzgxUFdVa0N3VVJPNEk2T2xZUS9vMGZSU1laQVJna1JpQ0tKa1FmSDBZa0dBRVpBQUFEQURyLzJnT1dBNm9BUXdCVkFJWUFBQUUrQVJjZUFSY2VBUmNlQVRjMkZoY2VBUmNlQVJjZUFSY2VBUmNlQVJjZUFSY2VBUlVVQmc4QkpTNEJKeTRCSnlZMk56NEJOejRCTno0Qk56NEJQd0krQVRjWE55TWlCZ2NPQVJjV05qYytBVGMrQVRjVExnRW5KZ1lIRGdFVkZCWVhGZ1luSmdZSEJoWVhIZ0VYRmpZM1BnRTNOaVluTGdFMU5EWVhIZ0VYRmpZM1BnRW5BWUlrTFJNSEdRc1VNUWNFQ2hBUEZCUVZHeDBiRWdJQkJRVUVDZ1lHRFFjSERBVUtEVDVZbC83c09XWW5KaTRCQXdnSUJBb0ZCQWtEQ1FrSEJoa1pOeFlXUGlZeEhCWWNQeGtORmdRQ0ZBNFZEUVlLSUJkREF5SVVMVXdiSEI4YUlFWThTaEFKQ3dnREVRb21FaVpER2hvaEJBVW9OUmtSS1NNUEhBVUhEQXNIQlFJRHBSSUNEd1lMQWdReEZRc0ZBd01KRkJVTkFnTUhDd1FqR3h4R0ppWmNMaTlXSUVCaUJRY1NFeUUwQ2hRSUNBb0JBbHcrSDBvbEpVUWFTRWdRRUFjSUVqczlWQlFzR1RFc0Z6NEVBZ01EQlE0V0pUY1UvdDREQmdFREZ4Y1lRaWtsTkJnM1RERUtDQ0liRGc4SUVnVUxCeEVST1NZdVNpWVRGUTRaRndRQkJnSUNFeDhXSWdJQUFBQUlBQUFBZGdTYkFxa0FGUUEzQUZZQWV3Q2dBTVlBNVFFVkFBQVRGQllYUGdFM1BnRTFOQ1luTGdFbkRnRUhEZ0VWTXhRV0Z4NEJGeFFXTXpJMk56NEJOejRCTlRRbUp5NEJJeUlHRlE0QkJ3NEJGVE1VRmhjZUFSVVVGak15TmpVK0FUVTBKaWMwSmlNaUJoVVVCZ2NPQVJVekZCWVhGQll6TWpZMU5EWTNQZ0UxTkNZbkxnRW5OQ1lqSWdZVkRnRUhEZ0VIQmhRVk14UVdGeDRCRlI0Qk16STJOelEyTno0Qk5UUW1KeTRCTlM0Qkl5SUdCdzRCQnc0QkZUTVVGaGNlQVRNeU5qY1ZQZ0UxUEFFbkpqUW5MZ0VuTGdFaklnWUhGQVlIRGdFSEZBWVZGeFFXRng0Qk16STJOejRCTlRRbUp6UW1KeTRCSXlJR0J3NEJGUTRCRlRjVUZoMEJGQllYSGdFeklUSTJOejRCTlRRbUp5NEJJeUlHQnk0Qkp5NEJJeW9CQnc0QkJ3NEJCdzRCRlJRR0ZRQUdCd01HQWdJREF3SUNCZ01EQkFJQ0FrSUNBd0lEQVFNREFnTUJBUU1EQWdNR0JnRURBZ01EQVFNQ0F3SlNBd01DQXdNRUJBUUdCUVVHQkFRRUF3TUNBd05mQkFVRUJRVUZBd0lEQXdNQ0FnTUJCUVVFQlFFQkFnRUNBUUZnQWdJQkFnRUdCUVVHQWdJQ0FnSUNBZ0VEQVFjRkJBY0JBUUVDQVFKaEF3TUJDQVlHQndFREF3RUJBUUVCQVFFSEJnWUhBZ0VCQVFFQkFXSURBd0VIQ0FjSUFRUURBUUVEQWdFSENBY0lBUUVEQVFGUkFRTUNBZ1lEQVpJZU14WVZGUllWRlRNZURSME9CQ2tsSlZZeUJBMElDQklKQ2hFSEJ3WUJBUXdpSmdRQkVRNFBGUWdIRlE4UEVRSUNFQTRPRndnTkpCa1lIZ1VFQkFRRUJoNFlHQ1FOQTBWQ0F3TURBd1lmR2hrbERRMG9HeG9lQkFRRUJBUStSZ2dIUWpvRUJRUUZBeHNhR1NZTUFVWkVCQVlGQlFRZUdob25EaGxMTVRFNUNBVUZCUVVQS2hzYU1SWVdLQlFOSmhrWkhnVUhCZ1lIQng4WUdDVU5IRTQwTkVRUkJnWUdCZzFDTlRWU0hBRkRRZ2NJQ0FnQlFrSUNGQ3dYRmpRY0hDd1BCd2tJQ0E4ckhSd3pGeGNzRkFFQlFFRUpDUWtKUUVFQkFTMHRMWVpaQ1FvS0NWbUdMUzB0QWRrcVhqT2ZCQWNEQXdNWUZ4YzVJU0U1RnhjWUJ3YzNXeVVsSlFJQkFnSUNCZ1FFQ1FVbFVDc0FBQUFJQUFEL3h3T3FBOFlBTXdDYUFMQUF5UURkQVBRQkdRRk1BQUFURGdFVkZCWVhIZ0VYSGdFWEhnRXpNalkzUGdFM1BnRTNQZ0U5QVRRbUp5NEJKeTRCS3dFSERnRUhEZ0VIRGdFSERnRUhFeGNlQVJjZUFUc0JIZ0UzTWpZM1BnRTNQZ0UvQVQ0Qk93RWVBUmNlQVRNeU5qYytBVGMrQVRjK0FUOEJQZ0UzUGdFMU5DWW5MZ0VuTGdFbkxnRW5MZ0VuTGdFbkxnRWpLZ0VIRGdFSERnRUhEZ0VIRGdFSERnRVBBUTRCQnc0QkJ3NEJGUlFXRno4QlBnRTNQZ0U3QVRVWEVTTXVBU2N1QVRVME5qY1RGQllYSGdFek1qWTNQZ0UxTkNZbkxnRWpJZ1lIRGdFVkV4Y2VBUmNlQVRzQk5TTU9BUWNPQVJVVUZoY1hOVGNWRng0QkZ4NEJGek0xTXhVakp5NEJKeTRCTlJNT0FSVWVBUmNlQVJjeUZqTStBVGMrQVRjME5qVTBKaWN1QVNjbUlpTWlCZ2NPQVFjVEZCWVhIZ0VYSGdFWEhnRTdBVEkyTno0Qk56NEJOejRCTno0Qk56NEJOelkwUFFFMEppY3VBU2N1QVNjdUFTTWlCaFVDQVFFQ0FnTUxDQWNYRUFvV0RBY01CeE1mQ3d3T0F3TURBZ0lCRlJNU0p4WUpDUVFNQndjT0NBY05CZ1lJQWtJTEJSZ1NFU2tZQXdnU0N3b1dEUmtoQ1FrT0JSb0xIQkVPRmlrU0h6b2FHaWtPRGhvTEN3NERBd1FCQmdJRkFnSUNCZ2NIRkE0Y05ob2FJd2dIREFVU0tCY1JJaEFFQ1FVVEpSRVFHZ2tLR2c4T0hBd05EUUlhRFJrTUN4UUlCUVlEQXBFSUJBOE1EQnNQUmpxQ0hTa0xCZ1lCQVJrUEVSQW5GeGNuRUJBUkVCRVFKeGNYSnhBUUVDUUZBUWtGQmc4SU5Ea09GQVVFQXdFQndEMEJBUVFEQXdjRlBVR1dEd2NRQ0FjSU5nRUJBUWdJQ2lZZEJBY0VGeWtTRXhrRkFRME5FQ1VYQXdjREVpUVVGaGtEdGdJQ0FRY0dCUlFPRFI4VUJnb1NDQWdPQlFZSkJRUUhBZ0lFQWdFQ0FRRURBd01LQmdjVERRMGZFVGM0QWxBRkN3VUhFUWtQSGc0T0ZnZ0ZCZ0VDQkJFTkRCNFJFQnNMQmdrUkNCTW9GUklUQWdFRUJRUUtCd2NVRGc0Z0UvNE9JeEVrRVJBU0FRSUJBUUVEQkFJQkFnSUVBZ0lCQmdZS0N3WUdCZzhMQ2c4RkJBZ0RFQWNVRFEwYURnNGRFQThaQ2hZeEd4c2xDZ29RQmh3bkRBa0pBUU1PQ3dzYkVSSWhFQkFhQ3dvTUFSVUxGdzBNSWhjT0hBOEpFZ2xxRlFvVkN3b0xWUUgreGdZY0ZnOGZFQWNPQndKZ0lEZ1hGeGNYRnhZNUlDRTRGeGNYRnhjWE9DSDliZ3NHQ3dVR0JZQUVFZzRKRHdnRUNBUW5wZ0dWQkFFRkF3SURBYWZlQlFJS0J3Y1FDUUt3Q0E4SUZpWVFGaG9GQVFFVUZCZ3pIUVFKQlJNb0ZCa2RCUUVWRlJreEdmN1hEeGdLQ2hjTkRCTUdCUVlDQWdNR0JRUUtCUVVNQndjTkJRVU5DQWdMQkNNSEVRb0tGQXNMRWdnSENFMU5BQUFBQlFBQS84TUVBQVBEQUVnQVdRQ3lBTHdBelFBQUV4UVdGeDRCRng0QkZ4NEJGeDRCRng0Qk16STJOejRCTno0Qk56NEJOejRCTno0Qk5UUW1KeTRCSnk0Qkp5NEJKeTRCSnk0Qkl5SUdCdzRCQnc0QkJ3NEJCdzRCQnc0QkZUTTBOamNUTGdFbkxnRW5MZ0VuTGdFMUV6NEJOejRCTXpJV0Z4NEJGekFpSnlNaUJnY09BUlVVRmhjZUFSY2VBUmNlQVJjZUFSY2VBUlVVQmc4QkF6YytBVGMySmljdUFRY09BU01uSmdZSEJoUVhIZ0VYSGdFZkFRc0JOejRCTnpZbUp5NEJCdzRCS3dFQkd3RVhEZ0VqSWlZbkpSTStBVFUwSmljZUFSVVVCZ2NPQVFjQUNRZ0pHaEVSS0JjWE5SNGRQaUFnUXlNalF5QWdQaDBlTkJnWEtCRVJHZ2tJQ1FrSUNSb1JFU2dYRnpVZUhUNGdJRU1qSTBNZ0lENGRIalFZRnlnUkVSb0pDQWtvRlJUaEhqWVlHQ3NTRWh3SkNRbE5JRlExTkhFOUxsY29KMG9oQVFJREVCMExEQXdCQWdFRUF3TUVBZ0VJQlFVR0FoTVVFaEl2cWpVR0NBSUNBUUlEQ1FZbVB4bDhCZ2tEQXdFQ0NRWU1HUXhLYUt3MkJ3Z0NBZ0VEQWdrSEpqOFpIZ0VHalpJREpVOHBJa01nQVhPUUVoSUJBaHdkSHlBZ1ZqVUJ3eU5ESUNBK0hSNDBHQmNvRVJFYUNRZ0pDUWdKR2hFUktCY1hOUjRkUGlBZ1F5TWpReUFnUGgwZU5CZ1hLQkVSR2drSUNRa0lDUm9SRVNnWEZ6VWVIVDRnSUVNak0yQXUvWllPSkJZVk1oMGRQQ0FmUWlNQkF6Rk9IUndkRHhBUEx4OEJEQTBOSFJFRkN3VUZEQWNIQ2dNRERBa0pDZ0loUWlBUVRUeWVBZndGQVFZRkJBb0ZCQVVCQXdNR0FRUUZCQW9GQlFZQkFRSUN5djdMQWY4RkFRWUZCQW9GQkFVQkF3UDlOd0dkL25JR0RRNEpDUzBCb2pSVklBMFlDelJ3UGtCMk56ZFZJQUFFQUVNQkJRUTdBemtBS3dBNEFFVUFaZ0FBQVRJV0Z4NEJGUlFHQnc0Qkl5SW1KdzRCSXlJbUp5NEJKekVSUGdFek1oWVhNUlUrQVRNeUZoYytBVE1CTWpZMU5DWWpJZ1lWRkJZeklUSTJOVFFtSXlJR0ZSUVdNd1VWRmdZSEJpWXZBUWNPQVNjdUFUOEJKeVkyTnpZV0h3RTNQZ0VYSGdFUEFRSnBLVWtiR3g4Zkd4dEpLVGxkR2hsZE9TbElHeHNmQVFFV0VSQVhBUms4SWpsZEdSbGVPZjZoTVVaRk1qRkdSVElCWHpGR1JUSXhSa1V5QWRJSkJBME5JQXRYV0FvZ0RRMEZDV1ptQ1FRT0RSOExXRmNLSUE0TkJBbG1BcElmR3h0SUtTbEpHeHNmT3k4dk94OGFHa2NwQVVvUUZ4WVJweE1VT2k4dk92N0RSVEl4UmtZeE1VWkZNakZHUmpFeFJoRUJEUjhLQ2dRTmRYVU5CQW9LSHcySmlBMGdDZ29GRFhWMURRVUtDaUFOaUFBRC8vUC95UVBlQTZ3QU1RQk1BSlFBQUI4QklUSTJOejRCTno0Qk56NEJOejRCTlRRbUp5NEJKeTRCSnk0Qkp5NEJJeUlHQnc0QkJ3NEJCdzRCRlJFWEhnRVhOdzRCSXlJbUp5NEJKelFtTlJFaEVTTW5MZ0VuTGdFSERnRUhOeDRCTno0Qk5UUTJNeklXRng0Qk16STJKeTRCSnlZMk56NEJOelltSXlJR0R3RTFOQ1lQQXljdUFRY0dGaGNlQVI4QkJ3NEJCd1lXRng0Qk56NEJNeklXRlJRV0Z6VWdBWktrc0N3ckd3NElFQU1DQXdFQkFRRUJBUVVEQnlRWEJEVXpOSnhzcExBcUt4Z09EdzhFQkFFUkNSWVMrd01aUmlZNUFnRUNBUUVDKzd3T0J4RVVGRWM4YXpNSWxnOGJFUk1JQkFJREpoa1lMUVlVSlFJQkZpODZBMFFpRlFJQ0p3OEZNQjFFRWlnb0JBUThPaXNXRkFrb0VDWU1IRUViS3dNRkJRMFZMallXSkFNREJBVUxLQThCQkFNUkR3a2REQWM3TWpPUVhYU1ZMUzB0Q3hzcURRSURBUUVCQVFNRUR3OFBIaXdycnFEK2RpQVNGZ3AyRFFRREFnRThNek9IVEFGeC9SUWJEUkFFQkFFQkFROGZqQW9DQ0FvY05od25FZzRPRXl3VkVSSWFIeEltRWhRTUVqVVdEeVZFUVIwQ0FrNVBKU0lDSWg0WkZ3Z1dDQkluRUIwRUJoSVVJZ0VpRFJNb0lESVpDQUFBQUFJQUFQL0xBLzREeXdBd0FKc0FBQk1VRmhjZUFSY2VBUmNlQVRNeU5qYytBVGMrQVRjK0FUVTBKaWN1QVNjdUFTY3VBU01pQmdjT0FRY09BUWNPQVJVek5EWTNQZ0UzUGdFM1BnRXpNaFlYSGdFWEhnRVhIZ0VWRkFZSERnRUhEZ0VIRGdFSE5UUW1KejRCTno0Qk56NEJOVFFtSnpZbUx3RW1CZ2NPQVFjdUFTTWlCZ2N1QVNjdUFTc0JEZ0VYRGdFVkZCWVhIZ0VYSGdFWERnRWRBUzRCSnk0Qkp5NEJKeTRCTlFBVkZCUTJJaUpSTUM5ak5UUmtMeTlSSWlJMkZSUVZGUlFWTmlJaVVTOHZZelUwWkM4d1VTSWlOaFFVRlZBUkVSRXVIUjVGSmlwVUtpdFRLU2hFSFI0dEVSRVJDZ3NLSUJVVk1Sc2NQQ0VWRlJrdkZSa3BEeHdjR1JvTEFnNE1CeGNSRWlVVUh6OGVIajBnR1N3VUJ3NEZGQTREREJrYUxpOFNMUm9OR0FzVUZTSStIQnN5RlJVaENnc0xBY3cwWXk4d1VpSWpOaFVVRlJVVUZEY2lJbE13TUdReU0yTXhNRklpSVRZVUZSUVVGUlEySWlKUk1DOWpOU3RVS1NkRkhSMHVFUkVSRVJFUkxoMGRSU2NvVkN3a1F5QWhQQndjTVJRVUlBeFNIaTBPQWdvSUNSa1JIVmM1SmtJYkgwRWpBUUVGQmdjVURnZ0pDUWdRRndZREFpTkJIeHRDSmtsbUhRc1FCUU1FQVEwdEgxSU1JQlFVTHh3Y1BTQWhSQ1FBQUFBQ0FZRUF6QVFsQXJJQUZBQXBBQUFCUGdFek1oWVhIZ0VYRGdFakJpWUhMZ0VuT1FFVE1qWTNOaFlYSGdFVktnRWpLZ0VuTGdFMU9RRUJnVlNuVkZTblZBRUVBVk9sVTFPbVV3TUhBd05TcDFOVHBsTUVBbE9uVTFTbVZBRUNBckFCQVFFQklXMGhBd0lCQVFFdFdpNyt6QVFCQVFRSUtsWXFBU3hZS3dBQUFBY0FBUCsyQXlNRHRnQUlBQTBBRVFBVkFCa0FIUUFoQUFBWElSRWpFU0VUSnhFM0ZTRTFJVGNGTnlVM0JUY2xOd1UzSlRjVE53TTNFemNEQUFLZFVmMy9BMDUrQVpIK2J3RUJrZ24rYlEwQmhSaitlekVCV1M3K3BuN3JSK3U3UTFaRFNnR3AvcW9CVndIK1ZlQlZWVU1uVnlkYWJsUnVlZEJLMFlmK3VETUJTVXIrY2c0Qmp3QUJBQUFBQVFBQXJaUk91bDhQUFBVQUN3UUFBQUFBQU5Ea2FxVUFBQUFBME9ScXBmL3ovNmdGeFFQTEFBQUFDQUFDQUFBQUFBQUFBQUVBQUFQQS84QUFBQVhuLy9QLzB3WEZBQUVBQUFBQUFBQUFBQUFBQUFBQUFBQXRBQUFBQUFBQUFBQUFBQUFBQWdBQUFBUUFBQmdFQVAvMEJBQUFJQVBrQUFBRUFBRUNCQUFBQUFTOEFBQUVBUC8xQXhBQUFnSjRBQUFEV0FBQUFwUUFBQVFvLy9zRTJ2LzNCUEFBQUFUcUFBQUVsQUFBQk80QUFBV0VBQUFFWlAvL0JBQUFKQVBNQUJBRURQLzBCYUVBQUFORUFSOER3QUFBQS9zQUFBWGdBQnNGNXdBaEJGUUFBQVNlQUhFRUFBQW5BOUFBT2dTZEFBQURxQUFBQkFBQUFBU0FBRU1EMHYvekJBQUFBQVhBQVlFRElnQUFBQUFBQUFBS0FCUUFIZ0VhQWU0QzNnTjBBOElFZWdWZUJlSUdWQWNLQ0dZSlJBbTBDMXdOYWc0Q0R0WVBxQkJRRWI0UzBCUFlGQlFWOEJZYUZ6UVg2aGhRR1c0YUdCc0tHNHdjWGgzZUg4QWc5aUdNSW1nalRpT09JOUlBQVFBQUFDMEJjQUFOQUFBQUFBQUNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQTRBcmdBQkFBQUFBQUFCQUE0QUFBQUJBQUFBQUFBQ0FBNEFSd0FCQUFBQUFBQURBQTRBSkFBQkFBQUFBQUFFQUE0QVZRQUJBQUFBQUFBRkFCWUFEZ0FCQUFBQUFBQUdBQWNBTWdBQkFBQUFBQUFLQURRQVl3QURBQUVFQ1FBQkFBNEFBQUFEQUFFRUNRQUNBQTRBUndBREFBRUVDUUFEQUE0QUpBQURBQUVFQ1FBRUFBNEFWUUFEQUFFRUNRQUZBQllBRGdBREFBRUVDUUFHQUE0QU9RQURBQUVFQ1FBS0FEUUFZd0JwQUdNQWJ3QnRBRzhBYndCdUFGWUFaUUJ5QUhNQWFRQnZBRzRBSUFBeEFDNEFNQUJwQUdNQWJ3QnRBRzhBYndCdWFXTnZiVzl2YmdCcEFHTUFid0J0QUc4QWJ3QnVBRklBWlFCbkFIVUFiQUJoQUhJQWFRQmpBRzhBYlFCdkFHOEFiZ0JHQUc4QWJnQjBBQ0FBWndCbEFHNEFaUUJ5QUdFQWRBQmxBR1FBSUFCaUFIa0FJQUJKQUdNQWJ3Qk5BRzhBYndCdUFDNEFBQUFBQXdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPT0pIGZvcm1hdCgnd29mZicpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1lcXVhbC12aWV3cG9ydCAuYTAtem9jaWFsLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1pY29ue3dpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luOjZweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1lcXVhbC12aWV3cG9ydCAuYTAtem9jaWFsOmJlZm9yZSwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtaWNvbjpiZWZvcmV7d2lkdGg6NDBweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWVxdWFsLXZpZXdwb3J0IC5hMC16b2NpYWw6aG92ZXI6YmVmb3JlLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvY2lhbC5hMC1pY29uOmhvdmVyOmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjQpfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWVxdWFsLXZpZXdwb3J0IC5hMC16b2NpYWwgc3BhbiwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b2NpYWwuYTAtaWNvbiBzcGFue2Rpc3BsYXk6bm9uZX0jYTAtbG9jayAuYTAtY2xlYXJmaXh7b3ZlcmZsb3c6YXV0bzt6b29tOjF9I2EwLWxvY2sgLmEwLXNob3d7ZGlzcGxheTpibG9ja30jYTAtbG9jayAuYTAtaGlkZXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fSNhMC1sb2NrIC5hMC1wYW5lbHsqem9vbToxO2JhY2tncm91bmQ6I2ZmZjt3aWR0aDoyODBweDstd2Via2l0LXRyYW5zaXRpb246aGVpZ2h0IDUwbXMgZWFzZS1pbjstbW96LXRyYW5zaXRpb246aGVpZ2h0IDUwbXMgZWFzZS1pbjt0cmFuc2l0aW9uOmhlaWdodCA1MG1zIGVhc2UtaW59I2EwLWxvY2sgLmEwLXBhbmVsOmFmdGVyLCNhMC1sb2NrIC5hMC1wYW5lbDpiZWZvcmV7Y29udGVudDpcXFwiIFxcXCI7ZGlzcGxheTp0YWJsZX0jYTAtbG9jayAuYTAtcGFuZWw6YWZ0ZXJ7Y2xlYXI6Ym90aH0jYTAtbG9jayAuYTAtcGFuZWwuYTAtZGlzYWJsZS10cmFuc2l0aW9uey13ZWJraXQtdHJhbnNpdGlvbjpub25lOy1tb3otdHJhbnNpdGlvbjpub25lO3RyYW5zaXRpb246bm9uZX0jYTAtbG9jayAuYTAtcGFuZWwgLmEwLWxvYWRpbmd7bWluLWhlaWdodDoxMTBweH0jYTAtbG9jayAuYTAtc3Bpbi1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7dG9wOjUwJX0jYTAtbG9jayAuYTAtbG9hZGluZy5hMC13aXRoLW1lc3NhZ2UgLmEwLXNwaW4tY29udGFpbmVye3RvcDozNyV9I2EwLWxvY2sgLmEwLXNwaW4tbWVzc2FnZXt0ZXh0LWFsaWduOmNlbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6NjBweH0jYTAtbG9jayAuYTAtc3Bpbi1tZXNzYWdlIHNwYW57Zm9udC1zaXplOjE0cHg7Y29sb3I6IzQxNDQ0YX0jYTAtbG9jayAuYTAtc3Bpbi1pbWd7cG9zaXRpb246cmVsYXRpdmU7dG9wOjUwJTtsZWZ0OjUwJTt3aWR0aDozMnB4O2hlaWdodDozMnB4O21hcmdpbi1sZWZ0Oi0xNnB4O21hcmdpbi10b3A6LTE2cHh9I2EwLWxvY2sgLmEwLW92ZXJsYXkuYTAtaWU4LW92ZXJsYXl7YmFja2dyb3VuZDowIDA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2Fzc2V0cy5hdXRoMC5jb20vdzIvaW1nL2JnLXRyYW5zcC5wbmcpfSNhMC1sb2NrIC5hMC1vdmVybGF5e21hcmdpbjowO2Rpc3BsYXk6dGFibGU7cG9zaXRpb246Zml4ZWQ7bGVmdDowO3RvcDowO2JvdHRvbTowO3JpZ2h0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW47ei1pbmRleDo5OTk5O2ZvbnQtd2VpZ2h0OjIwMDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7YmFja2dyb3VuZDojMDAwO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuOCk7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNpdGlvbjozMDBtcyBvcGFjaXR5IGVhc2Utb3V0Oy1tb3otdHJhbnNpdGlvbjozMDBtcyBvcGFjaXR5IGVhc2Utb3V0O3RyYW5zaXRpb246MzAwbXMgb3BhY2l0eSBlYXNlLW91dDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDAsMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDAsMCl9I2EwLWxvY2sgLmEwLW92ZXJsYXkgLmEwLWNlbnRyaXh7cGFkZGluZzowO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtkaXNwbGF5OnRhYmxlLWNlbGw7bWFyZ2luOjB9I2EwLWxvY2sgLmEwLW92ZXJsYXkuYTAtYWN0aXZle29wYWNpdHk6MX0jYTAtbG9jayAuYTAtb3ZlcmxheSAuYTAtcGFuZWx7ZGlzcGxheTpub25lO21hcmdpbjowIGF1dG99I2EwLWxvY2sgLmEwLW92ZXJsYXkgLmEwLXBhbmVsLmEwLWFjdGl2ZXtkaXNwbGF5OmJsb2NrfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWFuaW1hdGVkey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOjFzOy1tb3otYW5pbWF0aW9uLWR1cmF0aW9uOjFzO2FuaW1hdGlvbi1kdXJhdGlvbjoxczstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDstbW96LWFuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtYW5pbWF0ZWQuYTAtaW5maW5pdGV7LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlOy1tb3otYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDppbmZpbml0ZTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWFuaW1hdGVkLmEwLWhpbmdley13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOjJzOy1tb3otYW5pbWF0aW9uLWR1cmF0aW9uOjJzO2FuaW1hdGlvbi1kdXJhdGlvbjoyc31ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlezAlLDEwMCUsMjAlLDUwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX00MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpfTYwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCl9fUBrZXlmcmFtZXMgYm91bmNlezAlLDEwMCUsMjAlLDUwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX00MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1cHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1cHgpfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlezAlLDEwMCUsMjAlLDUwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX00MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1cHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1cHgpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1ib3VuY2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2U7LW1vei1hbmltYXRpb24tbmFtZTpib3VuY2U7YW5pbWF0aW9uLW5hbWU6Ym91bmNlfUAtd2Via2l0LWtleWZyYW1lcyBmbGFzaHswJSwxMDAlLDUwJXtvcGFjaXR5OjF9MjUlLDc1JXtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgZmxhc2h7MCUsMTAwJSw1MCV7b3BhY2l0eToxfTI1JSw3NSV7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgZmxhc2h7MCUsMTAwJSw1MCV7b3BhY2l0eToxfTI1JSw3NSV7b3BhY2l0eTowfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mbGFzaHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZsYXNoOy1tb3otYW5pbWF0aW9uLW5hbWU6Zmxhc2g7YW5pbWF0aW9uLW5hbWU6Zmxhc2h9QC13ZWJraXQta2V5ZnJhbWVzIHB1bHNlezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBwdWxzZXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEuMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX1ALW1vei1rZXlmcmFtZXMgcHVsc2V7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxLjEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEuMSk7dHJhbnNmb3JtOnNjYWxlKDEuMSl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcHVsc2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpwdWxzZTstbW96LWFuaW1hdGlvbi1uYW1lOnB1bHNlO2FuaW1hdGlvbi1uYW1lOnB1bHNlfUAtd2Via2l0LWtleWZyYW1lcyBydWJiZXJCYW5kezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0zMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGVYKDEuMjUpIHNjYWxlWSgwLjc1KTt0cmFuc2Zvcm06c2NhbGVYKDEuMjUpIHNjYWxlWSgwLjc1KX00MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGVYKDAuNzUpIHNjYWxlWSgxLjI1KTt0cmFuc2Zvcm06c2NhbGVYKDAuNzUpIHNjYWxlWSgxLjI1KX02MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGVYKDEuMTUpIHNjYWxlWSgwLjg1KTt0cmFuc2Zvcm06c2NhbGVYKDEuMTUpIHNjYWxlWSgwLjg1KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBydWJiZXJCYW5kezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTMwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpOy1tcy10cmFuc2Zvcm06c2NhbGVYKDEuMjUpIHNjYWxlWSgwLjc1KTstbW96LXRyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpO3RyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpfTQwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpOy1tcy10cmFuc2Zvcm06c2NhbGVYKDAuNzUpIHNjYWxlWSgxLjI1KTstbW96LXRyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpO3RyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpOy1tcy10cmFuc2Zvcm06c2NhbGVYKDEuMTUpIHNjYWxlWSgwLjg1KTstbW96LXRyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpO3RyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fUAtbW96LWtleWZyYW1lcyBydWJiZXJCYW5kezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTMwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpOy1tcy10cmFuc2Zvcm06c2NhbGVYKDEuMjUpIHNjYWxlWSgwLjc1KTstbW96LXRyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpO3RyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpfTQwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpOy1tcy10cmFuc2Zvcm06c2NhbGVYKDAuNzUpIHNjYWxlWSgxLjI1KTstbW96LXRyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpO3RyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpOy1tcy10cmFuc2Zvcm06c2NhbGVYKDEuMTUpIHNjYWxlWSgwLjg1KTstbW96LXRyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpO3RyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXJ1YmJlckJhbmR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpydWJiZXJCYW5kOy1tb3otYW5pbWF0aW9uLW5hbWU6cnViYmVyQmFuZDthbmltYXRpb24tbmFtZTpydWJiZXJCYW5kfUAtd2Via2l0LWtleWZyYW1lcyBzaGFrZXswJSwxMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAlLDMwJSw1MCUsNzAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9MjAlLDQwJSw2MCUsODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCl9fUBrZXlmcmFtZXMgc2hha2V7MCUsMTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwJSwzMCUsNTAlLDcwJSw5MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9MjAlLDQwJSw2MCUsODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCl9fUAtbW96LWtleWZyYW1lcyBzaGFrZXswJSwxMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAlLDMwJSw1MCUsNzAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0yMCUsNDAlLDYwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtc2hha2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzaGFrZTstbW96LWFuaW1hdGlvbi1uYW1lOnNoYWtlO2FuaW1hdGlvbi1uYW1lOnNoYWtlfUAtd2Via2l0LWtleWZyYW1lcyBzd2luZ3syMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE1ZGVnKX00MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC0xMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMTBkZWcpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg1ZGVnKX04MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC01ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC01ZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfX1Aa2V5ZnJhbWVzIHN3aW5nezIwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTVkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDE1ZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMTVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMTVkZWcpfTQwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTEwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtMTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtMTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTEwZGVnKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDVkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDVkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDVkZWcpfTgwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTVkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC01ZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTVkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfX1ALW1vei1rZXlmcmFtZXMgc3dpbmd7MjAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxNWRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMTVkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgxNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxNWRlZyl9NDAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC0xMGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC0xMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMTBkZWcpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNWRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoNWRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNWRlZyl9ODAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNWRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTVkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNWRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXN3aW5ney13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgY2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnRvcCBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjp0b3AgY2VudGVyOy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6c3dpbmc7LW1vei1hbmltYXRpb24tbmFtZTpzd2luZzthbmltYXRpb24tbmFtZTpzd2luZ31ALXdlYmtpdC1rZXlmcmFtZXMgdGFkYXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9MTAlLDIwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjkpIHJvdGF0ZSgtM2RlZyk7dHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKX0zMCUsNTAlLDcwJSw5MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoM2RlZyk7dHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKDNkZWcpfTQwJSw2MCUsODAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApO3RyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCl9fUBrZXlmcmFtZXMgdGFkYXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0xMCUsMjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjkpIHJvdGF0ZSgtM2RlZyk7dHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKX0zMCUsNTAlLDcwJSw5MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoM2RlZyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoM2RlZyl9NDAlLDYwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpOy1tcy10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApOy1tcy10cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpIHJvdGF0ZSgwKTt0cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApfX1ALW1vei1rZXlmcmFtZXMgdGFkYXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0xMCUsMjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjkpIHJvdGF0ZSgtM2RlZyk7dHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKX0zMCUsNTAlLDcwJSw5MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoM2RlZyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoM2RlZyl9NDAlLDYwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpOy1tcy10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApOy1tcy10cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpIHJvdGF0ZSgwKTt0cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC10YWRhey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6dGFkYTstbW96LWFuaW1hdGlvbi1uYW1lOnRhZGE7YW5pbWF0aW9uLW5hbWU6dGFkYX1ALXdlYmtpdC1rZXlmcmFtZXMgd29iYmxlezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKX0xNSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjUlKSByb3RhdGUoLTVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyl9MzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUlKSByb3RhdGUoLTNkZWcpfTYwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwJSkgcm90YXRlKDJkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwJSkgcm90YXRlKDJkZWcpfTc1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNSUpIHJvdGF0ZSgtMWRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSl9fUBrZXlmcmFtZXMgd29iYmxlezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjUlKSByb3RhdGUoLTVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyl9MzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwJSkgcm90YXRlKDNkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xNSUpIHJvdGF0ZSgtM2RlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCUpIHJvdGF0ZSgyZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAlKSByb3RhdGUoMmRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCUpIHJvdGF0ZSgyZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCUpIHJvdGF0ZSgyZGVnKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNSUpIHJvdGF0ZSgtMWRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNSUpIHJvdGF0ZSgtMWRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKX19QC1tb3ota2V5ZnJhbWVzIHdvYmJsZXswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKX0xNSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjUlKSByb3RhdGUoLTVkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjUlKSByb3RhdGUoLTVkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTI1JSkgcm90YXRlKC01ZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjUlKSByb3RhdGUoLTVkZWcpfTMwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwJSkgcm90YXRlKDNkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMCUpIHJvdGF0ZSgzZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwJSkgcm90YXRlKDNkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwJSkgcm90YXRlKDNkZWcpfTQ1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xNSUpIHJvdGF0ZSgtM2RlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xNSUpIHJvdGF0ZSgtM2RlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUlKSByb3RhdGUoLTNkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xNSUpIHJvdGF0ZSgtM2RlZyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAlKSByb3RhdGUoMmRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwJSkgcm90YXRlKDJkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAlKSByb3RhdGUoMmRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAlKSByb3RhdGUoMmRlZyl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUlKSByb3RhdGUoLTFkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNSUpIHJvdGF0ZSgtMWRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNSUpIHJvdGF0ZSgtMWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUlKSByb3RhdGUoLTFkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXdvYmJsZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOndvYmJsZTstbW96LWFuaW1hdGlvbi1uYW1lOndvYmJsZTthbmltYXRpb24tbmFtZTp3b2JibGV9QC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZUluezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfTUwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4wNSk7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjkpO3RyYW5zZm9ybTpzY2FsZSgwLjkpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBib3VuY2VJbnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4zKTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4zKTt0cmFuc2Zvcm06c2NhbGUoMC4zKX01MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMDUpOy1tcy10cmFuc2Zvcm06c2NhbGUoMS4wNSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMS4wNSk7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjkpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC45KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjkpO3RyYW5zZm9ybTpzY2FsZSgwLjkpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlSW57MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9NTAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjA1KTstbXMtdHJhbnNmb3JtOnNjYWxlKDEuMDUpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEuMDUpO3RyYW5zZm9ybTpzY2FsZSgxLjA1KX03MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuOSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC45KTt0cmFuc2Zvcm06c2NhbGUoMC45KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtYm91bmNlSW57LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VJbjstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZUluO2FuaW1hdGlvbi1uYW1lOmJvdW5jZUlufUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VJbkRvd257MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIGJvdW5jZUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QC1tb3ota2V5ZnJhbWVzIGJvdW5jZUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtYm91bmNlSW5Eb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5Eb3duOy1tb3otYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5Eb3duO2FuaW1hdGlvbi1uYW1lOmJvdW5jZUluRG93bn1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgzMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgzMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QGtleWZyYW1lcyBib3VuY2VJbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgzMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUAtbW96LWtleWZyYW1lcyBib3VuY2VJbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgzMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWJvdW5jZUluTGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJvdW5jZUluTGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZUluTGVmdDthbmltYXRpb24tbmFtZTpib3VuY2VJbkxlZnR9QC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QGtleWZyYW1lcyBib3VuY2VJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUAtbW96LWtleWZyYW1lcyBib3VuY2VJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWJvdW5jZUluUmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VJblJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5SaWdodDthbmltYXRpb24tbmFtZTpib3VuY2VJblJpZ2h0fUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgYm91bmNlSW5VcHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlSW5VcHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1ib3VuY2VJblVwey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5VcDstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZUluVXA7YW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5VcH1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlT3V0ezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0yNSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45NSk7dHJhbnNmb3JtOnNjYWxlKDAuOTUpfTUwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfX1Aa2V5ZnJhbWVzIGJvdW5jZU91dHswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0yNSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45NSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjk1KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjk1KTt0cmFuc2Zvcm06c2NhbGUoMC45NSl9NTAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMS4xKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxLjEpO3RyYW5zZm9ybTpzY2FsZSgxLjEpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9fUAtbW96LWtleWZyYW1lcyBib3VuY2VPdXR7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9MjUley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOTUpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC45NSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC45NSk7dHJhbnNmb3JtOnNjYWxlKDAuOTUpfTUwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEuMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4zKTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1ib3VuY2VPdXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VPdXQ7LW1vei1hbmltYXRpb24tbmFtZTpib3VuY2VPdXQ7YW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0fUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VPdXREb3duezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9fUBrZXlmcmFtZXMgYm91bmNlT3V0RG93bnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlT3V0RG93bnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1ib3VuY2VPdXREb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0RG93bjstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dERvd247YW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0RG93bn1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlT3V0TGVmdHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX1Aa2V5ZnJhbWVzIGJvdW5jZU91dExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIGJvdW5jZU91dExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtYm91bmNlT3V0TGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dExlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpib3VuY2VPdXRMZWZ0O2FuaW1hdGlvbi1uYW1lOmJvdW5jZU91dExlZnR9QC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZU91dFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9fUBrZXlmcmFtZXMgYm91bmNlT3V0UmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIGJvdW5jZU91dFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWJvdW5jZU91dFJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0UmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpib3VuY2VPdXRSaWdodDthbmltYXRpb24tbmFtZTpib3VuY2VPdXRSaWdodH1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlT3V0VXB7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX19QGtleWZyYW1lcyBib3VuY2VPdXRVcHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlT3V0VXB7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtYm91bmNlT3V0VXB7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VPdXRVcDstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dFVwO2FuaW1hdGlvbi1uYW1lOmJvdW5jZU91dFVwfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlSW57MCV7b3BhY2l0eTowfTEwMCV7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGZhZGVJbnswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fUAtbW96LWtleWZyYW1lcyBmYWRlSW57MCV7b3BhY2l0eTowfTEwMCV7b3BhY2l0eToxfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mYWRlSW57LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlSW47LW1vei1hbmltYXRpb24tbmFtZTpmYWRlSW47YW5pbWF0aW9uLW5hbWU6ZmFkZUlufUAtd2Via2l0LWtleWZyYW1lcyBmYWRlSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBmYWRlSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1ALW1vei1rZXlmcmFtZXMgZmFkZUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtZmFkZUluRG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJbkRvd247LW1vei1hbmltYXRpb24tbmFtZTpmYWRlSW5Eb3duO2FuaW1hdGlvbi1uYW1lOmZhZGVJbkRvd259QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJbkRvd25CaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBmYWRlSW5Eb3duQmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtbW96LWtleWZyYW1lcyBmYWRlSW5Eb3duQmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZhZGVJbkRvd25CaWd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlSW5Eb3duQmlnOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZUluRG93bkJpZzthbmltYXRpb24tbmFtZTpmYWRlSW5Eb3duQmlnfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QGtleWZyYW1lcyBmYWRlSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1ALW1vei1rZXlmcmFtZXMgZmFkZUluTGVmdHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtZmFkZUluTGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJbkxlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlSW5MZWZ0O2FuaW1hdGlvbi1uYW1lOmZhZGVJbkxlZnR9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJbkxlZnRCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QGtleWZyYW1lcyBmYWRlSW5MZWZ0QmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUAtbW96LWtleWZyYW1lcyBmYWRlSW5MZWZ0QmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZhZGVJbkxlZnRCaWd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlSW5MZWZ0QmlnOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZUluTGVmdEJpZzthbmltYXRpb24tbmFtZTpmYWRlSW5MZWZ0QmlnfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlSW5SaWdodHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1Aa2V5ZnJhbWVzIGZhZGVJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUAtbW96LWtleWZyYW1lcyBmYWRlSW5SaWdodHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mYWRlSW5SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJblJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZUluUmlnaHQ7YW5pbWF0aW9uLW5hbWU6ZmFkZUluUmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJblJpZ2h0QmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1Aa2V5ZnJhbWVzIGZhZGVJblJpZ2h0QmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QC1tb3ota2V5ZnJhbWVzIGZhZGVJblJpZ2h0QmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtZmFkZUluUmlnaHRCaWd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlSW5SaWdodEJpZzstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVJblJpZ2h0QmlnO2FuaW1hdGlvbi1uYW1lOmZhZGVJblJpZ2h0QmlnfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlSW5VcHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIGZhZGVJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtbW96LWtleWZyYW1lcyBmYWRlSW5VcHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mYWRlSW5VcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJblVwOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZUluVXA7YW5pbWF0aW9uLW5hbWU6ZmFkZUluVXB9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJblVwQmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIGZhZGVJblVwQmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QC1tb3ota2V5ZnJhbWVzIGZhZGVJblVwQmlnezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtZmFkZUluVXBCaWd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlSW5VcEJpZzstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVJblVwQmlnO2FuaW1hdGlvbi1uYW1lOmZhZGVJblVwQmlnfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0ezAle29wYWNpdHk6MX0xMDAle29wYWNpdHk6MH19QGtleWZyYW1lcyBmYWRlT3V0ezAle29wYWNpdHk6MX0xMDAle29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIGZhZGVPdXR7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mYWRlT3V0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZU91dDstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXQ7YW5pbWF0aW9uLW5hbWU6ZmFkZU91dH1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZU91dERvd257MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KX19QGtleWZyYW1lcyBmYWRlT3V0RG93bnswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dERvd257MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtZmFkZU91dERvd257LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0RG93bjstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXREb3duO2FuaW1hdGlvbi1uYW1lOmZhZGVPdXREb3dufUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0RG93bkJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX19QGtleWZyYW1lcyBmYWRlT3V0RG93bkJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9fUAtbW96LWtleWZyYW1lcyBmYWRlT3V0RG93bkJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZhZGVPdXREb3duQmlney13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZU91dERvd25CaWc7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlT3V0RG93bkJpZzthbmltYXRpb24tbmFtZTpmYWRlT3V0RG93bkJpZ31ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZU91dExlZnR7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfX1Aa2V5ZnJhbWVzIGZhZGVPdXRMZWZ0ezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dExlZnR7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZhZGVPdXRMZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZU91dExlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlT3V0TGVmdDthbmltYXRpb24tbmFtZTpmYWRlT3V0TGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZU91dExlZnRCaWd7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX19QGtleWZyYW1lcyBmYWRlT3V0TGVmdEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dExlZnRCaWd7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtZmFkZU91dExlZnRCaWd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0TGVmdEJpZzstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRMZWZ0QmlnO2FuaW1hdGlvbi1uYW1lOmZhZGVPdXRMZWZ0QmlnfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0UmlnaHR7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX19QGtleWZyYW1lcyBmYWRlT3V0UmlnaHR7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX19QC1tb3ota2V5ZnJhbWVzIGZhZGVPdXRSaWdodHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mYWRlT3V0UmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0UmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlT3V0UmlnaHQ7YW5pbWF0aW9uLW5hbWU6ZmFkZU91dFJpZ2h0fUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0UmlnaHRCaWd7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9fUBrZXlmcmFtZXMgZmFkZU91dFJpZ2h0QmlnezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIGZhZGVPdXRSaWdodEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZhZGVPdXRSaWdodEJpZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRSaWdodEJpZzstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRSaWdodEJpZzthbmltYXRpb24tbmFtZTpmYWRlT3V0UmlnaHRCaWd9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVPdXRVcHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9fUBrZXlmcmFtZXMgZmFkZU91dFVwezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dFVwezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mYWRlT3V0VXB7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0VXA7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlT3V0VXA7YW5pbWF0aW9uLW5hbWU6ZmFkZU91dFVwfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0VXBCaWd7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX19QGtleWZyYW1lcyBmYWRlT3V0VXBCaWd7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIGZhZGVPdXRVcEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mYWRlT3V0VXBCaWd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0VXBCaWc7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlT3V0VXBCaWc7YW5pbWF0aW9uLW5hbWU6ZmFkZU91dFVwQmlnfUAtd2Via2l0LWtleWZyYW1lcyBmbGlwezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMCkgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMCkgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9NDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE3MGRlZykgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE3MGRlZykgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9NTAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufTgwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgwLjk1KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW59MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW59fUBrZXlmcmFtZXMgZmxpcHswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDApIHNjYWxlKDEpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgwKSBzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDApIHNjYWxlKDEpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDApIHNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE3MGRlZykgc2NhbGUoMSk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9NTAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxOTBkZWcpIHNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufTgwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDAuOTUpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn19QC1tb3ota2V5ZnJhbWVzIGZsaXB7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgwKSBzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMCkgc2NhbGUoMSk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgwKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgwKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9NDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE3MGRlZykgc2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxNzBkZWcpIHNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE3MGRlZykgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE3MGRlZykgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fTUwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxOTBkZWcpIHNjYWxlKDEpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTkwZGVnKSBzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxOTBkZWcpIHNjYWxlKDEpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxOTBkZWcpIHNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn04MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDAuOTUpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDAuOTUpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgwLjk1KTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDAuOTUpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW59fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWFuaW1hdGVkLmEwLWZsaXB7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGU7LW1zLWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTstbW96LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTtiYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGU7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmbGlwOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmxpcDthbmltYXRpb24tbmFtZTpmbGlwfUAtd2Via2l0LWtleWZyYW1lcyBmbGlwSW5YezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO29wYWNpdHk6MH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoLTEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoLTEwZGVnKX03MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGZsaXBJblh7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO29wYWNpdHk6MH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoLTEwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKC0xMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoLTEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoLTEwZGVnKX03MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMTBkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7b3BhY2l0eToxfX1ALW1vei1rZXlmcmFtZXMgZmxpcEluWHswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7b3BhY2l0eTowfTQwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoLTEwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTtvcGFjaXR5OjF9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZsaXBJblh7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy1tcy1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy1tb3otYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDtiYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmxpcEluWDstbW96LWFuaW1hdGlvbi1uYW1lOmZsaXBJblg7YW5pbWF0aW9uLW5hbWU6ZmxpcEluWH1ALXdlYmtpdC1rZXlmcmFtZXMgZmxpcEluWXswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTtvcGFjaXR5OjB9NDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKC0xMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKC0xMGRlZyl9NzAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpO29wYWNpdHk6MX19QGtleWZyYW1lcyBmbGlwSW5ZezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTtvcGFjaXR5OjB9NDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKC0xMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgtMTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKC0xMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKC0xMGRlZyl9NzAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDEwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDEwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgxMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDEwZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpO29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIGZsaXBJbll7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO29wYWNpdHk6MH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKC0xMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKX03MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7b3BhY2l0eToxfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1mbGlwSW5Zey13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstbXMtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstbW96LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7YmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZsaXBJblk7LW1vei1hbmltYXRpb24tbmFtZTpmbGlwSW5ZO2FuaW1hdGlvbi1uYW1lOmZsaXBJbll9QC13ZWJraXQta2V5ZnJhbWVzIGZsaXBPdXRYezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgZmxpcE91dFh7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIGZsaXBPdXRYezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTtvcGFjaXR5OjB9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZsaXBPdXRYey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmxpcE91dFg7LW1vei1hbmltYXRpb24tbmFtZTpmbGlwT3V0WDthbmltYXRpb24tbmFtZTpmbGlwT3V0WDstd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7LW1zLWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7LW1vei1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50O2JhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnR9QC13ZWJraXQta2V5ZnJhbWVzIGZsaXBPdXRZezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgZmxpcE91dFl7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIGZsaXBPdXRZezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTtvcGFjaXR5OjB9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWZsaXBPdXRZey13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstbXMtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstbW96LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7YmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZsaXBPdXRZOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmxpcE91dFk7YW5pbWF0aW9uLW5hbWU6ZmxpcE91dFl9QC13ZWJraXQta2V5ZnJhbWVzIGxpZ2h0U3BlZWRJbnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTtvcGFjaXR5OjB9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpIHNrZXdYKDMwZGVnKTtvcGFjaXR5OjF9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpO29wYWNpdHk6MX19QGtleWZyYW1lcyBsaWdodFNwZWVkSW57MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO29wYWNpdHk6MH02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAlKSBza2V3WCgzMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpIHNrZXdYKDMwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpIHNrZXdYKDMwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAlKSBza2V3WCgzMGRlZyk7b3BhY2l0eToxfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgtMTVkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goLTE1ZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgtMTVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgtMTVkZWcpO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpO29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIGxpZ2h0U3BlZWRJbnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7b3BhY2l0eTowfTYwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpIHNrZXdYKDMwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpIHNrZXdYKDMwZGVnKTtvcGFjaXR5OjF9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgtMTVkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7b3BhY2l0eToxfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1saWdodFNwZWVkSW57LXdlYmtpdC1hbmltYXRpb24tbmFtZTpsaWdodFNwZWVkSW47LW1vei1hbmltYXRpb24tbmFtZTpsaWdodFNwZWVkSW47YW5pbWF0aW9uLW5hbWU6bGlnaHRTcGVlZEluOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH1ALXdlYmtpdC1rZXlmcmFtZXMgbGlnaHRTcGVlZE91dHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGxpZ2h0U3BlZWRPdXR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIGxpZ2h0U3BlZWRPdXR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO29wYWNpdHk6MH19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtbGlnaHRTcGVlZE91dHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmxpZ2h0U3BlZWRPdXQ7LW1vei1hbmltYXRpb24tbmFtZTpsaWdodFNwZWVkT3V0O2FuaW1hdGlvbi1uYW1lOmxpZ2h0U3BlZWRPdXQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufUAtd2Via2l0LWtleWZyYW1lcyByb3RhdGVJbnswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC0yMDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTIwMGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19QGtleWZyYW1lcyByb3RhdGVJbnswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTIwMGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTIwMGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC0yMDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTIwMGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZUluezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTIwMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb3RhdGVJbnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZUluOy1tb3otYW5pbWF0aW9uLW5hbWU6cm90YXRlSW47YW5pbWF0aW9uLW5hbWU6cm90YXRlSW59QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZUluRG93bkxlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19QGtleWZyYW1lcyByb3RhdGVJbkRvd25MZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZUluRG93bkxlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb3RhdGVJbkRvd25MZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm90YXRlSW5Eb3duTGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZUluRG93bkxlZnQ7YW5pbWF0aW9uLW5hbWU6cm90YXRlSW5Eb3duTGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlSW5Eb3duUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHJvdGF0ZUluRG93blJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fUAtbW96LWtleWZyYW1lcyByb3RhdGVJbkRvd25SaWdodHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb3RhdGVJbkRvd25SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZUluRG93blJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6cm90YXRlSW5Eb3duUmlnaHQ7YW5pbWF0aW9uLW5hbWU6cm90YXRlSW5Eb3duUmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZUluVXBMZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHJvdGF0ZUluVXBMZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1ALW1vei1rZXlmcmFtZXMgcm90YXRlSW5VcExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXJvdGF0ZUluVXBMZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm90YXRlSW5VcExlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVJblVwTGVmdDthbmltYXRpb24tbmFtZTpyb3RhdGVJblVwTGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlSW5VcFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHJvdGF0ZUluVXBSaWdodHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZUluVXBSaWdodHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcm90YXRlSW5VcFJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm90YXRlSW5VcFJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6cm90YXRlSW5VcFJpZ2h0O2FuaW1hdGlvbi1uYW1lOnJvdGF0ZUluVXBSaWdodH1ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlT3V0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgyMDBkZWcpO29wYWNpdHk6MH19QGtleWZyYW1lcyByb3RhdGVPdXR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgyMDBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgyMDBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZU91dHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMjAwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMjAwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7b3BhY2l0eTowfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb3RhdGVPdXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb3RhdGVPdXQ7LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVPdXQ7YW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0fUAtd2Via2l0LWtleWZyYW1lcyByb3RhdGVPdXREb3duTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH19QGtleWZyYW1lcyByb3RhdGVPdXREb3duTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZU91dERvd25MZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb3RhdGVPdXREb3duTGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dERvd25MZWZ0Oy1tb3otYW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0RG93bkxlZnQ7YW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0RG93bkxlZnR9QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZU91dERvd25SaWdodHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH19QGtleWZyYW1lcyByb3RhdGVPdXREb3duUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTtvcGFjaXR5OjB9fUAtbW96LWtleWZyYW1lcyByb3RhdGVPdXREb3duUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTtvcGFjaXR5OjB9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXJvdGF0ZU91dERvd25SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dERvd25SaWdodDstbW96LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dERvd25SaWdodDthbmltYXRpb24tbmFtZTpyb3RhdGVPdXREb3duUmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZU91dFVwTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHJvdGF0ZU91dFVwTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTtvcGFjaXR5OjB9fUAtbW96LWtleWZyYW1lcyByb3RhdGVPdXRVcExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb3RhdGVPdXRVcExlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb3RhdGVPdXRVcExlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVPdXRVcExlZnQ7YW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0VXBMZWZ0fUAtd2Via2l0LWtleWZyYW1lcyByb3RhdGVPdXRVcFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH19QGtleWZyYW1lcyByb3RhdGVPdXRVcFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTtvcGFjaXR5OjB9fUAtbW96LWtleWZyYW1lcyByb3RhdGVPdXRVcFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTtvcGFjaXR5OjB9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXJvdGF0ZU91dFVwUmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb3RhdGVPdXRVcFJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0VXBSaWdodDthbmltYXRpb24tbmFtZTpyb3RhdGVPdXRVcFJpZ2h0fUAtd2Via2l0LWtleWZyYW1lcyBzbGlkZUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgc2xpZGVJbkRvd257MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1ALW1vei1rZXlmcmFtZXMgc2xpZGVJbkRvd257MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1zbGlkZUluRG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnNsaWRlSW5Eb3duOy1tb3otYW5pbWF0aW9uLW5hbWU6c2xpZGVJbkRvd247YW5pbWF0aW9uLW5hbWU6c2xpZGVJbkRvd259QC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QGtleWZyYW1lcyBzbGlkZUluTGVmdHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUAtbW96LWtleWZyYW1lcyBzbGlkZUluTGVmdHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXNsaWRlSW5MZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6c2xpZGVJbkxlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpzbGlkZUluTGVmdDthbmltYXRpb24tbmFtZTpzbGlkZUluTGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgc2xpZGVJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUBrZXlmcmFtZXMgc2xpZGVJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1ALW1vei1rZXlmcmFtZXMgc2xpZGVJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1zbGlkZUluUmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzbGlkZUluUmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpzbGlkZUluUmlnaHQ7YW5pbWF0aW9uLW5hbWU6c2xpZGVJblJpZ2h0fUAtd2Via2l0LWtleWZyYW1lcyBzbGlkZU91dExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX1Aa2V5ZnJhbWVzIHNsaWRlT3V0TGVmdHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9fUAtbW96LWtleWZyYW1lcyBzbGlkZU91dExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1zbGlkZU91dExlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzbGlkZU91dExlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpzbGlkZU91dExlZnQ7YW5pbWF0aW9uLW5hbWU6c2xpZGVPdXRMZWZ0fUAtd2Via2l0LWtleWZyYW1lcyBzbGlkZU91dFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9fUBrZXlmcmFtZXMgc2xpZGVPdXRSaWdodHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIHNsaWRlT3V0UmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXNsaWRlT3V0UmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzbGlkZU91dFJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6c2xpZGVPdXRSaWdodDthbmltYXRpb24tbmFtZTpzbGlkZU91dFJpZ2h0fUAtd2Via2l0LWtleWZyYW1lcyBzbGlkZU91dFVwezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX19QGtleWZyYW1lcyBzbGlkZU91dFVwezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIHNsaWRlT3V0VXB7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1zbGlkZU91dFVwey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6c2xpZGVPdXRVcDstbW96LWFuaW1hdGlvbi1uYW1lOnNsaWRlT3V0VXA7YW5pbWF0aW9uLW5hbWU6c2xpZGVPdXRVcH1ALXdlYmtpdC1rZXlmcmFtZXMgc2xpZGVJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIHNsaWRlSW5VcHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtbW96LWtleWZyYW1lcyBzbGlkZUluVXB7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1zbGlkZUluVXB7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzbGlkZUluVXA7LW1vei1hbmltYXRpb24tbmFtZTpzbGlkZUluVXA7YW5pbWF0aW9uLW5hbWU6c2xpZGVJblVwfUAtd2Via2l0LWtleWZyYW1lcyBzbGlkZU91dERvd257MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX19QGtleWZyYW1lcyBzbGlkZU91dERvd257MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9fUAtbW96LWtleWZyYW1lcyBzbGlkZU91dERvd257MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXNsaWRlT3V0RG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnNsaWRlT3V0RG93bjstbW96LWFuaW1hdGlvbi1uYW1lOnNsaWRlT3V0RG93bjthbmltYXRpb24tbmFtZTpzbGlkZU91dERvd259QC13ZWJraXQta2V5ZnJhbWVzIGhpbmdlezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTIwJSw2MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDgwZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7dHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDYwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDYwZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7dHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH04MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDYwZGVnKSB0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSg3MDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpO29wYWNpdHk6MH19QGtleWZyYW1lcyBoaW5nZXswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tcy10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tb3otdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH0yMCUsNjAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoODBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tcy10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tb3otdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDYwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg2MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDYwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDYwZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTgwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDYwZGVnKSB0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tcy10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tb3otdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDcwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDcwMHB4KTtvcGFjaXR5OjB9fUAtbW96LWtleWZyYW1lcyBoaW5nZXswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tcy10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tb3otdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH0yMCUsNjAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoODBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tcy10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tb3otdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDYwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg2MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDYwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDYwZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTgwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDYwZGVnKSB0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tcy10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy1tb3otdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDcwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDcwMHB4KTtvcGFjaXR5OjB9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWhpbmdley13ZWJraXQtYW5pbWF0aW9uLW5hbWU6aGluZ2U7LW1vei1hbmltYXRpb24tbmFtZTpoaW5nZTthbmltYXRpb24tbmFtZTpoaW5nZX1ALXdlYmtpdC1rZXlmcmFtZXMgcm9sbEluezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKSByb3RhdGUoLTEyMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgtMTIwZGVnKX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpfX1Aa2V5ZnJhbWVzIHJvbGxJbnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgtMTIwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyl9fUAtbW96LWtleWZyYW1lcyByb2xsSW57MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgtMTIwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgtMTIwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKSByb3RhdGUoLTEyMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgtMTIwZGVnKX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb2xsSW57LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb2xsSW47LW1vei1hbmltYXRpb24tbmFtZTpyb2xsSW47YW5pbWF0aW9uLW5hbWU6cm9sbElufUAtd2Via2l0LWtleWZyYW1lcyByb2xsT3V0ezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyl9fUBrZXlmcmFtZXMgcm9sbE91dHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSByb3RhdGUoMTIwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpfX1ALW1vei1rZXlmcmFtZXMgcm9sbE91dHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSByb3RhdGUoMTIwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1yb2xsT3V0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm9sbE91dDstbW96LWFuaW1hdGlvbi1uYW1lOnJvbGxPdXQ7YW5pbWF0aW9uLW5hbWU6cm9sbE91dH1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbUluezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfTUwJXtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgem9vbUluezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4zKTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfTUwJXtvcGFjaXR5OjF9fUAtbW96LWtleWZyYW1lcyB6b29tSW57MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9NTAle29wYWNpdHk6MX19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9vbUluey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbUluOy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbUluO2FuaW1hdGlvbi1uYW1lOnpvb21Jbn1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9fUBrZXlmcmFtZXMgem9vbUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19QC1tb3ota2V5ZnJhbWVzIHpvb21JbkRvd257MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvb21JbkRvd257LXdlYmtpdC1hbmltYXRpb24tbmFtZTp6b29tSW5Eb3duOy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbUluRG93bjthbmltYXRpb24tbmFtZTp6b29tSW5Eb3dufUAtd2Via2l0LWtleWZyYW1lcyB6b29tSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQ4cHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0OHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19QGtleWZyYW1lcyB6b29tSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDhweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0OHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0OHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDhweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX1ALW1vei1rZXlmcmFtZXMgem9vbUluTGVmdHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQ4cHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDhweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDhweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQ4cHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9vbUluTGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnpvb21JbkxlZnQ7LW1vei1hbmltYXRpb24tbmFtZTp6b29tSW5MZWZ0O2FuaW1hdGlvbi1uYW1lOnpvb21JbkxlZnR9QC13ZWJraXQta2V5ZnJhbWVzIHpvb21JblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00OHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19QGtleWZyYW1lcyB6b29tSW5SaWdodHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQ4cHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQ4cHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00OHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQ4cHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19QC1tb3ota2V5ZnJhbWVzIHpvb21JblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQ4cHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b29tSW5SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnpvb21JblJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbUluUmlnaHQ7YW5pbWF0aW9uLW5hbWU6em9vbUluUmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIHpvb21JblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19QGtleWZyYW1lcyB6b29tSW5VcHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19QC1tb3ota2V5ZnJhbWVzIHpvb21JblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b29tSW5VcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnpvb21JblVwOy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbUluVXA7YW5pbWF0aW9uLW5hbWU6em9vbUluVXB9QC13ZWJraXQta2V5ZnJhbWVzIHpvb21PdXR7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9MTAwJXtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgem9vbU91dHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4zKTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfTEwMCV7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgem9vbU91dHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4zKTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfTEwMCV7b3BhY2l0eTowfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b29tT3V0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbU91dDstbW96LWFuaW1hdGlvbi1uYW1lOnpvb21PdXQ7YW5pbWF0aW9uLW5hbWU6em9vbU91dH1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbU91dERvd257NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b219fUBrZXlmcmFtZXMgem9vbU91dERvd257NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tfX1ALW1vei1rZXlmcmFtZXMgem9vbU91dERvd257NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tfX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC16b29tT3V0RG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnpvb21PdXREb3duOy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbU91dERvd247YW5pbWF0aW9uLW5hbWU6em9vbU91dERvd259QC13ZWJraXQta2V5ZnJhbWVzIHpvb21PdXRMZWZ0ezQwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDJweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQycHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXJ9fUBrZXlmcmFtZXMgem9vbU91dExlZnR7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0MnB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQycHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQycHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0MnB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcn19QC1tb3ota2V5ZnJhbWVzIHpvb21PdXRMZWZ0ezQwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDJweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0MnB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0MnB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDJweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXJ9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvb21PdXRMZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbU91dExlZnQ7LW1vei1hbmltYXRpb24tbmFtZTp6b29tT3V0TGVmdDthbmltYXRpb24tbmFtZTp6b29tT3V0TGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbU91dFJpZ2h0ezQwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQycHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcn0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcn19QGtleWZyYW1lcyB6b29tT3V0UmlnaHR7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQycHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXJ9fUAtbW96LWtleWZyYW1lcyB6b29tT3V0UmlnaHR7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQycHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXJ9fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXpvb21PdXRSaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnpvb21PdXRSaWdodDstbW96LWFuaW1hdGlvbi1uYW1lOnpvb21PdXRSaWdodDthbmltYXRpb24tbmFtZTp6b29tT3V0UmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIHpvb21PdXRVcHs0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIHRvcH19QGtleWZyYW1lcyB6b29tT3V0VXB7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wfX1ALW1vei1rZXlmcmFtZXMgem9vbU91dFVwezQwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIHRvcDstbXMtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIHRvcH19I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtem9vbU91dFVwey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbU91dFVwOy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbU91dFVwO2FuaW1hdGlvbi1uYW1lOnpvb21PdXRVcH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1hbmltYXRlZC5hMC1mYXN0ey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4zczstbW96LWFuaW1hdGlvbi1kdXJhdGlvbjouM3M7YW5pbWF0aW9uLWR1cmF0aW9uOi4zczstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDstbW96LWFuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtc3Bpbm5lci1jc3N7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTttYXJnaW46LTIuNWVtO2Rpc3BsYXk6YmxvY2s7d2lkdGg6NWVtO2ZvbnQtc2l6ZTozMHB4O2NvbG9yOiNEMEQyRDM7Ym9yZGVyLXJhZGl1czoyLjVlbSAwIDIuNWVtIDIuNWVtOy13ZWJraXQtYW5pbWF0aW9uOnNwaW5uZXIgMnMgZWFzZS1pbi1vdXQgMHMgaW5maW5pdGU7LW1vei1hbmltYXRpb246c3Bpbm5lciAycyBlYXNlLWluLW91dCAwcyBpbmZpbml0ZTthbmltYXRpb246c3Bpbm5lciAycyBlYXNlLWluLW91dCAwcyBpbmZpbml0ZX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1zcGlubmVyLWNzczphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmJsb2NrO3dpZHRoOjEuOGVtO3RvcDoyLjVlbTtsZWZ0OjEuNmVtO2ZvbnQtZmFtaWx5OmF1dGgwIWltcG9ydGFudDtjb250ZW50OlxcXCJmXFxcIn1ALXdlYmtpdC1rZXlmcmFtZXMgc3Bpbm5lcntmcm9tey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMGRlZyl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlWSgzNjBkZWcpfX1ALW1vei1rZXlmcmFtZXMgc3Bpbm5lcntmcm9tey1tb3otdHJhbnNmb3JtOnJvdGF0ZVkoMGRlZyl9dG97LW1vei10cmFuc2Zvcm06cm90YXRlWSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIHNwaW5uZXJ7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGVZKDBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZVkoMGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGVZKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGVZKDBkZWcpfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMzYwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGVZKDM2MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGVZKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVkoMzYwZGVnKX19QGZvbnQtZmFjZXtmb250LWZhbWlseTpwcm94aW1hX25vdmE7c3JjOnVybChkYXRhOmFwcGxpY2F0aW9uL3gtZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGQwOUdSZ0FCQUFBQUFHUm9BQk1BQUFBQXg5Z0FBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCR1JsUk5BQUFCcUFBQUFCd0FBQUFjWWF0dEFVZEVSVVlBQUFIRUFBQUFMUUFBQURJREF3SHlSMUJQVXdBQUFmUUFBQWtvQUFBZWhwU0NmTGRIVTFWQ0FBQUxIQUFBQWdjQUFBWVVUSjUxVFU5VEx6SUFBQTBrQUFBQVdRQUFBR0I4Vk1LMFkyMWhjQUFBRFlBQUFBR05BQUFCNnJubFJKNWpkblFnQUFBUEVBQUFBQ29BQUFBcUROVUdLV1p3WjIwQUFBODhBQUFCc1FBQUFtVlR0QytuWjJGemNBQUFFUEFBQUFBSUFBQUFDQUFBQUJCbmJIbG1BQUFRK0FBQVN1Y0FBSTljV2RKUEUyaGxZV1FBQUZ2Z0FBQUFNUUFBQURZRjFRdHhhR2hsWVFBQVhCUUFBQUFnQUFBQUpBNi9CN0JvYlhSNEFBQmNOQUFBQWpFQUFBT2locXBTdld4dlkyRUFBRjVvQUFBQnh3QUFBZFFxY2s0OGJXRjRjQUFBWURBQUFBQWdBQUFBSUFJR0FhTnVZVzFsQUFCZ1VBQUFBWE1BQUFPQVZhbDlNSEJ2YzNRQUFHSEVBQUFCNlFBQUF0dU1EM3RvY0hKbGNBQUFZN0FBQUFDdkFBQUJFY2RSc0hWM1pXSm1BQUJrWUFBQUFBWUFBQUFHTUFSVFVBQUFBQUVBQUFBQXpEMml6d0FBQUFERjkrbXVBQUFBQU05MTRJTjQybU5nWkdCZzRBTmlMUVlRWUdKZ1lXQmtxQUhpV29aNklLK0I0UW1RL1pUaEJWZ0dKTThBQUY3ckJQWUFBQUI0MnJXWnk0OGpWeG5GUDl2bDhyUGFqMjUzcCtkaFQ3cmJURjRNRVBNS2hORXN3c2dCRVVHSEpBUWNCRkxJQm9SaXhBSXBtd1F3aE5VSXdrT3hCR1NCbElpRlJYYXdTUUwrRHhEZ2tJUUZpcEJZOUlMVkxGaU1PZmRYNVc2M0g5MTJkK01qbDh2bHF2djQ3ajNuZlBmYVltYVd0YXJkWTdGdmZQWGIzN1MwZWJwaXc2RzVYMkpmLzlxMzNEVUx2K20zdUQ1OUt5ZXZaK0xCcGRXWHp2c1dUM3J1bWNUdlBjOEMyOUd6ZXhhOVJtZkRnVHNmOXUySWwzNGZURjBiVEY4NzdqWHNEN3VDamdlbGNPeU4zZE9hdkRKZTU3RTFEQmEvbHo3MFhOOE9lai9zak5vd2JBeHIrblV3Yk92ZEhYYTR6NkhCMWZBNTE1dmVNbkU0aVArQzl3K2krUGYzeDZzZnR2dVlPTHNuZXBOak5GNTdPQWJMam1FVW41NkxrU0xqMnRKd1pZWFh3OWdScFRBK3ZWR0xEODJsMldQYlBINGV6bmlxRzg1RWpjOWdySnorc0QwWkVhNzJSek9YK0F3V20wbkxqOWRrdnlaamNPd3Jibm14ZFVmY2ZZK1F0TXVDYjNjS01idFg4TzJEZ20vUDJROTB6L05DMG40cytQYUMvVUxIRndYZmZpMUlBK3d1L1pyVVdWYndwUU9CcGF3Z1ZLMGtWRzFMOEtpdlJuMXBQWEdYanU4VkxsRmZtdnJTOW1FaFl4OFJzdlpSSVdmM0NUSDdtSkMzand0SnUxOEk3QlBDN2ZZRlljVWVGd3IyUmFGb0xhRmtUd3V1OVQ5VWphNzFhZHFkcHQxcDY5b3ZWZkt2aE1CZUUwcjJobEN5UHdwcDZ3dUIvYzBHS3VGTm9XcC90N2QwL3JaUXRYZUVMZnVIVUxWM0JWK3RXMWZQNnVyWFpjWHZYdlhqT2Z1dWZjKytieDFGNzNsRjdRWDdxZjNNZnE0V3ZLaUl4Uk8vYzVvWnZ4Wi9WSEc2Zy9uU2oyYnlZRm4rUm5PZ0lWYTRkL05nM21yRzl1SEpnTThPWngwM2p5TlY2WWhmTGNlanhUUkZkMlpESlJ1VjU5Z0tQMXJvYm12WXVuV1Q3N1ZiTjNSdlExZWJ3NDZ1MWVhVStPNjRNczZhMzRmMFpPOG9kYU4zZTdPdTcydmNaRTNkVUcrbitiNWZZbTJXOGtVSzBIRzZGQ2w1YlpoMVI4YWhaLytIVjZnMkxzWndOMkZYaEppOVQ0amJoNFNFUHUrRGhadmlUMGEvT1M1dXdzVnpjSEZMM0NqcVBzZklMWEFlUm03RFNBOUdlakJ5QjBaNk1OS0RpeGZnNGtXNFdJV0xOVmlZdEFjRTM2NWJVelA1UVNGdG54SlN0aXVrN1BOQ3loNFRNakExQzFOek1EVnZYeElDK0xvQ1h6ZnRPMElDMW03RFdnL1dlckRXZzdVWFlXM1NYaFo4ZTBWSTJhdEN5djRncEdEekNteGVnYzJlL1VsSXdlbWsvY1grcXZJZHN6ZGg5aGJNM29UWld6RDdNc3plZ3RtYjlpLzd0M3JrTXA4cmluUkRjWTU3NUVqeDM4Yi9yRDdWUThaR2pHbzZqMktXaHA3UmpOalczL2VGTHQ4YlpFUlRjeks4eXJGTkNYdjdYdXhZM0FzOU9pcUpER2ZlWEJ2UE5vNXptWWpSN1ZtK04rSDRnMVBQNHIxOWg5NDdxZExSSittY290alFzYjBmVjVmMXRhUThOeFdwQm1oRjkra3FPdGVLN3V0TzltMHgzWjE5aDh0R3pvamp6ZEhjMmU5VDc5aHN0emR6N0hxb2hBK2JFM2hxeU9Na1BFN0E0Qmg4Y3JyUmlCVERxWVNQU3VSUUNWOXNxMFo1UWdxVkNGQ0pnSEpYVUlrQWxRZ29mUnQ5MkVFWjBpaERBV1Vvb2d3bGxLRm9uN1hQV1JsOUtOckRRaG1WS05valF0a2VGVmJIRkdNTnhZaWpHQlVVSTRGaXJOc1RRaG5GeUtFWUtSUWpRREVDRkNOQUs5Sm9SUUd0S0tJVlJiU2lpRmFzb3hYcmFFV0FWaFRSaWpSYWtVTWxRdWYzVVFZZlRTaWh3UzRLcHRpT1lxbE15TjkxNnVBOTdiMmwrTnpCS1BhaVdTSy9FSy8zcGtkcjZXeTBnODhNUmw3dlp2WkpQV1gwWk9oMGxOdytnNW04Tjg2d1NOZjYwNnlicDFySDNGY1QycUg3bmlxTzNUTno1ODZFUHRWNE4vVm05WGJySnFyVURFY05WMmp6ZHM3UU9NalpUcGIvVDQ3cStBaU9XcVpzYkdZMnMraXFlckk4MTU5Yk54ZGZlUjVXc29PY2MxU3lvakk0SE1XempNbnlxK0twM0xJN01YZWN4N1NYbWMrSFo5dkorenF4aWl1UjRYa29kYmd5OGxrWnBkRGZ0SDFTeUVpRnJ5djMrclNRUm4vVFV0K0hkZjFKSVl0S2hybFVGbVhNMk90Q0JoMzB5WXB5cXVrcTJXVWRyL0RJTHVzNFJnSEhLT0lZQmRvUjVwYzdJSWR2bFBHTk1vcVp4emZLK0VZWmIxcU52T2xncGVlejBrdlFueFQ5dVV4LzF2Q1RDbjZ5anA5VTZNOEdmbExCVHpid2t3cCtzb0dmM0lhZmJPSW41L0NUOC9qSkJmemtJbjVTeFU4MnlFUHJ1RW9SVjhuaEttVmNwWXlybElsWENsZFpJMm9WWEtWQzdDcTRTaFZYcWVJcVpWeWxRalJUdUVxUkRMU090eFRJUU9zNFRBR0hLWkI3MXZHWmRjV2pvbmdIeFBWK3hlRUJqZWQxamFQcnRSdkRKOVdXVjFUdjZ5cjlIWXVuZHZDZi95WmYwaWpVdzcwUXQ3ODBuYlVzUHd2Sm5NNmdwSG04WWYzVVdVNE4wYnNhNjgvQnlWeHdmQTlsYklYWFpuMnMxcmlkSHBlWnFlZTc3TlYxOTlmUTdWbTlIam4rbkh5dHNhUkg3YzJKMHhGcVByMm10bWZVOXZGVzNZZytIV3Vlc2FmbU51R0dlOUorWTNmcWVLUkhzMGZYajZLNHU0aEd6OU5zMXRZTGVrRzRyaUsvYU0zZFNld3VvL096MjNpb2QwczlPVFBuV21vUGNxR0luOW4rWW14aDlwM09VY2RHc0FWbjJyTlduNHV3SlhveUxrMTMvcFRBbVJMNGtvY3ZKWEVtVDc3UmxLODQ1MGpoSEdsN1NNamdGbW5jSW90YjVIQ0xQRzRSNEJNeHZDSEFGWkwyckxBUzdUODQzUytnN3o3S25rVFpFeWk3aDdJblVIWVBaWGYvbjF3ejkzOUpqYlptYUd0R2RlWHRFajUra1hZbmFQYzI3VTdJSFZkMTE1cVFrNGR0NnZ5Y2tNZGpxOUVlYmwyb3NmdFlzN3Z0SGgyZDB5YnRpbjFBNXcyaHhpNVJEYis5SGI4TldBdXVqTGx1QWRlTjQ3cEZYSGRMN2IybXRqblhMUkc3TXJFcjJXZUVWZlNqUkFSTHhNNG5kdUdhclVMczFuSFhEZnVLY0FsM3pSREhiZHpWc3gvWlQ5UXF0M3Bhd1ZlTE9HcUp5Slp3MUJLT3VvR2piaERyRWw1YUpPTGJSRHhEeEJORVBFUEVFK1F0TzhROWdhTm1jTlN5K3VxaW55VnZLYWxmRDZvL0Q2a0hqNmo5ajJuTUgxZXJuMUFMbjlVSXY2cmFYQzJ1ampjcC9XMlZGMCs0OWJURi9oTi92OHE1TGN3UEp4VkwxOWozd1VkYXkvS1RmTGc5NVNTN0oxaXpQTFg4eXVoMDJUZDZmSFFwLzF3K0ExOTJQL3cwSzdob1Y3Y1QvUThXMXlqbkJCOHVwdUJmV3RuakJaMWZGWHp5eUJnelBXTmZGbnptYklZNW05SHpkNU0xcDJGM2RteUhKUXQvMThtUjgrVElZWGFjSnp2T3c5TXlEUFZnNkNvTTNZQ2g0N2x3RU9YQ2pwV1pLQmNPczJESHgvRC9rUmg4ak5QS3d0aSt5VG9aYnA0TU4wK0dtNGVKODNMYkFyMHFrTnZteDNMYnRiRWRreXdjek1LK0xMd0xWTCtMNGFwaWQwRjl1S3FJdFJTcDEreU4vd0ZBMmRha2VOcU5sTTlLSEVFUXhyL3E3dDBZQ1NGWmQyYVhpY2dRSklpRUpYanlBUllXVVJDWFJIUGRKSmdFbG8zNEI4U2dYano0Qko1OUFQRUpmQUNQSGtJTzRra3c1aEVrRjFOZDA3dnBtZXpJSEthN3AvalYxMS8xVkE4SXdDZ204UjdVN1d6Mk1BTERFZHpmeTB4UTBEQ3I2NTJQaUxwZlAzZnc4dHY2cHg2bU5yYldOdEJnUWdsbG40VFhMdXNSbm1FS2J6Q0xMMWpETnNvY2Y4eXJJNXpobWthb1FXOXBoNDRsVG5TYWFOQzV2QWYways1VXBKcXFwNDdWaGZxalk5M1VxL3BBbitvZitzNUVadFo4TUlmbXhGd2x1NXJMWkM2VkU1M1NqUGpRcUNKQzdCeVdlQ1NPMkxFaVkxQ0lxdVZTWVNISzF3cHpxYUFRNVd1OUtPUXJuNm9Yb3FJTWxhaFhIRk1lZlBzS2RyR0hmZjd5VDVqYXdTYTJwQnVxWEZrb2VmVk1IcUhKTkdFTTQ3TDNNS0tkSXBTNHM2ZVFWckhqOHdKa2V5ZzVqbGV1cXRjZXUrSlIvMDUrbmpNMHgySk1TNDZ2UGkvcmJKYmRvWTRKZDRhVExyN3NhVmJkZnRxZHRuMlBQZDNsREdWcm0vaXZ0aFgzSmZwN2h1eUIrQTdDUlZ0ZWwxVnpUcnMxdUJYRFBDK2xGQkkrejdQUHRuSTl0d2FlZ3djOGh3VThoem1lMzZVVUh2YnNzMFU4aHltbDZVenZLTzZDTVk3VXBLWis3d3pYN0hkT05xZkJqLzBmajNKTnRwOS9zOEljRm5Fcjh3SitjY1lpYm5oY0VINU9lbGd4SC9OWXhsTytrWnB6QTc2YmRxN0pUZDBmckJYN0NJVlg2T0s3Ukpwby93WGhDMGhwQUhqYVkyQmlUbUg0eGNES3dNSTZpOVdZZ1lGUkhrSXpYMlJJWTFyRndNREV3TXJHREtKWUdoZ1kxZ2N3UFBqTkFBVzVPY1hGUUlyM053dGIwTDhnQmdaMk5zWURDZ3lNczMyQmdzeDNXY09BbEFJREN3RDEyeEE2QUFBQWVOcGpZR0JnWm9CZ0dRWkdCaEI0QXVReGd2a3NEQ2VBdEI2REFwREZCMlR4TXRReGJHSDR6eGpNV01GMGpPbU9BcGVDaUlLVWdweUNrb0thZ3I2Q2xVSzh3aHBGSmRVL3Yxbisvd2VieEF2VXVZQmhHMk1RVkQyRGdvQ0NoSUlNVkwwbFhEMGpVRDNqLzYvL0gvOC85UC9nLy96LzNuLy8vWDM1NE5pRGd3LzJQZGo3WU5lRDdRL1dQMWoyb09tQjJmMkR0MTZ3UG9HNmt3VEF5TVlBMThUSUJDU1kwQlVBZzRDRmxZMmRnNU9MbTRlWGoxOUFVRWhZUkZSTVhFSlNTbHBHVms1ZVFWRkpXVVZWVFYxRFUwdGJSMWRQMzhEUXlOakUxTXpjd3RMSzJzYld6dDdCMGNuWnhkWE4zY1BUeTl2SDE4OC9JREFvT0NRMExEd2lNaW82SmpZdVBpR1JvYld0bzJ2UzlMbUxGaTVldW1UWmlsVXJWNjladDNiOWhrMWJObS9kdm0zM3JqMTdHWXBTVWpQdmxDOG95SDVjbHNYUVBwT2htSUVoSGVLNm5HcUc1VHNia3ZOQTdOeWF1MG1OTGRNT0hycHk5ZWF0YTlkM01CdzR6UERvL29Pbnp4Z3FidHhtYU81dTZ1bnM2NS9RTzJVcXcrVFpjMll4SERsYUNOUlVDY1FBYmd5TkZ3QUFBQUFBQTkwRlZnQTlBRGNBT0FBK0FFZ0Fkd0JDQUhjQVFRQkNBRU1BUkFCR0FFY0FTQUErQURzRkVRQUFlTnBkVWJ0T1cwRVEzUTBQQTRIRTJDQTUyaFN6bVpER2U2RUZDY1RWaldKa080WGxDR2szY3BHTGNRRWZRSUZFRGRxdkdhQ2hwRWliQmlFWFNIeENQaUVTTTJ1SW9qUTdPN056enBrelM4cVJxbmZwYTg5VDV5U1F3dDBHelRiOVRraTFzd0QzcE92cmpZeTBnd2RhYkdiMHluWDcvZ3NHbTlHVU8yb0E1VDF2S1E4WlRUdUJXclNuL3RIOENvYjcvQi96T3hpME5OUDAxRG9KNlNFRTVwdHhTNFB2R2MyNnl3LzZndFhoWWpBd3BKaW00aTQvcGxMK3R6VG5hc3V3dFpIUnZJTXpFZm5KTkVCVGEyMEVtdjdVSWRYemNSUkxrTXVtc1RhWW1MTCtKQlBCaGNsMFZWTzF6UGphd1YyeXMraGdneXJOZ1FmWXcxWjVEQjRPRHlZVTByY2t5aXdORWZaaXE4UUlFWk1jQ2pubDNNbitwRUQ1U0JMR3ZFbEtPK09HdFFiR2tkZkFvRFpQcy84OG0wMXRieDNDK0ZrY3dYZS9HVXM2K01pRzJoZ1JZanRpS1lBSlJFSkdWZm1HR3MrOUxBYmtVdnZQUUpTQTVmR1BmNTBJdE83WVJEeVh0WFVPTVZZSWVuN2IzUExMaXJ0V3VjNkxRbmR2cW1xbzBpbk4rMTdPdnNjRG5oNEx3MEZqd1p2UCsvNUtnZm84TEs0MGFBNEVRM28zZXYraXRlcUlxN3dYUHJJbjA3K3hXZ0FBQUFBQkFBSC8vd0FQZU5yTnZRdGdGT1hWTUR6UHpPdzl1OWxyTnZka3MwazJ5Wkpzc3B2TlpoTTJrSVJydUlnQnVZa0lpRnpsTGlDQ1VnUkVRRkJFRkJFdlZhc1dxYzVzRmtIckJiVmVhS1hhdHkyMkw3WFd0bjQwcmErdnRkWXFKTU4zenZQTUpwc1F3SDYrMy8vOXltWm1aM2Rubm5PZTg1ejdPUS9IYzhNNGpwK3J1WW9UT0IxWEpSTXVNRGl1RTgzL0ZaUzFtdDhOamdzOG5IS3lnSmMxZURtdTB6cTdCc2NKWGcvWlBMWVNqODB6akM5VWlzbCtaWUhtcXJQUERCTlBjbkJMYnMvNXowaVdaakpuNE16Y1VpNnU1emgvUXRCekJhSS9idVE1UDVFc0FZazdsZEFZdVh6UnJ4NDYwalNjM3A4dzJ6bXY2SmZNZ1VRYVBldndtbzBXZjhKazQ2cEZ2NXhPL0xMWmFMUExlajRhbFUxcGNLWVRvbEZPTmdvMnU1UVdyYTZKMU5ZRk0xeE9iVkdwSXlSNDk1VFZsOEcvck1udXNwcnNzckxzWEo5UDAzenVTeHpqUm1FbithVm1FYWZuYkZ5UUEyQTV2MlFLSlhSNnpnRFBUdzhTeVU0SGFURnlhZkJrQnp6WndzSHpOQVo0WG5XTmd6NUg4UEtSNU1uRy9LcjgvTXFDem9LcS9JTEtBazA0bzZBZ1E1bE05cnFUSnh6RlRaamp4RW1BbXh5dWdCdkJ4Yk1CTjVJckZOZXB6K2RJdHM3c2wyMjVvWkRNQ1oyeXd4ME1KalFpdlppZUR4YzFjTkZnRHNMNENnT3loL2h4TEpHUXd3dXZrRUJmT2k5OWVSMGVlT0ZIWWNkL0hmemM5bzlOd3pZcG00WnQrZFR5K2NOZjJiL2FQR3pyZVc1ejYrYXBYUThwWk50Zzh2NWdzazFaaDYvQlN2Vmdka2F2QTNVc09SOFM4N1FsM0NDdWptc2w0N2w0Qlk3YUY1SkZiYWNVQ2NZclJLTy9ZMmhGdWNFZnR5SWNqcEJjQzU5a0J1UFdXdnpFYWpQQXBBOExTT1pUY3FXMVU2cTB5dVhFSDlkWVE4RmdVQzR6ZE1idFdhMXdLcFZaNVJnZzJtUHJsSWNUdjFTWC9lSi8vZlQxSDNBdXY5RWk2YXhTODNHNXh2S05sSE5jaEhjZEdsMnp3Ly9pcDErK2ZnYStZT3JRNGx0UnFyRjJaTlhrcEg2UWpXODdndmhYN0FqMStReHYwMEovMTlHS2h6aDhxM0JINFE2djFtS3pSNlhzYUJ6dWltY3RVVzVvbWlZcjFLclZaZWZVQkp0YnFsTCtJMGY3WDVXR1poTzUwZ3cwU2FKeXJBeU9HVkhKWTVOY1FLcTFvczEraENObVY0YW4yQTBVTzRUa0U3ZXRTaHV1cll1RVE2NE10NjdVWjh2WHVwd1dRZWZ5aHF1SXc1a3Z1RzBXUXByRWNHMlY0RnNTSHZidXBranJuTWJoSmRuL2ZiamwzTzdRaHY4TWo1blZQS3c4MngyYnNYOVd5ejEvTGZORjVrNW91ZnNuNUw0SnQ0NExPc29hcjUvUy9GcGc0a290dnpQZFZld054OXBySG54WmMrekhGaW53cUxYN1dIcFdXZG5nNFRQcUF0Zk1IbE9yZVQ0aHJoR2VDMTRacnNsMThCSE5ZK2NlMGd4cWFoOWIxbmp0a0lqSHdYRWFydTM4R2MwY1dEc216ZzEwWE1JRnVQdTRlQ2JRUkx3WS9zamxtczU0RnRBQlhWU3lTK3hNVkJVVUMwREFWWENhYnFDbjZXSW5rYXB4aGNscDVrNHB6U3JiWWVLMWNLcTF5cmx3V2dxbnBWYlpqK1JnN3BScjRHaUg5ZDVoRURKekFHK3l2eFRRbUpWZjRDM09ocmVjWEpVSml6UFhBMnpCbFE1bldpNGFwYXMwUk5tQnQ2ZzA0c3dJQmV2Q3RhWGVJcTJEaEF5a3RxNFFQeXJFVCtnSFJkbzIrWTd0a3JUOURybjF6a1dMZCs2NFlmSE90Y0xDTVYzM2tjZGtZcFZsNVhPNWRjZHZkc0EvTVdmUEs2L3N1ZXZsbCs5YThjVGpLMWMvL3NTNUZackpadytSMEo1WFgyV1hIMzk4eGVvbm5zQTFMM0N6enA4Ulh3UjhWWE5EdVFuY1BMWis0bFdJcXpwdFo5eUVhQm92QUVLdXBBaXBzWFVDR2N0NkFMa1pWa3V6VlI2RDNBY1dSVHNjeHdCQlBtL0swRmJWRGM0RXlDV0xUYW9IK01mWHdXVk9iL0VOR3R4SzZjcFIyeVJFU3NNcUJpd2FuVmFYNGM1dzEwWGNGanp6bHZvWVZ2TDVVREJTNml2MVdRU0gwOTJrWlJpYTVhMmJNcUZ1Ylh6amh0MnV3a2hvWE1NZ3M2NXR6UTJ6cDQxdUZ2TE1lUm41SHR2M2JyOWgzRTFQL09OSG40eXF1MloxeTRrSER6YmVkRVZzU252Rks0dHIvSlBLR3JKZGk2Zk0zazRtRDEzV2ZrVzQ0SVV0VzUvZGRGTjVXMk5qUmJBb1V5ZmVzUEdtMmRzK3lOS1BLeGhWMlJUSnZtVlZ5NDN2dmZaczI1bzIzMDhlR1huN2NtL0x0R1g4STZ0L2tKMFo4dFRYTkJkZlBYc25SNUJuYzUyVVozc1p4MWJaTlpFTUFaa2pWSlRjRHN6YXlOaGlQODdjeTVJNXVOY3NaUUhackZrUE5PemdpSlJHRWE4RkZKdlpiNjNFcmVWdFRydGJ4ODBpdkdmcGtpVkxQWXBDdmlCL0pFKzUvNktzT2MrZFYxWjlra1dld250NTRWNGpVdThsbkpJTnZmZXFzOXVzdkMvQzJhekVTMjlFZUVWUk5uMUNkbkhuQ1VkMi9NV3RURlB5bFR4bEd0eHJrakNDbndBdzJvRFh4alVJWTdxZTB5T01JSS9TVDhsRUF5elRZdStVdFVZNG9XSUo2TDFEMUptdHVBNVFHdmdpYmw5SUYzSHIzRHFmMnh2UlRmcnRid3ZlVFdzeW55eUFrNVBtcHJSM2hjNWx5OEpiLy9HUHJXSDFpSFJLdUVidXBIQk0zQWx3dEhNU0Y1QjBJWmtBSDljRTR4eEJQczRaZ2NNVERrK0pnQ3dkUURXZWt2aWdiREIwU21Jd2JqRGlad1lkZk0xb3dGTWpaL0FuMFJEMjJFQnJjSGxzWGxzamViaUZQS1JjMThMdmJTSXZLaU9hbEFieUZodkQydk1XNHVWV01hbXNRYzNCUkRVSENqL2cxV0xxakFzV3VEY242QTFVTG5PeVNRTWMxZ0kwNzI0aVlhVHFKTlZyZFd0ckd0UEV2SktTdktLcU1iVW5peGNGZUY5dWpxOGhOSHBIQ1h0ZWpQeUNMK2N0c0VxTEVHYVpnSHdsdUJaRlJsS0NFU2xNMWlSaGNNWElwK1FYc1JqK2x1bzVNRllEU1BVK1drN0tPWkdNRnlvN3NvbmVybGRaVVJXVnBKSUM5K2JPZjhDWGFEYkN1REk0SEF6ZWd6Y2lKYWhqY1pFUUlaOE1WYkxMTlUrZm5VcDFpd1hBWjhMaVJzN0psYU51WVVNR2t3TVRXQnFRdFFoU1JVQWlwK1FNWUM4WlZ0UWRaSk8xazNIWURKczliclZwbzZoTGxlYkFHNDZZb3NoQjdjQkZRc0Y4SHNWUlVSVnZCMWtVQ2pZSklJZUtMUHlDb25ITG5weTc0Zmp5YU5IWXBUOTQ1OGxsNDBwemg4eThhK3FVM1RPSDVPWU1tYmxidW12bUVQSzdaNTk4WU9XdytjKzh1M1RLRHg1WU9YejR5Z2ZJbUlmM2JwOFhpODNidnZmaHZUdndaQWZPQmRrTVFKd1E1M0ZhcnBDTGl4eHFpcnFBSko2U0JVTW5aWWVDU0VVcVFHOGdJYUFqSGRsTTlFMHRId2hqU2ZhNUE2TCtiMnhPRHdEVC9RTHc0T1ppWE55TVdEQUtuWklsS0RrRHNvQ0l5QXhJdGxPeUR1NmFCWGZWMlVCZ21OSVFkaWNvbHgyY3p1Wm1MTFNKQU96RTVlUTBRTGZoWW83eFJ0MkJJZis4ZS9IenE1UmJsTmY1dzEzdmtadkpqcmQyYi9vZ0xFZ3pWMHo1NFpKM2xFMjdZNDB5V1hwczg0L21UWVR4N0ZmT2lGcHhFVmZMVGVkZy9ZQ0dGQXhRM2NrVWtLMHdzc3lBWElERENzT1NPeVVIVEoxU3dDcDVDMC9aWkJlc0sxZEE5c0pJNjVEU0NTS0FpOHJXSUJ6TG8xS21MWjZUNjZVejVZN2tFeXJncW9pM1NCY0dZZGZFcStQMUplRUFsU0pmWk9Kd2Y3VCtKMXNQblZqeG82VXpuYzZaYlpzWEQzbjNuclhQWFJFYTlaKzNMM2x4WFhtc2ZaUzNlTUpWcmY2L3ZQdkFtWkRuNnFYUDNyOTRUeFBmekJjTlh6WG1qa2Vtenl5ZnNmeUtKNWNOV1R5OE5sc3I1TmFQVzluNnpHOXVBeHJjZk40cVpzRWNHa0gzWjF4RUc1Sk5BbVVQbklseUVRT3dCeFBsSWliZXdLd0J3eWtwTFNqckFWb2hHTmRUMXFIWHd0Y01lc3BRa0l1a3N5VVRob2tQdWJ3dytXQitiT1pYVEg3dnZaYnVOL2pZbzYzQzVxNjFNV1U1dVRzbURHVjBjRWo1V25URFdBcTVPWnlVRHlpSFlSZ0RzZ3NPdG9Cc1FaUjdxRkpxUnhYVWpJK3lXdzEreVc2VmRVQVgyWUQxSXRRN1FKR1RDZENIcExOMWlFWlhQbFU0akV5UFN6UGJzeW14OU9BZlVLN3pVVVpIMFk1TEIyYWs5RkI0K0F2Ykh2clZMeDU5N2Y0STM5azlMZnJzdk1rUDNqeHF3MDlXZmYrWFh0K0MrYjk4K05EUGRudjRZN0h1dy9WajZoYzl2ZUI3Nzh4YncyeUd1MkJkZTBFbWxISVJiaFlYOXlCRlY0TGlvRVhGd1N4MEpyTENIaTBvVlZrSVVUMFZaUTVBcGNNcUIySDR1UUJHRkk1Qmg4MmUwQnF5UEQ0Ni9uQWxrcm9qMTRYYWxEa0xRRFFZbzZyZUFNelRyVU02c2dndTBBbDRwa0x3M3FJcXdaMHY5bExXWGZtamx4eGE5TDJubTJycWR5Kzc1dDZaVFZsOHdZckVqTmYrdStHR1p4Yk1mMkx4eVB5eDJvS2hVelpQbUhIdjFNQ0pwOWI5bmorMDRQVVh0MCs4ZHBwL3d1UXJ2aWNkdWE0bXEzYlJWYi83anduMzNkeDJ4WlpqNzdRMGI3ajFtc2JXSmJjTVNieThqODdoRStldHdsbktFM0tTL0JtNUFySURXQTVna1VsQ2xERm00aVZQQ0pPN24yampwNHJsc2NxekgyaXlnSHZ1Qjl4cEFYZGV3RjBidDBqRlhobGdMeDJ4Tndwdk53YkZtRndQS09OdzBSWERBcXkzb2dVaU8rR2EweXJsNDJVL1hQWUg1SHhUcHp3V1BocGVEL09mbnVVcEMyb29Qa2VWSVQwWW5mbkJJVW45aTQ5VUNlRmFSQitsQWw2WEx5UjEwZVJhRlgwV0VSUjgwWTNLUGFKMC8rRDVOdzl2WGprck9tcmRQVmVNMzNQejZPaXNsYzNEYjc1KzhMOWVmZjJyNXNVL3ZPNitqL3dqSjA1cGNlZFBYRHB0aU5zM2ZQVFVTSzUzeEpJckd0Kzk5NzZma3ZaUnQweHZzcWRISnF4c25ieDk0cUJCRTdkUGJsMDVJWkp1YjVwK3k2aUhULzdzMGF0M2pueHlXLzNjNGZWZWh5Qm1Sa2F2NHRmV1Rtc0s1RnMxT2tkMTAveW1MUTg5UkdsdXZkSWxXb0NIK3JoNmJpb0h3aGVwU3lvSnlINDQxQWJRRGlWU2xOSmFHU0FHTExjQ0ZDaUFuQVk0RmdBeUVuYU5xNlNLNHFZRXljdVZBY3A1clIrb3psVEFlWHB3Qk1nQnJGaEVRSXVQTHFFbXdKa1BpVTFWMlNOVjhKbUZYOSt3V0tXcGpNcnhDKytkTmdEVk5mOFVTR3lJdG5ESWxDMlU0dmhmSitscStlVEh2NzkxZm9OS2R6S2p1OG0vK3crZ3NqV1U1SVl0dVlYcjlWMEluNEpNZDRBKzFFZXFtd21jMjFXcDdrVFFKV05RbGVoU2V2Sk1kdldUN2JiK1VyNnZyQmYyNXBhVjVjSWI5bnlxLzhEemJVRHZWL2ZSZ09JdWZINjIrdnpjZ0tRL0pkbUQ2S0RJaGVlN2c1TEZLZ3N3RlVKQXprTlpxVWRNMjV6WnpFaVFYVmtvNEM2aEtnazk0K3lqTkRuWWNQdnFUdUtCM2tHajNuZ005TVluWUkxeWpqQnhHWWlyVWJpbDZ3T2huTi92SngrM0tlM0s1RGFFclpHOElSd1Q3cVArcHV6a2FrWkZTNk1GWXRJSFpFT1Bsa1hnaFRmWkxOeEMzb2pGeUw2bUpxNy9zeUpoQXduanM4cmhXYmNjYXlPSHlMTnRTb0dmK1ZuT2Z5WXNnSFh2NFFaeEM3bTRIL0ZZd3ZESTQ4TFBSL3F0REVpT1U3TFozaWtWd1FwUGxCbnhjOGxzbFhNQWdScFFqcXJRNFZRRUtQTkhwVExiRWQ1cXl5K3BRSVRtMkdXakd4R2FYNEpzVkdOVENick93Nnd0bHhNTmVWajhHbFVHa3lTZUFlVVBrUHdmdlZjemJ1Yk1jVFhGaGI3cGdiRXpab3dOUExIbnp1ZEhrSUt5M0p3eVgzMlplTmZwbzdjTlhUcCsrSkFoRTZxeW1qSUNyZFBxcngwMmRPakkyUTJMOTh5Nzd0eko3REpmRG1xS0NPdW84eXMwWnpVNVhBdFlsMTl4MHBDQTNBQjRCUW8xaCtRUllxZmtDMHJqQW5JdW5OV291R2FHWmgwQVhtZVYzUUJrcTZWVGFyWEtWamd0QnA1WGJKVUxVUytFTDNpc2NpV2NHdTNVL0VTZlRKUDBqeHoweVloU1laVkZHbjFjbEQyT2J5eFMwWEZwdExXallIU2h3OS9SaG4vajhEZkZtMUlRNVk0VUZIcUtScmVwYnBPT0F2V2N1a3VzclRiN1VZMHp0NlpoeUloeEtKTUtpNEZwREk1RjBYTWltMzFVUFd0UUw4bmpSbEJ1NjdaVjFxbWN4RjVYelBnc1VuV01VSm5MbUcrR094SVN0QzVrSnNoYitHSnZrYWlGTDlwQmtrWGM4UFZpdm9SeEdnZVZlV1RVdG85SXhVTzd2bmpxMnZqbUsrWTAvbmpCenNOVDdreGNQWGRIZmw1c0k5OWNsVE40UktUa1h1WHZoKzlWUGoyeGJqK3hIM3I3UmM4N2Z6eXFuSHFhck4rMGN0VXJRMGU0TjgxZGRXSWwrZkp4VXZuQjl4WWsvclh6Ti85YTFHWnVYeWJkZThOYk85cXZIN2VyKzhtMHJMcm1qTWFwKzJZOFE1eVAzUEt1OHZudUo1UXZENndPYkRwRVN1VzE5OTAra3pTUFhuUEhiMkYrZ1hqRlR6V1RZZFVZZ1pyakhHcVFRaWhPMERyVTZqa0NvcC9xOTZCT3BsR3hDRXRmTWdKV1FtQWplQVdQNEFCbG40K081eHZHN3UvVzNpL3hKNVFIcWJ0aW1iS0hIQlptb284aUFjOFlBYyt3Z05aY3lGM0huaUtuQzUzME1YSWhhQm1aYnZxb1RGVnZBZ0pLTjZDWFQwcTNVa1BVQklaRkxrcEtqWTBwVHJsZ21VcDZtRGMzbnBoUVhZVzNVcUZkMHVEZ2JCN0dlRkF6MVhwTFBFeDU4b1NUSndtZWYvcmszWE9XUFByTEkwbzllZWUrUXorOEg0N0g5eHg4Nkc1bHFHYnkwUi9jL0l6VDlzN2FILzBrOW9OZHQzYkVIcjFsdytPTVIydzlmMGFUcGxuQzVZUEdIYzlCT0Z3Zzc5R1lsazFJL1FYVURyTENLQXVwK2VnQ1dpS2NUcCtaUlduSmJyV0Q1bGFvYWtCQUtPZ2lxUU5LOFJSVmthMkxqNTdiUlFwL0hCcjk4YTBiUDM3ODJtc2YvM2pqclIrUERyK3VmTExyM0ZIZVNtcUo4ZWlDRDZwbUxKNzUxQmU3Ny96aTZXc1h6L0QvNTRLanVFNFJ4MThBanRPQSs5V3JHRFluTVp5TmFNMmhhRFVEV3MwTXB6b1laQzRPTWh1OWlUb1ZiU0pWNW9tSVNFTmRyRW9BYkpIN0hpVENNOWRlKzR6Uy9hQnltRXphL1pmOTdhSDVlOTVZcVJ6V1RGNzIwdGZiZC83cngwdGlzNS8rNDIzelh6eTRjaWpnQ2NZamZBM2pNWEVqMWRFWWtxTUJWVG1oWWFSRkpUMXprQ1ROZktxOEcweWdLdk5CWnUrclJqNHo4TmtySVF6clV2aC9kSnNGWGpNNTF2MlRXUGRETVRZL3llY2F1S0hzdVFNLzB6akFNd1dENm1CUVRlamVCL1k4VG4zWXJDUXRmS0x4QWkxNHVSdTRIaEpBM3ptUWhKUWRrSFB3U2NWSmdwQ3NWamtUMEo0SEQ5VUY0NWw1K05ETWJIaGNDVnpOdElKbGJOSVVncjBsNWRrb1pXY0Q3Y2hjSGtZandHenVJRHE5OVZJMFpBUHF0bWxCbjBrU2t1K2tmOExmNzBnUzB2WS9qdXcreWErK1d1bmFsMEpNdjZ5OGVqNGxwbjg4UFd2SkdBSkdUbkRlbW9WSGUzQXBucVp6T0VUbEREckdHU1JOQ0owWGlFMmhkd1pOQUJnZmxFelV2UWg0bFhXbXpwNjV3NkFPbXRXQXpCYmhpZWJtcmhtYXlkM2IrSFZuRC9HUEp2RUp6K08rZ3VjSklGbDc1MDcxVUZCREhWK2FuanNtV3BEVHNOOTZ6cDhSUlBpdEZUaGEzSUwwSnNDNjFOSGYyOEJRaE1tRzBkaVIzSFVDNHBWRXFZT2NPbTdoWHRRRUtmVkVibnp1dm5qemtDVzdKaXgvK2tETmt5OC9JSnp1S3JudW9kbWhLU28rMmlrK3F2dmhRd3oxUlFJRm01b1FNT1JvbEEwWEhjTmVvb05oODI5TjdYNk92MnRxOTZOUGFDWjNmU280dTFkMVIvaEg0NHFkd3JJWGFIZ3pQRWVUNU1pSVpSVVgyaVF1NGdLbFdrRURCS1RyUmJKcmJ3di9MS0RsVE85NjBLeW1mR0dFZWkrdElaUXlhalB6a3h1b254d3RVeTJnMklMY0FTTmd2SWlpRWVHSUMzcm10WUduTUFjSndHSkxMQ1QvSWw4dmJPbisxTlVOVXVSY1ZIejc3Q0dOL3V6WCtPcWhvVi9ROWFnK0gyejIzcWYzTGtNREtKanEwMkgxeVFhMHZ2aW9KTmlBTVNVeHFWZWZUNUNTQ0JMU0F5MHRYZlBodVI3eG83T0h4RS9QT2FuT2dqeDZQNnhMTTVlSDNNZUVVTnVCR2tUS0M1Rkw1OU5GYVlGRkNZcHRCanhQRDd3UWpZd01DL3ByS05UWmRseDBuRjZYWEhTZ0E0aDJLdzhyckZpZ0FyN1lya3A4ZnV0RHBPTDExNGovNFllVlg3LzJ1bkxxcXAxRS8reGhvdCs5Vy9uNjhMUEsxenZKbjhtZFpPakxMeXV2S211VVYxOSttZGUrb1B6dTZhZEo4UXMvSnNWUFBxbjhMc25EOHloOU9VRGZTdUZlRHVCZXhqUzYzb3k0M3B3OXBKWkcxeHVxVmlnWTBUeVFIVEJ4cVVJUXRCVlBGZ0hCWjBXNVIzNTc3RGN6WDFpbkxDVDc5aDA1c2s5WnJKbjhoOGNYUGJ1NFcrSjNIU1g1UnhuK2ZrSHhaK2RLdWNsYzNJcjRjd1ArMG5CQUZJbGVSS0tQSXRGaG85NkFBaFdKWldpaE9kQnJiTGFhVUp2VjI2UTB3S2JYRFZZYjRVeDZTeDkwdXB3OHVwSzFQVGhGRHpPWUQvM3hPbi9Xd2FwSER2MGxpZHFUOS8weDhPZEoweS9FN3BzUEtaL1BQaGg0ZEllSzRYVi9Dbnd5NVo5N2swaG1PSzZoNjhHSkhqTktrWHBHa2JJVDBHd3lVelNqVjBrWEpKS3JaM21ZZzdoQ2JDcW1rV1pzdUVLTU9tRFlHcHRrUUJVU25UbWlKcHJFdlZYcmhVV1NpdndQZm5UbXpJL0lrNU9VV2NvTE1BRkhqOUlKK0xseTMvdmRjWDQ4dkhhK1FPZUFjRXZPbndGYVdNSUZ1QmU0ZUNYT2dBZ3o0TVpoNW1wWmZBdk1pd0pycDFSZ1JkdEc5dGxvSklzR050TmYvejBMYktaYkpmTnh1Y2p3alZSOEhONTBXTkxORHI5VVpPMEFmSU1TRFg5N2xlZzRmQWdIN29qWmtsN2tMVllWNlQ3dnFES05zeXVScUdTd2RZanU3RXFjWTU5ZHlnTDRjNW5ieXBHVjdlc0pQektIVHBVTzFHVXFzOUJnQVltbFFZY2hNTndsNFZHL3VXUDU0eE5Mb3JNMjdOaStZVlowM1dzclNmN0IwSGJsL3AvUHVFZVc3NW1SMVRydnFVVVBmUFZhWU1xTmpiUG0xbzFhT3F6VzU2c2J1WExNNHNjbXZCYUlQM2JMRlV1YWdvUGI5ODBQenJwK2JQVmF4TjE0bUdNLzFXa2J1TGkyWnhWeEFyb0EwUmhFY2FBeGdkcW1SUmFxQWNFZjEycndWSXZld0Y1TEVlTUo0NFVQbFpwbVRWWXNkdmFNSm92eE5KZ2IwSHU0ZEM2cXlocXRsdkZueVFCTXpacGswWkxBSW0yd1VDbmg2Rkh3bUMwc3lJOHlKNk9ReWg0cmFNV0psaitUdzM5dVVjNHFUdVVzcnhVbWRFbWZkSFY5Z2tmbHZQSkhVZ0RQVGVycVdwU1BGQzVVNEVGZDcvVmFjVnJLTitIK3lLV0oxeitXZC9LdXNkMXZqUWVaOEpYR0NPS1NjQ0dPMHo1TTE4Q2JIRnZVZW9NcEJGSUJiNWNnZ3FnRm50Y2pHd2dzY0dLVnRhckdhR0UwOXZxY3p6cVF4aVRPS3FVZHQ4QTNKUDc0aTdGN1A5dURWeldTVUNVVFhnL1hMTExSOUkxR01oMS84ZlViMkllU29VbzJHZldTRVQ3VDRHY2kvUEJoZGp0WVBucEphNVUweHpVWWxkY2ZGN2c0cnpFaUpRNDE4Q0RoOVFhakthMHFKUmpPcWJCU2NFSEFoa2FSdVdUK2NES2Z6QjJsckIrdlBLUThETENmU3hPL3hCZElpZFBuU2hnT3hET1UxNWIyY2dHZTZUWW95NWtFNTFIdWlOUjNxVDdEZ0E4SjhlSHV2MDRsZnlKL250cmR5WWNuZDNkMWQvRXY4UWU2RC9KenV4ZDB0L0E3dTFlcjgvVThQRU9QK29LdXozd1pxRHRlQ3lxSkVhV2VqczRhVEordXovUUIrZmtua1MvSTN5ZDFuMjRHZmFtUmY3UHJMSERxQ1V5Mkw0SDdoNmhzVGVvSk9rR1ZjZ0pUY3FrbUsrczR0bUpCbUdvUmtqRHhvQnZFNDFvaUxPcTZUempXdFZkWUh4Ti9GNHVkSzZheHB4SEtlbklYOEI0ZFY4T3A2ak1vdEp6cW1OTlRxdERZWWZsd3llVWphWVBKWmFNcXpTUElhT1ZMa3FhczEzN1I5TTMyR0IzdlplTk9JTnE5UThqL0dxclplSFlxalgydUowdVM0MkJnd1RpQTFEbDFIQ0IrdERBT29rMkdEU1d1Wnh3ZXFnOTd2RENHTDBtYjhyeHlUTHUyNlJzTGpzUEhIeEppZEIzWk9GV3RVdGNQL0k2UmtZK3NDSlBsdzVVWGxSL3poL2pEM1pQNDFkMDc0YmZuejU1ZklXNC8veXpBNE9iUUhZYUpOSndhMDJOQTZBQUJXdkd1Y3l2YVl3aXp1SW84b1RrQTN5L0Q3eWVJbnJPSS9oVG9qU3IwTWhGby9JVmhZUVlaMWFRNW9QeVc2ak1iUWJkZEluekY1WEErOURLN2tKSXdKVUl1MEhUR3JRUnRLMDFuUWlqTnRLSkNqdGtQWlhTTzhpeWRVcDRWdFFKWlV4UU15azU3SnliSHlIbElEK2FvNUxKMUNHbldUT3BHRlRESFFaTVJSYjR1cDVsN01oemNxWEdlREpmTmk1NjlLbExIbkJwaE5FRTIvdnpPOTI5L1pPMmMvY01DWTM2NDdvRWZOOTMrL3JRSDV3MTdiTXQxejlUWFAzUGRGbEp6ZjhjOWY3aHgwK2oyOHFudEQ5elRIVjUzejVnRHB6ODlPSzd0cTdieENKOEUvRFNONnU2NTNGV3Ezb05zU1hacUdGdU5heEhJTEExQWxrY2hzd0lrdkMwWVJKc0tYVXdHYzZlY0QwZTNGZk16YUxndHl3bEtxeUZkU0NxdE5HS0MrZ1k2ZzExaGxFeWd6Q0ZvVWxQc3h6ZTgvWTh2M2xuMlNxVDZ6V1hTMjI5TFM5K3FodVgyNGZTRnloLy8ramZsejB2YW4veFQrMHFpSWZjUzdlcUpsSmJYdzV3OENuT1NqWDRBT2hsMkdLeUk0elJwbUxVTjFKbHVWazFzazEzMUF6aGRxdjVEOGFuYWNHQngyOUZmUkIxTDY1ZC9jT2VxQjRkVk51eWF2dUdGYTArL2tGaFNPZXpCVlhkK1FHYVQvTC91YXA5VWNzV3dEZS9mOW83eXIzMitTZTI3cVQ4ZHh2SkJMLzZNaUQ5TEVuODZtaTJENDhycHhaL2QzSW1SS01wNzNFQVpCanZEbjlHT2VqWktLRGtIOGNlWnRGRkdDblljTGVyZFlSd2tEL29idFRseCtPdi84ZllOTDhWaXNicmp5OTc1b3ZWdGFkbGIxZFZ2TFpQSVozOGwrUXVuODk2emg1NXNYMEp5eVJIbEJ1WGN5bmJlTVhFMTgwZkR1RVUzNE5ETkZXUHN5VVc5UWtrc0FtMG5NazB1RWIxQ1NOSWxUT2ROcDE0aDBIa3h1Z3FHZzF3S3h5d1RqRlcwdWFLVWZDVTdPcU14VXdmVUdlb1k0bGc4Z0liTThvaUhwcVZRWkhNT0R6bzRpaXpDK3BzK3VHMXBmSGxqMXlGaDdpczN2M3RueVJYUDMzUksrZnNJd1prL2RQclc4VzBicjI3eGtNOTMvOWZPU1h0ZVdPQzYrWjJiOS9uYUo1RlNvbWxZdTN4eXVQYXE1V3NaVHk0SHdKWm9GZ0dIbTZ5dVZCcEpTeE9Ca2dFc3lScVNPUkdRRDNxSU95QzVhSVlEckVzcFBSaDN1cENOT2UyZ2piaWNlT3BDYlNRVHlTZU45TWJRd2lIbVYyZTZWQjVoRWN2eUp6YXZEbzZ1TEdrWWZjM01FeWRpd3BPUmhUc09aQlhYUk5hdlhCanBtaTQ4U2VNdXk0UVBBTis1WEFXM0FDUVNTVktHVDlPSklzOGhVcmRGSWRLSm4zRVFNK1VncU8xcXZTcWRERXB5a1BTb2xFRTVDTXVTeWdhOVVFNjNScU95THcxSlIrdE9KWjB3cUR2YW5qaE1IWE9pOGhGbkx4bFppRXBJZnp4KzI1TVRLNGMrc1ByaHR5T3ZMbnY3SHowa3RlYndWZVRUdjVMQ2hkTVBkZVg5OUxYWTFOQVZMVDk4NXZERTVTVC9iejlWdmxrOUVVbnIxdmZwUEVoZ1EyK0hOZUZJK3A4a1l5aUZsNlJyZXN3b2g1MjZMY0NHTWFtK2FHU1lKdFJ5dFFCV2VqSU9tT1FoeUFSdGpDbmFwS2JCSjJZL2NEQzIrWlk1YjBhQVkzdzZldkg5UCt4dTQ1L2Z1M3JKdUs0dXdEa21CQmxGaGVhcnRxcHIwNFNFb0ErQVFkdEpJOVFveG95WWRkUFpZZFlTUFIwRUNtOHpqS1UzTFZXZ2VxT2R6ajJpVW9EeDdDM096Q29xeXNyVU5ZblBWSHVMZ3Q1ejY0UVB1N3djZno2bUxLUFBOY1BxR3MvbUdxY1lwSU9VRVpCdGVwYXBnRzRST3hyZkhkVUdwd1hRWWdSS0RNaE9JOHRlTUdoeEVXVWdPMGh4bWdpUkhxY0pESVByR2RBYnZwWko3WE9idm5maklpS280MUplcW0yYk9VdGNkMjdiaG5YYXdYU0U2dHo4ak9wZXdiNStGTHJ5ZXp3cDlsNVBpaml3SjBWcTRyZE9WZkxKNzZZcTQ5N1ZUTzZxNUtjckxkMGZreTllVm43R25zTjlkbkYvRW1BWFg3MytKS21wMTU4RXY5V3NnN1ZTZ0N1RithdmQ2RGNoS2dWSmFTRmtxSktEWnN2aS9Rb1lIUlV3TDU4YjNybVpaWjRPRDhHTW1Nd0NTbEtTRzYxRnlXcW5kbkZPSDhoY1RDcWdxWlJGZ01vb2tTV1BVbFBwMFZsTGJyTlZIcHROOUUyL2J1K29pdjM2eXVkQ3dvY1BEcjVwMmZpMlZjb3Z1eVA4aVgvZU1MYnJMQndvL2FuckFPRG91dzdJZDFzSHJvdXRneTBiWUIzQWdFWXZQbkNvZXp3ZjM3dU9Ea1BsOVU0WWh4a3cydU9UU2ZMNlhCeEZJZlBKbUtsUEJvVzYzc3p3NXU3MXllVGFtU09VU3hHaStjUks1YWJnN0xFMmVjcE5WdnpxanUyL1dyYnNWOXZ2K0ZYVjlLUHJadXlmWFZzN2UvK01kVWVuazJ0SjBkOTI3UGlyOHJ0UGQrNGt0NjcveGRaeHR6MDU0K29mYkJxMzVYM1VSNVJ0WWhxTUZlWHAxVnl2S3BKR3VYSWFoNWxxNUx0b0pVSTZZNDBxSnBOYVNSYnBvNVZFWGdGNUNpenh4N0hxdDVhaVZyTHN6V3BsbTJZeVNGUGxrNy85VmZsNDRmVHVEL2xaRTFjVEhTZ200c3AyeFBNcVpadndYdS9ZZTlRQUN4MjdCYlBzZXZuKy80bEdvRFgxWSt0ZTJ3VWF3U3FxU3pVeHZhcVZxbE9vV0pIUC8wWnlRSmM2ZTRqM1RsOUlDa2dDTkFMS3R0dFhxbXVPYnhFK0I3dTBKcmxlY2FnYUhLcGUxOW5qckdTTXdZS01RWjlLbFhVaFY1SWM3M3ZGWGppMnd5dDhtSGk3amQ4d3Nqc0g3ejhkOUNRZjRLWWNmU28rNmxNQnpOang5cGthbHNPV2Zrck9nZHZuTUY5b3NaM21zRkdmeWpldjM4OThLbWxXc0Z6bGZNTTNVdUZ4ZU5OaFNqTTYvRksrdGFNZ0h3T1Q4RGZGcHdJZlVwOEtHSzM1QllWSm4wcnFPK3BUeVVsbkZob21BZGxkNkQyUml1MlNFNUNleVh3cTZhQTNwdmhVTUwxRFE5VUFwa0dpUzBYTHdwUFRhMm9lbTMvN3d5T1diOXUyZkVUaXdZOVhWUTU2WU02dDkwYW1yVnk3Y2xyaytjTnJEbSt0YkxseTA5elk1S3Jpc3JyclJxellkMS81a0ZFM1RxOFo1U3ZPcm94ZTM3citzVGJBVmRiNU0wUVJQK1ZjM0pWcXRsK2FSbFZoTkV5RlFmZFlSa0J5c2lSTk80dWtPSHVTTkowMDA4cUpLb3liZWliUVcyWkpWMVVZRzh1MFFpdUNoa2xMdzdhc3g1dE9uQWlIUjFhVk5FK2JOQWtVR0pLdS9EM1NyVzhaRnc0MExiaVdaLzVrc0JXQW4zM0krQm5tMzdIQmFaT0RNNGFTL0F4NE96cGdRSDVJaGlBU0RlVm5aclN5Yk9oUzFxclpDc3dUUTJrM3FkNldTazJiYjdudXpicFliTmhyY3g0NFNIejg4OTF0ZTFjdkdDc1l1N3o3eDE1L1A1TVJidUN0ejhKWVV2d3g1REwrR1BkSXNwVnNIcVZNSFFWeWVyR3dyd3ZsWVNYNjZPRSthZHhHeG0zUUY0RzM2aUJDWDFlTXBkY1ZZK2x4eGJ4aC9uVDloYTZZd1o5OXVwZ1JiRjkzaXN4ck1EN09hL1JwU1E4S25Sc2ExTzNqU2FrY0JyUldYa1BLU2NFdzVWaU44bXZsMXpVdzZzMHNkYUxMSzJ6cTJranhBT01YRHNENCsvcFN5TGZ6cFZTU2U1WE5WNUFKWk1JRVpUTzVkNEx5Z0hLQWRKR1BsVGJ5dkZLZ2lPU1hTaVhpR25SWHhEV043NmhvUml5bm9XMWdDN0RJVGhxNlQwQzJjamFaWjhveUJRYm95MGQxbGlGRXhYLzNsMjEzUlFhWlMycHFSM2ltczVrNDEvQzBKV3B0R0hlU3plMTZnR2tJUEMvRnR5S3Ewb3BhMkpmMXJheEhqd0gvVXZjMmZsTkVXQmFKZE8ySjRIMHR5bnJ5aG1ZSlY4aU40dUw2Wk13UXRHNjMwTm1UZytZSlNIbW5NSUtHbG9FbGlBRnZtQ1EzNE0rUkJ4WU5zUUVGU3lhdzE5WGxoTnBZYlYwamNTRW5zRGwxSUpxZEdmUXRyS3ZhVWt1b2ZzTVZHemMyVEpveFkxTER4bzFYYktnbnY0NU5pWkdQNW01cG1qTks4ZXowK1hZcWhTT3ZpMjJlUy80UW02ejZPRC9ndnFDK0dqYzNzTWFFMW1DaWlXVUlNMS9OQjBtNGFQcWJoY1ZDT1phRTZsYmhFay9oYXN5MW8rYkU0TXFrcFUrNVVhb1k2YUtTQlN3ZEI1czhDbGVFd3VBbllhcHl3RXAxVVNDMWZ1TGQyREJ4eG95SkZLUklLQlFCSUpWajE0MGtmMENBeUVlajVqUnRtYXQ0bWliSHJtcFNDdWR1cG5CRmhWWENLNkFURnFCV2JHSCtQdlNvSTlNb29ObWtxZm9jS0hPV0ZBM09Vb0JEZGRKa0p5ZjExa2k1TnRtUVJVZExrNWtGR3MxSDEzYVZCa1ZSMU9odG5EMTArSXpxaWhHaHliTmNNV05SNDZ6bTRMaXE0c0xpYUNsY0VHNlpkM0I3MitTYmI1NzgvcSswOHcvdUhGTTFhdHJVVVZYdi9RZk5GMU8ya1N5UWgyZzd6T2FveUU3bzFSeXRpNWU1bVZpWm02bTN6TTJFWlc3bTNqSTNVMCtabTdtbnpDMVowNEJKUkRrazVFaVd0N25MM01KaE5TSHI3RC9GTkt4d1kvcGNTSGhVM01wbHdvd3Y1dUpPWFBYdWtHd0JsVGdQVEZrTFpmNFpCbFZaRmtLeUdUN0pEOGExTkJWV0sySnlyb2RxZkZtZ2VXUXhHMVBJQTgzRGhSUm1EcXJVWWJaUXg0bkJhTFVsQTBkWXlwUlBVUEQ1Yk5TT3gxb21xdjVoS2RQNlA3NFVXM2Ivc01xR25WT2xKWlhEN2w4V2UrbVJLeDlaL1AwWFNUSFpUNHFjZSs4aUU5dEx4ZzNqdTJhRENUK1JKRjV3a3M5dmVtdXpSWGpBcGJDMTd6My9KK0UwMlBBeDdqQVhoMVhyN3doRnFzRTZxdEIyeHMxcW9FZ09SNnlGeHdOeXFkQ1o0RWpFYlBaTHViU3NEb0FrVWhObTBJSGkyaG5YdTJuQ01ZaEJOQWNhV2VKVDNOT0lWejM1SUJ5SG9JS0lTVFdScU5Sb2UxN2tjNHRMd3pIVUFEeDJ6R3VDQjRIYVZSV3FSK2RHcVUwdXJvUWpaNWM5alRCL1RnS2Y2YTAycHBLRlBWVmlNaTJwUnkzZzNSNlhoK2JDMUtHdXpMSk5nRHg1VENYR1NKdlBTMHJzNDZycmNwcVdQSGJOeXJjQzRZS25GOS83SHpYUjJSbWtYdmw3QWJDTVNPT0tSZUhtOVZrbGN3NE9tVlY3emVBSlQrUTkrRkFKNzQyNXhrZmFyMnRvMjdtNGVmVzFKYU5YUGJkdjJNMGpGdWJHV29mTzJ6blVXVk5UWHhpNXRxQ2tZRkpyeThzM0RCdkM2S2FOKzFENGs3aVcxbmJkekFGblNCVG91UmpRYTNFZ1lhUm5SQ3JGYW94RXJwRnJoK3U1dEp3Z1lhUHZaQittL3FBcHFzdWh5VnRIUVl5bE96S3lDU0lNb3lzdVhKd0Y2TXgwY3ZDTll0dFJvb0Z2NkxNejhCdEcwTU10RkZkWXZvU3hSbFNoSW03Z21FNDFEdW5UT1doY3ByYTBVTnUyY3Q2OGxkSFZOejMxMklaVmpYamV1R3JEWTQ5dldCMytPU2s2ZVZMNS9jOUoxc3FOano2KzRjYUdWZlBtcldxNGNjUGpqMjVjT1hqMXdvV3J5Y2s5SjAvdXVlZmRkN21VT0VBR1ZxeFNueEF0eVRSaVNhWkxaMlpPSVMwNmhSS2lCaS9JaHJSUWlLYVVXL3I0aVV6OS9FU1NPWmppS2tLQmdhYW4wMFdsb0ZvWEErS0lpZlJrTW92WDV1ZEx1aytUcnhVOWl5MG9XbksyK3pSZWF3YTdraGhqL0FtTU5IUkhZc3BYVGNyWFJFOWowejN5UU1mbGNXb1VBSitJYXBhV0hsVFBPOG9GZ2NxR3BxWnlmbHYzT3NHRGYrRWUwODlQRjN5d3JxTGNPTkxJMFRvK3VSQTB5WENBeWRUeEFjbDZTc29JeWcxd1QyOVFhcUNxampROEtBZmhRbVZRdm9JcFBKK2RmbjBLVTIwY1ZtbjBjVmlEMzBqbHgxLzh2T3ExTHFvSE1RMjlTZnVOMUpLaW9aZGFPM3lsNVE1L1J4bitsWnFzSFVPYVd1RHRVUHdMZCtwb2M0eUd0MlB3Ynh5K21aSmVXQmFOdzJVOGE0dkc0VmQ0TnJSSHVSK2E3aGphTWdaMCtsSmZXWG5Ua0dRT1ltOE41K1crUUUyQUJpdFRKTFMyaEpDVkZ3Z2p1UWJ0VWk2UWM2RkFiWUNNM0x5Z1dnN0F5ZzB4cWxvWHFTSkpmMkJ5eWV1QW1GbmlHeXh6V3VLWlFXUHFWWUxQUXFiWExQdlpwc2Y5YmRjdVhIaHRtMy9QdXMzYm5udDA5ZUZRWmZEZ3RKc093T1ZGZVBua3ZQbXZmWC9reXNtTk5hVlYxdzl0elV0ZmVFTng5WlRCb2UvZnBxKzg5OVlGMWFPcmluSnp5K3F1aWl6ZW1sTzg5UHFsK3ljMWx3OXZXVDF6VUV0NWZuYXV2M0ZtMDVFclNsZGR1M1YvWm5XUTMxRTZ1TFRVWnRPSlZhdXVLbSt0OE5rdEZldVFGNXcvSzk3Rkd6VThVRlE2RitDd0hzY1NRcWVZWkF3eTM1aVZDZ2lOc1ZQU3NDQzMyVWdqcVVCbFBFb3JFRmJGNmxGYlZPWDFWcEVOUlZWRlJWVmlIUC9DZS96TDZpU25uKy9VZktSWnh0bUE3d3poVnFpV2NTWlFYeXdnUitBUUNNamxjUEFFWkJGcGNTaVZyM1ltUzhFd1JqY3pVbUdRbHBBbURQUUR1Um5aVWRCbVAyckpGRDNsL3NZWTlZUUdnR01QTlJqc3VhVitibEJEWXpLSkZCTWVNdERXeHlTdFlqNUM2NTB3aDRUNkszaDNYM09PVDNKcWZ2b3JaTVNyZHhQdFM4dVh2NlNjdmZ0VjVjVlh3cTNydnYvMklwbFVQcmZndWI5djNmS0Z0T0RQWDhlUExpLzM3UjU5NytuWXZLMGoyM2I1eWxjZWlYL05IejVPUnJ5OC9HWDQzVjNLMlZlVzQ2MFd2ZjNvelMwU3FaUzIvdjI1QlF1ZSsrSjdMM1p0TGc4UC9jMFAyKys1dnFHNXJud3JHRktVVjgvamQvSkxOQUV1Qy9UNlpSendvVVNleUUxaXZGcGdaNFlBSzdmMVVaVXBHeENVYlFXcDVKYzFoVmhDYUdjSklka2NMYUdYbkxZT3daVHVwa2pLUTNYVzZhQThPczY1TkNEQ1pJT2dWa3YxQ1Q3MWpUMGxNL2RwNkVrN2I4Zk1PNjllMnJibGlwTFFtaXNYYnEyLytzNXJkZzVlZU5YUUZjWEZLNFpldFZDWWM5M0ttVHRIWGptdnRMRisvbHlsZnR6TU5iUGJaZ1VyOTFYV3pHSXd4cmhOL0dGaEJxY0I2NlV3V2EyWjBCczVuVWdURDZtSFFlYTFURVdpTm90QS84YklxQW5LTWZpeklua0N6SFNSY3A5eUYxbkJqaXluWE0xTDEzRFZMQ3NkZEFpMTRwSHFRRnBXaEdZQzIwTEFxeUxYazgrRjNOdHJheFJ1YVJhbU5pbVZaTjkzcXlrVXVWRzhWamdNL0RjTkpGRXhXRzJQY0QxbDFHalBXT0hncFZwd0NWalQzaEljanRjTmNxVXdLRlVHV0JTbWlxSW4yVW1CdWJtS1lkWkxncGpYamNGRlZPM2hCN20wNmpxaFkrc2tnRi9EQ1hlQnhTS1YyenFNZ3FjQU9WeXVYYlpTZmJyRWE3TjM2T0RHZUxYU0JueFBwUUdWa2VHMHExSVpESFpXZU8zMityeXVNQ3VNOHBOUlNtTHRPNnU2anlTVThFZGs4RWUvVjE3Ly9XOS9OblRLRE8vV01adG0zKzJKMWhmZExSdzcwcjNxbmJVSlJVazg5SWMvUFBUSTczK3Z6Q2RmVEJ3MmF1emJiNzZwMUplVTFiTTR0ZmdpZjBiOGdzVjRFY2VhVG55bHhIaHRnRmo0eW92MTliUWVRSGlTbkFXODZqZzc2RGNNcHphaGsvcjVNU1JQSkFkbFpIcEFqWjVaRkJwWUdiaE1MRmhKd1d0MUFsMFROaE1tL0lzYXdsUmRsYlg1a3RYbFJkcndscGUyYm4xcHhPeldZYlBuM0Q1YkxNZDNtejl1blEwWDVzeWg5TndJekE3cmJBWGdxYk5WeTVWVlFraW1FQ2JvZy9rVkYybXlpMmdCOVZ4RCt5dG9kRWlMd0c0dHAxQ1lZNUt3UGhnM1V5M2V6SEp4NHhhcXVWdEVGbVZuWERqRXlpbDZpMi9STjVBc3dJM0YrcFRnRW02Wk1KTS9vSDJZeStkYUtGNnhhc0JBNlk3bVRXdFB5UmwyYWo1b00zcVNjV2dXZFM3WGszS2tUVE5uTUlZYXhvVDdsQnBFZ2RZZ2VsekxWajl5OThpYko0NWI3eWt2M3p1MVpPU0ljR0ZvL0tZMVY1RmZDRE5ycnRwMDkrYW02Vk1iYTBvYVd0Tzl0Uk9xNjFmUFczdE5VNWpPK3p4aEFuOFF4bGZKamVPd0hFdGs2d0lZSEJaSzVxajByOFBTR0xrTS9hUHdDdUQ0c0Y0UFZuVVpxdWpwTnRsYkRFZVhQWjZabGM4VTg5VHl2WEJ2cXdDZFR5Mmc3NjNlbWxkZWNzdUVlV3R2WDFodlQydWFzK25tYVcxTHFuM3pmN2o4WUVsRFExNWVjMVA1L3Mxejlna2ZlTU5EWjAyYVBrMm81OXNualprYWlwU3N2L0c2d0JoL3Bzam5CQ2JVekw5dHJFckh5ZHlEUXNUM3hYTVBnS0N4NG5mVURPVUIrSW1QcGgzQTd5UG5RL3hwbWlmVW9sSzFIcWhhVC9tVTNnaDBvQWxTejVReEdVVktFSHBQaVFRd24xT3Iwcm1GUHNGdXJRc2hpZUQvUlpIMzdpR3RzUk94ZTRTNXBQam4zM3lvK1Y5bnM0WHJhTjB6aVpNc1BnSTJieFVIU3FaYUgvVXRDcDRkL1V1aHlGZlpQbDkycmxwSHhDbWJ5RFpZejFsY1BVb3lHZ2d6QkJJMktzYUlsRTNKRHhNa2NuQkNVUkNCY201S2MxSzd3aWFsWTE1R0pLTzNDRE1TMHZYMmY4aHJ1Ylp4WW1WbHRLQnlTQ3hjRUJnOGV0WGsrdm5LaS9VTmthcnlnQy83dWQxWm8yTERwbnBvZkZpWVNTemFQYlRtc0tjRTJkNi9CTmtSb1NYSTVjOUdZcHMwcDUvdk9zbC92SXZKcXprZ2swK0RURFp4TG00b3A4cGZXbnlNNUpuQmN2enROTWVmZHIyQVc3dVRkYVlHMnMvR09YQVBDenZsTWdqY0hIbm43dWVlMjcxVGJ0cStldTNPbld0WEN4L2UvZnByZSs1Ky9RMmkvZXdIUC9qc2lmNXlzeVFwTjRGTkpJeTlvdE9JZWNORXBLWGYxVFdScE5NUC9vSHdWSTVOd0QvYmVzNDJKZVZtaXZ3VU1aNnVtVTV6ZFl3QWNTYTNrMlZTU1E0MWkxZ2ZTcGd5ZEFTTXFQU1FiQUpVMklMeERGb0xuR0ZHbnBhVnhERDZnb0hqU202cWxvQmhGWGRReThsaFEyZTFnNXBVd09ua2JIVWlaR0tNVW8xRmI2QWNoNU16VEV5TElUWlp5R1RybXM0U3BneVZxTFhETG0rNHhHT2o4elpkV0RDMjZ6NCttOXd5WWVQR1J1VlowaTQreW1ieTNIYU1NNTZwNHpPNi8xcDM1a3dkT2MxMFZJVDFnQXByR2ZjOUZpWERUZ21sWW1jUHREbE9FeWFvVW01VW5nb2NaaGdXMnJFaUsyNHJSSEJzQ0U1RkgzQnN0b1Rla0psVFN1RXBOU1cxc2lPaVRYQm5GbUpsRk1sQkY1ZTJIM2llL3N5V1Y1bHRLcVRyK3pEZXdOUUoxU3JmN1F0M0tnOXV5YXFkTWJpWEJjTjh6K000N1F6TkhPREJOZHhnME5SZjRHZ3pFNmtoRk05QkRBUkNxSzdFMDFHMEdzWE9SREJXbFE2VFh4ZVNnekQ1OWNGNExJaXd4Mm9OL29Ub3g4OTY5UGsrakJ1clNodUJISnFZdFJrT3hodW9UNmFoSHNpaHNRRlBHNE1HcHVFM2xvRllEbFRYTXUwK2h2WHhvU2hsK2gzQTlMRWs5enR5ZmNNRkZOUWpCNXJTK3NtQnhtaVBIQ0JGRjVBWWY3QW9QQVJFdzFRK2dxSmhXaWhTaktLaHJVYzBiQjdYL2NpRjFNZHprNVFsd2piaGM4N0QrYmsxWEx3RWZZMFZsT21DYUdiVjM0TW9jMUZiUENDL3N1QTZza28rckc4c1l2V05SWUdFajU3UndyNmlEQ1FtVE1MUjI0NlkwcklLaWl0WXVyQmNVbzZzcUNJTFVaaVdtOGZNV2xiUjZJc2txeHlUbFZHbHBJZTNUMktsamQ3VTBzWWpJd0lQS0g5NjlqMHlzNnplNTZzdm0zN3gya2IvNmFQaUhTazFzUUxMcWRXZXBmVnZsa3RXd0tVSE1Kby9ZQVVjUzdYdFZ3V25uS0JKZkNtMWNPUnpsS3ovUTg4a1BqanQvOHhGWk9RMXlnT3B6enhCeFhuZlo5b3UrVXg3Z0hVK0dmQ1pqcERENjlQMWYreC92ZFAyWHZUSGlRdWUrOVZYS1RqK2pENjdtRnQ1MFdkTE9RSFp5V3h3aTRhbGZKbE9KWXFac1ZGTWpZMUVKak1vMEJ4M0YyTkpBVzh4NXRCMXFZNVhkaUlITXhXejJrNTdRYlF2QkNYVXBrQTNmVGhFSFNRQ210c1h6TjNKV1pNR0RmVVYxUlRXdGRiTjdqbE5CZkFYTno1U1BXeFk5WktsTno1YzNZcEh4cjhZckt5ZTBzNWxjMU11RHEwOUlHV0Z3QUlBN1RKSUV3YlRUc2xXSTYwVFE5TWcwMGh6QjJVblZvWVJqR2RGQjU2VTRuNnVrQXVBT2R2akc0RkRLZ3hkcVc0U2RldzZyVHIyWEc3MXBjYWV5QkM1TlRBdjJZR0VoWjdSVElLMFV3a0hteThIellOSldObDhZU3BCcHNObWY1N3c2TkUzOXBteGJHQVRIV25wdEY2a0QyU2x2UllRVTAyMC9XRjdhZm5CWmNzT0RwbDRZM3Q3UTJON0tteWZIMXkrL09DS1Z4c25UbHpUUHBIcFRnQ2Y5bE9hdDIvSGZFTWFhZVZDZlFzVExkWTBoTkZDNndYVGV1b0ZIUWdhNkJaWVJVWUQzV25KUUhkUHNTSk9HaWVMV0FSdnAyRDBsaXZDU3lBZW0xK1lKMXpkMWMxLzJaMG1DRjB2ZFQ5L2hoaDVYMDhCWTIvSkxOWVdLdHRwbldrOXR5R2x6clFXbmNjOWxZYkZBYmxDMHlsVkJ4TDVxaHJMbWlhb3hZYVZMTmhBbXlaVUFoRU5OWm8wcnB6Yy9HSmZxSmJpdjdvQ0ZwRFBVeFlNSVZmT1I2T2JGcXdtZEZ5eVh0VlJlNUY2VlUySyt1dnJveGhYOGZ6RkNsbGZWVDR0TEtnYTNBYnE4WUtDdk9iWmplMVVhZlp2K2NzUDUvQ0hEZ3hRM2ZxQk1KbnB6bG1SYUIwcTB6azNHWlk5ci9xbmFLMG44RFFUek9obHEweXRsNnN5dFYxUVpZcUVtRkpwMmwzQ0dMbzZYZHF6ekU3NnZ6OE9GQytwNC9nN1dtb0hlZ2FpK1NYbDhhbmpzRjkrSEk3TGpjTjVJVDRZOTA4ZHlxSVRiZTgxdkpqb054YVY3N1B4c0hxMkhNeGN2OVNJY0VEWklUa2QyR0ZHa1BhZ3VPVHcwTUJFRzhNR0ROUEdjdHl6Z0dIbVhUQm9yaDkzVEIxOU8vVVdrL1dVQS9aT3JMYVA5NWcvL3pBc3lCYkFLNHQ5ME81UmRCSFNLSWpJbWoyeDJJZUFyTXNXc3MxQlNwblFnaVJ5dGxKTkt1UUJBeHh2K1ZiM1FaMGI4MUlXMFpsT2EyRm83YmtWak9rTWpPa0UzQXR0aFJLMXVrUlA3MldpcFNWR3VGY2EybUE2V2cySVkyT3poN2ZOWXJPMnR5VTVYY2s3QytkUHduMC9wUElMWjIwbzYxSVNONkRxRGNhcW5mbm5NU3JsVFBYTnExVk9tSmV0VG9yYXFpVHBwc2VuSnYxWklZcjFOMXR1cEJoV3NYMDJEMGVndmdGY1pZRXRWRU56Mm91NCtWdzhuVk45YW9MYVlDTkJ1SFFCRkg4UDZ5TlhBQ1B5WXZvV01tS2JpWWFhYmVuVUN2S0FRcDl1dzlOMERKTFoxTnc4VzZkYzNGT2thM0FuODVKU0N1QTlOa2R2Q1R4U1U5WnBzaStsRG41eGM1OUNlTEpKMmNqdmF1SjNKdXZoK1YzZFVrOUpmSGU4S2NrcnhGK0FMbVRndk5qWnNsOUZMQ2FDWUJaMllRRGo1YlI0dkxjKzFnamkxTXVFcTVmR3l4TnU5czdkV3p1THBlUkdBODA1a2pPOEdCRE5qa1psd1UwTC9GUHFhR1ZITmhZdmVrRkxLclRKTnJCWUpMTmR6bkQzcmJCMURLZ3NKZXR1OTRHTzFGenFCY1dvcFZkSGFrbXR4dFdjSGtCSkVsaDlMdEF1MXVkNjBHTTZRSVZ1MFVBVnVsNjFRcmZESk9ZWHNxVHpmNk5JRjluNTVRdDE3YkIwWTVjdDF4WDJVZWIvL3d3V0ZBbVhoK1czMUtWM1dXRDRwVW1mWDE5NGlpOENUOGxBOEpTbXdPUDU5K2VHTWFmTGd6U0ptUnJmRWlZVVJFbVlQcU13UmJnN0JvQkpxZ3JJUHBFMm4vSm9XS096WGdoQmQwMUUyRXFMV05HaGt2Q3pkLzVlNkxFSldrWEVaajlpc21kN3hLb0w0SmQ5VmJEZThpT3d6bXB0Y2trd2VubU1ETGoyTG84Z3kwQ3Jzdlh5K0ZvenNEM0RjRGVaNHE2RXErU1dESVE5SUloQklka0RrcUVzU0gza3ZjakR1bkF2Q0FuZ1dKaTc0WWZURkxSaFhNaUhrUjlBbS9odkUwMS8wWDU1NUlSVG84U1h4OG4zVXhVQjlFMFBFK2FJVHBDTW5NTkFJZ2JpTmhDZGdld2hUY3JyZnRKRVluN2xEZnBIZVowc0k3R1U5Mi80U1V4NW80Y1dRYTkzVTAvTERKWTV4VXJzaTlXR0ZReXYrZG9lbDBzbW9ETFRTaU9wYVlBMDFPdkxNbTMybzZMZTZuUVpjb3NvNHZMQkdqN0tHZExzTG0yT1B5WGs3STZFZERUcUxHSnVpemRTaWtVM2JsSkthU3hEUmFlUG9pNngzOWZXZE9zdXhONUxlMHJhR20vZE1XcjFEZnpPTFU5UjNEbTMvQkJ4dWZZRy90QmJnTFpwTGZObUtqOS8vazNBM05RaGM2NGxOY2VlVnY1N2lqaDhBaUN1MnpvQjBmZ1VzVTlodVNObnhNUEFVOUpCb3hnOFVNVzBjNkNLYVpkYU1kMWh0Z0FWdUFjcW1uYWdncDVhT1AwMjZsMERWVTlydmxScktmK3ZqWVVxNmFsaklidkpTRkRlQmhxTmVGSmx1S25qeVJoNFBPNkJ4cE9aTWg3SHdPTkpLdXQ5aHVSZzNQUGlZd0tHS2FoalFqdlp6UlZnVCtuK284SkI1WWRrQnl6NDdKNzZGM1dJNklaMndTcDNzUks5UENPdElFc09ITE1vWGRnVDFhSUJKU1FQZS9lWnRRTVd4TnY3NisycGdIeVp1bzRIbkcrdXJ3N1BjckFBejNvdTdjSnFiSE5QTmJibDB0WFlBdnJjZWlxeVcxUTdyTGN1VzlqTUpyYTNsNGVaYzNGalVxcVBFbWtXYXZHa2dRb3J1RmdMSFcxdjVBWlF4RnVDd1dUNEJua2t6WjUzV1dpN0s3WEppeG9VVCtrczBVTHVYLy9DalA5OFByV3ZoL0wxRGM4dGV1d2o1UmpaZW9Ua0grT1MrZk5pbTJZUjBOb0g2cWh5S2UvUnFPeThIcDNsTVRxWXdmWk9hYkNWOHVoMHJGQzB5bUZNUElkVEhXUG1ibnVuM01SU3N2NTcvZXQrbHBJMXlDcFZIQWZ4OEkza1BON2hzRHNkZnJqVTRSOVU0ZkRINFcxS2JRUmNvN1VSZG9lendqOG9XUnVSK280bVJnVUdBK2dlZExGTFJWRXBiTzlJRTBQMTZMRFEyZVRjWW5TSzFSZGo3b0RiVThUOFI3YWV2dVJxb3dsc0xzb25uUlJZTjVFTVpyaHMwcEc3YnBWTEcwZVBiaXdkc1h6YkhjdEhsRjI1ZThiSWxaTWJQRFhMVCt6YXo2Nk5tRHQzeEw0WlMvZUx2aDB2YkxoKzBPaGdwYjk2ZUhuOTJISlBXY01OWSt1dW0xaVRXUjBzcnR4Nys3WEpvb29oYzVzYngxYU5uN0YzM1RsVnI2STEzSm9EdEliYmovMml2a1VWOTZDTFZuRlg5cW5pUG9KVjNHVVYzN1dPRzQzWHk5VnliNkhhOGFVS3VvWEoxTi9jRjk1Vi82UHdQay9oTFVjcEp6bnRVc1YzQXh0dDdjdUJQWndwMHBlQ213K29QTDB2N0ZYZmNxNERGNFc5ZW9DNTluL251V2JTNFhKd041d1kvVjcweFNQZkF2Qi8vak9Wem5kUjJKdUJDL2FEdlFsNWpGOGNFQW1KK2hxRDM2eXlvSlpVZklEbWsyaG1PbmR6WCt4SXRSaDhDak1uY3lzcVJuazBxQ25YTm9NNkpGZ3pDMHI5aG5vVzduUmhrZ2FpUzAwMFE0ekpOZlZ3VnRZTU9HeXlBYXY1dDNBNG9JWitPWlRlMXF1VWgzdFY5VXRqT0pMVXlmdnE1Z3pYUE1WMUFDeWJmZCtDMHBEUTZrS3lIMFEzYnZSU240cG1UTitxTk5JOVZIQlBqRENjaHZzUkk5bzU1U3FLYXlyQjNxRW9ObHdjd2Q4ZW5mMHpPaStIeUdsZTVyeGpxc0FsOGJlMGI1eUQ0YTFUeFZ2MFFpb2RHRytKRUl0NDFBY1NmalhpMGRBUGZZa2FScVUxVnV5cG5xaGs3eXI3SWJFeEJZbDFOZWlZcDFpczhGY0ZMb0ZKdVQ0RVlxNThVR1dacXQzL2UyZ3Q3Y252dUJ4aXpTc09MbDE2Y09qRXhvWXJyMnhvdkRSbUg4QW95L0t2YjV6WXZxWTl1ZjYxYndoZkFkOXI1RVloWmdlaGg2c3NKQWMxblZKUk1HNGpyRkRFQ0c5Ymc0bkIrWU5zZ09EQnNQckZCbnBLby9XanFRbFpEWGl0dHNvUlF2dkxZTkIrY0ZES1ovdjRZT2Z4TmpoV0UxckdKMFZzQ2RGc0d4U2trUXg3M09Hc3hXU3NtSzNEWFV3bG81UnJsMHJRVEFwaUVJb3JMcWtJUlBEeVlLemJZZ2xjWm91VEJ1N3JhS2VJdnFoMVg5ZzhvdENIb1dtZWxqQldFWXByVGJLYnhNYnJINXorSDF0NmNMenZPVVBkKzNmMmJ5K2hmTDNuRHVXemFROFdQYmJseS9YcDJmV0g1MnpoOWFuOUpuNyswd2ZhZHAxV1ViOXQwNnA5cWIwbi92em5zZVRHVHc5K25EK3JZc3lWd1pRdUZJUmJyMnlsdlVscU1YYlUwNXVraGxNTDdMRkJDY1pZMGVGUkdVamtxTEdqTUd1N2FxYWFIcWFOWUhwYkhmbzEwbW5zU0xSblp1VjRpcXRyS0lsVyttejJSSEYrU2FDYXRpeTJTVmxSMnVRRVkwZHFqeFBXY2VQQ0hpZnA1T0tob3dHYW53emR1ekFsYU5ReVN3MGFWZDcyMWp6eStWMzlPcUpNYUJlbnM0QlJwcHA5bGJQQnNPZlBURGJSZmlNZ2w3SGZTQmszNTNJZFI4b3YwbkdrUXUwNGtoQnRyaEphcS90LzJITUV6ZGR2MDNkazBnd3lNbmJwNWlQQ1dGWDMrUDhiakdnNGZhdmVLdm5VbUxvMGxIeEpqNDZWQ3FmLzhuQU91Z2ljbGFsd2xuMEhPTEZtRGhTcWJ3UHFReXo2OG0xQVJhMUtWR0hsS2F5RFlGWGZmbWxvRWRoUVNDNERFUjhJSnRkMUwram9xSzBBMFY1aHBTM0lnMFphMUpCRUNDNzRLckRMT3RKZEJlaVJrN09DYXNIMHY0dVIvZ2I4dDBITjV0U0EzR1VRTkxkZmpRZC8vajVnZmxHYTc1b1NYeU1wOFRWNy96amRJbHhaWTJtbnJYTzdhT2NVdE4zbndoLzl0N3BQTWs0M2x4S3ZwWWxsei9iY0NzYjBFWXpwTmJoWG56Z2RTWW5UMlM4UnAvTXdTcmxmdmU4Ly81bThzM0QrYmJqdkI3UjJwaytjam55TE9KMzlXOGJwb25ReTNtNWE0MDJwcVRtM0FrZWd2a24yOWRCczRuSkI0bC9MOWh4RUYzcmNubXpuSXZzMXpMd2hQZTJFYUtqQXpDeWJVdENEam9nbW5TUGJTZVdLMzBQOXZ4blVhVzRIc1p3d0dDMDJaNSttV2FVK2phOEVSUWRXN25FMjUwWGJmOHg4YU5pbW55bC9jQk4rN0x5U3pSUCs1SDZiN0x0NFA1QXJydjNwZ1kzaFZYVkRJbGNPbmh1ZXFzU1ZWZmNNM0IrRTloYmFCWGl2NUhiM2RsV3BRTnZHclRaNjZtbXZraWpPUzNmRHdpenVLWjlRTzYxME9CMVlybHZaa3k2anRsM3A4QmhOY0wyUVhTOE1KRHk5TlJTRnVMR0sxcDFlekVwb3NJdTlFK3RCSzJ4eVRsbjBJczFaQnJaVCtyUnMwZlExU3RUVEN4cTVpT3NITUVRRWxRWU8wTjR1M3Q2WVVaL3VMc1VEZFhjcFVidTdkSmpFUXViRi9uY2F2RkR4ZWZFbUwrM1hvTlM4UktjWG9UcEZsdncvR0Q4VmpaZG9VbFBBSk9JbElPQU5mZVJoRW9iU2k4RGdHd2lHc2hRWXZQODJERW14ZDNFd0RwNW8rem02RUM0TEJzcTZKQnk3S0J4UlhGMDljTlRSeHNOaUwwQ0o2dkpjTDZ5c2FseFpEYW13RllMdEZXWHJKMnJGaG1VcGxsZ1NialRDQmtWcHhDN1hLMVpmQUxsY1hnMnJpL1pqcjdQSnZ0cm81ZWx4d0hWMkNkUk1IbkRWWFJKVHRnc1hvS2ppaktjNFE0dDJ5UUN6ajVOZkZaSzlJQlVxZ3JSOWNDKzYwQ2xmQWdLaXBJOExJSWtvZEFXVWw5QVlYYTc0YnhQSUJWckF4ZEd4eVpzcS9DK0ZoVkdwb2wrZ2V3dWVwalZQV0JVUjRiRDNnWTdsTHJPS094Q0N1TlVoclNESndGMjVKREdJRmVYNERYMlFldGhac1Z3eW9zaXJDY2Zlb2tiaDBlN1BmRmhRZ3FuRlpiazUvTjZtSm1VMnZTRE1yaThwemNtdDZLRmJzTGt5WUE0cVVCL3RqZXNWWVJkR2toU0h1YjNkOWR4bTJpTU1YZWxwWnRaWXo0Mk9QbWRVOHRrd3V1ZHdHYkpaYmtCdUVZdnVhVjMycklvVTZ3cWpleXhmUlkzdVJadzB0Z2ZVbU55bHpZY29mM0IxemJDeEk4Y0MyaCsvT1RwaThyYld4Ynh4N2paQSt0MXo3OE1waU5XVHovZjhiY2YwNW5ramY3b0dwTjcxWTFmZDIvbm1adjcxU1Z2ZVZ4d3pFZmR6NGtOWnIwNlFmUWRBOXJtNTlvdDI0TW04U0FjZTFESUZGVVN6cmNQbXltREZvSmRzeG9OOHZtOURuaWhsN1JkMDVkSGtzdGpMZHg4amRnbnFzRGxkT0RvcHpTWmxYRzZNeU12N05RMFNHZnUrWUpUQ1A1TXhvdDV4Wm1PTTZDTGp6TG5JT0hQVmNjWnRUamZMRGI3VUFGVkczWGVNNjFYMzdrWEdtUFRwc25IeU5JdVA3blV4NEVoeG9FVWgyYTFuTFRDS1U0ZXRwdWRobncvY1A4cGpwSHYvcEFDRGtwUkdBM0dqeU11QTBwK2w5SVZwU1I4VDRnTEl4TnBVM3NHenZrSXdCMWJPT1ZCbklWY0FjeFcrVFdjaERBME8xRjJJaFE3NjlSZ1MxL1hRQVBhYVUzdTNYcXpYSFA4LzAydk85bS8zbXRPKzEvM3hSWnZOQ1NydWVCZzdkb0daMUI5N3VNSUtRcklUQ0NJblNMdTkyRS9KR1VaYVBvSlZWdmxHdHBVUHBuL0x2QldIZkhrMDkvY1NENFR5UDZYbXUvZkgvTEcrODcvMS9CbjlPczBpb094eWJoZmoyalRQa0xyTkNyV2ROUFVSbzdVczdkb25kQ2JNMWt5Tm1lNnVRMXZHd1dUazR1NUV6THB5WXB0VTNDL0FHb3luMFIwbTB4d0dXQjVCT0VrMytPbVdxUHBjak50a0lzQldqSVc3TUEzUGJKTTViSUtVWnBmMXhkR2UxT3VnNkxhbEpwSW5ld2ZRVEppSXJiVFlXOGh0bmZIa1ArOTVqcFJONkUxdDdYcHBndktiNTE1WFRqMDBDcE5nWGlYZTRjT1YzeDlYemlwdjhvZjJFdUhsSmZJUFNFc3k4YnpseVNNdms2RnZ2YWo4N3FuM1Q1RC9mT2VrY2tDVmFUcnNPMTNOdFhCWGNQZXFsVml3eHNNd3VibEJLczhrVzBnZUF1cEZXekRSbWxtRkhvaFdYRGNUcUg1Ulk2YTdUV01DZW1ZNituc3hqV1VZV24rR1R2bEtPRGJVQVBoVkl2VXB5Q2F3WUtSaHdNL3lpMURyeXJEUjlqZVpZYXdSeWkrZ3pwbFdtMXpUQUo4TnNjdTRpV3lQOG9GN0hGN2dpc0IyRitJQUtrbVBseFlGWSt0TlUwWlU1K2xNNVczWGJCdmIzejNSdm52MjJBcFRXc21vNmRzblhLQ3VDTlA2K0srb3Z1S0pEaDgvck1BMzZacFIxYW1PaTZvUjExeFZVVDVoMXNocVVHVTIvT0wyOGJjOXBhb3lVM3NkdDRLYW80RDk0bkZGVGV5YnBZQ0o0KzZRbktablBVZXphTm10eFVnVk9McHZpNG51YjQ1WkE3REc2QUs3UkNKRC8yWFVtOVR3VWQrYzZKVGNodWY3T2x4WWZmSEgxTGZocDd1eENxR2VFbU1kcmROVm14SDA3cWVKMjVMWW1IK0RpWjZrWTBPOTN6SitBZWorV2R4VUxwN0JzMVpyQUxkc1FKTEtwcmZNWW9vOENKSTBVT3RaSXdLNnBWNGFTZytCY2hFRDhrQXVpOUtRckhQQ1VVZ0dvMndENnVpekJ0TERCekoyVS9zdmNIMjZLM3pIejhSTjlEUDNCVDBkVWhvNWlNUG9UK2ozdFVzdS8zMXR0ZnI5RmFLVzVORjl2eHRaSGJlVUhrZ1llcmUrNXFoTEM2Z050NzdXcFNXM3ZqYWtzeFpuZ2swU1djQUoxNVdyMTNtL29pMWNXVFBZTE9ZVmwrUVdWWW1yUm04dktlN1p5aEgzMjRibmV1bHpneHpkaVI3VC9iL3RmdHVPUysrM0xmcUxGd1o0ME1kTEc0SnN3KzMvci9mMzVybHRvcFlQVVBpODNFd1ZzNjRRSUZmeWhGVDhTbGs5cXBET2xJcGl6S0d4VStkelp6ekxqbGV6OHRsV1lBenhNb2VlVnNFbWl4blJBWkVmdWVES05weU9uaUYzSmQ4Tk5EbWh2bE9GZTRNQ0xBVXFMQlBZYkVsNUlYWENhSUZhOFFBNFJPYUR1bDBoWEhWaDBUSG55azVDZ1ppVkxZWFJBZWN5Y21sc3YzZUpxUzdwTi9GMFgxTytnTTQ3SFR2T1BNeURPdmxTM25jYnUvczdqYjB2MlpUMEp5TENQVTNLK1NoL0xMWGZnWW4xT3pEMTZYZGdZdjBPVEFQME8zaDZ6Wk9yVnorNWhudytjZlhxaWUyclYxT2RmYy81ejhRbGRQOTRCNWVIdXBtZWFqWTVvWkRhUzBGT3l3Z0crKzRtbjUvU1hBRzl4Vmh3a0s1dVFVdHJFaE5ack9OQ1FiOXRhRXNHT0V0MllUalU5NWpjbWphMzM1SHlRVzRUK1RYdEtZRDdnMmhUdTFUb2t1NzIxTTQ3eVlZN2ZYL3JTZjRXdXhHSVBUK25QY1JaZDRWSXZ4NEVQWjBINEQ0VHpwL1JoRFZMUUtKdDQrSmwxSHpIbmE5NGx2S2M0RWhaV21xcnY0UmVSeStBWk5ZTHJKQnpFRzF5cVEzSzJaaTJHNHhuMHc0cjJiQzZwUXpRbWJLVFhYNGtYWkNHbjdLeE90L2dSOEhGZ1pVdmw1UkdvN0pkbjlvdEYzdlZlY09oT2k1WmlTZlNUVVpjVHRyYmowdldTWE8rQ2ZQMCtua3JJbVRwRjJyMTNXK1VWMnI1RTkxK3ZaNy9kWGNrUkZwL28yNG8rYVd5dDQ2Y2pkVzBsSStQZlVZOFdIYlgvYXRZYld0NVcrelg1em5jVjVKNFA0ZTE1UlgyQ3RQcFhrcE90UHhvNFJidFRvY3RnSVZnc3BjUmJxaXV0NEE5d3ZiTTBxb2J4QXkwdjFJeURvSFpPMDRyYlVocHNiTWR0ZEtkV0pTU0ZsVjcxOUdORFlndGxFUDNteE84Z3MxTElodWpoSis2ZWZQVTZBSHJBWTBuSEZaV2t0M3dlZ01wUW9tUjFjcE9mREY5QWhiQzc0WGZ3MnJ3cGZTVFR2WS9FV2lqQ3ZXZ3lzMGFtOGVHUCtrcVV2c3hDRHp3UkJmMUMrOVZ1MXdXaHRpV0RpYlYweStuZTFSMDJJS0pySHlPN3BhdVp5NWoxaHo1b3YwbUVCc090aDJ1MTk3WlVWM290dmpsWEtQcVdNYjlGTFJZcStNdHhOb0J0c2R5RmpPUXREYWFEWnJjREtMdlhoQmNuejBDY0dlSWtaWFovZ0RkR0lLOGt0d3lRTjBqSWp1Y21kd2lnbWo2N0NGQTk3TDRoTUtmeGExVm9jOEkwVTNJK3FJQWUyOHdCRkExN2R0QmpST2V4UnF1eUJsSldBRkN3aUIwWHdwQ2NpRmNweStFcDJ0NnNsNk85aEVSejlKOU9RWnhFZENEVHFzeDFJcjZFSnRQa0hiVWFDMEtVcEE2ckptbDBXSTNoU3R1ZDVjQlpTZXF3M1J5cTNGeUIzK2J6VHVRdnJGL2VGWlFycUJOc3VJVmZ2eXNvZ3krNXEvQVV6ODIyS3F3eXZYWVp3SnBvTDRTYUNBRU5JQlpMbjVjRUZvRDBFQmxCWnpsRmNCWkNEUFdxc09JcTJvWExhQ1cwbXl5QVlTVnBNV09vUmZkSXNRek1DcDdpS1hVb1dJMVpSOFJNdW1KMjFhUEFpeFh6MkRVNDgzTThucXpNcjE1QTJ3eDBwK2M4aktSbkx6bkpsTjZvdXRKL0ZDZGcycnVwZVFNVk1JTVZDVnBxdDgweEdFYVFxSFVXU0JTemY4dzZwRUpWd01oQmdkR09OdDlKVzR3MGxoQWxlMy9BTVdYeCt2cHk2TlRwZWIvRGNicFJ2Y0FlTnBqWUdSZ1lBRGlnNDhxZWVQNWJiNHl5SE13Z01ENTBnZk5NUHEvN2I4TWprcDJOaUNYZzRFSkpBb0FYaWtNZWdBQUFIamFZMkJrWUdCbisrZkF3TUR4OTcvdC95Nk9TZ2FnQ0FwNEFRQ0puUWFCZU5wdGs4dHJFMUVZeGMvY3g2UVVjU0hTaDNTaGpLQkRLUzVLa0ZCbVZaSFNoU2dVQlZkRlN3eENOU0xZUXFCWmhCQzZrQkNLVDRnU2FzQ0lpeUN6S0VVRVFYUlR3WC9BUnhjU0JGMklpMktoeFBOZG14cExGei9PbmJuMysrNjk1OHlvN3pqVkEwQlFCd0d2Z1lvNmg3eFpSTkk4d0t4OWprazdnR2t2Zzd4WHA5WVJxR1ZNNlY4WTQ5bzVsVWJrYW80Q3BvcU1xWG9GNmtOeW44ajRHU21USjl2dmNySmVhcVhIRGkrUjlNY3hZZnN3Yk5ZUTIvTW8ybm5FNWhZWjUzT0R6MlhFckl2MUNvNllDblVOUy81eHpoVVIrME1vbXV5MjFsakRzNXQ1bkxIVG5HZFAvd05HN1NHTW1uWDJmNHhaN3dWT3k1bXBnWjdCTVZOb2Izckx2TU1RNzE1Q1UvOUVqcHJqUGpsdkE2RWJwOUQwcWxqeXF1MUliN2h4ay9zMzViMHBjMzZCdW9DYjZocnJhN2lvOW1GUTV2UWI5TnNhUnZSYndyRmVaYyt2MkU4dlkyckFYcW1POTdLdi9vSEFqR0JTemlwclhDL1QzdlJUMU45SXEyK0l4RFB4bmpxaFdzenVCSkxPeDE1Y0oybTVpNzZIazg3ckVuc3ZJdFFSTGttdFhVSG85NUpWcFBWaFRJay9lNUhJVXBtRHk2QUxyOUYreEw1WHFTM3ludjBHT3huc2htZXFpTG9jdW5BNVpGMi9wdk44RHhJUjhpNkh5di9RLzd2MGZvYjZtYnh6M25jeTJFMGZ4bmJtdTVBY0pDL1JuaTBVRXkydUViL1g2V1dHM2hXQWhQOVAxUVY2K0pvTS93VmZxRmVvbHpuSEhEcVlWNGo4aHZzbmJzZzM3djZST2twa3p2RVJUODBXTTJHdE9zQWFJbjM1clo5bHpvSCt4RDN2TUN0aWJ5TkUrQWZjVzl4b0FBQUFlTnBqWUdEUWdjSTZobDJNSWt3eVRGdVlJNWpybUpjd24yTGhZUEZpYVdKWndIS081UVdyQjJzTzZ4WTJMYllDdGl2c1FleEZISHdjWFJ5bk9GVTRMVGlqT1BNNG4zQmQ0V2JqenVIZXdjUEFZOE5UeFBPSVY0clhnamVMZHg3dkVUNFdQanUrV1h6MytIMzRGd2pZQ2VRSnJCSTRKeGdnMkNTNFNmQ2VFSmVRa3BDZlVJNVFpOUF5WVRIaEF1RnRJa0lpTlNLblJCMUVXMFFQaVBHSk9Za2xpQjBSNXhDUEU5OGpJU1hoSmZGQVVrZXlTSEthNURjcERha0VxUjZwQjFJL3BIMmtGd0hoQjVrNFdSN1pOdGtYY2x6eVF2SWU4bzhVUWhSYUZOWW9uRktNVXl4VDNLUEVwUlNsZEVqcGtiS01zb2R5ai9JYTVROHFLaXF6VkdWVWI2aUZxUFdwblZCblU2OVJ2NlhocGJGQTAwaXpUSE9YRnBOV21sYVgxZ2F0TzlvSzJqMDZmRG9sT25kMDNYU2Y2R1hwOWVpejZmdm9UOUcvWitCaDBHQnd4ckREaU1Hb3p1aVA4U1lUUDVNL3B2dk12TXoybUJ1WUw3T3dzb2l6YUxIWVlQSEZNcy95bTFXWTFRNXJHZXR0Tm1ZMkZUWnZiTzFzSjlrK3N3dXhtMkwzeVQ3RS9wSERMSWRQamxLT09UaGdsV09INHpUSGRZN0huSmljckp5S25HNDRtemxQY1Q3Z0lnV0VGaTR4UVBqRTFjazF5ZldSbTRjN2wvczZBRGhUanFrQUFBRUFBQURwQUZFQUJRQUFBQUFBQWdBQkFBSUFGZ0FBQVFBQlRnQUFBQUI0MnAxU3pTNERVUmc5ZDFvL0RmRzNFTEdRV1NLTUtXMHhWbUluMFlnS2laV2kyZ250TkdZNmF1Y0JyQzA4aWlmZ0ZhdzlnZ2R3N3AwN2syYWtzNUF2YysrNTMzZSsvd0V3alhma0lQSUZBQjErRVJaWTRpdkNCcWJ3b25FT2gzalRPQThMM3hxUG9Dcm1OQjZGS1M0MUhzT0ZlTmE0Z0VYeHBmRUVLdUpINDBsVWpGV05aN0JneEw2ekdEZjZHbjlnM29qamZNSTJYbkVBRDEwODRRRXVtbWdoZ0lsbFhHT0Y5eEhxMU44UjFXaHRrOW1Ccjg0MTZqWmhVOHFzM3NRKzdpbm1RQlJmdlJxOEc3eERuamRrSGhONzZLdG9kVEtxZklVS25kTHJoS3dtZW93azg4YlowN2tkc3JQanVKb1ZWNWpOTmxONXoxVEZQdGt5bTRraTY3YVY3REZTalJxSkI3VXRNZ1BPVFBMRHhNUENGblpTdWVQTTYwbWR3MnR6MVF3bENzaXBjMzROeFlrMjR1RTJjME5XaGszdUorRFdIV3hRSHBWWVNXei9UeVRaV2Z1ZlhzUDZpL3MvWjFkWDdFWDZCTW5zcExXbi9xc3UvYVYyVzUxbFppOXhxZzd4cnQ1d0VhVmZMZjZJSlFCNDJtM1FSV3pUY1JUQThlL2JLbHZuN2h2dTB2Ky83UVJ2dC8xeGQyZXdyUzJNYlhRVUdFNFlMb0dRY0lOZ0Z5QzRCZ0ljZ09BV0pNQ0JNeDRPd0JXNi9YL2NlSmRQM2t1ZTVCRkZXL3l4MG8zL3hTZVFLSWttR2d0V2JOaUpJUllIY2NTVFFDSkpKSk5DS21ta2swRW1XV1NUUXk1NTVGTkFJVVcwb3owZDZFZ25PdE9GcnBFOTNlbEJUM3JSbXo3MHhZbUdqZ3MzSG9vcG9aUXkrdEdmQVF4a0VJTVpnaGNmNVZSUWljRlFoakdjRVl4a0ZLTVp3MWpHTVo0SlRHUVNrNW5DVktZeG5Sbk1aQmF6bWNOYzVsRWxGbzdTd2ladXNKK1BiR1kzT3pqQWNZNkpsZTI4WnlQN3hDWjJkckdWMjN5UUdBNXlnbC84NURkSE9NVUQ3bkdhK1N4Z0Q5VThvb2I3UE9RWmozbkMwOGlQYW5uSmMxNXdCajgvMk1zYlh2R2FBRi80eGpZV0VtUVJpNm1qbmtNMHNJUkdRalFSWmluTFdNNW5WckNTWmxheGh0VmM1VERyV010Nk52Q1Y3MXpqTE9lNHpsdmVTYXc0SkU3aUpVRVNKVW1TSlVWU0pVM1NKVU15T2M4RkxuT0ZPMXprRW5mWndrbko0aWEzSkZ0eTJDbTVraWY1VWlDRk5uOWRjMk5BczRmcmcwNm5zOExVNjFTcTNLY3JYY3F5VnZWSWcxSlQ2a3FYMHEzMEtJdVZKY3BTNWI5NVhsTk56ZFUwUjIzUUh3N1ZWRmMxQmN5U2JwaDZERXRsT05UUWxuaU04bFlObjNsSFJGM3BVcnIvQXZab20vZ0FBQUI0MmtYTU94S0NNQkNBNFlSQWVFTlFXbWRnTEZQb0lZU0d4ckZ3eUl5bmNOVGF4bEpQNFFFV0svVWFkbDVHRjQyeDIrL2YyYjNTMXdIb2tUVGd6ZHVPMHBQcWFpN2JFb1JxSUYvZ3NGY2o0SExWRW1CRkJVek93Q21xQzN0YThnTWI0ZHcwZUZIZENiTkxvdTNpa3E4MVBJUTcvb0tDcjU4RldIMnNIYXQzeUJBWlRBMmovbUZvVFlncGNWOGlPdnlYQkUvaWgyR0tUTGFHQXBsdURET2tXQm9Pa05uNVJ3VzVmQU1pWDAwSUFBQUJVMUF3QXdBQSkgZm9ybWF0KCd3b2ZmJyksdXJsKC8vY2RuLmF1dGgwLmNvbS9mb250cy9wcm94aW1hLW5vdmEvcHJveGltYV9ub3ZhX3RoaW4td2ViZm9udC13ZWJmb250LmVvdCksdXJsKGh0dHBzOi8vY2RuLmF1dGgwLmNvbS9mb250cy9wcm94aW1hLW5vdmEvcHJveGltYV9ub3ZhX3RoaW4td2ViZm9udC13ZWJmb250LndvZmYpIGZvcm1hdCgnd29mZicpO2ZvbnQtd2VpZ2h0OjEwMDtmb250LXN0eWxlOm5vcm1hbH1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OnByb3hpbWFfbm92YTtzcmM6dXJsKGRhdGE6YXBwbGljYXRpb24veC1mb250LXdvZmY7Y2hhcnNldD11dGYtODtiYXNlNjQsZDA5R1JnQUJBQUFBQUdnRUFCTUFBQUFBeWd3QUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJHUmxSTkFBQUJxQUFBQUJ3QUFBQWNXM0s0UWtkRVJVWUFBQUhFQUFBQUxRQUFBRElEQXdIeVIxQlBVd0FBQWZRQUFBcUVBQUFmdm91MmhDSkhVMVZDQUFBTWVBQUFBZ2NBQUFZVVRKNTFUVTlUTHpJQUFBNkFBQUFBV2dBQUFHQjg2c01wWTIxaGNBQUFEdHdBQUFHTkFBQUI2cm5sUko1amRuUWdBQUFRYkFBQUFESUFBQUF5RUNvS1pXWndaMjBBQUJDZ0FBQUJzUUFBQW1WVHRDK25aMkZ6Y0FBQUVsUUFBQUFJQUFBQUNBQUFBQkJuYkhsbUFBQVNYQUFBVFB3QUFKQWdJU2NETUdobFlXUUFBRjlZQUFBQU1nQUFBRFlGdmlVa2FHaGxZUUFBWDR3QUFBQWdBQUFBSkE3QkI1Rm9iWFI0QUFCZnJBQUFBbE1BQUFPaW9iMURabXh2WTJFQUFHSUFBQUFCeXdBQUFkUWIra0FXYldGNGNBQUFZOHdBQUFBZ0FBQUFJQUlHQVlGdVlXMWxBQUJqN0FBQUFZQUFBQVBHWHhXR3luQnZjM1FBQUdWc0FBQUI2UUFBQXR1TUQzdG9jSEpsY0FBQVoxZ0FBQUNoQUFBQStoOS91SGgzWldKbUFBQm4vQUFBQUFZQUFBQUdNQVJUVUFBQUFBRUFBQUFBekQyaXp3QUFBQUMvdnpUdkFBQUFBTTkxNElONDJtTmdaR0JnNEFOaUxRWVFZR0pnWVdCa3FBSGlXb1o2SUsrQjRRbVEvWlRoQlZnR0pNOEFBRjdyQlBZQUFBQjQycjJaYjJ3Y1J4bkczLzNqdlQrK3ZidjFuWDN4MlQ0SDIwbVV0cUU0Z1JJM0JGRFVSaTZGcUxqRmhHQ2lFSm1xQ2hVQ0FyZ1dxa0lBVTZJb0g5SkFvU1lFSzBMQnNwQmxLaXRLVVJWSUQ0U2lmQUJMQkxlMHB3aEZWa0d5L01HeStHQlZHWjU1OW15ZjdUdjc3Snp3cTl2ZDI1dWRtWjJaOS9jKzcxZ01FUWxMUmg0UzQva3ZmK3RyRWhRYmQwUXAwYjhZWC8zS04vVTk4Yi9oTnhOblIycXMyV0N2dXpYZVhmY25NYTNYOURQbU1YTUlKYmZoOXhwMVYvV3BjWFVMbi9OcVNKMVN4MVU3cm9kVUI0NGRha2I5UjcybkpsV09uMmtjSjlXZ2xQaFRlOVF3bnNpaXBrRjFFdGN2OHU1eFBOT3pySnl1S1l1N294TEIxWENSbW5MNTg1UXV1ZXlYNlJKdDU0ci9xczdsejVQNGpCWnJhMFg1aVhWTHZLL20xUjAxajZ0NU5TZnIvcUhVL0lvN3orYlBNM2kvTVRWVDhNdmNlczh2WGZPTmJpNWM2OUZVZDhvWUo1YkI2SS96bUZ1czRZZy96cGk1ck9wVjF3dWVtRnhWeDZTNmlWSlQrYm5NcVFsMUhsZTNzZUxDV0ZYYmNONE9zMlVIekpIZE1FYytESFBreHpCYnpzTWN1U0Evdy9GVm1DTy9namw0YnBkVXdlS29KNHlqQzZ1V0dLeE5QRmlidE1EQ09MZkpWcmJoeUFNd0I4L3R3cG92Yk9rUm1Da2ZoVm15RjFZbEhiQ0FQQW9MeWo1WWkzd01GcEw5c0ZaNUF1Yko1MkUxY2hpV2tDL0FrbklFVmlzOXNEcjVPaXd1cCtVbHRLN2ZaUGs3RE1vdjBjb2xXRWl1dytya2o3QTZ1UUZ6SkFzTHlUOWtFalc4Qld1VHQrV2Z1SDRIMWlidndwb2tCMnVUdTdDNFRNbS8wUjhEYmJkaFJMZGpKSGZqdlU3TDkrVUg4a01aa0IraC9mTm8veWZ5VTNrRnZYZ1ZJMmphejlLL1p5MEhiZTNFbk55Vml2K3BxK29sTllkMU1xYk9nUjRUOTEwZjZsQlg2ZXNUNmpMWCszM1dXY1RqNEtuNHpKVGpyMFZydkZLeTcyK3ZicTJzR2s4VnVUZUp1dDdZVEczRi9IeWhIdmlsUGc2QXlzK3BiOEJiZncvYWo2R3RBUkRqRm82RDZpeStYY0I1R0VRdXJPTmEwVDdtOGd3WlcwMkdmSmx4emRsRmhrK3FvYVVJd2VQc3N0S2RxbC9aS3FVYzlSVDZGa1c4dUt2N2pKRzRpNTVwVHAzRjU3ZU1KSDlGUDRjMHMrNWR2UGRmMVE3LzJBbWZOdURqL3A4RDN6Ymg0Wm9pTWZoQUNQNmdXUklqUzdhVEpab3ZjWGliSmtvVmlSSWxVWHhxZVNTS1I2SllKSXBIb25oa2lVR1d0SkVsMVdSSmhDd0preVd1UEFaTHlrSHBoTjlxb3RUSnAyQzEwZ1dybFdkZ3RXUk1pb3paUXNiVWt6RnArU0tzZ2FScEpHbGk4Z0tzaWJ3eHlSdVB2UEhJRzQrOGFTTnZYUGtOTENuRHNGcjVIYXhXWG9mVmtrT041RkFqT2VUSm03QmEwc2lWdjh0dDFLK1pGQ09UcXNpa0dKbFVSU1p0STVPcXlLUVltVlJIYmJFVFkvUkJlUmpFK2JVbWptVmJ1ekhXRDJDTzR1bzJabkVidE1ObFZhT2ExU0dzdWdGLzNpdXlyZ3RqNFhIMUFmajBMZlVKckxFcHROcWo5bW1TVktTZE0vbnprRHErZ2FkeU92THEyRnZnZndWbjlETmJvR3pLcHBGZmt2VnFqbW45TVYyNkR5d3p0Vjd0VUdoM0tob1hqaXhvQ1g3N2k3cEc2MVBkMm9QVkFiVmZKZlZLNE5vNHJBNXFiUWJyeDJjZTdCbFVOMVFYSXN0MzhmMmFHbEZkdms1aFRTdHBQdTR6V1Eza3Z3K3JFMHVNMldUdmI2bjNOdm1vQ1FKcFdnUmxEOHlRajhBczZnK2J6SERJakNEOVZkTnBQK2tVSkoxOHBSTWtuUXpTeVNPZGtxU1RCKy9NUUd0b09ybWtrMFU2V1d3dlNqcFpwSlBmWGpQYnMwbW5LdExKSVoxaXBGT0FkS29oblJLa1V3dnBsSkNuNUxOUVFKcFJDWGthMWtwU0plUnpzRmJwaHRXVFdtbFNheWVwMVVCcU5aSmFUYVJXUnI0RWF5VzdnbVJYa3V4eXlTNkw3TExJTG92VUNwQmFOYVJXZ3RSS2tGb0pVaXREYW1WSUxZdlVTcEJhQVZJclNXb0ZTUzJQMUFxU1doNTU1WkZYUWZLcUJlTWF4bWp0d2F3OGd0SFppM240aFZ6RVhKaFdvMmFYOFRkakZyVnVwUjZlMmZRcThOWEFOUDMvWEtuSXVNN3puWWpSSFZwTGt4UUgxSi9SSTUyVERVQVpqU0RlVHVFSXY4YTNPY2JyU1Z6TjY5aWRmMzRFNVUvZ2V6NXVMOCtjVmtmeVZYZjZVT2RsMzVOUXkydlVJenF2R0VXcldTZ2RmZFFVbTZCT3lhN3l5eUdVSGl0b2Yyck45bThXZWYrVGlCbFVSbWl6SHUvZGdmZ1J2UGUrdW9qZjlzQkhPM0Z2QU84NGdISzk2TVBZb3NiUU1kTFgrQ1pYdnMwMTczQ2wrZXBiNXhmdDlMb1FQYzJncDZYb1p3WTlyWm1lWnRQVEF2UzBCYy9XbmhhZ3B3WG9hUmw2bXQrZVE3K0swSzljK2xXVWZ1WFNyMkwwSzVkK0ZhTmZ1ZlNyR1AwcVRyL3k2RmMxOUtzRS9TcEp2MXJJTzdSZitXb2dSWSt5NlZFQmVsU0FIdVg3VW9TKzVOS1hYUHFTdXlvVENkQ1gvTmlmb3Y4WTlCeURubVBRWjZJNFYrTzk5K0x0SHNVb0xuak1KWXlpNlh4SWU0MzlmSldESGpjelk3eUcyY3BDVzNhQXhCZnVrOE01ZGNiZk55aXovTWg5dGRaYU5MK1pnMjdwTDJPdjRMa1M5dzlpVEM2cEYyR2phOFRwOXJYcXhiTURhN1Rjcmt2d2F0ZWFQYXdwY1Q5WlJJZGZCcmxNblJXc2pMUkZucC9lOUlpUHE4TWxmam1rK2JINHJZYzV5NW5WS3FQWW5nMTRkQXJ6dHY3ZVRZbTlLOUNqbkw2M0Z4bTFxMmk3R1RRZUxiV0h0ZUx1N0NZSHp0ZER3OHV5MjIvTEdUa0pJcHhlVWJJTDkzK080OFArVTNpbXEvaE9GM2c2c21hVU9FcXFseHExanNJWW9QcW95TXYyWFdqM0MrcU5aWGVHVnltcitud09wL1dSUTE3N21xaWF1ellHeVd2SjQ3QUErSHNRa2I0VEZpbWdjRXllaEZsa3NZWHhlQm9sTllWajBnc0xrNnBlQVQzREJmUU15QjlnUGpFakpLYkhyQ2pJU0dMREdxamxYUFl5UUMzbm9tUUVTa24zdUQ2ZmJ5NWxtaEZHR0lPN1pBMk1NeUhaQVVYVndHZ1RrZ2ZsSVZ6cm1GT0wvS29kMXpyeWhLZ3NHeGgvUXRTWERZeENqWXhDSnZWbEUyTlJqTEV2VHRXWFlnU01jcVMyeUNkaGFma01MTVBZVWlmSFlHbXFOWmRSeFdCVUNXSHR2SXo2ZFd3Sk1iYUVxRnliR0VtampDRWh4dE1vTlpoYmtEbTYrY3h4S1dkMEdWbERPTWM1Yi9zeFg0OHpVajZCdVhtU3M2TG41Qm5NeFF1WWcyR00vZXNZOHpjNTJ1K0tHZFQ3aGVKOEo5Q0NFZG5CMVg4VDFnK2xNRkdCdmFmWnZPNDRBUHIwWVRYZjFyWGk2Z295bG1QSVNQckJvQkhvdWlGRXQxN3BxbVMrWkhTVzFjTUQ2a0hvblZNVjM4VmJSNkdpMVhuazAxbjFHTjY3SkUwUjVTWTJ0cWVtdWd2M3UxZTg2YWVoSDhZMjFtLzBzbWljaGpaOEJYcHhxa0tqMVluY2RHMVNidUMvQ1ZoVDU2Q2w1emN5Uy9xL05DWEs2TnJLbW9PbGlJVDFmV1d0MmpiWXQ3T0k2a1dlS0p3WlpEWlovVjhIdEZ6cVBiSXIrbEZrMzJVeHM1aW8vSW92cTQ0YkZmWEJqbUw2aU1jVElFOEYrTGJCdjMvOVgxcnByT2dZRGxhWWk0T0l2U1lpcTQ3ci90NnhEYlZSalFqdTU0eCt0cGlBUlJFOTA3alhDSXN5NGtiazR6Q1ArVjBWOHp1SCtWMkErVjJRK1YySStWMllNVGpPL0s2YStWMFFXdXNvbnYwZXpHVFdWczJzclpwUjFzNW5hanJLMnN2eU5SUHQ2cjZtcUVGYTJlTVUrNXFoWHJMWTR3eDdyUGVWa3ZpbEhoWm43ejJxRW4rSHFaNTZKRTBsa3FZR2FhTDZTRk4zcFBNWnI3K1g1ZWU5V21zRStPYk4xQm8ySTd0QjlSV20raktvT0xaUWt4clVYUWJIcFpIalVzMFJpWEJFWEk1RmxIb2tSVlZtVVpYVVU1V2txVWZTMUNQcC9FNmExaU0yTlp0QnpXWlFzeGtjdXlqSHpsY3JhZW8zZzVyRnBxNndPS1orOXB2aG1LWTRwaG1xTzVNam02RitTVEVmRHVQcFpyeDdtUCtOOURDU2FiekJQc3oxSWN4ME45N2tNTjdqQ0dhMEJ6TjVGRE40SGEzck50NWk3ZTlJN245L2hXVHdlTnFObE05S0hFRVF4ci9xN3QwWUNTRlpkMmFYaWNnUUpJaUVKWGp5QVJZV1VSQ1hSSFBkSkpnRWxvMzRCOFNnWGp6NEJKNTlBUEVKZkFDUEhrSU80a2t3NWhFa0YxTmQwN3ZwbWV6SUhLYTdwL2pWMTEvMVZBOEl3Q2dtOFI3VTdXejJNQUxERWR6ZnkweFEwRENyNjUyUGlMcGZQM2Z3OHR2NnB4Nm1OcmJXTnRCZ1FnbGxuNFRYTHVzUm5tRUtiekNMTDFqRE5zb2NmOHlySTV6aG1rYW9RVzlwaDQ0bFRuU2FhTkM1dkFmMGsrNVVwSnFxcDQ3VmhmcWpZOTNVcS9wQW4rb2YrczVFWnRaOE1JZm14RndsdTVyTFpDNlZFNTNTalBqUXFDSkM3QnlXZUNTTzJMRWlZMUNJcXVWU1lTSEsxd3B6cWFBUTVXdTlLT1FybjZvWG9xSU1sYWhYSEZNZWZQc0tkckdIZmY3eVQ1amF3U2EycEJ1cVhGa29lZlZNSHFISk5HRU00N0wzTUtLZElwUzRzNmVRVnJIajh3SmtleWc1amxldXF0Y2V1K0pSLzA1K25qTTB4MkpNUzQ2dlBpL3JiSmJkb1k0SmQ0YVRMcjdzYVZiZGZ0cWR0bjJQUGQzbERHVnJtL2l2dGhYM0pmcDdodXlCK0E3Q1JWdGVsMVZ6VHJzMXVCWERQQytsRkJJK3o3UFB0bkk5dHdhZWd3Yzhod1U4aHptZTM2VVVIdmJzczBVOGh5bWw2VXp2S082Q01ZN1VwS1orN3d6WDdIZE9OcWZCai8wZmozSk50cDkvczhJY0ZuRXI4d0orY2NZaWJuaGNFSDVPZWxneEgvTll4bE8ra1pwekE3NmJkcTdKVGQwZnJCWDdDSVZYNk9LN1JKcG8vd1hoQzBocEFIamFZMkJpYm1DY3dNREt3TUk2aTlXWWdZRlJIa0l6WDJSSVkxckZ3TURFd01yR0RLSllHaGdZMWdjd1BQak5BQVc1T2NYRkRBNE12TDlaMklMK0JURXdzTXN6SGxCZ1lKenRDNVJqdnNzYUJxUVVHRmdBNVFJUVJnQUFlTnBqWUdCZ1pvQmdHUVpHQmhCNEF1UXhndmtzRENlQXRCNkRBcERGQjJUeE10UXhiR0g0enhqTVdNRjBqT21PQXBlQ2lJS1VncHlDa29LYWdyNkNsVUs4d2hwRkpkVS92MW4rL3dlYnhBdlV1WUJoRzJNUVZEMkRnb0NDaElJTVZMMGxYRDBqVUQzai82Ly9ILzgvOVAvZy8vei8zbi8vL1gzNTROaURndy8yUGRqN1lOZUQ3US9XUDFqMm9PbUIyZjJEdDE2d1BvRzZrd1RBeU1ZQTE4VElCQ1NZMEJVQWc0Q0ZsWTJkZzVPTG00ZVhqMTlBVUVoWVJGUk1YRUpTU2xwR1ZrNWVRVkZKV1VWVlRWMURVMHRiUjFkUDM4RFF5TmpFMU16Y3d0TEsyc2JXenQ3QjBjblp4ZFhOM2NQVHk5dkgxODgvSURBb09DUTBMRHdpTWlvNkpqWXVQaUdSb2JXdG8ydlM5TG1MRmk1ZXVtVFppbFVyVjY5WnQzYjloazFiTm0vZHZtMzNyajE3R1lwU1VqUHZsQzhveUg1Y2xzWFFQcE9obUlFaEhlSzZuR3FHNVRzYmt2TkE3TnlhdTBtTkxkTU9IcnB5OWVhdGE5ZDNNQnc0elBEby9vT256eGdxYnR4bWFPNXU2dW5zNjUvUU8yVXF3K1RaYzJZeEhEbGFDTlJVQ2NRQWJneU5Gd0FBQUFBQUE5MEZWZ0NZQUc4QWN3Qi9BSVVBaVFEUEFKa0FxZ0NaQUtJQWt3Q3dBTDhBendDMEFJc0FqUUNQQUljQVJBVVJBQUI0MmwxUnUwNWJRUkRkRFE4RGdjVFlJRG5hRkxPWmtNWjdvUVVKeE5XTlltUTdoZVVJYVRkeWtZdHhBUjlBZ1VRTjJxOFpvS0drU0pzR0lSZElmRUkrSVJJemE0aWlORHM3czNQT21UTkx5cEdxZCtscnoxUG5KSkRDM1FiTk52MU9TTFd6QVBlazYrdU5qTFNEQjFwc1p2VEtkZnYrQ3dhYjBaUTdhZ0RsUFc4cER4bE5PNEZhdEtmKzBmd0todnY4SC9NN0dMUTAwL1RVT2ducElRVG1tM0ZMZys4WnpickxEL3FDMWVGaU1EQ2ttS2JpTGorbVV2NjNOT2RxeTdDMWtkRzhnek1SK2NrMFFGTnJiUVNhL3RRaDFmTnhGRXVReTZheE5waVlzdjRrRThHRnlYUlZVN1hNK05yQlhiS3o2R0NES3MyQkI5akRWbmtNSGc0UEpoVFN0eVRLTEEwUjltS3J4QWdSa3h3S09lWGN5ZjZrUVBsSUVzYThTVW83NDRhMUJzYVIxOENnTmsrei96eWJUVzF2SGNMNFdSekJkNzhaU3pyNHlJYmFHQkZpTzJJcGdBbEVRa1pWK1lZYXo3MHNCdVJTKzg5QWxJRGw4WTkvblFpMDd0aEVQSmUxZFE0eFZnaDZmdHZjOHN1S3UxYTV6b3RDZDIrcWFxalNLYzM3WHM2K3h3T2VIZ3ZEUVdQQm04Lzcva3FCK2p3c3JqUm9EZ1JEZWpkNi82SzE2b2lydkJjK3NpZlR2N0ZhQUFBQUFBRUFBZi8vQUE5NDJzVzlDWHhVMWZVNC91NTdzMlJta3NtOFdUTFprOGtrbVlRc2s4eVFUQ1lMQWNLK0NZZ0JRa1NFc0lnZ0lDQmlwQlFSRVJFUlVJUzRJVnBMSStwN2t4R1FLcUpJbGJiV3I3VmdxVldyL2ZyMW14YVhXci85VmtnZS8zUHVmYk1Fd21MNy9YOSs2TXk4V2ZMdVBlZWVlL1p6THNkend6aU9iOU5leHdtY25pdVhDZWV0RCtrMXppOTlzazc3eC9xUXdNTWxKd3Y0c1JZL0R1bDFxVDMxSVlLZiswV1hXT0FTWGNQNFhDV2Y3RklXYUs4Nys5d3d6VHNjM0pKclAzK0d0R3FiT1NObjVscTRVQUxIbGNpQ29UdGs0cmtTSWlWN0plNlVyQlc3OGRHVnBPVVNTc0ptTStmVmxFaG1iemlKWG5XNXpDWnppWnhvNlpZdHBFUk9Nb3RXbUU5Q01CamtaSk1nV3FXa1lFVmxZR0MxTDhWaDE3bnpDbTErd2QzZTFEcTBxYXk4eWZLNmEyMXJlVk5UZVZuVE1HMWhUekZINTdSRUdNZFAxaTdrRXJrMHJvS0RtM0Vsa3NVZk5obTRCQmpZNlNOU09wMlh6dEl0NlN4eUVveHFnOUV6U0FsWFVXa2JXTzJuUXlVVE4xOFEvMlpKZGFFbmtHRTJqd3VRNG9DbnNEclRuRFF1b0Uwc3JBbDRrdjUwMDBMeWRKWW5VRlBJTHVrOHlqaE9zd1Z3azhIbEFQNUQ2WUFieWVFUDZYRStKbjlJU3dCWGhpUy9YOVpvdXVYa2JKOHZ6SkYwYlZLSkxHYkNoeHg4YUhQNllMYTVYdG5GNWhidzI5enc4QXYwb1hmVGg5dUdEL3lxelAzaHhvOWNuN2F2YmYrMGZjMmFEN1AvdE9uUHVmOE5WMzl1WDd0bTc2ZWJQaVhMRjVGZEM4bEtaVE0rRmlvTEZpbGJ5SEo4d09lSU80R2JkdDZ2YWRVVmNDWGNRSzZCNitCQ3hUanJRcGlqMEMxVitVTEZHbU5KMStEaUlrTkp5TWJ3S3FmQ056NWZ5SmFLMzloRUE2ejdJSytVZEVvdVRlNldTaTF5RVNrSmFTeVZQb0RQUTFjOFpFMnRnbmVTeHlMWEFPNWR5ZDF5STd5V0pzRmlrNkRzcWhHdGNvb0QxejlWSTFvSEd6bVM1RWh4VmZwckd2S2RRY2ttU25hZ2lFYVNUWnhpdWE1cVlIV2d5dTlJY2VvTFBXSzJ6bUUzODNxSHU2cWMyT3padkZNMEV6S0lWQTBzNXozVDVnMCt2THg2MUkyRFJ4U25mL256TmQ4OU5XLzFnZXF4czRlTkxNbW9uUFBDcldzZS9tcHovdWhKdFlzQk4vZjh5RE4rU3YzcjY4ZmVsRVMrVFU0cExLd2RPcjNxOFhmTlAzL1Z2bS9OaGpSbFNISnEwWUJCSTJiVmpGcC82OWlFQXdjTXk0V0hpd2RYdUVTeU4rRzJubkx6cHVzcXhsYm5XemxPeXpXZS8wTGJBYlJvNHB4QUIvbEFqODl3b1ZUQWFTZ2Z0MHFScGp1VUJuaWtSQ283Tk4zaDhweDhBVWlnSEM2VERmUXlXZE5OcEVxazJIQWkyenVKRnRsS1NzSTY5ZzVJT0F2ZUZiQjNCUmE1Qk43bDBYZXlEL0JxVFJTdFhRWWhOUU93SjVjVWlOWndXbzQ3UHgzZWNYSjVLbnlYbWVYS3crOGN5WUI0SFJjTXh1MEMySEFCZTRyZlYxMDFzTkNkcDdNUlA4bTM0SGNXWGE0UTkwWGp5OXUySHpxMGZkdkw3U3RiWnF4WTN0cXljcHh3MDYwOU84bTJsN2M5ZU9pZzh2SGdGZGZQV0xGaXh2VXJOTTRkUjE5N2FPdHJyMjJkZmZmZHMrZHQySEJ1dmJiNWJPZFBTZTRiYnloL09rb210cTIvZTg3Y0RSc1lQWTQ3LzRYbUM4QmZNVmZGRGVWdTRVSXV4RjBCNHE1TTF4MHlJdG9HYXdGQlRYUkxEMGpxbGdaWVpEMkFYUTJYMVJhNWdmS1VibmtZZnFRSEN0TUdwUVl4YkN3bzh6dVFuSktzb1RTM2wzS2J3V1dpOVFDblQ4cDIrMnZnSzhUQ0lENVFXS1hpd3F6VnB6aFRuTlVCcHc0dTNJVWVRRTQ1VDdFVEtQUVVlc3hBY3M1QkFzUEhPTytNV1UwM0hkOXg3MzVuZG9OM21zOVgzemFpZFZyZDNkUG1yTjE4c25qUnZrK243VjdSOU14VHkzZHQyRkl4dituR200NU1Iakx4dXFLV2tST1hrTGJ4YTJlUHlPLzY4Y2J3QXo4cUdWL1g0S25LU0o5NDYzV3o3d25Ybjl4ODE0L2RpL1pWWHI5ai9oMWI3MzA0dUdwTzNYMTh5Nno3Y3l0R1RLNGNmZTB5eEJsQi9rZUtLZjl6TSs2bnNqNGlKVVg0SG4yWUwyWjRNUjRYejlqZ25pM0tBbkphMnc3M3RISDBQdVNVckRkRjdsRnRzUUpXZUlmZEN0dXdaZWZtbVlzWExsdzhjM01QT1VQZVB6cmlwTEwrYjk4bzY5NGZkWlROenczMzJodC9MK01wV1JPOWw4MVpiYlh3SG4ySzFXSG4zVE0zNzJTM1U2UlJSOG52K3R3UTd6VkN5T0tYQTZ3aTUrTkNXb1ExMmNEcEVWWXJ3aXJ4dnJCSnBIemY0Sk50UUFNbURvaWNHR0c5a1o5NkFrNlBYeDl3NnAxNmo5TWQwSTk0NzcyeVh5VE9URHp1ZmU4OTczRzQrSVZ3K3VhRms5Zjk5YS9ySmkrOGVlTGF2LzUxTFlPaGpqc2hITk5zaFgxOUhTZHhYa252bDRtbVc5TDZRaHhCUHNnWmdVTVNEaStKZ0N3eEVjSEU2UmpNWEI1TVIrTUxHWXo0dFVFUHZ6UWE4TkxJR1VwUUhPSFVxbHdpQ0Y2SFMzU0xkZVMrRmVRKzViWVYvSnFGWko4eWJhRXlqb0NvNEZZcVBXUUI5dzdBWGdldzQ1WXdHYm9wNEFtbkpNNFhOb3VjVlZPaXZsRGd6UWtBdkNCUzBhcUZ2V0FHSW5jT0lnSGM1aEV5MStsWCtzZnBFaHpGd2NheXdKalcwY2RkaTN5YSt0S3lvZGVOblBHVEtvUzlnZXpuaTNrLzdNNDhoRjBtK201OEVFbmpsVG5nUFlMSUdXQkFiUVFRUndNczIvNk5HL0Z2cWI0QWM5YkRqZzdwSTlwQzVJSklDWlN5VkkxQk5qRHFRdUZ2MStXaDFCL2FXdDdhQks5NEwrNzhCL3hNN1ZxWVJ3cUhneU9INUVWY2ZYVnNCM0FyOHZscUphTll1Ky9zTkNxVEZ3QS9XUVAwa3NJTjRFWndJUkVIemhTNlF6cGtKSVVDektDRTdoRW55QzZuUmM0RnBDV0NmQ3FGMTF3bklFL1VJZklLTTBGSk1TVUNxMlJjUXZEN3NnVzdXUUNHSUFSQTd2Z0c4U0J6aER5enNDQi8wcXJRNGtXaFZaUHk4V3JSWXJ4NnNXREMvWWZ2bjFDUU1uREM2cDJySnd4TTRUc1h2SGxvMDdYWGJqcDAvRGZIWDc1dnlwVDdEcjg1ZjlHclQ5OXd3OU92THJxdVk5dkN4c2FGMnpvUTVoSUF3Z2s2aFk0cjRFSWE1SVdFYWxwNnI2UTVKUXV3aXhKZ3FvS0dpbEpFUC9FREJlbExTUFBPemo4Sy95Q3p6blpxVnYyRjBmQmkwRS9TQUJjNVVVeVlBUk5VRW1VaUpuSzlVdG9wT2NIVUxTWDdRbWtKU0tGcElONnBNaUtiUlJqQ0dwUXl4UzR1SVMySDhjdEJCQkFCYk1BczZJRjBxd1pwR1RQVUx4NS9ic2ZVcDlaZk0yelJBV2tkLzBSUDgvMmhvMHRuRmY5czVhcFhHelU3NWkvMXpYcDg5dVNmN1h6cDRYbTdOaTNlOXRQVjYxZld0cTl0bllqN0ROWkxCM01zaDMwV0tzVTVnaUlTeXFUU1VnQVJhU3pOUkJHSjAvWENMandsRjhOMHJibW5SRGtIY0ZHQk16VUNNbUJYRnNOaVNjbWlsQitVSE5aUWFsb09YVHhVSXlKQ1RGOFZrMmQ2RDhLaW9lcEV0dUN3YTJDSDFNMGRkT0syaDU0NzhNUnF1L08yelYwdnJyL2wrZkV6SjN5MSs1ZEVDRXlmN2ErOGFYYWo4djNIUCtrOXNYRHk3UHR1YTEvRlA4b3ZXM3JMblpPbjNEenIxamYyamJ4dGJGbUN0dXlhOVJPZS8yZ3RwVVVnWWswVjFaMlR1R2xjeUlDcnlTTUw0MHdHUGdsWUJDaUJvRnZwUUFVMGV5WERLU25SUjFkRDhJVVNLTDlJMEFIck1OQ0ZNU0RyU0Vad2tjSEIya3U4U0RWbld4VlFnTi9oQmlvQUpYNG9QL292UjQ5MktpN3lDV25aSWl6cDZkaXBQRXRhZHZKdkE2NDNBcTRud255eXVDVmNLSk51U2NCMUV1TGFBcmkyR3pLVEFOZDJ4SFcyVjBvOEpZdW03cENZaU1PTHlZWVNTYlRJT2lDK05FQjhEcnlLb0hmSUpnSlkxNGxkZ3NHZVNUVU9BNmowd0x4TWlXa29mZTJpSk5KVmlHSmU3NkZjTDBKSkduZnV4cHZ1UDNOZjZNWE5CemFzRVliMXpndnN1M0hxWTZ0SEtYLzVyWEw4MkswSGZ2cWplNTVhVzhKL3Nrc3BxQjVlZS9PKytiLzZaMlNmTndQZEZIRFYzRTFjS0JlaEtZM3M4MFNBSm1WZ3JnNmdTVUZvQW5UTDJ3QzFoVDdKWnBFcllmWVpBQVZxcDVVMjBKQVNkU201T04wTVVUWWtJQU1ZV0lvMGxXRURHcElUVXdET0JFT01GVGoxNWNRTmV6K0xSUGNEajV6Qm1hM3hVODZBQkxhZ2VQcTZueTg5YzM5ejdZWTU0KythM3BEbC8rQ082NSs2WTBUVDdRY1dMUTNmUGltL1M1TlJQWGJaOEhIdFk0cGV2Ry91SWI1ejJhL0Q2OGM5dlhiWXlQcjU5M1ZNcnBwMGQyRGh6eFpPZityTzBlUHVPdkRydXVwNTg4WjVxNXJiZkE4K3NoVFdzaEdVcHo5VFBwSEhaQVBsRTBoUHlDdVFTWEJnQlFLbENFSEdvNG1iTkFyUDlMNzNDdS9SSE5tMThseU81Z2pxWHdzQmp3MkF4eXpPeXczaEZqSXJSbllCSmhQeGZvMTR2NkVVZmRtQXZteUxWSUY3RHpRREhLV0NmaVRuQXhxZGNGbVBYd0hOeUUzd1FYMkZhSDBwVVVoM0RiQlR1bWgwd1h0T0x6b0hWS3U2VjNXZ0hIQTFpR2NvMU9tekNkMkc1U1Npa0pZTEhyTUcxSHpCT1VqRGtMcndsZnVtcko4MjZkNjkwNlkrdldueTgzZmY5M1BsaS8rNDk2TU56Nzk4OS9yRHZqRXpSbWRsalo0eHhwZmlIVEp0Y0U3T2tHbER2WjFyZi94VDByTHVsUUdwa3paZE4zM3p0U1VsMTI2ZWZ1ZFBDb3RmWGJmdlYxT2Z1L3ZtOWV0djlrOExsam9Fd1ZFYW5NWlA5bDVUNlJHMVd0RlRlWTEzL2gxM0lLMjFuZS9XVE5FdUJtMXJJR0tJY2xJbllBalZFYmtDYUMwWC9nSm9MUmVSVlVXUmxRL295TGVneVNrTjhNa213RWsxNENRZmRST2JQWWlFMWlXbWFITXBacWpjd1UvbENnL1FvaW1EeTRwcXB5aDNIRlR3ZUFMWmhCSVg2S0V4SkFYS0FXTm12cTFwOWNIRlM1Q3FCa3hmOS9MUy85N1JYSHZ2TDNaUEwrWDlwMjcvMFZ0MzdwYzN0eDJ1MFdZRWdON0d0bzhyRWw2SWtOWHlaZTkwM1QzdUdTQzY2eDkvZVo3Yk91bnVtU2QyUFBqSXN0YnF1ZlBHZXF1dWE0djZBSVF6SU5ORm9KS1lWRGVoZ1d1SlYwbmtKTEViTkI4cTIyMTlaTHVnR3ZoNWhVektvNHh2YWhuR2hMMndsZHI0dzRZeCszN2xlWTRzZ1BFc1hEbzNXdFY4akRDZUhjZEx3L0V5dkpKNFN1YjBZSEltTVNXSXZVZ3BQamtURFFJUjlTQUw3bVNqVm5VeFJQU2dxQm9VbTlKSzMzaFFpQWJVb0VJMFk4d29OclZqcmx0OG1yb1dVSXRhbjZuU3RFZG5pTHJoSWRBTm40Rzl4d0gzZFJpSW8wNjR0K2Vjb09WWExTS3ZyMU0yS1Z2V0lSeDFSQktPQ2Z1b1R5YWRhVktnUW9JU3BkVlFUVWhWZitqdWhBZmU1SGJoWGlJdFhrdzJMMTRjMFVPall3V3FES1FLeDlMMDlBajNIbHBIbHBOVjY1VEdSUlJuQmVmUENLZ251MER2YW1OV3ZWeGdVS1Y5TmhMbUFLOWtPeVhsK1dReldFc2VXQ2N6cFU5WkIrcFBDZXFPd0FoQnRjdk9MMFpPNkJGRGxvSWlGS2tad09SVEVaUFpZRnAyY1RyUkZkTUZxTlhrc0lOUkFCczVvZ3hZMVNVdkdQdloxb01mbG82WU1tVkVhZldhQ2NWREpsd3pwSGpOOGlXUE5ieExTVURUTVdmeFMvYzJMaHc3dERZNHFxak9FMmlhV3pWOVNHMGdPSzUwMGkzTmszc0VwZ2p5M0tqenk3Um50UmtnVDYvaC9oTXNSQ0FES2MvZjVYQmxtVXZrOGRwdXFkRWJydFZ3RHVwMWtoeCt0THFsRVQ2d3FjTmErakdSSmxMbHNkck0yZUZIWURXbUFzQk41bTZweVNLWGcwWnJvRi9JazJDN1ZxY2ZIdFQxOXdHY284UW91Y3JOMHVpaldqa3Y0WHV6NUQ0cWpiWjA1WTUyMlVxNnh1QnpDSjV6Nzh1OXo2MHppNkFvNVFhNXJsejM2REhsOEkrOGxPdktVNi9MeTZYQjZVUXVieEt0QndGWldaVzFEWTEwMzV0cmdVanJHMkRmank5QzNtaEl0WlpIZUtPMU9oKzBFeXVUTElXZUt0enpoWXhacGpnRGZrSG53TzJQeGlqbnl0TlF5d3hrRDlobzdyeDh2b0N4Qmh0S0tkMm9qWitRQVkrL1NvcWZIRFR2enFHVDI3UTFMOXp3d1A1cjczbWg1WVpOT2VuM3I5UUVpdE5yQmxYa0tFZVYzbTNLMTIrdDJrbVNmdnJXZ1lLM1B6dW9uTnBIT3BmTXZ1SFJxanJIb3NrN2YwdSsyMHRLZjc5T1VrNTNMWDlsWmVPTnc4MFQydzd0WEhCMDA2U1dFV3Q3VDZiYUtvTXBOWlB1bnFTUUVYZWNVUDYrWmEveWoxM0xxOVoxa3NKamMzOTA4M2lTVlR2aks2UlZkSnhVZ3V6U2cyWlV5b1U0OUVBSmZpckF3cm9FamdBcjFTSEZtcnh5SXBWallOVklSc0NMSC9SOXQrQVNiQzVpNVQzdjh3VnZyTzZkdG5vL1AwejVDRjBNcEZKNWw3ekZmNHB5YlEvb1hoMHdocGx6Y3JuY0hEWUs2cEZNVGdLckRxYzY2VkNwT0pTTGN1MWs0TnFwUGluWndpeEpNQkV5VWFScFlZZmt3UWVaeVRDUEJGZzVKMTZZZ2xLcUNHK2xYUFE1d09SRUYrTXJLTWQwN2dJWFUzaGNWWkdMUGZ3czZkMzcyeFkvOGY3TFNqMTU1cllOZDY5U1dzbnVwWGZldVZTWnIyMCsrbGo3dmhUeCtCMC8vZVd1SHkxdXUvZVJPMjZjdFlieEFOQjF0RjZRUHhrZ2Y2aHZTYlpHcEk4Sko1OUpiU296ekRLTEtvaFdvQ2JDNlJNY0taU2FyQmFrcGx3YjFWbzRoNTBxeEFFbjc4ckxMMXh3eXl0RTJFNUd2N3FsL3BmTFAxTitkOTgzRDkzNnEvcXRieW12YlZkNlgrRXRaQ0F4SGx5Zy9HMWl5MkxseEhkUG50OXl5L1FKeXRjTERsS2VBemlHZVRXRGpaekMxYWdZVG94Z21DcGVUb3JXUkVCcm9rVVdWV2FUaXBOTUFlVlIwcWxvbzRST05JZ3o2c3dqZ0N6eS9uK1FvWjF0WWVYN3g1VVBTUEZUMzY1ZTliZG5sQSswelM4cHYzeDkyN2tEQzNZOStOVkRPNzk2RVBDRGE1MUQ1ekZTbllVaE1nc3dKc0phUmxKYW5GQWluWkRCMUUzdGMycStHMHlnMnZJK1pxaXIxam16ek5samo3QzJ0NFQvUlc4dGYxTGJ2RXNaOVloU3ZJdXRTMlJjQXplWWpkdi9tTVoreGhRTXFtY0FGT2krQTBhSFk0UDFib3ZRd09mYVJxQ0JYTlRkSTBzdlpYbVJGQUROVVNwbWhJQzgzUUhvVGtjOXpSZHlwT09nRGljTWgzVHNRQmU4U1p1RjNEMWRaQlFOTkNOejZVRkswK2FnWkxLR2lENkJXbEFxK1RqN2tvOElkQzNxUVBrQUdscnlLdUcza1dHLzJUajB2ZHNaRFMxN3MxNHA1bjgwUi9seTd6WkZlWlUza3hwaU9qQlBhVzZleDhob2FqMXhQS0k0bHF5ZGZ6Q0tTNjJWcm1HanloSDBqQ05JV245WU1GSnNDckVWQkkwSzFrd3lXVkRUUlkwRGZWV1J0Y09BQmxyRmdNeE9JYnV6cytjemJYTnZtQjkzdHBOZjNyc2xPaDRaQStNSklERmphNmQ2R2FpZGpROXQ5STU3T3BIRHNMOTFudjlDS0tPOHBZUUxKVVhzS0gwa0lxS2ppNDNCRGs3V0M0aFhFb3paUUhBdk8zSnpaOHZORDY5NXVIUGwwVFVmYjFpMzhZbDF3cUdlRVZ0UFhCK2hxeGNvTGlvdXdJWEczeGNCRkdTcTU0TkNGZ3l5cVJLL0FaUjlQVXlaYnozWit4YS82R1R2MlUyQWdjSDgwZDdWdlpYOHZFZVZLZ3JISm1DVU9JNDJ3b1VwSEF3UHVnZ2VRZ0tsV0VFTHhLT1BJZGl4cVpOdjF6YWZHeHJiQzlyVGNLOUU5RFhRZStrTS9yaFpKOFZ6QW5UZjZwaERVTmFqRmNsclVNRkFPRUpDZ2ltb1FtS2d2ZzJBUmR6emQ5Sko5bjNYcVZRT1Y0RGpuUHV6SnV0c3AyYk51Zlg0aUk1dnBIdFJIVi9TeFkwZTI0SUdpeXlvbzV2UWtXSUFOc1NqQlN2cGd4Rk1KcWpqRTZRaUdQd0Z3ZHI1VE05L3dyZ25OU1V3N3RCelJ5SytKdTBCMkpNbUxwVWJ3NFdNSERPa1E1b28vMHVqR3pJeG1VS05Na1VQL0M4ZDQxSG9zeGNNUmczVkJGSXM4STdvOUZ5RVgrZm5hcXdXWHBPYkQ5WVB5VVdleU1IZVcvQXpFaUQzazVyT1R1VnRaWVZ5SW1IMWY1SFNMOXFWdjN6MlorVXI4aGw1a0F4OStXWGxpTEpVT2ZMeXk3enhpWjV0MjNxZStKWUVsYmU1Q0wvV0xLUCtDQ3ZvVW5FY0MzaEkyR0NpZTh5QTA3WlJkQmtCWFNhZlpMU2czNEVLUVR0U205VWs5aFY0YmxjYUFSbkhSRnpCTC83cmkrUEtCakp2OWE1ZHF4V1F3RisrK01LWHZaL3lCeDc4N3djWnpsNm5PTFBBdnB2T2hjd2NjL1F3bk9YZzRIa1VaeUxnVExSUVpSNXg1a2J4SzZLQ3FqR1pEYWlnNmtWUUNUakt5MlJqSWpDdUhMR0xjQVo5UEFvZEZ2VDdvazVrbzJ3TDNjSFZGK0R5bFhVck56ejV1MTlRYk83Y3R2eU5WVWZYWG9qUXQ1VjNUMnlhdDJVK3crbUk5OXZlZSt6UERLME1wMnNCcDhtZ1oweFZLYy9FS0E5dHhMRFpRdEZxUnNoU28wcUdoU29aZGhXdGFmQnF4OWhNSXJxdFpRdUNaSUJMeVNuR0k5ck02MkV2OUVIMmtXL3EydGFPSk10T0tNL0NoT2V0N3RoOUIrTDgwNTlQZitqR29LNzNmVDRIVUIvZWpxaUhQVElCYlAzSmdIc3ZkNUlMbFVWOGJTazQxUXljWHdWYUNISjJNalhxd1RhUmkyQnlsVXduUG5QOXNSVFVpYzB3Y1NueHFPeXlmaS9sSDRVM1hVbkppYUFSbS9GWmNsbTY4bHo1OE5hTnp5RzRqbE9RM2NFUS9BcXZrb0xjd2NRa2N6TG95UG5sNmo5eTBTZFViYzYyTVcrWFFlelNwR1NVNGNvWFdlWFVORVJVaGdiVlptSkxUU3VpcTg1OGZkUTFxNjhhU0dVV0dpUWdzdlJNa2M2Zk1HL01oeHVucmgvcENzeGNmYy9HMVRNRHhQUnJVbnB3M3JhemR6d0pIMjI4Qno2cXVmWEVocDhwLy92Nit1WWxwYU91S2FtNXJxbzR2N0IyL09vSiswNit2dWFaMWJNcXgzZ0w4NHNici8zeDVBbjNyUnkrRXZDS2ZyNEpWSit0NVVLNmVGK01KUGlveXh0RWdoWllxVmFIckZRTHdqK2swK0tsRHIxNk1Tc1Fnd0ZETlluS2hFN05rVjI3emcxRkZ3M3lObGkzSHJpL2hRdW9PMGFuOG1uSkFNeE5qTEJxU2FEaWtMb2JyUENhSU5BUUFONGNwVTVLTHBVK3NQTnl1VDM3M3lJclR1eFhQbE8rVnY2bWZNWmJoV0U5cjc5MitnOUhoTWFlSThvNTVmZWttUEgxaUs2dVF6bEpZZU40cXE3SDNFeGdFaUlQaFZHUVl4TzM5Umg1aDd6elJ1K0g3d1BIYk5NOEJtS1RjRmtjcC91T3lvZm51VkFpMWRGTUlCL3dabDFFME9qeW5WRWhRU3pkRW1HdVJqMkxZaUVCdnVINStuNXFsSEZJZjJiNGhjUWZQZHpROVpXQ24yb2xvVndtZkFKOFpwYU50dSsxa3VubzRUZkdmRzJpZjJJb2wwM0dCTWtJMzJudDhKM21xTUNGZUsyUmtoMHZhTFFHb3lreGp1eGdiS2JwcXpCUnNFQ29acjFDdktSMkN3bVNzdGVVMVM4cjd5dnZId0lZdDJpVzR3TWt3NFJ6SVlBMURYREc5TkZDbFNNaytLbmpGM1FabE45TWF2TW9helJHS212WUdBWWNKSTIzSzhaM3lVNnk0ejNGeUR2ZVZjWXBZL2xYK0k3ZVQzaFg3NExlb2Z5STNzTnNYVFRmd0JnSnFDUG8rNnlMZ2ZySlVjSVpVZExwNmVyQU11bjdMQk9RbXZVdHNvL3NlNnYzQzlCdGVqZnc3VDFuZW8vd1E5bTZ6NGI3ajZQeXRGeVY1L29JbHhhWVVrczFWMW5Qdk5IQVNTTDZmQlZ4b1VQRDVaZ3RjTDJjOEdHUElvaGJOSlc3dHB4N1Y5VVZKaXZ0NUYzZ1EzUy9NSlVaREhZdTZoZEJVMTB2Y2lZTjZ1VmhMWTEwUno0UWZKSDlvbXJNazhrYXBZZG9sSGJkdDh1Ky8yYlpWY1dOUUxTN1Y1UFBWMnZYbnAxRzQ1WHRaQytkVHhPbmdxaWgvazFPblkvK0ZJd2IxckVaNkN4aHdrTHh4SXR2MUlucG8rNGNGOVdOWFc2aVU4NlN0Y282NVl6T3N1eDdNNFBkdzNjS0UraCtFcmxvYUlmdUl4ckxRUXJ3a0phVlpOcGE1YS9LR2I2VDM5ODdoYS9yUFE1L2UvN3MrUWJOcHZNdkFGeE9UaExvOU5nVTBhVkU3NEJSR1oxbTY3bGxrNWNoSGpUTEFjOGQ4UHNpL0gyWUdEaXpwaVFPSTVFb25reHc5Ymdndzh3ZTRsMnA3VkJPYzh6MytZWHdoUEFQTGh0MDNVVmN5SW1VUmwzRWVacnVrQVVkY2lZOW1EdkY2UlkwZDNBeXBYUVQ1eGk3cFJ5TDdNUk5YT0R6eVNuR2Jya00zdVFnMVNlWnFYRHIwcG9zTEUxQm13NmY2bFBoVTVOSXY0MTRQNTFxektDYU9vbEZkMVVzSmw4ZHFLSU9qcmI2T2JjUCtlMXQ5OThpclIzMStOZVROeTZzNzJoL3AzRjFXLzFqbXhaUDNsWlNzbTN5b3Z1SWQrSzY4VVViUXJPVzNIZnpNNFhqNzU3YU8yM1pmU1VUMTA2NDRZN0crbGRxRzFkVFdEdUF6d1lwbjgzRWFCVFZqeWlyc2ljd2RodlNVUTlrQWtDWlJhRzBBRlM4NlBOSkZnYXFJYWxiemtadnVBVXpMUkpSU0tYWlFhazFKQXNScFpaR1Btam9PNi9RNHhDcE5XV2hmck9PM2ZVdnpubnp1Ky9lblB0aWJmR3pMZHYzNzk4Ky9hZkZzRFcvbmR5cS9PZVpyNVF2Wms3WVFSS0hUajlKSm41d2ZST2pwMW13UG9kZ2ZSeWNud3ZaYUl3UEpxdWhxVWM0enhTbWQ4TzhuTGpRQnBERVlSMm50NGdSRnpQQmVBYU9iMGxSSFVqY3JQYlB0bjIrWWQ3MVR6NzY4MWM2SHIxeDNvYlAvNkNjSWQ5cy8rdW0vYTFyVHltaDM2KzdZVDhad0hSS0dGL0R4WENHT2pBVFVZZ3pQYzE4d2Jsa3hIQm1UZXFXckJiR201eEFHUVlqdzVrUlRWREJUQVU3NG93ejZkVHdxeFdkWHFpTFV6Y1liN1hRMVJkeDlXZjk0OWljNXhzNk9tcGZtUHZtLyt4NTdxSHBQeWt1Zm5iYUR2TFZYMGxXNjJUZWZMWnp4NFNaSkkzc1ZLU1RNNGFTMTVxdVYrZnNwampMQlQ3SHNKYWtVN0dXcWVzT3B4aHRHb3dkYWFPZUlTTk1Pb1hxd3JqTUNVYm1FSElhWVo2YUpJd1NTUW1pYktHQmQyTVN3SUdYVW9wSTl4UkRjamJKSWk3VjlZSkl0cm5LQlhUZHoxcnpwODNiLzdDazUxUERheDFUbjZvZi9maVpqNVgvM010dklwNXhQNTQwN3M3eHBlU2JCNzdjL01EWE96M2IzeHphME5aQjhraGhjT25zaHZvYkthOXp3U0tFdFFzQmxoWXVaRWZzMHdpWUNjQWg2Q2ROOWdQakIxWGFSMG5CamhrS3NnMzJwdGtYc3RrakNWMGh1dzB2N2FpTlVESXhvZnd6VUxNb2djYVAvRFI3Z0JGS0ZtSGhSdGN6SFhldm05Z1lHRHArMG9rVHU0WG1qZU1lNlJ3N3A2THRobkViZXpxRlpwVStsQ1VhTHNZL2FOUXhEMG1EUkVpak9BRm00NVVkdWhqdlNLSzhBMzIwdWdLVlFxSzhBL1JIZEZKMENXWUhDemhtT3RSUDVXTDBhM0M2dEhpeXFVSnptKzYxQUVWK0E2RTBwSElRU2tPNldkOGRSeUthc0dudnJMc09Obzl2MkwzbzNvTzFMN1lkL3c0SWF0b3pKU1UvbWZyUWMrUzd2eEpuNitTSGV5cVhQWHQ5eWVEcmxvd2M5TUQybmRmY1NPeG5ubjN2K2lZU0d0cjZIcTdIWTJCVHZ3Zjd3UnJ4UllHS0ZzYzd6QWxSODhwcXBDNE1kU3NnakhaMUY0QWM1V1J6SkhpbjhvemNOT0lXbVlOZGZHeDN6V3NMU1YzSHJZdXYyMU1PRE9LZncrY29iL2FPNERldm1kc3l1TGNNOGI0V0pqTkJHd1NaWmtLTEdQTTJRd1lrQ0pBMk5CRWpNVDRSbzh1a0pRbVVyakVzWVRKU1g0cHNTa0FqVmFmbkVjOWdWRVZDT1RDaHRRM045ZlhOZWJzMXp6WTN3T1c1bmNKSFBXNFk5M3hBV1VMSE5ZUHNIY3ZSWlVhTlI5REIvdkhLVmdOekNxS0x4TmpkbGEyem1JRlRpTlFuS0J0QWord1NyZFJyeWNsQ0loVkphT2NSd0lJUWlIcFBNSWpEcVhNNVVkMHdjZlRVM1k4OE1Pb0dra3JucEJ4YTNqQ3RSZE53N3RpT0owRDNwOU9EZGVrQWFjaFJuY3pYMTZkQ2QzM1VxMktNZVZVMC9YdFZPbmJ6Q2NlVU1lVFFjZVdKWjdYTlBhdDVzeks0OTgva2xhZVV6OWs0eEg5cHZ4SmdGaDh4djFMSDdwaGZDZjVXK3hIc2xWeHVnYXB6V1ZMUmgwSlU2cEVTL1hJbTdCYTdMOEtXY2hrTjVWcW9EWmtLNzFLWm45V2ljcWkwWEVwTzZOV0Q3UXpYaWJoaitrRG1vSUVjSnd2bndMWWVTRWtzOHRxeHUraEEyODMzT01zT3o3MzMvdDBIeHp4VXRQdmdxTzBEaEkrMjF0NHlmL0xvcFRzZjdxM2k5N3d6dmJHM0JGNW1OQ0wxcWJBSTd3SXNmZmNCK2ZmMmdlT0NmZEN4dS9ib1RTUzRhOFhOelU5V3dKUmdHeHp0SGNOdlhITVQyd1lxci9mRFBFeWdsVWQ4Tk1rUkNlbkVXYVF6SDAxU3pFZVRSSE9GbVk5R1l6QUtsQjdSNXgvdm94bEVjck9KeFV4eUMyMDBGRVA5MW5sbU11dTJUMG5ocHl0WGZxcjg0ZE5TYWRlOFI4YU1lZVRYdThhUVdTVDNML2ZmL3hmbFQyZTJiQ0YzN3ZsazBYTUw1bmN1V3ZRYzZoM0tSazBRNW9neWRBWVhVemtTS1lOTzVERFRqUHc3Mm9lUXpGaWl1dGdSN1NPTjlORSthdVM1eC8vKzkrTnR6eldDQ0VYdFk5cXp4Y3BHYlROSVVLWDc2eStWLzJ5OXR2ZHYvS2FtMWcvSXhKT3RReGwvYjFFMkNtZGpjNCtLZmpPZHV4bXo1R0tzL2wvUkFuU21DOWk1Vzd4SUMyajUrL0c1Y2sxSFIrTnpiY2YvdnZjNW5EaUNRTDc1bWpoQlp6cmJ5U2RmMjBveXljT0s5RUZyRTNsdGFHdUVSdmsxd25kY0VsY1oyYXRSTkZNL21KbE9OWWt4QlpwOFk3aUFHaDBSUWh6Y09TdmZPZkxaUE9Hakp5YlBlVUp6WTBQdk1EckdDTkRQcGdGK1BPaHpLYVErRnhETlZod2lGU1Zla1ZkS1BpVm5tTHVsRE9ZWGRadTc1V0ptOG41WjlzWko1bk5KdEVpR28zSld3dmRTN2xGNDAyVk1OTmhLdWt6NExHVlp1ckt6Y3VGdERqNkg0RHJPNTVJVERNR3Y4TW9ZNUE2aW1adVZuWk1iODdsYytBbjF1V1FrTTUrTFh1elNXRk1MMGVmaXRzcjJhTWIyU3h4SnRqdmNjVDRYVE5iUXFpb0NGYWtPZTdhV1poZVBHRjhsM2Joa3piQkZkNjFmTk96TjV6NjdmMlQ1b3pQbjNENE04eTZHL2VyUTkrdVgxRStlT2E1aWFINTJVZTNOWSs1NCtzR0ZOY09uTjVYVXViSUdOTnc2NGE2ZklRN3Q1Ny9neDJuT2dJNHpTODIrU0V4UTFSc3RVMi8wdmo2NW1GRk5CNmlLQmwzczBVUk11Nkd2cHBPSWFXN0pRWWtUYWJJa2FEb2lTNmV5UjlUaHdpclIvc3hqSjA3NEtvWVZsRFV0WDd3TU5CMlNyUHh0WTI5SDdmQ1NsWU5YTCtFM3Fqd1AxdnBkNFNQRzh6QXV3Q2FyaTB6VzZJL3dQSkFCNkt3Qk9ZTnBxNGtxejB0Q0sweEVON1JPemQxa2ZodEs1NnI2bTl1eCs5YkZ6WHZLT2pvR0hWNmdIQ2R1L25Ednlqdm5OamZ5SC9TNE40K1lpZlBRQWUvOUhPWVI1N01oVi9EWjZQYVJVV1QwczhyY2ZTRElUd29sSU15WkgrTUUzQ2VSZTF6bFNnbm8wOGViZFJHTlRoL3ZzMG1LK1d5U1lqNmIzMzVaZmJIUDVsalptUlRtc3pHVW15WGpVVm1yb3o2Wnd3M2w3T2V5UnBzQWxyV2tQYXFWOUJZcEljNWJjNENIN3d6R3hCaTVVaDhOV3M0MjVxTkplL0pib3RsQStHLzNLbTgrcXNDL0RvRG9qR0NuRDdlUTBmTTVYU3VBVFhnSFlPdnJveUZYNmFNaGR5Z2RJV0lqZGtucElHc2s1YVR5QWVraG55b2J5V29sUjlHQXViRVExMEZaUXRmQmduRWlkUWx3QlJLUkRZcGU5TkVCQWVxWnFzMkpNazhIWWl1aTArZDVxTXJUU0NKckkwNzY3V0N2czhCYlBTeHRLRnVsY3kzSEJmTm1TMW5kVGdyVFFvQ3BGY2FMODlub1ZVa242Sy9PWjdPUWQvVit3ditsOTBPK2JEWC8wY2FWdlRrcWJSdVZkdklkalQ5ZUM5b2tOVEUwM1NBN1pTZHozUkFOczVXeVRzR0dDOXRaRHJUWlI1VVFlNVpLMXh6TmRNb0NCWjVnWHFCa3NzcmFaQXB6RmVwMkE2dnJpQU9aaDJqWGd5cGlUNkZ2WWY4TkxEUlcxZXlhdDNadFlPTDExMDhNckYwN2IxY05lWDNleEFieVRIdkhzdFlSeW9UN2k0cTJLQk9IejF5MmV6VjV0bUdTR3BNNi93R3hVRDlRVnRRUEpOQ1pxUytxSG9hMjVaNmxrUnhpNmcvaWpSRllreEZXTXdDWlN4MHVVaW9GbWNLcU9RVzdONXpKWUxVeFdETXhNeGREU2FsSU90cE01c1hYQnlXelZUYlkyUHBTV0FNVXJoSlNSZFV1Mk9RT0NyaXVoTGpYMUV4cWJaMFlYTE5tL3U2QTN4L1lQWCtOY21ibWNDSTk0UEZzSWFHUk01WjF0Q3V0RFJQblRXcFFXbGJ2WnJBR2hGbkNPNkIzdXJtbmdVZnlOUDRsNTlENVNtNC9Ba0NrZkpveFQzeHlBZDJlVWlId2VqZFhmZ0lXeGwxK0FqZHM0NlAvL0F1VE9CeHVWY2x0a1Z4SE5mQ21pM0M4cmVSdzQ1Qi9OTUwzSnZpaUs4K05PVER3SEJNM1hCZmhYWGxVc29UWUJjb1RUczdCaUlZSjExMFVKU3ROSHRLQVJheWx4ckFaYy80MFlBbnJBd2twSmZXdHRRTW5ldk16Y3lweVIwNndMVXR3bE5TMjF0VlBMeTNPcWg1VFU1UnVFSlpNV3I5K2FxQmsrSlJyaDVmOCt0WEV5ZXZ1bVZwVDJ6eTN1YlptMGFZV3BwTzB3ejVzRWI2RnZaMk1PaDlWUFF4b2VWaFllWVNJQ2M5WVZwTm82VWJGSDY0NEVhbTRLMG1YR0sxZ28zcTBHWTE1ZzhDcUNlSnFaaktJMzliZVZGNDJaQWhXcWVXc2N3bnJhSUxZMEtaelB1RURXcWlHdXFkZk9LVFpBSlpRRnJlWVNTN0o3c2Z0TDZYN0lvbTFOb09xM0F0K01MaEFEZkNGZENZYUc5Q2dLTXRtMmVwSk5Gc2R0Vk1oM2VjTFc5a010U2JRbkhLb3dRNjZhamlCTTVpVEl3bEVzYUlwV3REaWNGY1ZvdFdMRlZPenZuaDE5ZEgyZVpQdVhqZGwzdTNIVnIvNnhaN05xMisvbjN4emdtU2xQN3d0K2RIV0pVbTloc1RsTnp5YWZPRG5vQ1ArNnNGZlpmSi96ZndscGJQaTg1OXJMTnFGWEJBNFRNZ1BFSFU1L0tWbW1sclBpblhFaEc2NTBtL0pQZXFWM1FCT01SYTkrWTFKSlZJNkxYbVRNc0Y0cVVVTFVCcm9rKzJXN3BET0hvbUVTSGFMSEVBNzM5Z2R5Z25ncHptWklLZnJrSVhvTUVyc0J3b0tpTElML1MwNTFuQmFlcGE3a2lybm9JNVpKUytvS1dMSU5XQWdmczFaNVp4QU1BaUxDRXFrRGwyS1RMb1hlakNOaWxvOFVVMUZjTG9jYmxoWVBhNXZ4RUZUenFQZkVkVjZUL0VINDlOcTFyemZmdi9wNEtiTXJTMTM3TE1XdWVxU3lNQ3o1c2ZxS3ByQ05ZMkxuYVBudmpob2Z2ME0vNVRINisvYWtzTVgzREs5cUhYK2tzTUxiMTg4ZWNUc3JhdEt4ZzR2SDJtOXhWdjgxQzIyS2Y2Y1RUZG11N01ucnd2dWJhMGJESFF5aHZ0SStMTm1GWmZCRlhCM2NMQmp3emthYmlMd2xIeHYyS2dtc0JWNkplRVU4aHBNWU11MFlJNStXR1JaYXg1a081aG5vTThBd0YzaVFXMUNZckl0SloyZzRvYmVWcXE0NWFUQ3BaMkRYK1NMQjRrV2ZwR1FqcGEyWkFSYmdYbGNzUlNLaGtoQmpRczQ5WWdSRmo3MTZHMDBlalN3TUZjMzV0WjU4MjROcnJ6OXAzdnZYRjZIMTNYTDc5ejc5SjBycTM1RDh0NTVSL240TnlUdDFyVjducjV6UmUzeWVmT1cxNjY0OCtrOWEyK3RYM25UVFN2Sk85dmVlV2ZiOWwvL21vdUxYNlJ3SzVqVkVJbGZoQzBBVmhLYWk3SkZnd0hvc04xQlB3QlZ6NDV1ZVIvMUlKaFBTVll3MUUzZFVvSXZsR1JHWWtuQ1JCNmRMMlJPb3FhSEJRbktSejBMV0hQS1lpQ09QbXFQeThIK2MxZTUySDlxUkVUeGtrTUt6RWZoT3RrTE9jQWlKTDNOQy8rNDZPelpSWDljU09QcFVmbWlCNzZyUmk1US9ESHBBbk9KeUJsRFZNNElWTllzWFZyTWIreGRMYmp3bWZLS0VlZGJoR213cjZxNWthU01DNlhTdEUxdHR6VFFDOW9Rc0s1UmFDZElEcDhjQUZQQjVaTUMxRnFRQnZ2a1N2aWd4Q2VQWmlyWDE5KzlZWXJhREtCYkJWTytseHFPSHY2NitvMUJWQk1iYnBHYWpzb0ZZRWw0cUNWaFNqVGFzS2l3cTdEQUF4ZEJTMWR0c0FHTWlUcDhQbnptaFRkNktMOGZidWthTnJ3SitEMThHMmRlMUtGNVlZU3JFUHc1dnNDUFVBNE1UcXByR0E2bVJVR2hKMWpiTkt3OC9oKzUzSmZVL2doRTdZK1h3UDdJTGgrSVpGcHBsZE16YUJvcXMwQWM2Um1WbE5jNUEvRVdTS0NjWEdDSDZHTTVlWG1GbUFmZ1JHY0hMUmsxa3hIai9mdm0zN3lCbVNjYjVpNWIvZGErTTNlTjlEMDZaZTZkQTBhMnpwM2JPbkxBck5iV1dhZWUzM3p3eHFuWHRWb04xMTFYT0dhNC8wZnpkVzJEcnAwNTJUL0NrMXNjdkhuTTNMc3o4bStmdmZMSmJhME5nMXJHNUZlNzBsTXpTeHR1R05TODBaTy82b2I3bjdxTzc2b2FtK25VOGdXelJneG9MRWxMeW0zaitQT3c1L2t4V2ordEhmVnlHTGR6K05FNUI5S0orZWhTNDh1WUU3SFUwMEt6QllDV2hEaGhWQkIzblJVc3dpcmxvaURaRi9BVUJZTkZoVFdhazU1QXdGTllVMU9vdm1KK1pNdjVidTBuMmlXY3lPVUJMNytMN2NHd2syWFIxbmpEUG5aVjZnMFhzcXNjYjFpajhxSmFxa25aR0MreTBmei9zSmU5ODlLYzRrZytMWEx1REMvbXZhWm9jZ3FMcW1zb3N5NzFpZGJCSm9QVmx1SE9MK0tLcTZJNXI1anlTcXNDYVY0WldQalpmQzVHOC9sOGQ1NlpXQzN4eXhybDB5MUh5SWpYSGlTNlY1WXVmVVU1KytCcnl1RWpnK2Z2LzRwb3Z0NC83M25sOXkvYzllWHp0LzF2MTh1MytqMzNqdDc2N250YlJtOHNxbHJ4Y29qZmY1U01lSFhwcS9Bblc1V3pSNWJDWGNnUXBlZXIvZlBuUC8vbFhTK1FvdWZuN2U4OVRWYjhjNE8vdXZFL25ucmk1SkJxLzBiWXAxUDR6ZnhtclpkTEJWNjlsZ3U1UVhLSEJZb1hXdThOcG1jNGt5SE00QTJiWTh3YkVKYkd1RUlhaytQYUhDYkg4MVFPbm9iNm9na1RXV3hZVFdObVh0Qk1yRDJ4b2N2Ykxjb2MxZ2hnZlEzOW5hcVF4RVhJVXRRQVdXR2YrTmlVVGEyYnI3MWhlUHVFcXB1ZVh2bndpdXMyemJodjFkUmhWVGRrWmQxUU5XeXFNS3R0U2ZPeWhsRXpKeXk2WmFVeWNlUzBGVGMyakJtUXZ6eS9lQ3psU3czY09tR0UwTXBwZ1VvNUc3Vi9CUHJjUUVaMUtJZmd5Ulc1SU4rU2hjcE9aU3RaeGw1Wi9ycWFBNi9sL0pFTStFZ0ZKZFZ2ZEtoR3Eyd3lwQkh3Q3cwWFRUWERLa20zV0NmY3UweW9XNndra00zY3YxZWZxT0ZHOFRwaFA2MmRUZUh5dVRJUUNheUMxc0VXemVnTlc5aVYyeXZsK01NRmJHbmRCVGd4dHhORVNxNVBLdk9HVTlXVkxhY3JtOFNJUDRtNjRjTDU3RjJCRHl0QWl1RURWV3JEWDJheXdtNDkyeDVlTEFsQms4Z0JScEJVTEhZWkJSY1cya21aVnRsaVIxNVg0QmF0WGZva0t6b2RwVEpSeW95c2VvU2ZCYUp5MlNhcVBNRHA5cmdkSWl1M0tpR2psUENxdDVmM3ZoUlc2djVJcXYvNG9mTDJoKy85YWtocnEvdWV5ZXRhTnVYVjFPUnRFZzY5MUx2ODdWVmhSUWwzL1BHUEhVK2NQcTBzSU45T2FSbzE3cTNqeHdsWFhWQlV6V3dNVG5PWS8wS2JSZTBwd0h1WVVDMUZmWW1MUW91QWN2NEx6ZUU1YzVnKzdoVlc4VzYxUm41c1gzd2J2S3o4UFRWUy9tN3ZVLzZPV0VwVFM5eVpHbjQxUmV6ZTdRdm03OWd4ZjhIMnRxbU5nMXBhQmpWTzFTeWJ2MzA3ZkxCOVFlUFVhWU1hV3FiVGVkVUJJenltNlFSNGtyRm1nbHJNckVKRE12a3htQTNtWFVoREUzVTBabERUdGJRM2dsYVBkR3VoS2doSStDUzJxMk5haUFCRVlveHFJYWpXYW54b1M2RERuMVY2eEFwL3NlSWpVdnk3ZURHL1N5My9IVXRlUW55M0NUUDV3N29uZ05jTTU2UmtyNXlvb1VFVVFjTXlDMjJua0pBd0VTSEpGN0xwYVRBdkdiWk9PblVyb0F5MVlBeXlpOVBiVXVQS053bk5KTVB5elh6RVY1NU8zMWE1dDJYQ3V1YmdiZmUya1NkNzl4UHU1THdIMi9OMFdZT2FLcGROckYrMVp1bm91YTJIZmpkejlMaUdNa29IemNKRS9nak1hd0Eza1pPS3ZEUjdBelpPTWx0U2gxZE8xN0E2V3owcWFaSEdCVmsrckxLTmxtc1dxT1dhdWJSYzA1bWF4VFQwUUwvbG1pcDdRMEV1c1BWdUhsYTBkc1RVZVN0dUhKRm9IalpqOFUzWDNEMWo4SkpYMXU5ZE1qSm5TSVBuMmEwTG5oSk9UdkRYVHhnNnBvbWZ4emNPR3pSODlxaTFxOW9tenpJSkdkN3gzb1hyeDBSb09wSWprY3RvK2xJNUVrRFdXRzNzM2FNOEMzL2lvZWtSYUhlRGphZWplVTBSeWs1Z0xDT0I4cklFSTZ5LzFxZFd3YXR5VVRKWXdrVGtqQ3lGeEVEZFpwam1ndFRPYXVSUjFpR0I0SDk1Z1hlM2sxdGFEN1J1RjlwSS9tKysvMGo3MXRtZ01BZHJyY2tHMHNxM2NRYmtnd2swcnNmMEJtTjhXeFkxdzl4MllRRVcrVWZwMEtHbFlMVXlQQ2lyeVRPd1A5TzRZUnpvMTZwTVF5RW1xcXd1SFkwMjlPemdOTEdYaWl3NFdZak9JSWFJeVk3cmlUbU0xS0VqQnVMV0x1RFh4emFxWi9TTXFsR2VBbi9Hc01HdFZWbmV1bkYzekdoY29oeVlVRmRlNUNyTUszeitYdWZZUVdOYTNEaW5MR0VtbWFmYlJ2MllJQ2pVSW1nVUZtajhYbEFISGFCMTBGa2ZMYnJqWHEzMGFjODcvRU1QNEI2ZkRQTDZETWhyVUlxNTBhaGpJWm1pYldWWE4xSktoSU43R1FlUE5kNmdNUlZyMUFIQVVqUXY1anpWbFBNZ3BKTVBQdnpJd1lPUFBIU29mZW1OczVjdm4zMmo4TkhXWTI4OHVQWFltLy96bTN2di9jM0dpK1JwSU9KVGhQOUJuaXFIT3ZCcFMvUnFYVVNVeG9sVWtHRlpHQ2VrT1VSR2dDcVYyOFl5d0NTYm12R2M0QStiVXZRa2lVYi8wVTBuK2tJcDFLZVFrb1M4S3kwT2plaUd0aFBzbW9NS0hXM2MwMTltZ0lueEZZcHcybDFCc290ZENZWWtwcVdrbUdoa1VTS2lMS1N5YlV4WEE5MnlCV3A5TWhoWkJTNlJyays3Y05QU25wMjhtY3p1WExueURxV2JPRFVyY2NWMmJEbjNBVVpEMzJubGpiMUsyenZ2dEpHZEhKVTJuTTZ1d2x2QTNjT0ZNbGo4Vms3VmRFY2hOdWRsMEVSYlhOUENDd0RNZ1RWbExoTXB6UmZLc1ZMWFFvYUJLVjR4a0hMRWNJTEJaRTZsTUtWbUFFeVpRU2tQakJDVFZjZ3B3QTRxQkIxWldsMWZFQTBreWxlRkdGL0Z1RkE4dEVzcm4yNjU1c2ZYRlRjdFhuNE5jTm5ua2N1T0h0V2UxeGQwL2dndzNhVVRLK2EwTEdnTnRrVzVyb1pyQmh5OG9wME5QTGNjOVBWNjduVXVWSUpZQ1BoRDZZaUJVai90THVPdExVbUhkZmY3WmErRzl2T3A5U0t3dFpXR2tuQ1JCci9ENHJod3NoRXZWWTVOcElhTFdEVzJtYWtCc3FqemhRUHNNNTh2RktqQmV3V3FnQ3hxcUh1bXhnczRIQVE0ck1IU3dOS3l5bHFLdWxwUSthV0tJT1gwWGNEcDYxRjcrZGRadmVFaUtxTE1mOXJjRlRjT3RsNkMrWk42NGFabFBRL3pGaktuYzhXS2RxUXh2bU84djI3ODBESERoUGxNSG94RWVYQ0RLZy91SHR2NzFNVzB4M09OeWhKaGkvQXRyYXRjd0lVS2FNWUttR2c1YXNuTkFNcHFIY25ka29NbDN5YVphWlU1Y0JLMzJBMWFKSzJ0ZEdPT2lsVkwwNFJDeG56YXFpREpHamFsNWhRVVVaUVZZNThlenBTUnlVeGFXa3pwQ2FqbGxjeldvU1dBa2J5SFJsWldXWFVubGxWT0dGSzg1dFlsanpYTW93V1hwSVpXMTA2SkZGYldGL1lwckx4dTB1STVpMS9TZVBFM1Rhd0hEODN4MVoybHVTTG1peXZ5RW1NVmVhQ0UwTElXa3FnR3FLSVZlWDVNVFkrdnl0dUlhWVRLcitKcjgzUm5sZFBudm1QMWViRXhqZjJObWREUG1QMVVBWUlwY2xFbDRBYVUwVCtKcndja0pSRjUzWGRjOGJMaldyMjBoTG0vY1EzRTVyZTVQZm9MaDFhK2UrT2h0eGQwUG5QeDRLZFBSOGYrQ3NiT0F6NTI5NFZqdXlOakE0TU9XNk5XdDBsVnJ3dXh4aHI3UHFFR2tVZnJ1OElwTVE5Z0hrN1REVHRNRFBNbWtvYnNTa3F4U3ZrWVRnUXJRaW9JeXRZMGJHU1FSem1kYk1rS3hzTkVqUW9OYmtJL2Jqck1UZE01aEQ0cnV1V21tWG5CZkhlbXgxbGEzYnBnWnZIZ292elNqTkpBUS93U2F6OXMzNVU1b0hKQTVyUnA3WStndTJIYXRITm5jTVZSYmpINHR3RDhOckMrOGlKVm1URU0yS01ZRUwxU3JoL2IzVWpwb0R5NUVYVFpiS0YxYlNpVnN5emR0T3NBOXJ1UjdCaGlnVHVrNEs3S3Nrb09CTmtPWDZSY0NHQ2t3NXlMeEwrTkEvR3hHdVk5cWJFZ1VLc0NucUthbXFMQ21pZ0JlNHVxcVFmbDNCRlkySTJlUUhVUmRhZEVZTlBuVUxxeWNwbmN5a3RTRmhCV09JV3Ria2JNUlpDRkRUZFU3UXI5NEdEMWhDMXNkVEV0QXZNNERoQWVIWmxHeWpCVXFwUXpVckI5UmJMRlJCbEgzTmJnVlU1UkdGVlBMcVRXRTdjL3UzejVzNFVqL0pValJsVDYrOURzOUdkdlg3VnZWVy9ieUpGdEk1a05aK1k0ZlFHdGM3RnlyU3dhTEhIK3ZvV1daa3VpV3VzUzFpWWtSdXNmYlFnYTZDRFJFc2pFU05tbHpPdDhQbFpWcE5IU2RqTUlRcXowRWg0Q2NZbG1ZWXB3ckxlRWY2czN5Si9zV2RmN3hTdkVUTjZLRm1QR3luNnhUbEpaUjJ0bHE5Q25GYTJWclVRSGM3UnEwdVVOZTlnQ2dDV2ZvUzVBTldYa2F1M2tBTUIrTnNNK0JpUUdtTEZOblVsclRVM0xjT1ZYc0poRG1RZnNtT3dDTDYyUkYrVzBpbUNRbHQ2RzlWeWs4cGJWY1Y5Y2VhdU4xNGY3YU1ybHdpVXFjdDlRZnBPZFVWRTNIclZsRityUUl3dFJoeTY1cC90bk4vS2RIZjFVNmY1dndqVXBWSlZPcDdxMXgrMVpuYmcwM0t2V0xPVUFEOFQ0MkRWWHFwaTFYS2xpRnNOa05DMG1NWGhCNVN3U1kxejFiTS9aSjRsM1JYVFpVQnJFNnRJaTh4bjVmekdmQythQkNrVGNQSG9QVVNzdU9oSHQrMVE4eE0vRGV1VjUySzQwRC90RjgxQ2xSdnhVdkc4OGRPSW1GQmg5NW5MNk5CZXBZYzhCZm9sK0V6ZTMvUEl6QXJ0YmN2bmxaQU9HRU5WWTcyV20xNVZvNEJLb1F4a05VQXlTWkFOUExVQ0x4d0JTSXRrUnZHZzFMK0Z4amdjbk1jSS9xZmRaNVoyUjlZNHd6OElZMytUUDc0ZE4ydzQ0eHhoS3BPT1ZsbVpNSnRDT1YxalhpNlZvZWcxTnZFTFBON0k0MFM5T1FRVmpYaWVTMGRreU5ZbVM1NWJCVStNUHVoOGFLWGkvWmNUN3BQTHM4RTYyQk5GYndody9oeWNOM0JQdEQ3V3JHVTJCd0E0RldHcGpoSHVpZDk2b0I0NUFlRzJRNGs1Z3E0MHBQQm5IZHB3QXRXQnlaMlI1STNjWHpyOE85L2JRTlU3bU1yQ09IRGtyN2NtRThZQTBGZyt3K1dpUmY5OVlBTllSSmx0b1Q5VVVDeXY5N3hzV3dKSGo1VnhqWkhFKzZjeXVZYXNUakM3SzkvK0xNOUo1NDlhR3M0Tk1XMEI1ZmpZM1g4M3RzMFE2aUtVRDlYSEVMSUMxa2VHWE9WMDNXQTBFOUJWMGkvRSsyV0tpUVc0TDlZbFpzc0JrTUZ1aURqRUxxMDVQU083R0JteHEyVzJDUXczUnhqVUVjSW0yV0VzQXBFUDc4ZmkrQUdXZHNjWUFwRVY1bG05Ync2K005QWZnMjVTQnJFV0E0bDRUN1ZkZ0JQM0x3T1Z6RDExVUpZelMyTTdFQWdpSUpGWHJLb2l2SERiR3ZMdjV6TmVieXQ2bHhxcUtDNUVRV0ZXeDdNekg4R3RHTUw2eVdMWm5ZTVZxUGczVnl0WWNhZ25JenRTK05jZjk2Mk9SU3VTUi9XcGkxZkVGeXYwb1lwU24wSnBseXVOU1FVc1oxMi9WY2xaL1Zjdlpha2JzUzFpMW5KYnhRK3FXMFRpNGJPM3lBZHpLbHkxZ0ZxNVhUdjgvbXovS2o4dlhYdDlLSmNwbEllQ3JWU09rTHd3NWw0QWh0ejhZWEgxZ3lQd2hNR0RDQ25Dank0THhWMkJUTjNVK2ZSVmdvSUNLd1BFVmhjUEhiZThIRHFuWUc4NWplOHBMQTJOMFQvbmpZVU5GMThkMmtjK0NBaWhjeU40Vnh1QWVDSzhGR0RVMElPREpsc3lVNG90Z2wvT0tZVitsK1dBL2VVVTV0eXg0V1lxazIwdTRZSHRkbmtadm1sbmN5Q3llMXB1aVcrN3l1QnJVdmdzNHJxZlBGZ1JiZ2VGdEM4VWJkZ3krc3ovTTVYbWxjcitjQ2R5L3lFZmJBL2RCbVp4am9UVXlLTEJMNExJa2hpeHNDWndEbGw3SVNJdk9wQUlSRENHcHhCb3lXRFMwRGU3Vjd0cEx5UHZMWXVrTmtERTF3WWdDUU1QUGwwZlI5cGhTb01hbUNiZWVlSVYyVFRHTk9CcEl3RUNjQnFJM2tQV282SThqWGxJNVRubVBlTWNwNzhKTE82bkU5Ky9TSi93YWZoT2xUYkFEbkxERGlybGIxZG9vQ3kwL1VwdDFNRnhueGJ3NHFjbTBmcUpRN1FtS2podk00a01EczFBOHFOZFliQTVEQnUwVG1NajZBT1haV1kvTUxQRWxRNktEUzZlZHMvUXNwNUxGczUwQlAydDBxOEVzR25lZ2tBOVluS1FRMGFzV0RSUjZFS0cvZUhWM3lYM055MzhNT1AzRkcwK1ViV3BaMGk0L3pNOWNjUi9nOU10bGorejhvdjNhOFh6bjI0REg1c1oxczVSUE90OEdWRjQvYk1Nc2t2a3o1Znlqd29haHl0dTlBMFlCV245OGVpekxUZmxDMHdNOHhnSlN2SzYvcW5GSGYxWGpLV3JWZU1nczJwZ1djMUhsT0RMekM2ckh1NUY5OTFkQ3J2MEwwNnYvLzVvTFZlejd6b1U4UzlXNC9tYWpPUmJSODZQemNmWS9uOVQrNXBNV200LzlFdk9KS1BnWFRLbVllWVV1UGFlSXZrL250WVhXVWhSeDh5NmVHZmE5Sy9UTERtQUt1Y0FVaXVPbmlRWC9xUlpLd0Zub2NZUkxkMnp5QS9CYksrdU9uVVU3L0xocGVVMC9RRmlyWXB1OWo1N2ZGNm9lVlpza1N5T2Fmci93ZlYvSU52ak1xR0xKczl3dndIOENsNGpWV0gycjE1T2kxZXRtdFhwZDVta3B5OFgxNjlUN0Y2MWhMMUd0dWxnbHU3QXQ0dmVMOVQ1SjVCd1lxWXRXWm9WTlNkU0NNb0U2S3poaWJZWlNJdjFxWkQ3SjU0dTByMEwrU3NzR0hFazB6WmZWZ2ZScGc4SmFmWFdTOWtnamxEc2VZWTFRdnZ2cXhSZk9LQ2ZKc2EzTFYyeW52b3JIWUwzMzBGektiOVVac2VhYk9sVU1WR0dlT0UyMmtZUEdiaWxvb1cyS2s0MVU3L2V4Vkh0SnIvYmZOSFpqdWcwdEcvbjJqZDBzQmF6WUloVWVsVVhIOTVMOWFKZFZ0TnRLdW16NERGOTBlWW9MNFcwUlBvZmdxN2lrTGxzd0JCL2psU2ZJSFJTdE5udWhwNmc0VmpOeTRTYzBaNnMwQ0FqSlFqZC9TSk5kaFhMSFo1VVRLNEtZeFNXbnUzQUJxMXlZek9ETXltYXVLakhhZGoxYUxCSXAwbVM1WEpGVzZ3N3hzWlBTanZmenFvY01yYzRic21ETm1nVkRmbkh3bnM3eEU4cWZuTDEwRmZ0ZzBMU3BnOXF2YWJ0SFVCNTk3NEVWWmVNR2VnZVUxT2FWQkYyWkF4cVdUZmp4ODllT3Y3bmhtamtqSzRZVzVCUUhGNDV1bURPNFpraCs0NWc3NS9md3pDOU02OXkxSFdEcDVIRmVzQ0xqS3QwTCsxUzZsOFVxM1N2bzByaU5kS2ZSU3ZkaXRkSWRHOHk2c1p0UmtobmJFRXRPOFFEV3V1ZlNQdncvdU55ZE90ZXZxdVI5SlhXNnYzUGx3bmZOeThycG5sZWkxZS94OEpjQS9DdXZxdEsvNHBLVi9wVVhWUHBUNkV2THZLcFR1dnpmTFBsSGsvMXF5djRmbzdMZ2lzWC8vSC9GNGdQeGVQQmRKUjc4bDhURHdIN3hVRjZoNHNIN2IrSkJWZXF2QmhWT0pvT3VFaGRNdjJlNDJBSzRxT0dHWTExQkRCZjFmWERSRk1FRmF2bEZUTit2aW1qK1JCb1JZV0ZkT1VFOElhYUdLZmhCaXF5UXZxVFJ4OUFWTG1VdTE1SEl6M0QzbUMzczRJWW1KNmFNSUpLQ3RLODl4Wk5jNUlXcm5CckFYSlVvRi9xdnVJdjYxZm1GcTlwWDdUR05QeTd5VVhmbGZTWjBSRlQveUd0UE9LN25oRWJGc1I5d1BJQUxjRTFvUmNXd1hONEh5MVZSTEJkNXBTRitPUS9VZ0RwUUE0WlI5SllnZWt2UXAxZkE3QUZLaUpVTXMxMkRVcHp3VFExOFUrT1ZCMW02NWVGcTFQWWxyU25kVWw1RjJWSlZmMmkrQ3FSRy9FM3hxSXozRmw0U3JSc2l5YXJPT0V4dWkvaW1Mb25UNzFSYm9lZkhFVlFLbytKak1ReW5yT2VBbjJ2ZzlsL0ZMb1pOSEE0d3lxMzNocjBxNVE2SzM5bGxZSnRXTWRLdHNzaTE4SzZTdmF1OFlOZmpZVGUxVlJneUFPVG1GWmQ3Zlg0TGkvTDJTOGYxQVpDTFpSV1ZwWEZkbjY5aTgxc3ZDdkJjRFI5bzdoUDB1U0k3RU1iMmlRUlJucUE3SXZ3RE1Gc0xQT0ZKTHBTSFhqUVBXS3I2Ym5xTmlRY2hNMkdsTGdaOXR6VEVGNjVMeXpNRG11dTBvR1BWMEV1YWVzUDRRcW1SbmlKVXJ5b3h1UGxMbzdtdzllSmdrMkF3MjdXWmVaNDBmeDN5VFNkcytseGEyNXlKeDduazVPYVgrcEYrcFRyc2xrYnpZME9tUkRIWWI0WXNMWFBuNGp0eDVMSisyZ3kzZzBpZ2tHRzNRRzNQMFhaaTYzdXJWSXh1M3A5VzgrcUdVOXo1bnM4TVJ4NmQrbFRkbU1mUEtOL3ZHUFRMclVQWHpHMEFKQWNYM09UT29Xam1uK0Eza1NMV3dRTVUwOTNQcjVjb2ptKzVlZllxNWJlZmU3YTlQcmhoWHNjN1UyOWp5TTZlMURpMnRuN0k2cjNSemg2MHQ0dXlodloyS2VkdTU2SXRYYVRNcUV1bEtCSklwR2NqY05FaWRuU2lwREZXV29HZWswUWtSWVBHREJzME02ZWtsSkppSGlCUHlnbEtSV0lvTFhjQTZpZ3BWdGxlRXNSc0xtd1FZeXU5VklPWVpIS3A0RlVoZjJIbm1GVy9ka1ZTdkZ6UnhLK21zbC84VDk5dU1vOG5OVHZqUWxXRmVaNDFJc21qOHBqMmFnRjVqTDFhOHJtYnI5U3RwZUFTM1Zxb1Z4WnRlUmVLNFpjMFNiWThkejRTVFlMMVgydmJnbEdJSzdadUVhaGY4NUw5VzRSSzVmVEZNTTcvZDJERWpqUUlIU2lhRkRveFpCSGR3WDhCUGxTeHJnamZFYVpmWFJKQTNoajFlY2JENk1GczI4dkRXSFFKR0l0VkdNTUlvd3JpdjdhQXF1NTBSUmlyV2V6bVNrQlNFeDVrRDRQVFQrRXNCYjNwbnN0RGlwNm5hcitjRDZLOEFrUjU4QUt3MGVIckFhSHRvZEpIOXNPbFA0YU1XanhjelVoYlVkTm9kRmVTTFpNMUZQMmhpMzBKVjk4VmtXT054dnQrR3BYYWwwYlVvb3NDZ1B6NUo0RFJMYWI1dDNIeE9oSVhyek5lS3Y0MyswbFNzWExtYnV4VWRtNExheitETlpmdzVQMUI5NHZFLzJaUi8wSGRicGJkRzcwbHpCR1dsdndUN3Rrbi9rZmk0bi9HSzhUL1BNeXhQazI5OStubzNZWHpZUmdnZzlZQTlZbi9rYXVJL3hsL1lQeHZYTVEzKzErN2kyTzFRWkdNbGtrNG8yaXBVS3gzaXZZeExwMHJ4SE12YURaRmRrSTNMUzhPQy9tcElncHk5RkY0Nk53eWttZ1RDenhTeVpIVWpjY0N5aG1jZW5TS2xDc2VGUFRhSktzeDFVWXBORDhiVlNFSDRrb1c4Y2dZZlVLU3hSYkptZ0NSVStqUmVnTGxCQ1FNMWlKeW9oMTkwbXE1QSt2YXBCeC91MzNCSjhxSEJkOW1MVTJhc21iQngza1NXYVA4ejhkL1VMN1pLNUdLRjhjOE1tK1hSRDc1UGNrT0g5Njd2bm1oYlZUQzJ2SFh6SjR5WG5sRldkT3RuQ0xaZitqNDNlODZaajh6LzJUVVJ5U2NCSHZIQ2p0MzZ5VzYxa2p1YUlGUGNVejhsdlh0WkNPVjVwNFNvd1ZTWHRXdWlXdHhJK1hnRDNLWmpDNUhJN0VVdHE4dXhleG1WVDl1clBvcHBVVWhjcm9uMkgvM0c2RmZnMlpQZkUrY3BwaXhFaGUwdUtoVGpxYjlRaXNseXJQOVFQZllPeWVMbTlSdjk1enMvcnJuNE9sQWlkaENMQjJybWNMWVF5ZnpCelhSd1RhRWwyaWtRMFhxcFpycENNTWlkbnpmdVkvN1lYT25NVGFjZGZvUG16WVZtdjFQKzNVbUtpODFjVDZMU3NxKzg4Njl4THhkL2MwN3I4KzhzMzdRdkNPeXNQK3AxNmtTOFBKelAzMDZEdTliNlB6OTBaaGcvUHhCNUlYZGJBZFZlTU5aNmc0YUdBOVRPaWl3ZnJabi9EUWVnd2VMNGp0UERONHFlQzMwUjJLQ0tjNnM1QUVYd1N5N0I4QkdTc2V5OFFwUmRwVUhMNzk2L2U2blN5QWxvVitQd0tWeFZIRFJEdE9vdVBKVFhCVndsZEU0WUI5c3ViMlMxeTluR2JDVW5raStDOUFrNTRKQXlHVXhxMUlMTmFRaUNQTGp0K2hjTWdwQkRHQ0ZVcHpZQmtvcXRjb0cybTc5cXFuNlV0cEIvNWh4OUtNVFhCSXRheS9PQ1JMbzJZc2ZhbmJBRlZadGxITjRFSWplRUdremdwVWJ5UWJtb2s4OFJZdXJMRmdGVGgzenJONlB1K2pRb1RwaFQrLzdOZU5xb3YvemF4WXVWTzZtbDhJdGhkWFZNTithS1AyQ3paWEM1WEJGS1BYaTRvYVJ0b1ZNajhPZFdCemZuWUhHRFpOWXJBWGRWNUlOMGY2UzNtTFZwTE9UbmlMeHdrd1dMNlJ0cTJQeFFtcHBCZnkwVmhsdFVob3ZETmhwdUJCV1FWMFNENkI5eDU3YnZjdGFoNDFlK2VtT2ZlMVZTMlp2MkR1Q0hKbHd5N3hkWTlaT3VoM1dZVHo1NXNHLzNEK2xidVhJWTdjOGVHYkw5Y1BXYlB0c3gxdytNR2pSYzhxczRZRDhSK2FyL1U0RnJIMnlBclNUTDlteHlIbUpqa1dZTXlhb1lDYUpYYUpkYmR4M3VlWkY2TW51MjhCb0dtcHhGM1V4MG5aRjRqYi8vaHl4cTFLWENDUk5BN2NpU3crK3pCd3h1SFJCazZVVWx0NXg0U3cxOThmaVM3RjVwbUZmKzB2TU0vMFM4OHpvZzhzdzROS1pwc2FaVTY0d1haVjM5NTN4RnBaV2VJa1puMVpsSkp1ekgrYU0zc2RsbDVnMWFwNUZmamtGTm1DZUwzSjhKb0RRWlJQUTI1aG11UUNZcm9MRXBBUTFRY0dMemtnYXRjS01CUFZ3emNzU3lDVjRUVi93YnVrbnkrQWlVTCs2S0xNQTE0bjJaSUoxd2xoMFAxMlpIRjZNTzE5TlZ5WU1QdmJYbWNsUEJmMkYvWmswYTlUWU0rMzFwL2JMdlZTdlAvNy9wdGVmK0lONy9lbmU3ZjN1a3MzK0JCVjNmalUrM1hJaDlwQzZDLzJ5UFJhZEZvRTNXaWh2VkVQU2pEZUtyRm9zQzNCTGoyaTdDbVJmZ2l6Nlc0QlBMNVkvRjYzR0p4ZUxIWGFlUjhJQzdVTFl3VVhjWnRWdXg1d2NkQjdqMlJScTM2dElsazZoMEIxT1RIYWlKWjhvTUdFQXNqazlHUkRCem5iUTUvbFlJcVRKRjdMUTliVllzZDkvRW55TWlMQ2pkTlk0RVFYSkZqU0g3SGtvb0lGSHBhc244TGdqSi9CZ2F3Um5WVnhtZkJYdGtZQm5vRWU3SUhJTGZrSXFqdTBraGpFMEkxZk5saCtqL08vT1k4cC9KSTVjZDNUNW51L3I2Ly81MUJmS0dacVRNK1RnNW5YL1ZKTnovN24rZ1pkNTQyMi9mbmpLYzArUm8zdjJLYjlrc2xBL0JXVGhBRzRnV0thUGNxRXN0SWlBRnpoVkJVVXkrMlUvTEh5OUwxeGx6MEpFVktIelpnaEZSRWtTRFVPZ0I5S2VoTFZvV05hQXB5Q0NtU1FQaGRlS0VnQy9TRU5yQ1dVRGxxVlVXME5tSnoyV3lDcXEzVDZjV2ZDanNuSldjTWlsWjJBQVZhcXl5aVVZV3ZhTE1qRkVsRHIwbER2cFNiMTl2UnpZNTBQRHdoTnFxYnpXeFU1TlJFazZkZnVOZFhaYjQ0MWJwekJIeCt1N3ArNUJSMGZMenJtTktXTHhxR3Z2SExIajA5SVFLWlZsNVhjaG9aTGZUTklHamxrOGVOeVB4cGN5dFNZNHM3bTh2R1ZHRGZvOHRoMUhuMGYxakdtK3dtR1RnaDdRZFo3KytPT245Mzc0eDlsbExjMURpNmxuVjFEekg3WndDY0NEYUkreCtBd0lQRXN4Mnk4bkd2QW9NcXJyRzA0QmVWQmJYejAzQnowQW1EK2JZV0ZxLzJWYS9GOXE0OFRTSms3M2w3SWRsMFB4NVlWYmhkWk04em5VSDFKQ3o4WVcvTkd5YVQxcnNrWlA1STQ3aEJSUE1SR1pQNFM2UXA2Sk9FTFVHdXdsL0Rxd0dkSzRWazZ5ZU1NR1poMmtSS3FRVmJtcCtyU3hnVVlpbUFSSjBVcGtPVEV0ZXR5akFma2hsMFk5WDdJZWo5b1VyS0NWMFpya2Z2WDdPRDArZHRtZlFSemZkNExyMDFYaTMveE9zNDUrNTd5b2wwVmNBd3ZOTVBvbjlQZTZ4VmYrdmE1Qy9mMXM0VEV5QlhpYWxXdGc5ZW1BWUZTbTFRS0d2c2Ruc2k2VU5GTlpqOGpVVTJRbXFaRVVMRUhVKzJJME5MdDExQVRmZUIxSjBSVUhHOHVyUjJzQ0xUOFoyT0JhVktscEtDMGZmQzJEYjZYUVFSYlE4OXZydUpBSjJhYjJYempEM0hieEdlWXdzdEVXT2NOY09PMWFYS2x0S0MwYmN1MG9QTVQ4LzlYWjZUeTNSSGlNMzBmeFhZQzk1U25HVS94WXRlTDJJOTVsWTdyUEYra0lveDVhcXFIbG9qQ0hjQzc3d09takpYM1JsWkJ6YlhDVmtoNVpreTR1eVpZYlBVVVhseVhRWjV0ZnVGSkxXa2VQODQzVm1ZeTZrdUJnV0NreThucjZBYkZyUzJxSDBLV2I4Uk4vUSs3aVNwNm5hemRLZlJ0WlNSN1hrWmZvT3JyeG5DTmNTU25MajRzcE9WaTVTVHhlc1lZS3JGTXNLV1lnMFVUVktJYVpYZXB3UjNBdG0zT0QvYTV5NEFycmZzNDNUcWROS1FrT0thc2VmZjJGVk5EWWx5WjRwQWxlb2pSQllVQ3F3STVMV0dXWTlYOEZnL05xWU9oRFF3aUR4b2t3VkkyNS9nS0thcnlBdmdpM2c5ajVDZnc3dE1lbmxBQWMwb0I5Sk5RWHRmTkRXRXViUzZndkYvVi8yTEgrd0YxM0hWaFB2cGx4MTEweld1NWFUM1c3OXZObnRFYkFqWkhLcE9GY0tKdjJlN1g2L1hLcWdTWEJzWTlvZ3dsWHBNR0VwTFhRYzlRc2NLbFdkV1NJVkNyQmtBRjFTRWFVNnVqeFVnZzdVVFNWbFRlUkQ5aVJ1K1IwcEtWaUsrMm0yRFNzOUlKWHhqTzVkWHdPN2FHQTU3dm80anQxNkNNSHFjUjNLSW8wSnVyN3Q2N0kzK0loTTVyb245Tys3NnluUk9DQ3hnelJkZ3g0L3ZiNUw3U3Qyc1dnRzYzalFwN0ltZG1Vd1ltME1zWmpVaXRqTkVoZFliMk9mcEFDVEVERE9yaVgwSGhFV25KM0tJMzJsVWxMTVpSSW1iNlFKbzAybk5IQk80NjJUSkhUc0VOQndnQ2FCT21DeS93Q2RKcnJZd2thVmY3Q2dRRjNsYithaXhRYmF1aEpNQTY3RTE1U05KSHpQamxQNHd5TlpzYXlCbkxyLzZnVmhpOG8vNmpoYis1ZG85UHg2M3NmcmlhSkw2am5mLzVUZWFDZWZINXo3ZUJCaS8rTFdHbHQ0Wkc5aThzcnlrdHZmdm9ZUFFXVU9McVozdXdXZGdndDlQd3JPMGFxYVhHYUlkSHZEM05Na0F1K1NNc25QTTgrd1F4bWpJOG0vZXBPcVcxUCtqOFpDNGtMZElpNHF0aGtRcnR6b3R6SDlPQmt1M3I0bXlyMnNGMEtFZjBaOU54QXdTMkliaEpZR3lUOHRQWHJwd1U3TEIxYVYxV1ZjaXQ1QUI3SGtES1VCckpTMll3UHBvZkFSdmhZK0JoMmd5ZXVIM2kwY3l3OVFVaDlVV1Z0cGVnUzhVOTY4amphOFo4VGR0Q3pPTExnZWcvekhZRXlGejJTUTByRDQyU3pETXkybHBOei9MSFRPZkt1NW5RTzdMYVdUYU4rM1YzWjJVNHoyMjE0T0o0VEpZUU82NHRjMlNBZzBqS3pXQnNMRXpVS1V6SlFxVTRUWlNjZThhbXpYdVpVRHk3dWxBZlhNNC9kZFVQUVUreWxKM3p3WEVOelhWMnp1NE1kOVpHNzBoazU2b05NN0hNS0JOSUU0bUkxeFVVYXQwckZSSW8vNU9RdmQwSkordFhpQUJjL1RmV2JwRVFnangxYjRyemNzU1hrWXNEU0x3YXBKM3JlcHdaaDBYNUFZY0Y4b2dEM0p3YVBYRHpRejlaV3l2VFQ1WFg1SkMrdXNGOWQ0YTVrWjBGVnZwTUNHQkpUUEpUdWE2NFdTREFSd1FTUWkrRm4rYjVROFFEOHJ0Z0RQeHRRakpjRGtGOFVXMmlPWVFEcFlXQVowRU1sMEVNUVM1YWo5RkNHZFRHWjJYQlZPUkN1eXYxQmxTeTZERG1sV01vc2VjVlFRbGxGa0ZGRzlxWFBlN2tLZW9rL0VZWTg5Y3pqTVN4M0VHVVFKWitMVDRxNVBEWFJmYVY5UmNXL2wzc2xndjFTd0g1WmhKNWlTOERpZFlCNXY3OHY0aXYranhHUHJObXJKcnZHMEYwYVFUY2pSOW1BRlg1bG9weVFIZnlCbUNWWHdpaWZka1ZjTWpMKy93QzkvSnZhZU5wallHUmdZR0NVbkpXcm8ya1h6Mi96bFVHZWd3RUV6cGMrYUliUi84My9aWEJrc01zRHVSd01UQ0JSQUVwVURBWUFBSGphWTJCa1lHQ1gvK2ZBd01CeC9iLzUvNGtjR1F4QUVSVHdBZ0NIdEFaa2VOcHRrMDFvRTFFVWhjKzh2d1FYSXFGVUtrMGt4bDhrZEJsS0NJRldwWWdJRmdrU1JJTkVDVUVKUWxxRUxxUmtVVnhJRmtGS3h5SWpYVWhCcElRZ3hVWFJUZDJVTHR5RUlscWtCQ202S1M0S2lzVHpKa2FqZFBGeDNzeWJlK2ZOT1hmRVY1d0pBckNJRU9BME1TVmVvNlJlSWE1V2NFVy9SMW9md1FWbkZpWG5CN0lrSnBaeFR2NUVrczlPaUZ0SU9SdXN1UWFvRmdyaUpVNnJCdTZvTXBKcUVpTnFHVFBzVlZBUnBOVXpGTG5PTzJ1WXNyVzJ4eC9xT0daR01hWkhFZEpCZUxxQWdwNkRweDZTQXE4YnZLN0RjN2JoeVRVY1ZPdlVIVHd3OTdpM0NNOUUrSTc2Yjkxa3pSSXVxaXBHOUdQdXMyZmdBTUk2Z1FFdEVGSXZjTVBad2JnOU16VW15emloS3UzdnpqcS9ZUmg1TlFkWDdpSkh6YWxwNU1SWlJQMTFFZk04KzMxbnJaMVFnM0M1ZHMwa1hONTNWWTM3TlYrellvSDE5RWhrMGNlenUvSUxqTjdFZ0d3UnJ1VXFpcUlmKzV3bGVOU1lNa2gwdmZmZmV4U25WQnpuN1ZudE0zS0Z2ZUx0TFRPTXJEUzRMQ3RJcVNDUzFudjVEV1BpTTdPN2hDSGZ4MFBJazR6OUZqbUxoTTNHV1dEdlR3akxGTVp0clRtSnNDa2pIRERJeU9QTTEzcStCNEZIMkc5ejhEUG93ZGx1UDJjT2Q2a3Q4a2EvUTE4M2cvL2htU3BXL1J4NnNUa3dMN1dLZWQvelBRZ004bHQyT3huMFF2K2YwSHVyRzZUaGUxOWtyMDRHLzlMUE9iVEtISHF4T2RpOHJBYWJLQVRxeU5remlRaTluS1ozVlNCdytLK0s2L1R3TFJucWdDM3FiZXBON2pHSEx2eG5VbWFSLzBTVE04WVo5K2M4Z2hLeE9pRStvS1pubUFscnhWWFdFTnRYVjVHV1R6bUxIem1ESWM0Yk1SbEVFZjBGbXZUUk93QjQybU5nWU5DQndqS0dYWXdpakh1WVlwaStNU3N3dXpIbk1LOWdmc1dpeHVMQ2tzWFN3dktFbFlzMWh2VVVteEJiQmRzUGRobjJkUng2SEdrYzJ6aE9jYnpoWk9ETTR3cmo2dUI2eDIzRlhjZTlpL3NEVHdMUERKNXRQTTk0cFhnZGVCdDRkL0VKOFlYdzdlRVg0dC9ILzA1QVJ5QkE0SmpBRDBFTndUREJOc0Y1Z2xjRVB3bHhDZWtJTFJMNkkyd2pQRTM0ajRpUHlCRlJEbEVYMFFtaVIwUWZpWG1JOVlqZEU3Y1JueVYrUmlKUDRwQWttNlNXNUF6SlUxSk1VZ1pTWFZMTHBCbWsyNER3bEl5SnpEM1pDTmxkc2cva2JzbEx5RzlSMEZId1VTaFRtS0pvcE9pbk9FdnhsWktaMGh5bFBVcS9sQldVczVSN2xLOG9mMVBKVS9tZ3VrWk5UaTFDYllyYUpmVWc5UU1hQmhvdG1tS2FjWnFMTkY5cHhXaTFhSzNUdXFPdHBUMUpSMFNuUk9lYXJwWHVOYjAwdlE1OURuMC8vV242and6Q0RDWVkzREpjWUtSZ3RNUll5L2lPU1p1cGlla3JzeHl6ZStZQjVrY3NZaXhhTE5aWjNMSFVzbHhrcFdYVllmWEUyc1g2bGsyYXpSSmJLZHNjMndOMlVuWlQ3SzdZRzlrdmN0Qnl1T1pvNWhqbnVBa0hQT0I0enZHTzR4Y25IaWNmcHc2bkk4NEd6cE9jdjdnb3VKUUI0UlNYSFM0N1hPMWNGN2tlY3ZOd1crZWU1eUVBQUplRWwrVUFBQUVBQUFEcEFGQUFCUUFBQUFBQUFnQUJBQUlBRmdBQUFRQUJMUUFBQUFCNDJwMVN3VTdDUUJTY0xxZ2hHb0llRFBGZ2VqS1lhRzBWVU12SmVKWVFNSnA0UXdRa2dpVzJvTjQ5ZXZMb3AvZ0JSbTkraFFlL3d0bGxTN0NHeHBoTmQrZHQ1ODI4dDdzQU1uaEZBa1l5QmVDYTN3Z2JXR1Uwd2dKcFBHcWNRQVhQR2lkaDRVdmpHWlNOck1heldETmFHcy9oekFoelUxZ3hQaldlUjFHRVhndkVSWTB6eUlxdXhvdElpd2VObDVBVFR4cS9ZVm04YVB3T1czemdFQjc2dU1jTk9tampFZ0ZNNU5EQU90Y2oxTGwvUlZUajN4NloxL0RWdk1HOWJkZ2NCWFppNGdCZERuTkN4VmRSazJ1VDY1RHpCWmtWWWc5M1NxMU9ScG5SVUtFcTg2cGt0VEdna3ZRTjNhUGVMdGx4T3BNYTdrU2Q4ZDdSekJOVnQwKzI5RFRoc0hxSE9nNUtWS3B4eDFhUnBkY1N1L2JZZDBQeGh6ckQ1cmVEdlloMzZMd1o4WnhlWVVlZHAwUUJPWFdlWlZOeFJyZmpvUlY3VzFiTVAzbFhBVitBaXkyT1d6V3NzYmIvUzBuMjEvdG4xclQrL25vS1AzbW5qTTdadVhRSXh1ZDl6Tm9HNmtYMnlaRzd1Mm91c05ZOGI4SWwzdGV2d2tIK0c1M1FsREo0Mm0zUVJXelRjUlRBOGUvYktsdm43aHZ1MHYrLzdRUnZ0LzF4ZDJld3JTMk1iWFFVR0U0WUxvR1FjSU5nRnlDNEJnSWNnT0FXSk1DQk14NE93Qlc2L1gvY2VKZFAza3VlNUJGRlcveXgwbzMveFNlUUtJa21HZ3RXYk5pSklSWUhjY1NUUUNKSkpKTkNLbW1razBFbVdXU1RReTU1NUZOQUlVVzBvejBkNkVnbk90T0ZycEU5M2VsQlQzclJtejcweFltR2pnczNIb29wb1pReSt0R2ZBUXhrRUlNWmdoY2Y1VlJRaWNGUWhqR2NFWXhrRktNWncxakdNWjRKVEdRU2s1bkNWS1l4blJuTVpCYXptY05jNWxFbEZvN1N3aVp1c0orUGJHWTNPempBY1k2SmxlMjhaeVA3eENaMmRyR1YyM3lRR0E1eWdsLzg1RGRIT01VRDduR2ErU3hnRDlVOG9vYjdQT1FaajNuQzA4aVBhbm5KYzE1d0JqOC8yTXNiWHZHYUFGLzR4allXRW1RUmk2bWpua00wc0lSR1FqUVJaaW5MV001blZyQ1NabGF4aHRWYzVURHJXTXQ2TnZDVjcxempMT2U0emx2ZVNhdzRKRTdpSlVFU0pVbVNKVVZTSlUzU0pVTXlPYzhGTG5PRk8xemtFbmZad2tuSjRpYTNKRnR5MkNtNWtpZjVVaUNGTm45ZGMyTkFzNGZyZzA2bnM4TFU2MVNxM0tjclhjcXlWdlZJZzFKVDZrcVgwcTMwS0l1VkpjcFM1Yjk1WGxOTnpkVTBSMjNRSHc3VlZGYzFCY3lTYnBoNkRFdGxPTlRRbG5pTThsWU5uM2xIUkYzcFVyci9BdlpvbS9nQUFBQjQyajNNclE3Q01CU0c0WFpsM2RodlNXb2hHL1lZUE1HeEpUQkRwdGFFSzBBaTBCZ2tYTXNwaW5CemNJQlM5ejJmZUIvOGRVRitaUjNHdThGeWZqTzJsVERVcUV5SHVxZHhObE9Vc0I4WWlxcEJBV3VNcStZdXRnRjhFUkhpbFlNa1JBdUhrQ0RuRHFPcWViS1FhK1k4L2pUMER4d1RWMDdwVFRZQldOR2VpQmt4UFhqbXhPem9XUkR6M3JNa0ZrdFBSU3hyendsUnpmNDBxT0VORG50Rm5BQUFBQUFCVTFBd0F3QUEpIGZvcm1hdCgnd29mZicpLHVybChodHRwczovL2Nkbi5hdXRoMC5jb20vZm9udHMvcHJveGltYS1ub3ZhL3Byb3hpbWFub3ZhLXJlZ3VsYXItd2ViZm9udC13ZWJmb250LmVvdCksdXJsKGh0dHBzOi8vY2RuLmF1dGgwLmNvbS9mb250cy9wcm94aW1hLW5vdmEvcHJveGltYW5vdmEtcmVndWxhci13ZWJmb250LXdlYmZvbnQud29mZikgZm9ybWF0KCd3b2ZmJyk7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6cHJveGltYV9ub3ZhO3NyYzp1cmwoZGF0YTphcHBsaWNhdGlvbi94LWZvbnQtd29mZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxkMDlHUmdBQkFBQUFBR2hzQUJNQUFBQUF5WGdBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkdSbFJOQUFBQnFBQUFBQndBQUFBY1czSzR5a2RFUlVZQUFBSEVBQUFBTFFBQUFESURBd0h5UjFCUFV3QUFBZlFBQUFuWEFBQWZxSk9yZ3BSSFUxVkNBQUFMekFBQUFnY0FBQVlVVEo1MVRVOVRMeklBQUEzVUFBQUFXZ0FBQUdCOXNzTXNZMjFoY0FBQURqQUFBQUdOQUFBQjZybmxSSjVqZG5RZ0FBQVB3QUFBQURnQUFBQTREc0VTZ21ad1oyMEFBQS80QUFBQnNRQUFBbVZUdEMrbloyRnpjQUFBRWF3QUFBQUlBQUFBQ0FBQUFCQm5iSGxtQUFBUnRBQUFUZjBBQUkrb3pZVnlmbWhsWVdRQUFGKzBBQUFBTVFBQUFEWUZyd3VjYUdobFlRQUFYK2dBQUFBZ0FBQUFKQTdCQjNwb2JYUjRBQUJnQ0FBQUFsRUFBQU9pdG1rNnJHeHZZMkVBQUdKY0FBQUJ5Z0FBQWRRTnBqSGNiV0Y0Y0FBQVpDZ0FBQUFnQUFBQUlBSUdBVDV1WVcxbEFBQmtTQUFBQVhrQUFBT01WMDk5N0hCdmMzUUFBR1hFQUFBQjZRQUFBdHVNRDN0b2NISmxjQUFBWjdBQUFBQ3hBQUFCTFJNVkg5cDNaV0ptQUFCb1pBQUFBQVlBQUFBR01BVlRVQUFBQUFFQUFBQUF6RDJpendBQUFBQy92elYyQUFBQUFNOTE0SVI0Mm1OZ1pHQmc0QU5pTFFZUVlHSmdZV0JrcUFIaVdvWjZJSytCNFFtUS9aVGhCVmdHSk04QUFGN3JCUFlBQUFCNDJyMVpTMndyWnhuOVpzWWV2OStQT0w2T2s1dnJlNnVVRnRRYktLWGdpZ1d0MGx1MWdyU1VVa0pWcE9JTkNCSEVvcEkzRkRDUERWWjVxZ1lLaTBqdEtoS0l4ZTJtdFBYYUVnc2doZHU3c0ZBbEZoR0x1L0NDUllmem5Sazc0OFNPblRqQ1I3Ykg5c3ovK1A3L25POThZekZFSkNwVnVVZU1yMy9sMjkrUXNBVHdqVGlPNkMvRzE3NzZMZjFPM0UvNHpjUzdMVm5yVHZpRnhGcjZ4dElOTWEwLzZqWG04K2J2Y2VaVi9MN3FIRHBONTZiVHhiUGo3T0c0NGRSeHZNZlh1dE4zYmpudk93ZDQxK2NoWGcrY2preDVPSnU0cm8rMk9rQUR4eTErMjhBMU8yUG5hVXRkZkxzdmVSenRUV2lwN3o5ejdKZkRLWDMzSi8rS1B0ejNBejJlMU5leDgzc3p6L2l2TThEWUJ6Z2FUQnZOMlBrRFBYZnNtK1pvZG4yTjJPbXpHNy8rNkpnejZnMlBOWnI2emN3NDhSeGRiNzcyUnkwMDNEaGo1YnJPempCcVIxZU10K0gwOU5yUkhIcTZKL0RaeFA2OENwaHlEUWpJWFlBdDF3RmJQZ3JZOGlNZ0lDOER0dnhNZm9YWFZ3QmJmZ2ZZdU81ZUNRSnB0QlBGYXdLSVNRcW9TUWFveVRvUXhYdE4xdGlITFhjRE5xNjdGM3ZlMzlQOWdDa2ZCeXg1QUFqS0o0Q1FQQWlFNVpQQXVud0tpRWdkdUNLUEFobjVBcENWWjRDY2ZCSEl5N05BUVhhQW9ud1RTTXRMOGtQMHJqTVpuME5IZm90ZVhnVWk4aVpRbExlQW9yd04yTklGSXZKM09VQUw3d0kxK1lmOEU4ZTNnSnE4QjZ6SWJhQW0vd0xTOHI3OEcrTXgwSGNORWIyR1NGN0h2RjZTNzhyMzVQdlNraCtnLzVmUi84L2xGL0pMak9JVlJOQU1OTWp2TzVhTnZqYW03NEpGSHRoblRiQlMxYUtGOTk3QzdhRU4zVytqZlRSWXRNMEpqQU5UOGV5Zk54NStQcHdZKzRuZTVtcHhrdXBCVmFDNmd3dFpwWU5oT3g1UFcxaXhYVUQxdVl1MU84QTMrempTNzl2NDFPYUs3cy9TUWpjWHVETTRxUXplT1RkMWRpTU5QemlhcTdNNXJtSDh0SVZSaWJQNndRQkhYV2NWU25TbzE2S1ZRNHhLZGFxdG43eE0wa2EvR05jSGV6aS9EbjVzZ05NR09PNCtiSERiQk1OVlJWTGdRQVI4VUMxSlVVdXVVVXRVWDlKZ215cEtrSXFTcEtLNHFwV2hvbVNvS0JZVkpVTkZ5VkJMREdwSmpWb1NvNWJFcVNWUmFrbENQZ1BrNVJIWkFtOVZVWXB5QXlqSU5sQ1FwNEFDTldhSkdsT2l4aXhUWThyeUplQVNsYVpDcFVuSmk4QUs5Y2FrM21Tb054bnFUWVo2VTZQZUpPUTFJQyt2QXdYNUExQ1FONEFDZGFoQ0hhcFFoekx5RGxDZ0dpWGtyL0kzdEsrYWxLSW1CYWxKS1dwU2tKcDBsWm9VcENhbHFFbEZlb3NOeE9qRDhoRW96cDRxamhXd3JpUFdkMk9OOHR4aEcvQU9IU2VLMWR6RzZyYmNkYitRZmUzUGhRMnZ0eTN1U3MxYm05T1lldVorT2tPZU9vMHpYTlduSmtCbG5Oc2ovdm5lTWM2dXo5a2N6cStSdzFmcW1QcVB3K2xqbUUvcmxQVVhtaGNhZnIyZ1IxQTBuVzMyVmNkTzJOQ2R3TDJ4eTIvM2dRNmVBenJHSGoxakc1L1ZYVFJjbitKWHNpTjk4ZkpRNjJpTlpqdTdHYVB2RHAzUktJcnpSc2VFQXFsYWhHVVRNT1JqZ0VYL0VhQm0yTlNNTVBtcTZsU25Pb1dwVHE3VENWT2RES3BUaHVxVXB6cGx3TTRxdklhcVU0THFaRkdkTFBhWHBEcFpWQ2UzdjFYMkY2QTZCYWxPTnRVcFJYVUtVWjJ5VktjYzFXbWQ2cFNUejhybjRJQlVvM0x5SkhDRlNwV1R6d05YNUdsZ21hcFZwbXB0VUxVdVViVXFWSzBWcWxaVnZneGNvWGFGcVYxNWFsZUMybVZSdXl4cWwwWFZDbEcxc2xTdEhGVXJSOVhLVWJXcVZLMHFWY3VpYXVXb1dpR3FWcDZxRmFacVphaGFZYXBXaG5xVm9WNkZxVmZyaUdzVTBkckVxdHlQNkR5QWRmaTEvQVpyWVZvVjFTN2pMOFlkdExwR2J1MHJzODd0RWpxZWcxWTlxck9xMG9xcXBiNkdsVkdIM093eHIzVjRUbzljYmg5eGhqdXg2OStKMDMzOGNXVnlPWUNXbTFxbDBVMGNrR09xalQyK3FnYjE2REs2eXJxVHZ2NG9YL3Zya3NsMTBuSE91WFVOdUxpRlB2T1l0M0krN3lqN3Q4QjcxZWtXME1BekNxMitpZGU5VWM5TmpyeEhYdTlPYzBoK3Z1SlpIeXFaeDBQWDR4dmMrUmIzdk92SGc5dzVRWnh4SDFrWDl2bUFvdWNEbEdtclpKcHhvcklJbmFnc3FtU2F5ZjRzOGlwR1hzWEpxd1I1RlNldmt1UlZuTHhLa2xkeDhpcEpYcVhJcXpSNWxTR3ZzdVJWanJ6S2sxY0Y4aXBKUmhYSktHTkM5YUZjaXBGTGNYSXBUaTdGeWFVQ3VWVHdLaEhsVXB3c0tucFozODMzYnFaWHpxZ1dhU3dmUkFSZlJlUk0reTFsU3VCUHdTY3d2c3RVeDg1UWZSZFQzWVZiUU1ZSG4xYVJVYzZaQWJ6ZHRzMU0xS0lyUGlQL1IvdHdsejY3ZFVINXRBNStiTXpiR3M3c0lBNVJIZitFZXVqbVloWGFHU1BwcXd6QTh0RzlINjAxWm5zSWpMYXBIbUFoRFc0dUZIZDFKS3ZxUkthNXo5TzFjVjcvZXNwalczWlI0emZ4YkUyc0hGVlRXcXc4MnpqYXhIT2lHNFBpZHVibVdHTmlKT3R1MWhnNXJhYXZoN24ySmpKQWUvTCttK051WE52ZFYrb2t6MUQ5NjlrbVBJdHF2VVZ2NVdwOW1pb2ZwVjZiOGpCZ1E3VWZ3VmxiUU15bjNVbDVERERsQ1NCREhUY1I0eWR4dmlwNFVsNEFJbFRrdEU5NUl6N2x0ZVhQZ0t1Mk1hcHRtaFZWaUE0d0FKVHBBMjJPY29rKzBNYTFjWXhiUjF4a2pzcHkxR3ZNVVZuV3FrSG1xQ1R2czVXWnFReTVDNTZzekh4bHlJZmtIaHhyMWtxaFFyc1B4NXE3REhyVE1qT1k2MURMekdPWFBNZW9EclhDYkJabTlvelFOK1k5MzZoM3lBcnlhV0NaV2E3S0dGWGxjV0NGZTdIS3VGU1p0WEx5UExCTUgyZ3pSbXZNV2tsbUxVTitMRDlGNzVxN0RPWXVnODY0NG5sQ2pXT1ZjYXd5anE0RE5CakhxczhCcnRFQjJzeGdXVHBBbTNrc3l5aXZNcHRsNlFOdFhGM0ZqQkxlK3RleCtnOXpIbzlpRm85aGhYVjlkWFdmd3FxK2lOVjhIYjIvZ2RWN2h6MjlKMmJvUDVyL2JMRi9ncGhjODFpeERaM3F1N3VOaXFVdXA4ZHF0NnQzdFhsZlkrY2tNOC8vTUxabVowUHlzamxQdHByL1R0SmNXWGdBUjlmRis4NjArMmZxZStlcHVIM2ZiRS9TV2UwQjBkMmJOY2ZqNDhZSTl5YU9xenZENmM2Wk85V056MUpiWjJ1Ky94eTgrNkduNW9wUjlYdVVhNXVUeHNxMlp0MExhQjNQYTFvM1RHdnJ6T05xbjNaWGsvZDh1L3dIYW45NnJJLzlDOVFhci9oSC8yS2MrODd4b3ZkQ0ZyOFBQb3VoakJQejRDbFJhc2hGUC9yeS8zaHNYbUQwT2hkNlY2c0R4VGVSbnpWWFc4elNGdko1RExra0J5U1F5Y3JJYkJVZ3dad1prNGVBTkd1OEFHdThJR3M4bXpWZWlEVmVtRFZlaE5reXhSb3Z5aG92Sk04QmFma09ZTEJ5aTdKeWl6TFhXY3h5MXVqK2RvSE9ZWjFqS3RBdFZPZ1dMdE10Vkx6eDVRSDFGTXVqc2FxTHFOSkZMTkUvbE9nY1N2UU1sK2dXU3ZRSkpkOGQ3MkdscTk0Z3dIbXUwQnZrbUVkdE9xY1FYWUZOVjFDa0szRGRrczBvbEJtRk1PY2Y0ZnlqbkhtTVBxRkFuM0NaUG1HSlBxRkVoMUNpUXlqUklaaDBDRGs2QkpzT3dmYWNsa1lxeGtqRjZCWktkQXZ1ZjI0NTV2RExqR0NCYnFIQ09CYm9GaXIwQ1JYNmhBSnIzeERkUWhDamkvRnVYQTRqcjJDK0QyRTluOFlNbnNING44VzY3V0M5bnNNNnZZbGV0ZTEzMmVvdHVmMC95ejFzWHdCNDJvMlV6MG9jUVJER3YrcnUzUmdKSVZsM1pwZUp5QkFraUlRbGVQSUJGaFpSRUpkRWM5MGttQVNXamZnSHhLQmVQUGdFbm4wQThRbDhBSThlUWc3aVNURG1FU1FYVTEzVHUrbVo3TWdjcHJ1bitOWFhYL1ZVRHdqQUtDYnhIdFR0YlBZd0FzTVIzTi9MVEZEUU1LdnJuWStJdWw4L2QvRHkyL3FuSHFZMnR0WTIwR0JDQ1dXZmhOY3U2eEdlWVFwdk1Jc3ZXTU0yeWh4L3pLc2puT0dhUnFoQmIybUhqaVZPZEpwbzBMbThCL1NUN2xTa21xcW5qdFdGK3FOajNkU3Ira0NmNmgvNnprUm0xbnd3aCtiRVhDVzdtc3RrTHBVVG5kS00rTkNvSWtMc0hKWjRKSTdZc1NKalVJaXE1VkpoSWNyWENuT3BvQkRsYTcwbzVDdWZxaGVpb2d5VnFGY2NVeDU4K3dwMnNZZDkvdkpQbU5yQkpyYWtHNnBjV1NoNTlVd2VvY2swWVF6anN2Y3dvcDBpbExpenA1QldzZVB6QW1SN0tEbU9WNjZxMXg2NzRsSC9UbjZlTXpUSFlreExqcTgrTCt0c2x0MmhqZ2wzaHBNdXZ1eHBWdDErMnAyMmZZODkzZVVNWld1YitLKzJGZmNsK251RzdJSDREc0pGVzE2WFZYTk91elc0RmNNOEw2VVVFajdQczgrMmNqMjNCcDZEQnp5SEJUeUhPWjdmcFJRZTl1eXpSVHlIS2FYcFRPOG83b0l4anRTa3BuN3ZETmZzZDA0MnA4R1AvUitQY2syMm4zK3p3aHdXY1N2ekFuNXh4aUp1ZUZ3UWZrNTZXREVmODFqR1U3NlJtbk1EdnB0MnJzbE4zUitzRmZzSWhWZm80cnRFbW1qL0JlRUxTR2tBZU5wallHS2V6QlRCd01yQXdqcUwxWmlCZ1ZFZVFqTmZaRWhqV3NYQXdNVEF5c1lNb2xnYUdCaldCekE4K00wQUJiazV4Y1VNQ2d5OHYxbllndjRGTVRDdzZ6TWVVR0Jnbk8wTGxHTyt5eG9HcEJRWVdBRFZqUkFTQUFCNDJtTmdZR0JtZ0dBWkJrWUdFSGdDNURHQytTd01KNEMwSG9NQ2tNVUhaUEV5MURGc1lmalBHTXhZd1hTTTZZNENsNEtJZ3BTQ25JS1NncHFDdm9LVlFyekNHa1VsMVQrL1dmNy9CNXZFQzlTNWdHRWJZeEJVUFlPQ2dJS0VnZ3hVdlNWY1BTTlFQZVAvci84Zi96LzAvK0QvL1AvZWYvLzlmZm5nMklPREQvWTkyUHRnMTRQdEQ5WS9XUGFnNllIWi9ZTzNYckErZ2JxVEJNREl4Z0RYeE1nRUpKalFGUUNEZ0lXVmpaMkRrNHViaDVlUFgwQlFTRmhFVkV4Y1FsSktXa1pXVGw1QlVVbFpSVlZOWFVOVFMxdEhWMC9md05ESTJNVFV6TnpDMHNyYXh0Yk8zc0hSeWRuRjFjM2R3OVBMMjhmWHp6OGdNQ2c0SkRRc1BDSXlLam9tTmk0K0laR2h0YTJqYTlMMHVZc1dMbDY2Wk5tS1ZTdFhyMW0zZHYyR1RWczJiOTIrYmZldVBYc1ppbEpTTSsrVUx5aklmbHlXeGRBK2s2R1lnU0VkNHJxY2FvYmxPeHVTODBEczNKcTdTWTB0MHc0ZXVuTDE1cTFyMTNjd0hEak04T2orZzZmUEdDcHUzR1pvN203cTZlenJuOUE3WlNyRDVObHpaakVjT1ZvSTFGUUp4QUJ1REkwWEFBQUFBQUFEM1FWV0FOTUJDZ0NhQUt3QXNBQzZBTDhBendEWEFKUUExd0VNQU5jQTNRRGhBUEFBOWdFS0FNOEF2UURJQUxRQXhRQkVCUkY0MmwxUnUwNWJRUkRkRFE4RGdjVFlJRG5hRkxPWmtNWjdvUVVKeE5XTlltUTdoZVVJYVRkeWtZdHhBUjlBZ1VRTjJxOFpvS0drU0pzR0lSZElmRUkrSVJJemE0aWlORHM3czNQT21UTkx5cEdxZCtscnoxUG5KSkRDM1FiTk52MU9TTFd6QVBlazYrdU5qTFNEQjFwc1p2VEtkZnYrQ3dhYjBaUTdhZ0RsUFc4cER4bE5PNEZhdEtmKzBmd0todnY4SC9NN0dMUTAwL1RVT2ducElRVG1tM0ZMZys4WnpickxEL3FDMWVGaU1EQ2ttS2JpTGorbVV2NjNOT2RxeTdDMWtkRzhnek1SK2NrMFFGTnJiUVNhL3RRaDFmTnhGRXVReTZheE5waVlzdjRrRThHRnlYUlZVN1hNK05yQlhiS3o2R0NES3MyQkI5akRWbmtNSGc0UEpoVFN0eVRLTEEwUjltS3J4QWdSa3h3S09lWGN5ZjZrUVBsSUVzYThTVW83NDRhMUJzYVIxOENnTmsrei96eWJUVzF2SGNMNFdSekJkNzhaU3pyNHlJYmFHQkZpTzJJcGdBbEVRa1pWK1lZYXo3MHNCdVJTKzg5QWxJRGw4WTkvblFpMDd0aEVQSmUxZFE0eFZnaDZmdHZjOHN1S3UxYTV6b3RDZDIrcWFxalNLYzM3WHM2K3h3T2VIZ3ZEUVdQQm04Lzcva3FCK2p3c3JqUm9EZ1JEZWpkNi82SzE2b2lydkJjK3NpZlR2N0ZhQUFBQUFBRUFBZi8vQUE5NDJzVzlDV0FVVmJZd1hMZXExL1NTcmw3UzJaTk9KK21Fa0RUcFR0STBJU3hoRlVKQUNHRVpSRUFFUk1NaXV3aklJQU1ZMlZ3Uk4wWVp4c0ZscWpvdEtLTUk3cnZqTU1JNGp1UG9qRXQ4T1BKODZuTXdLYjV6N3EzcWRFSkE1bnZ2KzMreHU2dXFPMVhubm52dTJjKzVITThONXpoK3JuNHlKM0JHcmtJbVhIQmd6S2pML0Nva0cvUi9HUmdUZURqa1pBRXY2L0Z5ekdqSTZoZ1lJM2c5TFByRUlwL29HODduSzRWa2o3SkFQL25zbzhOMWIzRndTNjdsM0dteVRkL01tVGtiTjRXTG1UaXVUQlowN2JFVW5pc2prajBvY1NlbGxKQ3N0N2ZqUzdLRTJxeDZ6bFFXdDNtNGNib3l5UmFNVyttUm5FcktaS3ROZExZSlJoTmY2STF5Y29vZ09pVnJ0RjlscEtvbWxPWnhHd3FLWFQ3QjN6SjUrYVJKeXllbkVFUFJrYlhScHFab2JWT1RQcTJqa2FQd3pCRjgvQ1A2aFp5VlMrZVdjekF3cmt4S0RjY3RPczRJajBzTEVTa0RZWklOenZhMkZBTkNZdkZ3cWZDVkpSaFBZVWNHaDJ3RFlKendpelNuRFg3aFpkZTl3WGdhUFpJejRlc1VDMEFuUkdVdkI1K3BVY2twU280bzE2L1NWVlVUcHRDbUVqOWZwRUtPeDNOR2hjSWpDNTNPT2FOSjA4aDU3RWozVFhqRWlMRGppK3RheUJQK3JrTVlSNERqZEhIQWF4YVhCM01YeXdTOFNwNXd6SWpqc1lSamVnSjROdHZDWVZsbmJaZFRjME9oT0VjeTliWXlXY3lHaXh4Y2RIbERNTnI4b093alpRaFhKT3p5d3lzczBKZlJUMTkrRjc3d3EwRDV1MnZmTFh0djFjTXIzMW01ZjgyN3BlK3RlNy84ZzFVUHIvNzlxdjFyVHJ4MTQ5dGszZzZ5YUFlWnArekYxdzdsdGgzc2lGNUgzQXZjbUhOaDNSWkRFVmZDQmJrYTdqNHVGa0NvQ3dGR1M3dlVMeFFMNkZMSzJvWUVpczFsTVFlT3d4V1d5NFYyS1QwVWM1VGpOdzdSRERRVENVcTJrM0twcTEwcWRjakZwQ3ltYy9RTndmaUtQSnhYVnhaenB2ZURNNm5JSVlkaEZ2SmM3WEovK0N3RnlwRklWTTRMaTA0NXpSTUY4dEVGNEJJWGxjckZROFNXbHRjM1hBTlVKVG1ja2dkSWFqREpKVjZ4d2xCZFZST3BEbnZTdk1iaWdKaXI4N2p0dk5IanJ5NTB1ZE84b3AyUVFhUzZxamd3Wmt1ZHZLQ3E4Y3JoSThxeVRyKzQvN3NEVzVic2I3ajJwdkUxMVFzZlg3SmYrZURhSzMvV1BKZk12T3FxZWJPT0h4aysxMEcyMjd6RkpYVWpaL1ovOEVQeDJlZXlIb3d0OFNrUHVQM0RMOTh3ZnNLdHk4YWtQUDEwbW5DNi84aHNVbStaM3JITHZxQitTR011NGxEUFJjOTlyajhPOUd2aHZERDNSWURKaDdoWU91QXhWb2hMcTlUYUhzc0EzRkhDbGozVzluaEZYcUVBMDE0Qmg2bG1lcGhxYlNkU1A2UnlYRnVBTThucWtKMmtMRzVnWjBEZjJYQld6TTZLSFhJWm5Qbm9tVnlKaEcrRlZXZ1cwck1BWDNKWnNlaDhNaU0zejErWVNSZGxSVG9nT05zWGpjcWVWRGd5Y05Gb0VzMzdDNG9qN3JSd3FBYXc1aTh3dUVqWVRLcHE4dkdyZlB5R2ZsRmdpRDU3OTU1bm5yMzdycVA3NWpWT21EOS9RdU84b0hCTmE4ZWRaT3V6cE9MWm84b2ZqOTQvZjkrOGVmdm02N3kzSFQ5MisrN2p4M2RQVzdKazJ2VHJyLzl4cDc3NTdFRVN2ZjM0Y1haNThlSnAwNWN0WS9SWEI3Z3pBTzRDWEpnYndsM1B4ZklRYjM3RVc1bUJzU1I1a0I2UU01U3lnQkt4dmMxWUFpeEFycksxU3lVT3VSWUdiL08weS9Yd1dWVUNvOU5YUnFOU3JSaFA4WmVWdTVCNmJFN1o2MFBpS3NzRDR2SkZwVUhpazV6UmxsMkp0SVY0R01SSGlxdFZiTmdGWTVvM3pWc1Q4UnJnd0ZjY0FQUlU4QlEva2VKQWNjQk9YRzd2SUlHaHFxNWk2dXo2V1g5OGNOZXgwdWpWallPampST3JKNGVlYUZxdzZ3YmxzNUhoUi84NDQ0SFZJLzdST25mRnF1dHJtdXZIWFA3TThKcXhJL3pqQm82NGtyUTByTDl5aE8reGpkdWV1blBqd1BtalJwZmxUcGgrZFhUOUx5ZTh2T1B1RmZYVnUwSlgzcjNrdXB0bXJ4NTUxYXpLNWZ5azVsV1o1YlVqK3d3YU5RdHdScEJma2liS0wrc1p0MVJaSlFIV3JQTEppL0JLMmQ3RkNYdnl2aTUrbDh6bDhKbk55Z0xlcVY4THozUng5RG5rcEd5RTU5Z3BvNnB4T0FGanZNZnRoRVhaL0t2Yk5yZk1tMy9kNXR2T2tqUGtiL0xjMTVUdDdaOHAyMTZlTDNNVS9pSmxBZmtvK1Y0cEoyVmQ0bDR1YjQzVHdRZU1hVTZQbXkvYXZIdi8vdDJicjUwM1QzbG52a3crSWY4a0g4dHpYMWUyZi9HWmNndmVxMWJnK1ZiQWhRZ2NMS1pIWEtTcXVIQUdwZFNUa2k0VXQ2c2lJaVM3Vks0YWlIZ0RZV1BFYS9RYUExNS94Rmo3eGhzRGpxVXN0UnlQdnZWVzlMaGxhY294NFowRjE4eFo5K21uNitaY3MyRE9EWjkrZWdOOUZ2ZVM4SnJ1ZGxqbmt6bUpDMHJHc0V5czdaSStGT01JOGtJdUJiZ2s0ZkNRQ01nV3JUZzBpUS9Geld6ZDZrSXhjd3ArYlRiQ0wxUE1lSmpDbWN0UWRpRmcxVDRSQkxmSEovckZXckoyRDFtcmJON0RMOTVHN2xXdTNxWTBrNE1BUTR0eWh0eEZUSnlESytkaXFacmtObklvdVVVNkt3WVEyL2dDN2dIYUFTeDR5UUJrWHFOTnN6RXdpRVNBcWxzdUgxQS9ZOEdVT2VFcFpxczNQUHo2aVhPYjV6ODlhSHp1a3JBQngxcEhidWRMK1FaWW9RVTRWcG1ZMnZGRkpGMVE1b0QzQ0hiT0RMU2sxd0QzMUpIVDVQYW5uOGEvYlRuWFRsb0JSak5YbXFSZGFBZEVTcUZVcXFvWHNvWGVva3RmQUYxaE12elAxSVFwVStCKzNMbFQvR2I5Qm9BbGpVTUFrRXZ5ZHB4bDlma2VFaWJrMDMxS1ZxbitrYk5UcVU3UmZPNXozVjZnQ3kvQUFMTFlpUS9QRWRwakJtUW9BUUdnNkVPaHlBQ1psZUdRQzFDVEFia0ViRlV1eUFBMjRqUWd5d2prd0tGVjVaZURoSEFvVjBBZUFUeEJxSEhuOHVIUUlMNjZxb0l2c0pQbVFQTzZwNWNzZm1wZGN3Q09ubHE4NUdrNCt0WTNZdlhsRTFZUDkrV1BXUFhRNmhIOHdZV3ZITjV5K2VWYkRyK3k4SnBYRDIrYk9ISGI0VmZmZWZQUjdSTW1iSDkwM3Z4SFc4ZVBiMFg4QVF2azE0QWVZUUJaRXRNaFB5UlVNek1HSmQxSldZQ1ZZaUtJU2lvK0VmMGtEQlJqekNQYjNqM3prZkFhMlg3Mm9NNzNKVnRyVGFDVERBYzg1SElOWE15QldMQUJGcWdreWhiYTIzSWRnZ251bkJlVTB1bDZqcVVia1NqVEhVQ1UrVWhBTmdjOFJZeEt1YUpzVEFmT21vM3lHUjVaVXdqSUlKUmhBc0ZXRDlJREhvaS93TmcwbFZqdjJ2S1hXL3JQdXZleEZmd1ZIUVczSHpreWY3SnZ6S0w2diszVzdieDJ5Y3puTjQyOSs5YjdkMDg5Y1hUSjdudXZYWHBsYVBqc1BnOHhXQ3RoenFJQWF4bXNyMWdwd3FvVG1PaVVYVUo3M0c0dXpRQlJhY2ZKNnd1cjc2UmM3R3lYeFB5VG9wd05PQ2xIY00yQUZGaU54VkVBMVM0aXQzYzVZNTYwN0doVVZTQ29uUE1WR0t0UjRpRVh4L1VRRGpFdEFtZFg1eThvck54VS8zckw1ajNLdTh0THZKdHYybnYvcXJmdnZLR3A0K0dQaUsxcXlyeWFxbXRuMXltZi84Zmp5cmN2M1Q5dTJ2Vlh2cUI3bjU4ZXYzclBuVmN0ZitrMzlVc2JLczJHaXZIcng4b2YzUWgwR0FYOEw0UzVUQUZkZXlvWE0rTnM4c2ltT0l1WnR3RkxBTVVQOUNsRGlDcmU1cE9TTlNTYllGaENLR2FpL01Ga0FGWmhObEd1Z2F3aUZZZHA0ZWpjUzd3bzJYQTJxZ2x3RG84ZnFBQ1UvaWhmU2NZY092UzFNb3ZzSTlYSGhWa2RzUlBLRzZUNkJMK0s0WGtGNEJucEt4dTE3U3k2TEFIUE5zU3pBL0RzTm1mWkFNL3VGTUJ6VGxDeW5wUkZJQXpSaWlDSXFlWXlTWFRJQmlEQWRGZ3Z1ZkFwZ3U0QnF4Z3diaERiQkxNN2l5b2RRaFpUNWN4aUc3RlkwMUVTdTVHU2NCb1Myb1l4UU5rZHpnQVNrODZmdjJKYjZ6ODIzSFBudXNmWEh4UTJkQzZKUEhURnloZHZWRDc4WEhubXlJSDl0eXhvMmJ5aWtqOTdRbGtWcnIvNnphMS82RXlzOVkxQU4vbGNCYmRZSFZFeGpBakZnV3lCRWJuNlpxR2E3Y0lSQmVteWR3Q0tmU0hKNFpCTFlRUmVHRWsvMUVpQjJOc3NlaGVPUVBLS3NzbUlUS0F2cUZNU1hIQ0pNdWVBVVZxY2tpa3E2VVhKcUtvUDRaRFhpTVJ2SnpsRUc0cWRJSlB3NWdvSnhhcTU4WTR2ZHAyNWU5R0FUVE1XSDVoVTlmcVM5Vy9kdFBhTE8xY2MzVGcxOEwyK2VQaUtzZXZ2ZUhEVmxGL3lCKzlVanJYY0hhOGR1UDZOR3dMamxzOTU2OWIxdjE4MzV1Znh0eU8xMTgwZWNQdlBWcTFyWnZNWUFkcHlVRDVSQUxKUDR4TklUOGdya0Vsd1lEVlNRYzk0TlBHUmlQQis1eG5sQjE2bjIzVGl3SThUZEp1QXF5TCtGZ1ArY2tDbTFISFhxaGowQVFhdGVMK0JlTDlCRkcyNXdDMXpIVklGcmpuUU1DUkRVSzV3NGlXNWtLRlJpdUpYSXVCek1GeUlWb2pPUTFaM1pwYXZWS0JFTWRBSG1pbG5FTDJsVmFyeVZST3BBSFdkc2xZZXBSUERYWDRGMFhUU0NqNWdGMXp1WElHcFhZREhKelp2dUgvQTdKOXZIenZ6aWR1bVByQmg4Mi92K0ZMNTVEOXUrM2JmNnBVUEQ1clZYRlRjUEhOUVdxRC8yTnFjUU1QVXlLNS83Q0t6MWg3cFcvTFFtakZySnZiUDZETng1OC9XUEZUUzk4amFWVTgwTlQxeDE3U0YxMDZ0bkZTWm85Zm5WRTdrS3dvSGxlUTU5SWIwc3RIbHpiTm5NL3Qwd3JsMjNWcDlDMkM1a2x1cVNsMlB4a1dEUUY5NXhhbW94T2NoZllVb292eUFGYjhEalU2cE5DU2JnVDJoNWVPSHlZREZCRFNVS2JhbGVvUThpaFJVeXBIRjVvbVNNeW9WTzJQbVRPUlhVbEJrckxhSzY1STdnUWl5TUpRNkFVcGhLcG9pRmNDMkRCTkkrdDhvT1ZWZXRlUEY1Zis4ZDhtQW4xOHhiY2Zrdm56bzlldlh2N25obXdmWFRIbXdXcGZSYjlqY3V2VjNDQSs5UUV4ak5zYmZYcjdxai9KTm8vWWNxaHM0N3VjUE5HZFpHNWJOZnZPTzFUZE9IUk5zYmg0VXVJMzZDMENlQzZkQm5ydkF0dW1TNkRZMGFKMG8wZDFKUGdNcGxia09QRDNrdXRoVHduZVg4MEoyN2VUSnRYRENjTjZpZkUvdWdtZUtYQVpYemNVOCtLZ01IZHc4eUhTSVRQcEVaMGhUZDZTMGtKelZUZU9KOU5SNGloMElBUUNRcFBxWXNzSWptbFkyVFY2K0tjb1VvQW01aThPNnkvajNsemMxTFo5TWRiNm5RT2ZiRDJ1TUF5N3JNUk5QcmJDak00My9rcDkxSDNsa3YvS1lFanVBOE5hUy9jSnJRcHo2YWpLWnhnU3FJU2hMZXJUc1RFSFpuTkNVQ0x6Z0poM1hDenZJL3RaV3NtWGJOcmFlazU0VnFUWVRlRnd0ZjdyVExleDQ2Z0JwSkUzN2xhbjNVZHhrbldzWDFzQjZ6UVBkNW1vdVZvTHo0ZGVwOUppajZqYnVrMUorU0xhRGFWUUUyTEZUV3BRTnFvcGpkNHZPdU9ETThRZVEweFhCaWtYWm51bVVMRUNQT1g2UW9RWm5IdEtnb05JZ3NqVTBqL1FlTjlyZHVHSVpBM2NsWmpXcjhmTnRSejhwR1RxdWNXaEp1dWZRNk9Help3K2ZPL09KeFhjMzR6dzM2L2JOdmlhK2ZkQ0N5d2JYVkEwdHlxeXlEeHB4M1lqRmw5VlBEQTVwMnRXeFF0UDJjSHlqenkzVm45Vm5nVDA0anZzVUxFS1lleWsvM0phYWwyVXZrOGZxMjZXNllMeS9sU3IxUUhpMnNEd2NyaFdIcElwZ1hFY3ZFNm1SS29saHB2bUhIYklYQmozVTB5NE5aWmF6aVZsQzQyRjUxbVFlR2ZUWnQzMDVUMW1LbEZkaGwwWWQwOHY1YWYreVM3NWowaWhIVys2b1BGZFoyMmg4ajhGNy9pMzV0L2dOZGxqRFVtNlVhOHYxalJwZEFmK1JKM1B6OHRYamlncHBTQ2FSeTRhS3pzTTJuVHVyb245dEhWM243djZ3K2dmVWdoaytkamp3UmM3azlaZUZSWlVQT2tHZjBqbFJDd0ZDRFJKYzNJaGxSTHMzRWhZTUhsem51TzQ1WDRFT0xTM1VQc0htQW0yRkwySTh3SVV5eURENkgyVFZINTRqcGZlUFhMSjVlTlBWSmo2eWYrcHRqMjU1ZjlXTXpmNjA0NHQxd2FMOEVVTkxsVmNVWlpmeXpVc3JwOXp6cDNVdnk2V3ZmbkpZT2ZrSWVYWHVsRWszbDFjN3J4eTErVEQ1OWhSWitlZkhsWTkrdStxRlZZTm4xTnNiWno1Nzk5YlRXeWZXcitqODFwM1JMMVRjdVAxblA1REk2bGVVNzdhdi91TTkwNWJWYmp4SWl0K1oxakt0bnZEOXhqSmZJNml2K2xrZ280eWdBZlhsWWh4Nmw0UXdGVlJ4ZzRrandEWU5TTEdXb0d5bDhzb0V5emNGVUJJR1llVVRmSUxMSitqNERGTEdweXRuNW5adXYvb1JjdnA3Nms4d0tUK1FEL2hXV0hHN1FRNitDOCt3ZzdhZnoxM0ZuaUtuQW9lbThqQWZPSFM2bHo0cUhSL2xveHc2MVlsZUxDblZnVmFoYkFIUmxZMmlTdzhyQkkwQlY3YUlZcDZUdmNoUExGRXBYVVNwbisrVTlBaWM2R09zQmNXVndWL2tZMExlVjYwZDdPYjNIWDU3Mjl6Rjk3ejdqRkpIV21jdldqUmJXVUUyVHBzM2I1cXlRZC84MHQxcmYrTVJqOS80cTdkUFhEM3Q4a1VuWm84ZmR4WGpBU0NMOWFOQjFtUnpZZVpEa3AyYUptTVZtRUtHd0RQVmk1T3RUbGpJWUdsNTBqUTZRc1ZjeC9RUnp1UG1rREM4dksrZ3NKaHZYbnlNbU80NlJoeVQzZ2dmdWZZTjVWdGlmV1BoNzhKdnZhVHN1MHY1NGRoaS91QzlKT1h3L045c1d6aDFzZkxsbjk1VFBsOHlaWjd5K29MREpJWHhaTUN6ZmlyMUc3dTUvaXFXVXpRc3V4RTZENFV1QlZDYjRxRGVZV1E0YVFpb08wVmx5NGc2SUhRSDV3T3NvYXNPSVBYdEpoMG55TWlZc2tKNVh2bUdXSGY5cWVXYVU3Y3IzK2libjFCZWYxbDVWOWwwWXVON216YWYyTUJ3aFBNZEJUZ3MzREFWQ3JNR0JSZ01jVDBqS3owQ1pLVUFnZnlsdGpjMXpjMFcwS0o1UXlpa1d0M000bWF2M2NJam5hUDVnNTNOL0ZQNjVoUEt2aFB3NU83UE5JT0dSSi9aKy9OU2Vua2UyUG9TSDFMdDNLNm5KWjdGbnRRcHFmUC9xYjRKNWo4UE5WbE5nWld5ZzdKb0FSa1hsTDF3WmdxaWp4Z2ZaSGRSMXU0R1RHZUFqdTdPd0FlNjAyQ0FQcmprQmo0VnMraXBNcEdoYWJOcElreEVSbFEyQVlITG5CMzFXVTJUUmRySmQzVWpuV29nYWRHQU5oSGZ2UFE0TWQ1QnJuejVoZG9qTFl4Nlp2ODJyTXpudHl4UVBubjBaZVhJY2Y3Z0E4VHk1TlhLcDBzdm44Y0k2TExRaVJNS3YyTHpFMlFrdzZFK1F1ZHRzTW9Kakl3VFNQcHdYRWloV0JTNlpzMENXT1JEa3NXQm1pemdrL3FidERuREFBZGF2WURITS93clgzL2RDWlBUZVlJdlAzdVFiKzQ4bUpnenNoR2VKM0MrcERsVFBRalVqc2FYUG5ISDNXZVFzYkMvZFp6N1hCZ0RmMnREamNlcTJVaEdMVUppb0pQTWpESEJ5aXdkb3dnbVdjSzhnZnVoYjlXeGRPN202MjQrbzd6ejhacER5N1l0Rmg3cW1QSHhseW85bmFhNDZOY0RGN3B3ZHdUUUlWTTlYaGJNMFNnRGxmak13QitOT0hndktlMThqMjlXVGlrUk1PbzZWL0hiT3RkMWx2UDFPNVFHZU01R2poUGVnT2ZvTmU1THg4SHdZTkR3RUJNb3BRcDZJQnhqRjRJOUc4L3cwL1hOUDY3cldnT0dITGlYbFJ1cDNzdGdEaWRCemJ5UFZvRGE2c0Q3VUVja2VodU5hQ0h5T2lRL0hFZE1NRm1pYkNRNERKaEY0aWZpYmpLUnJDREx5TVF6eXN4NXlneDljMGV6Y1BEc1FWM2VqeC9qUzZXZlNyb0cxZWRMaHFTbmR5MDlzME1XMUtkYjBGRmlodm5oMFRvRk90Y3dhVkl4U1pDSzRPSGY4Ny83K3ZOT29NNk9SaUYyOXFEd2JrZFFzeTMxYjhCNlRPV3l1RkZjek1ZeFowUk1oMHN6QTRrMW0zcmRITEFTd1pvRVhpZWJnZWZsd0djYVdKT3lqWTQ2d3dXR0plSE1Kc3FsblE0cTdkT2NEcDR1TFpmYkdRNDVxNnRBOVBQTk1objgrdDFFOTlTQ0JVOHBIWGUvcmh3ZjhjT2JiNXc5KzhhYlA1Qy9rVHZJc0VQWC9rNDVxL3hCT2Z1N2F3L3h0cFBLRnlUOTVDbmlWYjVNOEdqZEk5VGY0RUx2Y0JlblFnK0syVUxYbUZuUVZIYktxaTBoalZ1ajhFTzFYWGFoZXpoWjBQbDlHYVJMdHYzc25hLysrYlp5SnhremIrUEdlY29oZmZOM2g1LzhUdUg0RTZ0bXpWbkZxWGlMVTd3NXdXcWFvbnFlMGpTODVTTUFmb28zRitETjVhRDRRcnloR1prRHlJclpIVHBrVzJaMGNIQU1sVlprVnZraTRORmk3bzVIandNOXVRWU5sZWpmcmVtSnpzTkxENnk2OTFtR3o0VlREajV5Y0VZUG5ONnRmUERLaHRiTkV4bFdTNCszSHR0MFNFTXN3eXZHOWxLNWRQUk9VZXF6TU9wRHJTSnVkMURVVXVkVVJrTEJjRkFGdzYyaUZqVndOMFpnckNsSUZBNDdWWFZRczBoQ3RaMDN3c3IySjZONzZ1di9IYm5pK2lGa2d2S2xjdUlNWUgzVHorY2oxcjk2YnVydTJYVXBuWjhUUmVINWQxZGZOWHNsWGFkUnNPZFhBZTRydU5sY3JGenpvN2tSMUV5QnVVREVrNERtZGltSHJkT0E2di9JRVpsYnlTZytxUU96dmFBY3JZT0FVMDd6SXJ5Wk90QTFPQ0o2cWRIZ0ZxVzBaSjlhaGJHNkNzUUgwenhBWGMwMVVvczFQN3AxM0Y4M2I5dFNNMlAxelp0V3o2Z2g3citTQVM5dUdmL080Z1hyNGRxbW0rRmFvT2tHK1ZybHdQRWprNjViM0ZneHZLekFGeGg0K2ZvSmozOTZQRForL0pWalMrc0NCUVVsUTVvMlhqN2l4dXNheXhrdlFyL2FYS3BYRHVCaWhtVGZoeVNFME9CQ0ZxMEgxcVkzSUd2VEMrYXltRUdQaHdiMG9uVlpZOGgrb3JveTVhb3p1azBuVHZ5NFRyZUo4VHBZOThockhGeUVpOWtwcjFQNXBtUU9VMWM3c2s1QW9VREZFeXFRNkhHWFRSZ0F0MU92TEVxQXRId3FDVURieWVkMmYvc2thWHp5VzFpN2YxVStVdDdsYzRSb3gxc0hqaDgvSUlRN1hsRitWTjRobFd4c21zNXNRTGxGeDhieFZHM3VjdXR3QnNyVDRDbFVFUGgweEVFZWdIK096aStVOTRCbFM3b0pLTWtJNk1TY3Naenk3TjJxSEROYmdHZHpOQjZwTTRURENiNU53RXdrekxObnRGTytqYlpSM2UrL1hraHRJd0ZzSS82WW5KTDJMNzFrT1hiaytmRFhNK2gxYzRWc1NURkpLY2Zzc3Q0TTMrbU9DVnlNMTZlZ1ZYU0lGM1I2YzRxbEltRVh3ZTJCL2szV0tNVVF3QjZtNE1PYm5WaElDc2w4am1UQmgxVlpjNDVUZmxDK084ZkJZRDdWWmVFTHVQSTNIWFlZa3dud001ekt6bUoxSlpyQzFLa0tlZ1RLVGlZeGVlVHp1aFRLNTgzMEVmUi9FeXdXSDhranM4aE00bFB5ZUU3NVdObW9iT1NmNGZjcVZ2SnQ1NExPZXQ3YjJhN05neGVlWTBJWmJldzJEMmJxZjBZSms0S1N4a2huQTZiRjJHMWFnTFIweEVWV2tsWEUxZm4xMXlDZG4rSkhkM3pjK1JvZndmdlBBQnFlUWVWWmhTcFBqUnFIRkpneVNaVkcyY2k4dmJDS05SMjZtdmlvTzg4emczK3FjN1R3VGVjdy9vMFhoR01uam5YVXFiSjZ1cktXbkFVZVFOY0hVMVd0N2VpV1VQMFJhQjRiN1Z5S0RuWFR1SjdHcHpDb2s4SWlaZXI2VUpYVjZXVGZPYmluc3Rid3pSMW5xMi9uTGlVbUE2TFZ2NDk4dWsrLzRleFVHdk5iUzE2aThJRE96b1lJOEFBNWN5bzh4cE93Y09NR0ZRSkhuTENRR1FuaWlRcVlvTGxSdkFBVktLYStJc0lCWVB1VVdkL28zN2pqWDBnYkFmNmdNSld1SFpGTGhFM29tcUZ4RXVLM2tBQnB1SitNM3Y5ZjMvSUgrY2M2bTloc3c1ak9uVDJYcGR0Mjdna1lrNWZEWjJGR0JnVVAzVGowRGhqck1PaDIvcmgwNHUySUE5MHljbHEvRjM1ZlJIOVBkTzFKcU5EQ1l6SVJSQlkwUVpTOFJmTDI2dmNxNzZOTW1RZzY1bkhoZTdCWnk3a2xhc1pBTnBKQm9iVTk1a0NQbDhVRTVrVlp0Z1BOQ3dTa2dxNVVuNjFkOGpua2RGeXBBYkJqdkxaMk9RZ25QcVI0RzBySmRMRk5iM0ZrVTdlREhoVjlZd1pUOUcwMG04TGU1YmhXM2ZBMTFNVW8rcXVwVjVGWHZZclZsSmRQSEhqMXlzSHZMcmxwL3NHMTB3K2NIYkZxWVVQZlAwVWVtVk8zZW03ZHFUVXpScTh2S2xvL2VzWWFFcHk0Y1d6eGh0c25YN1grem4zZW1nbHJ4M1V1YmhreXNtejhUUTBUNWxSWDdxbXN2Z3JIM0FxeWFTcmxxem5jRmFwK1F0bVMyOHpZYTh5QUE4ODB3Mmh6bWFzZVJzZUxJZXFzUnplTzJkRXU1NkczR1hVQ0EzSVMyYTNtODJTS2tobjBQT2J3UmhVVy9TY1lSdllYRkFjOG9pcXAwQmx2YkQxVmUrQ0tGNzc3N29XWkJ3WVU3UnE3L3A1NzFvL2RXUXdyVkJrL1NmbnM5SDhxWDB3ZXU0V1U5aC83MUcyN0RqZEU2WnFhQVBQMUdzeVhpeHVrUmhSdEFMU0E4SnJNVEtVQ2pjYmlVSlVvRzlqbWtpTXFtVkJsTWFTaTBCU1lWdVYwY0JnelFFQWNhYW9iWndMSisraUhUVHNtM0w3NXdJSE5PNXQyYlBuMkk1SktuaWRGMHNickR5bC9mWHJWWnBuNW9qL1haWFhoTHdYeFo5ZndaNlJjSGVISjZzS2Y2R2pIaUEzbFUxNmdGck9ONFM5RlJEM1lUdkdYd253Y1dlanRReUFOekI1RTV4UHF4NVFxTktJUUtWRk0rTzc0bGI4YWNPclVnRjlkZWZ5N0QrKzVhY3l1d3NKZFl6YnNKV2RPazh4SjQzbis3TUV0WXllVDlQKzg3YWx4L2NtVy91TU9hNzcwejNWbGdFTVBsOHRONDJJdUJOMXFCSzZIVUdjYjIrTnBacGNPeUQwTmN6N3lncEwzcEd6MHRNZThOQ3pwNVZoWVVqWjZBZlpVQjhKdWRURXNnNllJRkpDbWhpZXA1NHpMSVQ0NjV4RXZEb0J6K1NvRUJIM0RGenYvUXN5ZEJ0dUJYelRjV3pWbjdMc3JQbEgrOGhGZnp2dUh0SXhjdjR1YzJmRlZxM0xpZFBYeSt3WlViUi9aUVBKSmJjWFU4Y0VIa1FaeVlCQ2Y2aGR5Ym00Nmc1NUZsQzB3QklKK1NudFk1a3lvK0ZGbmlBdWovN0lUMXFzdEZITzZjQXhPQjJnaUxpY2V1bkE0MUR0aUFhbElTUmVkVEtpWGhHbENDcEJJZ1NHSHNNaGV6djZEMisrN3ZLbmk1bEd2dm5wSzhCK0pQSGk0ZVhOWjA4VElrWTRQQlQvRnJiSllsMFg1U1Y5dUVSZkxwYXdFeVlKb1pGRm1waDUwanhHUVcwNnBvd0NvbzBCMURnZFU2cWpBSURqeUVxZUxoU3FFVkU4dTVTVzVIb0RURlpYTFVJdmxzcUxVNkUwaWxtcFFlVEJNVVJ5SVVIZGxIWFZrOGs1SEYrVk0rT2JGbWZzSG5obzRlK3N0NHphOU9HM3UwamY2WHpVbFhQdXJtYzkvQzJSMDJjN2k0cDJYM1VUT2ZrVlNKNDNmMXRFOC81ZFhEY21vdi95K0RkbDFpeHVXanB0R2JHUzk4c25qRGYzSjlSRzBiN2NERndZZEFkYmtLRlVYU0FrbjhaRlVjOExVY2Rtb093R01EVFFLVTJ4MGxZTGVSbVVxSnh0U3hlNThJdzNZb2NpWWhiajlWUCtuV2g3Y2QrcnFPWTFiU3ZYTkNsOC9ZOS9lenVIODRzWFRHaUtkRFlEN1pVQWM2L1N6UUw1WnVLRXNSc0w4OFVaZGU4eE1PSllOQXV4QjcyN0hWNXRKVDB6d2VCdDFhUUNqeHl4S2c1Rm1VUUtEVUNNVkFzQ3liTnlTY2VPV1ZKL1M3Vi9VMkxpbzhjZUR3b2NkZmx4TDV5cVZ4ZlNaZHBEQjQ0QWo0ZVBTZEd5K1VRMFNjSnE5ekZsaGEyL3pHaHgyNEJQd2ZKUWNadEFnMjBRbmRSeWU1OE1RSXNrK2pHSk9CZWVkSVlQR0RtczhkZUNYRStjUUt3VkxPYlF2TW1teUx1M0hMeDg2bEcvd1VBZ3ByMnlGZVNtbE9scW91MytEcnZTRWg4UFc1ZUhROWU3aGFEMUZuaVFweWp6eWtQS05jdUpXTU5BUGtnK1ZJWjEvSjN0M0tkOXJ6eUp6THV6bkFSVGpxOHZQMDNxcXk4OERmMnZ3d1pyeGNRdFVIY3lSZ1Q0Tm9sS1FaQTNMT2JCcVBMQ2dDeExTRitqSXh4Wk5obzNtajRod2lJTEtENStaUGtwU1VnYVZSalFmRnBTQW5PVFJlWmhqdnllWndRSDliRDFWOHVUOGE3ZGxsais5Y05zZHB5WTBEVi92LzlNdmg2MHJGajdjSEprL2U5TG82KzY2czdPYTM5dzBjMXhOWndPL09kWlkzZG1nNHB5ajhpbDVMWkIvZnkyUXBMWGc2UWxrNjZuSTcxb2UrT1dwQmJNYnR2WUJpSVplc1g5djUyaCs0ZUtaZENtb1BINDB3S0g2VEtoNGQ1bFZIcDloWmo0VGxPeU9oTS9FS0hiNVROcDBnc1ZLcVJMZEpxRDlxdWszSko4R2gvbUVmc0pFK1lRMVg1TFFsMnRHYlR6KzJmR05vejdhdStubVBYdHUzZ1NDYU9lWDI3ZC91WFBoc3pzblRkcjU3TUpiamozWGVzdXpSNmtPb216Uk5hdndYWlVFbjVVeWFDdUhXVndKcktWM3dadUttb2dqUkczNk5GVVRvVUNuSmpRUmw1V2FmMmpUdzl3VE5mU3VZcEZwSW9FTVpqSTdWRDJrLzYrdmZQR2IvM3JoNkUxVWZ1N2RNR1pua2JKRjN3elNVL255RE9naEQzVXEvSUZvNDFPazhNbXgvYWtNYlFENHZWM3cyelQ0YlJSK0cyYWhkYkg4ekM3NGt6V0JOSlhYNXlRMEFSdUYzOFkwZ1V5cUNSaWRQWmk3WHpUMFlPY04zN3g0NWEraWYvclRUYysrOEY4Zkl2Q0ZSVHZHYkNCbnpwQTBVS0RPSHVUNWgwZzYyYVQ4NWFuR0tLZ0JZOVUxeCs4SCtHMWNwYlplRStnMll3eWRwcURMTnNZY3FJK1ZtTHRUcEVlanhZR1AvaXdyTUhKdnZ2RGh6akV6M3pPTXIrbWN5WElqUUZkYkM4OG81VDVpT2MyeXp0QWVjOUlaTmJBSWFlcEpPY3ZUTG1VeEgwaWhoNFpHMGVZOVkzamVpTGF0WGJJNkpQTXhPY2Y3THluL0dKeTBwVmpOcnJJMkM3NUxPWTYyM0p4OE9NM0Q5eGdjSndVSDg2SXgrQlVlcFVTNXcyQUNXM055OC9KVk83aUNuSGVGaGd5elVqWDNTNXZPbVU2OUxJVk8yZDB0TXhvMGU1THFLY1R2bkU3SjNjMERvMWVWQnMwRFkxQ3plNitLL081blY4NnJ2K2FtbTY2cC8vMlQvN2gzZXZDKzZaT3VDamRkdCtTNnB2Q2ZuOS93bDAxN281ZVBIaGlveXNrc0hiaGszSWJIdHUycEdqYWlKcSt2TnpNOU9QaTZrVnVmdUp6aTFIM3VjMzZEN2pSSW0xbXEvbXMxcTJxUG5xazl4bEMzL0VlUVBSNnFBUUdsMFlDSUo1SDg2S0hKVFI3VWdOSzFRQmFxY1J5cWNWUURFc00wcFlrcG5hZ2hGMWVMN3Yyblhuc3RWSjVUWlF1UCt2bTZqYUFGa1ZUbFA0OTBucTJ1VDB2ZFAyVFRPbjRnMGhmTXZTSjh5UGdncm82WXlKelZLckFwWVkwUGdseEFCdzdJSDhrY2txMHFIN1FKTkNFRGRBS2JxQnBMMUpkRGlWNVRoNHRiVDgyZk0yNUx5YWxUdFU5ZTk4QkR4TWMvMDNuSG9pdkcxdkNIT3Z5YjZxZXpuTFp6SGNDVFV3Q1dKRjhPdVpBdlJ3aWIwVUxWZlk0dWtVK1ZsaStFRHp1eitFOUIyZ05TUVU1eGNCOHI5eExqV0RFVE9uTEM5SFp4SXVnTXhrSnZseS9IMGVYTEVSTytuT2RiLyttblBodk9JVm1QMmVFWEVuL3N5TUIzVHFmZ1ZiMGtWTWlFTjhFMXU1eVN6dHc4THhTZURwM241akZTTjgrUnVoWHNkckpPYndJalhkSWYwMHRHaDJSS2NnQU5NYU1IeUlUVVhwRkU2bWlMaDdNSS9vOEd1VC9sbzNkUEgvM3kzWStWdHo3KzR0TlBZTlNWL0R2NDZ2RHo3M1dXVWRxRDhRdG5ZUHpkZlQ3a29qNGZ2TCtaK00wa2hiUW9CLy96eS8vNFJqbElXcjQ1eHlrSzZTQWZLekhTcU9RcE92anlkalpYb0QvalhJbGNHYWRORTZadTJKQ0ZPb00wZlZpMnNRQTFFS3JNVzZLSldiTVRZd0ZWZW1zR0UyMEMvWlVIMW80TTV4V1ZSNFo1S3RsYy9yaDA5ZFc4L1ppanVOOVNwbi9NZ25FdGhXY20rWUJNcXFRVVRKZm1BNXBGdmxEU0JaTWlraC8yOHh1TzNOdDV3elBzM2luS1d0NnRid0Y3WURGb3BOUk1zYlpMbVVIWlMxMUJjYUltUy9pQ1VnN05sSFl6bjRzOUZIUG4wRWhpaGhrWFJpekhqV2M1QkJZcnhzYmRPZXI2NE5BTWMrV0FHVUJFekdDeU9HVjlLcFhXMWFnOVZ0WFVFZyt5SXRGdEJBM0NuVVpQWVJsWEZhZFVSUjVmZWVPTi9SdG56QmdmdWZIR2xZOUhTSHpEK0lGazNkYURkMHdab2JUc0RBUjJLWXVIVDcvOTExdkpob0hqMWZqVHVWT2tpUHFjY2hJK0owSDFYTEZTQ0tiam9jMjYrdzR0RjVod2ZzQkR1WWFIVk1TREhSQ1FUeDA4VW5vdzd1M0NnKzRrakRlZXpmRGdDc1d5YWZsTHRoYzRsaTRiRDNYNVprUVF4VU0yWnVCaVNDa2R5UTdqckpJWFkweVMzU21iWFlnSEw5V2lxeUowekdXa21tcFN3RWc4RkNtR011SmZGd0VVTkViV3JWdjVlRTFWVmMzaks5ZDlNMzA0MmIwckVOaEpiaDh4NVk2RFc1Vk5BOGNEYXBTTlczK05jazFvRXQ0SFhUZWZtOFBHZ3F3MzE2b21ZK0hFNW9mVUZJZDRQaHRHUGczdXhCME1SUWg0dnBvK21pcksralNVTGpZdmt5NjVvcHlDVmwwcThtSk0rOEc4UEgwNDVQTGE5UVVWZW4rQkVERVZERmt5cnZyeWZvV1pXYVhaUzMxM0dwdzVmUWRPWHFoZHlCWG16ZDkzNThUU1lSUEdEeXNsYXh6REY2MmFlbGx4YWYzNENmV2x5amJtQTFpb2JDRmJoRzlwL2RrWVRuV2c2TnA3S1QyemFhVm5GbFo2WnVsZWVtWkpLajJqeVlSYUtoSUp1eFkyWThsWnM2M29TRUNZTzZDWnBwYjlPRU9JZHpTb2ZvaXc4SnB1TThpeUhHNFZ4d1FFU2pNMXpkVUZFKzdtTktYRUFsOFlMRFI0b0RNenZVcnpybmlCMDNwWkRvbVFHUXJGblNvaFdrQy95cU9DVFdTK0tZc1k1OHoyVEpwYWFuQXlNNy9LMlZYSVJFdE9QUDdxWWxSdXNZNXBRdnR6KzU1ZnZHUHczRGxEZDF6LzNMNmpYMzdZTW5ObUN6bnpHc25NdWZOMjc1MGJwM2c2MTNwbWJMN1QrL1R2c2tuV0d5c081dkFyOGc0QWpaU2YrMVJYclYvSTllZWU0R0loR0VWYmFxZ01UTDhpUVMyb0VjM3RjcitRSS85WVVDNEEyNllFQzlGQ0tiWXlLWU9Xb1VsWlFFSlJ0QnVsY0FnTnhwakJyVVZPMm1yY0JyQmJjMjN0c2R3YXZKaWJCVnhoQUF5L0JzUllqQS8xajBhamNxNGJLNUN5OHdzcStsRkZ2bDhJa0ZBUmxRckVXSDVwR0FON25GUE9yWUZmaWdTVHpkQnB5YVIrQmE5bFBTWFVHTjdyOC9oaFlvMll6NmNwQXhVOFM5MnVyZ3FVSHl6dUU3amx6MnNmL0d6ZzBZd05FeGJzeU00Y1lpYmxYeGwyQmlORGZ4MnVtK3VkYy9YUnV1dnFwNWZQdUczaTlUZGw4WUh0NFNHTCtxODZObS9OeXFYRHA5NXdWZC9KNWRQczIzUHo3NWp0YkFqbUhiMDZ4NTh6NFdEMWprbVJRWXhleDNBZkNuL1hyYUsxWFRkd3lESHlXUFpaWVRDZW92S080cUFrbkVUR2dkZXpIWmgvRVJkWmxsa0FXWVdBbGd3dUxaOTRXRyt5cHJyU01nbVNBbnBzcVlLWGgwVmFickIxcEVMeE1OSERMMHlaYUp0TEtXQmIyQ2wyc0V5SnhqWkJ5WXQ0allnU0Z2WU1HRjAwMGxSVm5HOFljLzI4ZWRkSFY2eis5VU0zTHF2RjQ5cGxOejcwOEkwcnF0OG1CVys5cGZ6MWJaSngvWVo5RDkrNGZNQ3llZk9XRFZoKzQ4UDdObHcvY01VMTE2d2diKzErNjYzZHQ3MzVabkxzSXcxenhPMUpzWSs0UTdSek5veUN5UTRyQm85QmF0QUx3SWZjNk5JUFViM1BUcE16YmM1MnlSU0syZXpVTU1GRW1KUlF6RzdETTdzYnpod2g2b3V3MmJYNGlhZDdXTXZEL3ZreERRWC9KYUlweWxoeWk1SkpQbE15djFiU1VmNlJWaFpkNld5NTlVanJOOSswSHJsVmpZY25aSWFSQXoyS1JUNVExZ2xxWVoxMnBFVVdRSFlJVkg3Y2NVY3B2NlZ6amVERGQzcXY2TG5wd2xwWVYyRnVKTkFCcmN5UVEvcDJac0wwd3pjdnpjQkUxK1VvV24za0RzbFZIbVRKVWhXMU1xVEJJVGtJRi9xRTVORllzSlpRK0EvcExFNXZUbEVJSnp6b2pHVmtsa2VSS0hJdzVFcmNtUU9IczR4MEtRT0ZTaVJaNFZkcjE3ckZYUTFHVnRqbmN1ZnF2VFRIaWcvWVNYUjIvMGZuekZqSzdJRDEwMDY5OTBUSDV1bmh2Uk9tekM4ZE1mMnFxNmFQS0wxaVN2elR3ejhPZGJqNzVnM0pMeG8xTW4vZ29MSUZUWWJXdXVhR1lYM3JDbkw3REZ6VU1IdHpabU44N2NQYk4vU3ZHMTJYWDVIdDlXWlYxTTBlMUxRdDBQREViYjhXck43aTdFeTd5MlRPbnppd01GTHN0V1JNcHI2cTkzVHorR1hVSCtUbEJuYlYrSm90WENiTWdpZkU2dGpZS1lFbHB0YXhZZUdqbFJYMnlobDBnb1NrdXNXaXBPTXlMRjBiR1E2TklrK01ZRWNqZEIreXo1R1Y2aWRRd2ZSejdmcVA5SXRCeHlzQ09EWXkybFkxQUtrMkdLOW1SOEZndkpRZCticVNTdXVvVkhXeU5lNTA0TUtPaDloWmlOVm5tdG1LSDRRckhsamVZYnRYNXlzdGk5WlNKaGlzRnAxRFVzek83T0pBR2RlM2Z6UTU4NU1XdTdFOHEwaFNZWkcvd0E3V2R2TDBKaGpnOUtOazVITzdpT0daSlV1ZVVjN3VlazQ1Y25Ua3ZFZFAzN1R4cTROWFgzM3c5TTl2T3Yzb3ZBLyt1KzNwNWRHU20wZmYrdXByclpkdEtxbGRmVGpHUDNhTWpIeDJ5YlB3Tnp1VnMwZVg0RzN3dC9pM1B6K05mL3VWOGhwWi92MlcycG9ocjk5M3p6dERJOUZXek1ubFcvbDkraUNYeVFXNDlaUUg1akw4RkFYakFqc3lCK04yRlZNbEZGTlpiSW1CZ1kxV2xkNFgwalJNV25TUmhVcVR4UW9NejRObEkvWjA1bUdtYkJDVUVxbElDMGJvcVhQZmdtb1ZMUzJuRll2SmdTc2VBMWRkZGF4cTJHcjAxcCsxTmpUWEwyOFlzdlNSMmprVEt4NFl2M1hhTGZlUHErMTdlWHI2NVgxcnh3bXo1clpNbUZremRPbzFDeklpczRjcHMwYzBMNXRUTmFBZ2IzcWVmeUJkNzNYY1J1RUpZUWFuQjZybGFGMnNuNzNYa2RGdktVL0JtNGVNWWdma0c3SlF1VXZaU1pheVQ1YlByZWFFNjRGanFCbmhXcVdnenN6eXIzU2FCaHZUQ1ZTOTVCSXBXRmdONkJkcmhSMjdoTEp0bldmSUZ1NS9WcGVuZ3prMENJK3BkZmJGWEpCN1dLMGVUV1B6bHhLTU83UTVsWHpoZUlDZXhJb0NDRmdSbWdJRklWd1ltZW9rczNKbEcxc0FOZ2V1VHl4UXhyTkFTS3RSem1VWDRDOXpxWllVTjdJbGdrWEx0RTQ1eFpFbStIMTA3Z05Gb004WmJTNk9ja0ZSeXRVbW0yWFo5cWhURnRXbDcvVUgvQjZSWFM4am81WDRxbGVYZFQ0WlZ3YS92L2ZlUDc5LzM5NzMzM3BqNk13Wi9sODBiWnk2cGFCLy80SXR3bE5QZGk1N2RWVmNVZUo3L3Z6K1BmZTkvNzZ5a0h6VE5HeDB3eXN2dlVTRWNGR2dtdGtibk80SS83aytTdTJOTG5zcFlUWWxvc0lpb0puL1hIZGt3d1ltYzhxRnFmeGdXZy91NFJwVkhMc1NheVJWL2ZNMHJkbzdsVlY3aTZ6YUc1SGoxYXFxekFKMXlsMndhcHVWc0JuSzl5NXF1Zi8rbGtWNzEwNWNPWGx5N1lCSnVsbUw3cnR2VWN1OTk3WU11UHp5NWMyVEdWeTFZR3UrcGpzSzQwbmw1cXJXSnF0U2tDeGhERENqcmFlalNUSTZPK2k1ZW1yODZJMUlxdzRxMGtGYTJ0aWk3cExxUWplcER2U0xxWm9pYzdhemFvZXVvbGFzZXRBS1cxdGIrYjJ0NUI1bGZxc3lsVHhDYXhXRm1md0p3d09nYzB6a2FNd2tibVZZYzJrOGhxb1dqcE5hVlR3ODFrSFRleHhXelk5a1JnZXNEWXUxWWdaSEdpMWhjSFlyWVREUWVzVkNMUTdjMVAvUjZWdmpUNzFBTm5idUpNYWpVNFlOdjlGbnlCcGF2M0hWZ25kdTNiejJ5RlBqQnc4WldNYm9vVUdZd0o4QytFcTRtUndvZktwYzZPSjdDR2U2Q21jcHpXaHdoT0orbFFtRzVENDB5bEdzbGNYSnhCK2xQQzJYbHBaNVVEbE1kOUtrS3BjbTRmMnNVTEdMMTdHa2M0RVJRRU5UNmNhaGpWT2ZIKzcwREQxMHhhaE4weHVYdmJycmtVV1g1UThiV054Mlo4dHZoQk1MS3lORHFsY0pOd3VMcXlKWHpONjRhbDdEVlZZaE85aFF2bkR6WlJxTmF6a01PWXlmOUpyREFEU09KYlo1YnlsUHdPOERtTDVBZmF4aHdVOXppOGFxVkc1aUxNTWthSldMUUZGcWhiY3FHeVd6STA3b2pURzF3MHg5VkpoK29oYW1ZK3dMNUIwU0MvNHJpTHh6RzJsZGVuREpiY0pjVXZqMnZ6N1V4ODQyQ2xkaGpUR1pSN2J4bThDR0JENW9va1ZCRnk0dWRpV1hIbUVqRXZJOXJUZVpQSm5oUUZsR0RvRmVrczRONTJCWmF2TE1wUEZEbXRGbk9CbDNKVHFKY0xLUXh1YlJKTVpJaWd2cHpBSFNqT3JwSWd1ZTRlUUZJbUZqMTRJTlhuWkZzTDYrYi9iRVFVdXJmS1VEeG0yWU9YU0ZFcHRaRy9EWDVmVTdlTE4zL0tDR21ZWG9aeFZta29jTXV6a0RsOHVwVmIrYWt0cWo4RGRDQzMvZHlxNERXL1IzL2RqeEZqOXJPNnp6a1NDcmZ3QlpqYnBXQTlmRmN5UlAxenBLdjJDdkNlVGp0SitFeW4wdW9XZkV5S043NzMvMjZIMTdqeDY0Y2xMem5Ebk5rNjRVUHR6eDRnczdkN3o0MHZZcmxpKy9ZdWJTcGVmSjB3ak4vV0wvZ3p4Vm5ub0wzM2FSVWNyVGIrTFJSazJVSm9sVWtHRmdsQnNpTkw4bkJiaHJPdmNybHBrbHVkUk1ZRk00YmtrekVodnJJTU9HTFlaaWFkUjZUN09CQVdzd0VoT2JVdDFKc0ZZMFEwQ2dlWnFTTjRUVHJIckJYTlRzZFlub0RLQ3hGVGZXRG1TcWN5Q1RsQ2ptUWJhWnpEWVdSVTJ6MEdpZlpCQkJuS2NqVVJDVzhLRk9GQ1lnRlZVVDZ0Z0dveVlRRnVuVXRRb0xiK200a3plUmlaOHRXclQvekJuZDlBNDZsUjBwR0tkOFpnWFBLOVpOenp5emljeG5QVE1RQnd0VUhQaTRQVnpNeStLcmNUZGJmaG9pN0xsZVFJVEtuTm9NWGpydWd2UEhuY1ZzVlM5VHhMTkVIR21XRjBicTd6YlNMREZ1TWx2c2JsYk1oQjZqZFBRWXhYV2lrSVVDSEhtWkpTb1RnOWh6MEdiU08vTk5IdjJzL285TjM5cEdHZkV1WW55MmVkaUl0Yjd1aU9DZkdUTHNKcFV0SDBhMjNBZm9vUUZ3MGFHZkF6eTVMeGZoQm5DL1o1WGpVblU0bG81bzZCTldSVys4dkg5cE9wQkZaVGhlenNnaUhJcjFwejFzK2dmTm9Mbm84R3U1MkVvTHpkTVRlQ05nRmZSazVWamFXUVBFRWczRnE5bTFmcUZZTlhXSFZJZUJXR3FxOGJDbUhGQTRFTXMrTVN1d2IxU3FFZHY2bEFYN1UvejFMNmNla1NSNUVDUCtBZEdlRXVHU1pZSDVQTkxTcE1NWXEzMzBvUm1qYjU3V1F6cVFSbUhodG82N2VBT1orT25peGZ1Ly9wcmZBK0ppY1BVcWZoTy91S3BteGl3VUYzTlVjZkdMeXpvZjdvVVllUzZzTEJaMkM5OXkrVndmN2hvdVZvanVzbEpkdTVRYlpNVldaWlFkZTF6dGtvY2x5dG85dEZiUDdwQjk5bmF3cnVTK21Mbm1vVFFEM0ZTMnVDZ080dGIwM01KU2lxcjBYUGd5S3lxVmlqSE9ta2tkUmQ0cWJEaUFXU1lldDExSHJTS1c0MU5NS0l0Q1ZoL3VLa1dzdkt6NXNzcTVNeDliMmpyK3MyMUhQeUU1a3djQTcxL1pOR0hRTlpjTnFhNVd5eEd2clowelpHajRzdEloazNidW5iVXdyaHRhT3hsTEY5bWFvem01aHJNMHY4TitmaVdidGF1U0xUVW9PMmpJMHFvR2p4S1ZiR0hpRjNwVXN6VmlQdUFQU1NWdGhyUEsreDBtdnJYN00xTjZlNmFwbDJlZVh6MW5JVUFaNTFYUTNVMXlRWlluMTlHUkZsV3VKei9YRG5ieWVjOU43WHF1RmhRaHJJUzU2N25vZ2ZVSGpEMkh1KzY1RjEvYXN1L3VLNU1HckQrQnozM2xGVHBvN2RuL2hHZjd1RUp1YTg5bkYyalBSZ3RVWk9zNE42Z3llb0tHaStrazlrV2lsanZsNkhFUGs5ckZTR1ltRkdVRmxHdkhDVzlKcDNGVWoxUFcrMmx0U2dHTW9qQXFpMkNEeGt6WU1BbjVHNDFISnZCSnpSRmExQi9HZFVjVHlqdzloOW04Nk9xU3dhWCtQdDdpZmlzV1hSMFlYRnJZeDFzVUxFb2U5UWMzM2U0TEJuMWpMcnZwTnZ3Y2Uxa0hCK1BYcWVNL0JPTjNnUjVjd0Mzc2lRRjNBZ05pVU1vSEdjYzhLSmtoV2xGaE9pbmJuYlFtREcySUhDZXJxTENiME1sSzNGRVdvVWlMU2puT21KNzNVQjhUY1l0TTYrdzJSbFhLdTdxZmRodmxCTTNqTWhVR05rdHp1aVFJdVk2ZUR4L3g0enRBWEtmVUV5ckQ2UmlOUVVyWExpNlBXMzlCeWthTld2WE41SFI1Ri9LeEtRVzZFbWdGTU0zRHdlZ0d6akl0ZTdNeXIxcW1HTGZabmE0VXRZVVkraGZWOVNIbmVMRXl6dXBnVlVoZGxhYThwaWdHa3JTYjh4YlB1K3NlVzdQbU1mZWd2bVdEQnBYMUhkUnRGZTE3Yk4yTlU1clh2bHMyZUhCWjM4R0RxZStyZytPTURiUjJ4SW1SYzR6ZVNseTRlOUdpM1dGVjYwZmllcE0xVVUvb3dzWnFvTUFrU2dwdFdnU2RGVEppY04xTjdRbzlqTXdKby9HVHJuSkdlQW5FSitxRTBUcFQ1eWhhMS9oMHgxVEY5QUJKSlZzU0JZNkpTbHJXNTJrdHJUK3Q0bjZlVkg5S25adGFFU3E2eEpodlFPb2JqR2VwazFLdEZhWmlka3lmaE9XUGNsTHVrNHFlTDZ2ZW1aNEJta0tReFFUNkJtQU9jb3Nxb2xTMWtET0MwZWlsbHJQcWs1VHFRTEsyWFNGY3FNajFHYVV0TzYrTTZ0d3IvZjNHVGcvV0R5M1BtbGkyOVQ5K003djN1dGRUdHJGcFZDSFB1bklnS09pNXdWVzI2K00vSm1xQm9zQWZMVENqWTMrcUF0VnhzUXBVVEJzemN5eEZySHNsS2tiR2s2cFJPejZnaWVQYWxLR1U0TTZEWmRqL0ZKWWVNS0JPa1FSRDV4MGs3MDBVR2lvUWpITjNnOEg1MC9od1hRd0c5NFh4NGFJQ0pSa2M4OUdYWGdSaDBnT2VWMTZoTW96QmRJamFRSDdzSzNjeHFEQlYxeGVPcHpKV2l0R3Z3b3RBMldZMVl3TTZKNnMweFBoRkx2RFpJclNhekppVzdJbWVCL3dGZk5iSkUveTNrWXlCamlSUERLZEhsU082cGx2anBaVmRiQlQ0eWlGWXNBOEIzakcyb1hXSzB0UE1SeFB0RklYMXNtWk1BZEZwemQ0RVZFSEVzRGdHcVduVkdTU2pzK1ZxTWlUUHJZQzNXZi9XL2RDZ3dmdXRvT3JFdWpOc0NoSzNCQmcvaGJkeXVDZmFLcVZxRlkySjN0TkNTMmhTNEo3bzRFOEJIUm1tUmgrbHlCUFliR1BhVFJaVEdRck9hTk9yM1YwNGR3VHVQZFVRcDdTZnhjMVE4MkpzdEVZcktHV0U0d0tiVUZlSVpzQlphVTFlbXlIVkNyUEhPV2sxRExiSmM5QUxhVTZXREdmVjBsQlpXcDhyZ3dHVUxCTXhSSlIwUGxLVGc2Zk9aR2hTMEZDcnp0Uy9xTWhQbkZJOGcvMm0zMDVyaTdPNStXcitvVjNySjRQRmhCeXhDbW8wMXNDaXNiUVBFeko3TzIxYkVMUFRNTFU5QzR3TnExM0xXa1N4ajRGb2s5WWRnSmE2bWx4cWFGVXJ2Qzhsb3F1cjlCNUoxTjFHNis5bFphWHl2TUovVFd4cUFmNS9rcEhLRVg3TUUveE1yUTZmSDZOc1k2WDR5b29udEo0QWxhQ3ZtV0dWM1hGZVZhNlVHZFE4bi9uQnVFMFZGWVhKbGJvcElDcjhUSlQ3YVZwbG9uVnJWeFV2cnEwVVZzVXJwL2t4WkpvWlRhN2tsVjJaUUQwcHVmNG9yUkRGVkJRYnExcE1ydkh0WFhmVEtuODlMYjNwYk1uMXdPZnJiS3gza3Y0Tm9POVUydlYxVEs4Vnd2bTlWUWo3dEd4WG15NDdONUh0ZW1sRndtaEpYS1JRZU0yYkpPK2VuNmdXRmxhakJQbi9DWDRVTEJjcmRDNm5ndVluUnNCZnpneVc3bU1vdU1BWS9MMk5vVEJwREhuLzVoaFVDK2Npd3pqQTVOTWxEUU9rbGphT2Y5SnhWSE03ZWhrSEtseEZiRDJGdEN3RUl0VWtqdzNEa05Wc0JWVTc1Qkk0SzJWbnBWM2pqc0JuU2JYb2ZOTG15c2pUOVQxdjVISlJYMWhQMmYycWNUMkZSTW4vVS9UWTY4cTZDR3JXb1lGVTBuT3gvUlNtcHAyMy9uUXF6ZzVSbkdFUDJTVzlZUTNNd3Nwd1BJOUpnekpncDFVOU1DWVhPR2taREtDTE5qU3I2TUpWTmVLcUFHbkVsYUg3ZDlmcEJlVCtSVEN6Nm53MTRLZlE4cnZ6bFFQQ3JRRkIzNnFycHBGTE00bVlpZGRNakdheWhwUXFwK2FRQUNtZHBieFBBck9VVS9DeHVmdjVIUHhOWWwyQkxaRE81WE1sM0VvdTVrbmswdnJWWmhnTXg3bTR3a3FUKzJrV3EvMDArMkNKQkxKcEQ0WjBpOFVuamFKYmwwMjloVmFuYkRZaEcvZDdVTTZtVVdPN3pjcGxsZUMzUmpEVXpkRkVnTndiQ1JzVE1mS0EwUi9CTkNrdktVWWtwMUY4QnloU2o5OVhIcnRtMFEwVXJXOCtGRzViT24vSjl3djU4T3pWYi83dy9qVS9mK1BzV3Y3ZzY0REw1c0c3Wnl0ZjdyOGJzWG5seVB0bUUvdURiMndXVERYS2w1MnJCd0ZpMzJ0bHVTT2ZnMnc3eXpsQVl0ZjJWZ1h1NmEwS1BFMnRBby9aUlJmVFpzNnJCS2ZLZmZkcWNNS2pTdFpiVGJqK2s0U3UvLzhLSHFybzk0RG5hYXJTOVFhUTduZWEzcCtBeDlzN1BPbTl3WlBSQlkvN1F2aFJsZjBlSVBWbkRQWENNR202UDRYckVNQ1ZEWFI3emZtUVNWbEJxVGdjOXpDR2dBbVRwY21RWWgxL091cFpyQytGMnN0UGc3OFAvWmI1SzNORUxQYncwNnFaODhkaEl0VmRpNzZiM3Q5allIcDEwWk1GYk0ySGh2YzZ4bS9WRmI0eXNkQlpmeTB2eklHSnMyS2xWZmNxZFZ1aVN0MnVWcW5MUEMxVE9iOU9YVUF2WVZLdGVvNXE2M1ZWckF2M01YbmIxV1BFeHFWcDloNXozRmp0MUtLeWdnb3JwSFcxOC9HeWNnNEFnN2VIUXBncTRGUzFWQnF5VGJPTExCOFNuZGMrTmRpZjNHL2tETG0yOWEyNTNUdU9mTHI2Mk1wRDN5cWZrOU9yWnMxWncyS1oyODk5cm50ZnY1QWJ3SjFXb2Nxa2pTeU5xaWlvd1R6dVdnck1BRnU3Tk1CQmZjL29rTGF6enZSR1I3dGtkTkN3aDlmVGpyNTdUSnYvNTdYUHIyTGxJQ1VPcWZpWTdQRCtTM0lkYXhNZExsZFpteFBmNFl1MlFFbXhDNWlqdzVWVUJlS014dUF5SEhHSFFNdHdGUWRLdEFLUUh1ZTAvS1B2QU1CRER2YXRqZWt3TnpJcWhaMnl0WklXV2NZeTgzM1VXNGMxM3ZpakdqRm05T2FxWFhTMDV1VzZycUlQYkJSSmM4UU0xVldEZE15UjVSRzNuMzc1bC85Uk5uanM0TEoralhPdm1kdlk3NDlQYi8zdHhKbmxEejAxUjcxUVVqZXFydVRhMFZmY0lIejg2MC8yM2xnOUxSTHBNOENIcFNEZTRPQnJSMjVwbXpUK2pnSGp4dll2Q0dYbHBGZlVYbDBmbWhLdENZUXlJb01XWGRHUngzemx0SzVkdnhla1JpRlhDVlpsVW1WN1NiZks5bUJYWlR0cm0xa0UwMUtrVnJhWHFaWHRPREZGMkRYSVpxY2UyWFR4RU5hMkYvZ0wvNi9MMjZrbi9oSkwzRGUrUlhMdjZiaVVPbmZkMDhyN0hVY1N4ZTdKZUNnSFBLeTVwQXIvMEFVci9NTTlLdndwRmlxQ2xUUXowQ24xKzk4bzlVZDcvdExLL1JmUVpJQkxLUHJuL3pzUlYrakNSNENyNG01TXhrZFpOM3lFdXZEQjNJb2xyTmsveFVlRmlnOTBMSlowbzR2RGpDNktBaXBLQ3Y4dlVhSUZMeTZSUWc1UkQ4V2VCWmRDSThKdGlJMlhYKzZGVHJZRFhnWndvN2hYay9FeXFCdGVSbWg0a1NxRDhUN01Eb2dFNDRXcUhUQ2E0cW9XY0ZYcmtBYmtueFFUa1pCZ2ZBQTdxbFdST0pRaHNhM2NtMjRxaTFjd1YrMWw4TTBBSDh1ZlNSZUhtR2tMaVQ2VmcwYWdTVkRPc2NZMjhnak0wT01RbzdRRk1yWkRScnlpSkpUN1ZNSjgrS29IUktNL3VRUjdENlJjSXNwYmV3MndsRjNTRE93RjY2RkN0U0xvWjBjc01SYzZkUzZhYVExOWxCdkIvVHA1TnZyQmJCU2ljSzBMeC9zdzVXRllLR2wrSWwxME81TE9SVG1nMkZlTzNzSUFLQkhsS3ZMRERQbVMxeUVOd1o2VEErQzdBVUY1Q0FqSVVkaU55WWRFblkydU1HbUEyR1p4OUl0UVRoZTVNT0l2QmRtYTl5b1p4Y21PeVl2eFFNM0QxWnlFNGFtYXIrc2l1TzVRRTI4N05tb29GbVpydWJnYXJoWEtIMnU0ZXU2NVMrQ1FZT3pHQnpES0h4S01WNnFVUHl5WmF3YkI1bzB3Y285MDU2RnRZVXJ1ZGV6THVxRGFJRlllRHIrSkJIR1RGRUM2VkNjZXRoU1c5YXVzcm5GUXZKZGRoT0NIZ015T1ZRVERQMDN3M2Zpc3M3YzQwNlV4M25JYWZQSU03bHRXVjFmV2QvQWxjR0JoMm5reEtjcHpETThJM3dQbWE3bmgzUDBjM1hKRktnMWpEdzYyL1VxbE9nR1NPNHh6SU5XSDRnTXovRGdOQS9YdDBrQ0hwRWZhalNLeGo2RG9yN0JSdzdsTzFaNUdvaTJka0ZkMTRoQUw4Qk8zTWR0Zm1sRTFrSEZvT1MrZmRzZkx4cTdnZWNVVlZYUzduNEdJWmRtaXh6OTE5b2JYZkt5QTZOSGNvempRRGMzRkRNOUZyT1BIeFA2emJoaisrNlVxWm9sbDFJYXYzaU9HVHFQdHdDL0czbHM5Wit5N0t6ZjlZZmpRdDdjTVd6OS9FS0M2c2JVc28yakRxQmxyK0QyMEtjaWlrZXQza3ZMeDY4ZjNXYmViNHZucHAybDdrRDIxNGQwakcrWlBuZGpTcC9HbXhnbHpobzNwVnhlT1hQVnl4ZFRHZnZkanZ4aGxGZTBYMDVkYnh5WGF4SUR0RWZjeEFpNE94ajBxQWJObUhCYlFQeTIwbDNvOG5WRW10dUlvdEdEMHpDVFluQzVQVm01cEgwcVVQbXl2bjRzbWRTdzlyd1JaaFFlTTZOSW9iVGZER1p4OWt0ck4wQTdpM2RyTnBKSUxCTkNLK1o1OWFGYitNVStObTYzd3N3UTJqSnU5OGk5eTV1T2szalQzT3k5WG8yVTBuUzAzdU5aTjhwRE9hTDhYa1BrZUxvTXJPTC9qUzc2eFBaN0pPcjVrNnBtYkxvdDFmTW1pSFYreU1COGEzWFRHckF0MGZNbThhTWNYVVBUSXhicSs3RWZ0VG1tL1NPOFgzZTNLKzUzdnFQMWZrc2VUQytQNTJVOTFzUEgzMXNHbVVPMWdFMHQxTUtYKzMrOWhnNHJhVC9XeFdjMVV0QXQxc3lGdmF2N1RyakZsYzBYbmo2a1F4cFRMeHBTTFl5b09TbmxzVEhsMFRIazRKaXh5TXViUk1XWDBNcWJjaTQxSjFiZDRJeDFiNzhONjcraExMMjE5Y005cW96YTg4OGNsWE1kMEs2WHFhaHdneXhka1kydUdzZm00UGlCbDdrMGFIZTRzSWxVa0hJTlZJVGJlRWhodkFSdHZBWTQzRXBUU1R1SVdJMWpYaGQzVEs1M3RiZjdLTXBEcWlBUS9SWUlma1lDN21tV25BUkxNZlFwd1NaYUpiVmFYanZxei9FNjVvZ291VlZKMEdCRTFhckp5S3BiRlhXekd1NlZqME5sUEZ0dTlvK3NSa05nalJvREVqblNSOWhJbXNDdEg5b0s2azZwVTdyeUwwZ1pmbzBscGpPSHRCK042SjgwUlRvb0xrcVM0b08xQ2NjWVp1THl1UFlVTnozN2Nydld0NFdiQzI1aC82MzVhbkhFbUplbVdVeXdKT1hGTGdQRUV2R1hCUGJ2RkdVbFNuTkgyRTNIR2NrWmdRZlhlTDcrczNWMDQ5d2pjZXlTdFhVSXY4MHcxemlpdzdmQzBFcWFNRUMzQlRVUWFiZjhQSW8xVE5UM3M3NmVzMm1RbWlweCtiRUo0RTZkYUh4YjlFOEI1aTdDS3owdjNRREszMDQzODRvTGZpN0tjRnBrWFUrbVRDZEluMDBIN2E3bkZkcnFpTTlHK01wbXRMSzUyV0REcWJZNFVyek94bVFzbiszTzBza1VCMjVpQ2ZSVTNtcXlwVGkxL0F3UlBjVUFQZ2dYRURCWXRjcUtiQTZMdTFzRGx4K2ZlV2RWMFJqbFY5bG54dkJVNzVwMHFmNGhjcTN6Vi9nL2xpNC8yYnRwOE4rM204dDU3eFAzVWJ4N2ZkTzNjak1GUFRHMllPVyswY2t6NXhUK1Y5MGphbnpaSXY3MXAvVzkvUzJuckx1eTNBTGFVQ3pTYm15L1FCUWZyTm5PWUNPN1RWZjFkb1hYR2tmbnlFUGJHU1dRWUJaTWE1VWo1WFhZVmJicUhXL0hJaHNKb1Z3c3BPYWNRc09ZdUtZOUdMOUJDUitqVitMbnJWT1NJMmxoblM1L0ZYUmJPY21yaCtOSENFVDdjWEQ4anVkMk9ibTFQYTBibDU2TmhMYVRTN0tvSmFvVFpxM1hneVRHM2EvM0QzVERsTElHSzlvbWcyVk1jNDl1WjRpSHN3eU82bkZUZndJeXBYbHZ4VUJGN3dYWThCNmw4L2ZzRm12TG8zQ0JiMXlVNjgzRGRZTTlLZ3IxNzk2RDgzcm9IYWZGSUNuVjJUaDROSW1BTjBTVzJFYUlTdGZkV1FwdFVRZHByUXlGeU51SGY2SUk5alhVOXByQm5hckRubTVsQzBGVTFucVBDVGpmUFVmR2VJeDdHRVRqZFlocUxnMGd1R0VKKzVnV0cwTTFYMGRzTWZBQjhiY3UrUFpzdk1BWDhWNHpiZFUyRE5vN3RNSTVTcnByYnFZNmpYQnRIMkl6TkUrSVpDU1hXMVJXSGhMSDFjUUNqNjRORisycmdzWStETmhlR2diYmxHUHZCZGExS0dsWWhXMGNZajh3dUZaMkhCWjNWNHNvdkQxT1NDNWVyWTVZejhtRkJPUXBMbzcyUTMwWDhDTDJoSTk2cjU2RGhRdGo1cnVmeTZseWg0VW1uNHFrNUVYdmNxR0lxRHpEbFF1bFFGbzVuTU9sUXFlb1dSVWdEVlJSUDJZaW5iSTRKQkZRdENsUWtWUmdMNEdJSlhDeWgyeXZSRUNUcmdDMEFueTBSNWJ3aStLeHd5aGJhWEx3bzcwSkw4enl6bjJHa20vclFEVHVQYVFJbW5FREkyaTZ0b1J0cWhDbWF5akJjeFFnL042RTBDR0JWdmlKOG9Oc0RSeGJPelZWd3VNR0gwZEt1Yll6akNzcXBGclpoaFBVa0xSaHpZS1U0N1liSTZoYTFubk9DK2xsY0srenJQRjQvWStqUUdmWHdYajk5R0w5NDJ6WmxMNzBnekMwZk1uakdpQkZKUEFUc3JqVFEwWXR4UHl2YXlZRzJJUGRwN1JDWnRvNnpFVWhla2JnU0xiQWlTN1FWNmNSNi9MakJvY3RrQ1FJK04vWkY5T0JPZUdLYmhjc283aEdzUkZaUGc1VnNLeGNhcWxRamxRWVhtNElBNFB5ZSt6ZjAyMzdOcllEMlpZL2VFTDYxWmZOSGxXUkwvYlJOZTllTW5uSHpubXFLNndtUmRiZjlGYkhkWExkcDkxK1dUU1FmQm84cWM2cWZhNzIrbWNVRGFaOGo0RGN1em9zVmN4Zm9kSlIrZ1U1SEdJY1RjSWp1cUdRVDIwUlBtcGVPOEtKTmo1RGJkMjk4MUlJYy92enVSM3FSeFlyKzV6QmlONlkyMGUzeDBxQXhaaS8vQkl3WXplelJuTW5QT1BoNVVBcGZhakd0TGpnejBVcTlBSnhaRjRBenV4c3U0NERMOUV3VzQ1WitFcVVxQis4TzhSNE1kVDY0NTBJUXYvd3kwam1EdVpsSytUTDBwM2VIR3BzUlNQNXdQSWV4b05KUTF6ajZhdU5vY3d2SWdUS2RQVWFFbmMrSzBiK1Q3NlNkY29yWkJvdHlwcHZ0VlpZdnNxYVpGNldWQzJRL2RCL3AwcDUxKzhCcHpodTFycWxuSlQvTnE4WitUVEJuSWxoM3ZYUnN3dDFTTHJGakU0MSs5dGExcVpRU3pubTltM1FiRW5TRHZRUlZHWENoWG9MOC8wWXZRVU9pbDZENGIvWVNOTHlqY0Jkb0ppaW9PR3dHSE9hQXRGL0F4VHhJTmI1d1BJdFJUU0IwSGw3N0JDWG5TUzFBamh0QUZqclpybUlZRlc4ejJRanVhWVdGRXp6MnIwTUQ3cEttNEFMVTB1dTBmSFErMFp3L1IrMjkwQXptdEpobTZoZUNUVlRNM2E3NkFoeEN1Mm9jd1lGSjNYT0hoWXdMaGZhNE5kV3JzNm5iTHdWbzRsQ21LMkVwR1YyaEVOM3F3UktLcGViam5LYzZjWDhCRzF4R0lVSVZOeDNkUDhIaFlnd2lWWlM1L0NobERwa1lscEtKRDkxMlRyb0xEMHNuU3ZOV0oyWHgwK1hFRW92VXJvdDg4MEZTOWVMbWIwWWxKUkJQSGZWZk43K292Tm53NHg5dS9YTWs4djcyUC94SVBpSjNrYUh4SmRlOHBPWVJ2M0x0aWtPODdaVFN2bXNMaVcyK1ZUbWRrSmZHa1NBdkMyZ04zZTNxenZXNVlVcklGa0l6T2VXd2tSMWpEK0Y0dVNQVEFpZ3BSL2RJZjdiaG9ZTW1TZUNRSFdLN1ZFN2JkVmV3OExvY3hWQWQ1bTNtNnJCUVZwUU4yVlNCaVZsY21XeW5WbldMQ1VSUlcxcDJVVEhkeGh4Unh4bVM1Q3EybytydUhzbFBiTkN0dHIvUlV3K0puVWNaMjdFemZkQ1ZtOGY5aFZnN2RiWkhmakhtdnZDY3k5NWRwWHg3Nis2enkxQy92NC93OTk2cktQY0pHWHc1N3h1eWFHVDl3cUZGVlBSK1h6WnVmSkI1U0dyRDIwYzJmUDg5YXZ3N24zMTI1L1lqUjJvcnBvM3JWekZ1V3FKV3ltczR4SmxBeTZIOXhaSXpNSEFQNnR4dzNNcVdVanByek1VeU10cFNEVVpndkRRSk5ranprajMwUXBhVDdUOW14RlJ5cTFQZHN4MFRYN01NY0NVOTl3THBHeGRhUFVrcEhTZDZwcGFGaGlmbmQrZ012ZVdSY2JwbC9HanFWeW1oZTE0TFlWWWlibVRkMTFqSC82NmRSdEhkTERLbkNyTTdORzhLdTlkaWZqZllGUm5jZEU1eUJPTm1aa0drZFZVbDAxMGQ0eG5NUHNpZ3JWL1VCaE5ZcENwYmNXZG1nVHFCelE3YzZOZU52a1phaXgweldtM1VQQkI3TlFoNnRhWjdNWjU3OU5qZ3VuWFErQjkrcDl0SXYvT2UxN2NqcVZtSGJqajlFL3A3UTh0UC85N1FULzM5VktHSmJOUzNBQit2MUxyckJHV3pqdGJvMFYyWjdPMzBSY3YxekttczZGUVFKWjI2Q3lzc3BxU2ltcW00TytaVXM5VmJOUUwzeXRUWjV4OFpOQUczQnIrc2YrM0V1WFNQYjNqZVhkcSs2elJ4UGJYcllkb1c1SzV1RzNLNnp0dVFzOGRHbkxxUDZDYWNod2MxMGswNEtkNyt2OW52bk9kbUNrMkNqdUxQcjNVemtEeGhRQ0xJUXNTamxLRlZoV0NXazcycmFENlhubUdLT3NPcnpEbXBNMHpXcFVWN3hXM1JlVmRtTHB3eUt6UWx4ZW1vSGpreFdqK1RySVh6TUp5TDdGekYvdUlxdytqb2dFa0F0am9YOUl6dWxRcXdPK2hjK0hHM0doVjJuQkFwTDFITGdudWtHdFRjTm5zN2cxZWd5a1o2dE5mSktmcXA2U0kzVEJ4US83UDU2bmxWeitucjMyTXljVS9YTTRLRHpxVVBlNlNucWxJR0psUnloeGpqVEtjVFc2Qk5yQWF4MTA1YmEyc1EwOFQrODJhNDhPSlRUcXE3d08xSkFXUG95WkU2bFJ5QTdyWVFFeitkZjUvMjVjUk9FSUlPZTFhb0gycVhpYmllTnJKUVA4N3JOYkZsMi9OYnR6Ni9qWnladlhYcjdGbGJ0MUY1MFhMdXRINEY0QUQzVU16alJxaDlkSTA1NGJCczA0Rks2QTJGMkNYYXpDSmZhMlloNlZuZjVsUTdyYS9EZmtxWmR1cjA2cmJIYnBGNjVPOTJxRFc5K0E1YklnNm9uVXkrbjd5OHFXbEFiUlBiZTdlcHFaWjlUaDZnbmlQLzRUYnlFMm12QnR6ZnhhQTFCREhwRXUySnVuZEMwaG9nY2QzKzFxZjlMVzR5bzB2OE9lMzF6bHBZUkhvMGdFaTBmWUQ3VkovN1hJLzdXUFZGejBxcGxuWnMxWFl6NDBpcDFWWW01YkNlaFhtaHVNbElMNlNIWlpNVk53U21ZVlhkU1RuTDFSN0xvcjFzc3ZMTTJPSWhwc3ZTbWkxSnhoQlZVN0t3ellHNUw1V3VxS2tVQjdDc3hLUUdIV245REhiZjgxZUhhN2hFUlNKdFoyRHd1TDN3b2Vva3ZLK0FDMVJQNUhWTmkrdko4aCswUXNUYi9oN2hpenJqT2gzZjBQbCs1TzkzcVB0dS9rdlpOb1NjYXZWV3B0ZTAvbzJrMEJMRU8yOXFyVW12OUxadTJrTzMzeVMyditQYThRdTNDOVBwZmxkdWJyVzZvNC9aR2c3SE9TWkVoWkRXV2dyM2l6Zlp4VkNJYlVGaE9LbTJWK2w5Snl3a0xCRGZTZFcwMkN2VXptUXVHaWFwNlBCSVVUZHNBcEdEYlZtSWlLMTFVZTN3QzZLZlJEWkVDVDkxMDZhcDBiMk92WHBmZGJWeVBka0JyeGVRTXBRNnNrSnB4UmZUSjJBUi9GWDRLNnlFUUZMdjcwUTNWNnBQYUdvRmszT1Zvay9FUCtrbzRHaVhHazc0SG5pZEI0NTgzSDNNdHdOY3BHc2JqZ3phZzAvSHJIWTVOUy9NV2xPTHJJRy9tMVpSWWYvN1h2dDdJRVpjektyeDRaWUp1VjQ3MElhYk5mYjNvaC9aZ1BWR3ZselFVek95YzFqUE1vc2JRMzVwV1d5ZnpaakptNmwxczlSMjhmQjNiZVBCSlczdGtMUC9zZGFXb2NIQ1VEM3U2Y0dYTmVMK0NUVjBjNCtING9VUHBXbWJlNUNOM2JkK0FIcEFQSHhBOFpDQi9Vc3BGdExDMU9idnNTTkphdGY0TXk5MS9HbHNad09xZEtWcG8rN2Fwc1I3M2pZbFNRTWs1dzlzMlBsRDZ2aFFxeEhVNFZnTUxYUlBsVDVjRmRlZiswQzF5MHFxdytGWUZrOHJ5akJUQVBzOVZlRFl3dXJzdHRuVENtc0t2WFNBTVllbm1OSjg5RksyWGNIMmZhVzAzUXZOTGZTSFlpV2wrRjFKTWZ5c3RBUVBTejFtVE95bDN0ZitTQXZWZllFV0tvSHJZcmZUVXFkR0MzMUw0Q2dyQjQ0cXErR29Jb3lZeWtkRHhweGJSck16SzhRMlUwN2ZmaXdrMXR2V0xyNExVUXB0WmVGWGFTVnAreGZ5M3NPUHF3Z2UvZHBycC9qU3hrai94c2Ira2Vyek40YTVLQ25SOVdTWXFPSytnbnRHdzN3WllMNHYwbElQOU5NNEdtQTlITzZPOU9EL010TFJuVkJoWTdzU2RxRzZURU0xSUJqM2tUT0ROU1QxRldWVFR2VGZReTM1S1lUVy95UWlOUUwrUHc4RHVJSUFBQUI0Mm1OZ1pHQmdBR0xGS2M5WHh2UGJmR1dRNTJBQWdmT2xEMXBnOUgvRGZ4a2NjZXo2UUhVY0RFd2dVUUJnbmd5YkFBQUFlTnBqWUdSZ1lOZi81OERBd0xIdnYrSC95Unh4REVBUkZQQUNBSVlWQmsxNDJtMlRYMGhUVVJ6SHYvZWMzN2tiSTRiSWlLQm1EMklGSVdFaFk0dzlSSkd6OWpCRVJraElETnFETUpLYVVDK0JSRVJjaHR5WGZKSVlGUlNJajN1UWtCZ2hRVEdDaUI3RUltTDBZTktEaUpqQytwNDdWaVkrZlBpZWY3OXp6L2wrejFVL2NURU13S0s2QUdjREpSMUJRVlp3VWo3anN0bEcwcHhDMnFtaG9BYVJWd24wcVdXa1JKQnlObEZTUmM1dFVSOEE4Z3Q1MWg2WE9rWmxGZ1B5RkVsNWp5bHBJQy9ua1pBMzFBWnlUaE1sVzJ2MzZLRG5jZFM5Z0l3cFFNd0FmRk5HM2l6QWx6a3l6ZjRyOXQvQ1Y5M3c5UXE2Wkl2amh6RHRjbzJwdzNkN3VQZlh0cG93NTE3ejIzTThPK2ZzbnFFa29tWVlZWE1FSWpWY1V6MFlzMmVtOXVsN3ZPdjkxbTlualhlNGdoRjVEay92SUVmTlNSazVkUWZ4b08yaDRxemp0clBlR3BBRVBMWTlkeDRleHozZU55ZFZhaFZaK3VQcFpTUlVCVEY1eERHM3RldEdFTkhiaU5pMmJ1QTZmWXpRVTUvYUsxR3ViWHMvRVh4M0dQM1NUKzk1VnJ0R2YwQlNEYlUrdVVtTTZTZ3llZzFwT1l5VTlWNXZJS04rOEI0VHJMRStuc0FveWRxNzZGa2tiRGJjQStvWVlqcU5TN2JXdllXWXU0Z1lQY25xMHpnWGVINEFvWVhXcnMwaHlHQVBxcnRWWXc1VDFDWlpOTjhSNjJTd0g1N3BicEJKdlozVFgyd096RXQyVUFrOFA0Q1FpNUhBai9MLzBQOW45SDZjK3BHOENMejM4RGpRL2RDblFHME9lMkVPUVY3VThCTHlvUm5rN0puVUVMM3lBKzhRT3ZOUDFRM204NDZjYllNbTlTYTF5RG5tMEVHVzZPOUwvaE9idUdyZnVFVlBZcHhZTGFsVlBEVGZPTTVhTmNNYVl2YzFUekNvcStqVlgvZ0dpM3h2eEYxRkhQRS8zS3JPUEFBQUFIamFZMkJnMElIQ0VvWWJqRWFNVjVpS21IbVkzWmh6bUNjeG4yRGhZckZqaVdGcFlabkg4b2RWaWJXQzlSR2JEdHNVZGdGMkUvWWpIQzRjZFJ5SE9LNXgvT0RrNGF6aFN1S2F3dldMMjRPN2gvc1k5eStlREo0RlBQdDQzdkVxOFhyd2R2QWU0cFBpaStNN3hpL0QzOGUvai8rUGdKSkFqOEFCZ1ErQ2NvSitnbW1Dc3dSM0NGNFEvQ0NVSlhSQ21FczRTL2lVaUlUSUpKRnJvZ0tpY2FKVFJEZUpTWWpGaUswUjV4SFBFWjhuNFNFeFIrS1JKSnRrbStRT3lVOVNDbElkVWt1a3VhUnpnSENkakl6TUVWazcyVVd5SitUUzVGYkp1OGtma0grZ3dLV2dvWEJBNFk2aWhtS0Y0Z2tsSTZVQXBUNmxMVXAvbEdXVU01UzdWSGhVSnFrR3FSNVRZMUN6VWF0Uys2V2VvLzVFdzByampLYVFab2ptUEMwQkxRdXRKSzBKV20rMGc3UXY2UmpwVE5INW9UdEpUMDdQUWUrQVBvZCtnUDRjQXlFREg0TVpoakdHRDR3eWpMNFk3eklwTU5VemZXQ1daSGJLM01SOGtZV0xSWTdGTklzamxncVdzNnhrcktxc2JsamJXRit3aWJPWll5dGdtMlM3elU3QWJvTGRKWHNqKzFVT0pnNlhISjBjTXh6MzRJQ25IRzg0UG5QODV5VG01T2ZVNUxUTldjUTV3M21mOHlzWE95Q01jV2x3YVhCbGM4MXk3WExqY3l0eE4zSy9BZ0Q5ZDVNL0FBQUFBUUFBQU9rQVRnQUZBQUFBQUFBQ0FBRUFBZ0FXQUFBQkFBRHNBQUFBQUhqYW5aSTlUc05BRUlYZk91RW5Ba0ZvRUtKQUxvTUV4b0VrSUZNQkxVU0lJSkFRalVNTWljaWZzQWtnVVZKU2NnS093UW5nRXBTY2daSzM2NDFsT1lvTE5NcnVOK08zTTdNN0FUQ1BEMlFnc2prQVhmNUNGbGloRjdLQmFieHF6dUFFYjVxektPQkg4d1NxWWs3ekpBcmlVdk1VTHNTTDVoeVd4YmZtR1ZURXIrWlpWQXhMY3g1TFJrUHpBdkxHcytaUExCckRIcjVnRys4NFFBOTlQT0VPTGR5Z2lRQW0rN25DS3ZjanVJemZrbXI4MnFHeUMxK3RhNHh0d3FhVllaSDMwS2Fac1N5KzhqenVIdmNCMXdhVngrUWVIbFUybDRvcXZZR2lRNTdacDllbWJsZzNXZFdoYm55R0dtdDBHSy9yTEU2c3gvUzZabFQ1VEhYclV5ZnJtU2l5WjF2WkxuUFVHSkVjanphcERQaGVVaitJVGxqWXdrNmk2ckRtK2tpbjQ3dHJxWGVVRkZEalV1c3BUVGlWSHE1VHAyU2xmSk16Q2poNUJ4dTBCMlZXbE5zZnlTUnYyUG5ucVhIM1M3N0RPZjA2N3lUUEJ0RmJuckxxdmZxUDlabEhScmZWV21ZWEpiNnlvNlljenJxSTBoLzRab3FIQUFBQWVOcHQwRVZzMDNFVXdQSHYyeXBiNSs0Yjd0TC92KzBFYjdmOWNYZG5zSzB0akcxMEZCaE9HQzZCa0hDRFlCY2d1QVlDSElEZ0ZpVEFnVE1lRHNBVnV2MS8zSGlYVDk1TG51UVJSVnY4c2RLTi84VW5rQ2lKSmhvTFZtellpU0VXQjNIRWswQWlTU1NUUWlwcHBKTkJKbGxrazBNdWVlUlRRQ0ZGdEtNOUhlaElKenJUaGE2UlBkM3BRVTk2MFpzKzlNV0pobzRMTng2S0thR1VNdnJSbndFTVpCQ0RHWUlYSCtWVVVJbkJVSVl4bkJHTVpCU2pHY05ZeGpHZUNVeGtFcE9ad2xTbU1aMFp6R1FXczVuRFhPWlJKUmFPMHNJbWJyQ2ZqMnhtTnpzNHdIR09pWlh0dkdjais4UW1kbmF4bGR0OGtCZ09jb0pmL09RM1J6akZBKzV4bXZrc1lBL1ZQS0tHK3p6a0dZOTV3dFBJajJwNXlYTmVjQVkvUDlqTEcxN3htZ0JmK01ZMkZoSmtFWXVwbzU1RE5MQ0VSa0kwRVdZcHkxak9aMWF3a21aV3NZYlZYT1V3NjFqTGVqYndsZTljNHl6bnVNNWIza21zT0NSTzRpVkJFaVZKa2lWRlVpVk4waVZETWpuUEJTNXpoVHRjNUJKMzJjSkp5ZUltdHlSYmN0Z3B1WkluK1ZJZ2hUWi9YWE5qUUxPSDY0Tk9wN1BDMU90VXF0eW5LMTNLc2xiMVNJTlNVK3BLbDlLdDlDaUxsU1hLVXVXL2VWNVRUYzNWTkVkdDBCOE8xVlJYTlFYTWttNlllZ3hMWlRqVTBKWjRqUEpXRFo5NVIwUmQ2Vks2L3dMMmFKdjRBQUFBZU5vOXpUc0t3a0FVaGVGTTNnOWpYaVBhUkJKQkJHY0pOaFltQ0duRUtnRnJsMkJ0WTZscnViRnlVZTVCRHpxWjdueW4rVi9zY3lOMjF4cHlEMjNQMktQcmExdTBKY1ZkUS95SWNlMXlzc1dwMWNnb0tqTEVqc3lpZWhvelhmeGdBZVlBRzdEMkVnNWdieVJjd0NrbFBNQjlTL2lBTjVjSUFEK1hHQUhCNGc5R29heVA4WVpUWGZSR2ZRRWpjTHhVak1Ib3JKaUE4Vll4QlJPaG1JSHBXcEdEMlVweEF2SjhZRWRjZkFHanhsUGtBQUFBQUFGVFVEQUVBQUE9KSBmb3JtYXQoJ3dvZmYnKSx1cmwoaHR0cHM6Ly9jZG4uYXV0aDAuY29tL2ZvbnRzL3Byb3hpbWEtbm92YS9wcm94aW1hbm92YS1zZW1pYm9sZC13ZWJmb250LXdlYmZvbnQudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc3R5bGU6bm9ybWFsfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6YXV0aDA7c3JjOnVybChkYXRhOmFwcGxpY2F0aW9uL3gtZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGQwOUdSazlVVkU4QUFBY2dBQXNBQUFBQUNad0FBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCRFJrWWdBQUFCQ0FBQUErVUFBQVNDd2F0SU5FWkdWRTBBQUFUd0FBQUFHZ0FBQUJ4d1ViVjVSMFJGUmdBQUJRd0FBQUFkQUFBQUlBQTNBQVJQVXk4eUFBQUZMQUFBQUVVQUFBQmdVQjFlMW1OdFlYQUFBQVYwQUFBQVZnQUFBV0FHbXhIU2FHVmhaQUFBQmN3QUFBQW9BQUFBTmdJUkwzdG9hR1ZoQUFBRjlBQUFBQmdBQUFBa0JDOENBMmh0ZEhnQUFBWU1BQUFBR0FBQUFCZ0VXZ0RzYldGNGNBQUFCaVFBQUFBR0FBQUFCZ0FLVUFCdVlXMWxBQUFHTEFBQUFPUUFBQUhDS0s1ZkZuQnZjM1FBQUFjUUFBQUFFQUFBQUNBQUF3QUJlSnh0VTIxTVcxVVlQcmYwOWg1TDErbmttbzAxRjExaTV2eFlHSkNZek5VSTI3U1pNdG5BdVlLSkgvR2p5QmdKYTdPV3JNV1dlOWZTdHkzYzlyWlFDK0ZEQmgxQmZ1SFh3S2tKUVRIZER6UDhJWW4rMEJoK0tEK01QODVORGdtZXk0eGY4Wjc3NXA3M25PYzg3L08rNzdrY01wc1J4M0c3WHZWNVBkV1BYVzUvL2EwM3ZJZ3pJUTdWNi90TnVxTk0zMnRPMkRpd2xZSE5MRm5SdnVZOTJ3Qi9UV3hDSFBTc3J2RU8xTHZiZ2REZERwUyt4NEVjRHJPNEI1a01tbDFvM3orNS94V0hQU2ZSMCtnTWNxRVRxQUU5dyt3NHNocW5UT2duenNsRlROaDB4VFJvbWpMOVdOWmhKeXA1U3B5TDNPcko5bzFmenJYNXVqQ0V3OVJKbmIxWmtId3p1Y1h4c1d6bTFzaGNwbVBXL3dYY3hOK05mYjJ4TWZhY1U0THovbk1kRi9EM0ZJbFRtdktCWHd1cFo5OTlXOFBSUEV6d001T0ZKZmdJZnhWYWNybENyYWNsZUxuUU5uTUpneThhNHJ2Nm1udXVLUDVJOExXWk1DWUhMT1J6WWhmdnhBWlFsR094UkJaeS9WbThaR0c4SC9vemYvT084OU1USXgvREFpeUhQbkhCVllqR294RFVBb08rNUVoMlBGMkVEUmg3SHVveHZPUjNYK2ljNnl1eG5MQ2R6Sklwa2JpcG0wOHJFSlpsUlFtRG9tTHFKcTNVVFZ0NXc1ZFZKUTFaVmNXa2xTR1o4WXBxK09sMEZsUVpHNmNKRzd6Sy9EUURRMWhSR1BNMkdSTUhZb2tvUkEwcDBSakU2UXYwdUpGRWhJVlFCdTlRdXNoUnlzeWcxRlIxVUdXVUNnQXhrSEZzMTN1SUtFNTVoNXE2UFJpNmVwa2tkK2NRU04zelF5dFRrL2xoVWo0OXJUWmZiLzhXdnNFL1gxc2pWbUs5MW5CRWdwUHQ5YzJkNzEwbHU3dUdROWozc0RnNzFMZnN6UVcwMm9sWGNsaCtINGI1RzVQRkVxemdOZi9LNGNQK3BnWUptb3FuYm5neGhKUU8zaE0rMHUyUGVOOEp0TXdITVRscnNldDFaRTJjTDE3MFZGRnRxNDVvd255eE9DOHRDdXVsMHZwNjZkUXhpV3IzdFJIdm9yRHEvclN4MGUxdWxNZ0NYUlpKaXpBYXpBY2t1bUFKQklPQkt0b2lCUExCVWJacEdjM25SNnZvQ1ZJbmFtazVVdldJRUpIbFNFUk9hOUl2Z3BabUg3dGV1U25lYjZXZHRFWjh3UG80MGNRRDF2OWZHOUNyUlZYZXFUbGRvMnQvZGd3RENMU1cxUDZuVlEvUmcyU1ZyUExxVHAxWmZUTjZpd2dBV3hXOG9VRGF1bVRwWXlxcTlBcElDRENRU0tXU09Ka1FVc2xVSXBYQVNkQzdJUWw4S3M1R1AwN0VMYWxZSWdaUmZMcEgzTm9MNUJ5dDVvbVh1a1FndDZtSE92azRRRnlLeGFMOU81Y2dHVXZoT0ZBUGVSTG9iVDZTa1RPU1htZkpaRmc4dTY1VmdBaUxlbDJoVUxCSVZwUGx3VzNiWFFXYmxmM1g5Nkl5anBNZWZmYUhMNi8vZm5IRFNPeEZVa09QTXRVM2FRMTVBdWorUTN3NXFkd2tsWWVvOFc3eTVaK1JHbUlBemxNRHlEYllCSUIzTHIvNTIreXZ1UHdQbTE4R2lRQUFBSGljWTJCZ1lHUUFndk54eDM2QjZBdVY1Zll3R2dCUmlRYnRBQUI0bkdOZ1pHQmc0QU5pQ1FZUVlHSmdCRUpPSUdZQjh4Z0FCSzBBUEFBQUFIaWNZMkJtWW1DY3dNREt3TUhvdzVqR3dNRGdEcVcvTWtneXREQXdNREd3Y2pMQUFDTURFZ2hJYzAxaGNHQklaQ2hnZlBEL0FZTWVFNUlhTUZzQkNCa0IwVzBKbWdBQUFIaWNZMkJnWUdhQVlCa0dSZ1lRaUFMeUdNRjhGZ1k3SU0wQmhFeGdtWFNHZ3YvL3dheEVHT3YvWkxCYU5yQW9Cd01uQXl1UXo4VEFEdFRMd0FnVWhSaEpROERHeWNySXhNNEM0ekxUMmo0U0FRRGZOUWlBQUFCNG5HTmdaR0JnQU9JSHArcDU0dmx0dmpKd016R0F3SVhLY250a21va0JMTTRCb1FBS3pnZndlSnhqWUdSZ1lHSUFBajB3Q1dJek1xQUNKZ0FGMEFBNUFnQUFBQUlBQUFBQUh3Q1FBQ0FBUUFBYkFCc0FBQUFCQUFCUUFBQUtBQUI0bkkyT01VN0RNQmlGUDdkSkpFUm5WTEhncldKSVpLZXdWTXc5QUVQM1NvM1NMSW1VcHVvMW1IcVlub01MY0F3Mm5vT1JZRUNxSmR2Zi85N3o3eCtZY2NZUWxoSGZSNTZROFJ4NXlpTnZrUk5sM2lPbjNQSVpPV05tSHBRMHlZMlUrZmdxOEVUNVJlUXByN3hFVHBTNVJFNjU0eU55eHR5a2JEa3lzTWVSYzZKaFIwMGxoZTF4Mkx2ODFPenFTdFVmNjBkYzA5RktDSGMvbXBhU1FyMHNLKzMvZW4rN1M3eDBQN3FsVHMrVFduYnRzTzc2dXJKbDRleksvcDVDNWRMbjN1V2w4NHBlT2ZsR1lzOUJnVENzMVRkaFFEWlZmMmk2MXZyQ1hkdnFDeklXUmhWNG5HTmdaa0FHakF4b0FBQUFqZ0FGKSBmb3JtYXQoXFxcIndvZmZcXFwiKSx1cmwoaHR0cHM6Ly9jZG4uYXV0aDAuY29tL2ZvbnRzL3dpZGdldC9mb250cy9hdXRoMC13aWRnZXQuZW90KSBmb3JtYXQoXFxcImVtYmVkZGVkLW9wZW50eXBlXFxcIiksdXJsKGh0dHBzOi8vY2RuLmF1dGgwLmNvbS9mb250cy93aWRnZXQvZm9udHMvYXV0aDAtd2lkZ2V0LnR0ZikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpLHVybChodHRwczovL2Nkbi5hdXRoMC5jb20vZm9udHMvd2lkZ2V0L2ZvbnRzL2F1dGgwLXdpZGdldC5zdmcjYXV0aDAtd2lkZ2V0KSBmb3JtYXQoXFxcInN2Z1xcXCIpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1pY29uYmFzZSwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IFtjbGFzcyo9XFxcIiBhMC1pY29uLVxcXCJdOmJlZm9yZSwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IFtjbGFzc149YTAtaWNvbi1dOmJlZm9yZXtmb250LWZhbWlseTphdXRoMCFpbXBvcnRhbnQ7Zm9udC1zdHlsZTpub3JtYWwhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OjQwMCFpbXBvcnRhbnQ7Zm9udC12YXJpYW50Om5vcm1hbCFpbXBvcnRhbnQ7dGV4dC10cmFuc2Zvcm06bm9uZSFpbXBvcnRhbnQ7c3BlYWs6bm9uZTtsaW5lLWhlaWdodDoxOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWljb24tYnVkaWNvbi0yOmJlZm9yZXtjb250ZW50OlxcXCJkXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1pY29uLWJ1ZGljb24tMzpiZWZvcmV7Y29udGVudDpcXFwiZVxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtaWNvbi1idWRpY29uLTk6YmVmb3Jle2NvbnRlbnQ6XFxcInBcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWljb24tYnVkaWNvbi0xOmJlZm9yZXtjb250ZW50OlxcXCJnXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1pY29uLWJ1ZGljb246YmVmb3Jle2NvbnRlbnQ6XFxcImNcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWljb24tYmFkZ2U6YmVmb3Jle2NvbnRlbnQ6XFxcImZcXFwifSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWljb24tYnVkaWNvbi00OmJlZm9yZXtjb250ZW50OlxcXCJhXFxcIn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1pY29uLWJ1ZGljb24tNTpiZWZvcmV7Y29udGVudDpcXFwiYlxcXCJ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtYnRuLXNtYWxse2ZvbnQtc2l6ZToxMHB4O2xldHRlci1zcGFjaW5nOjFweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Ym9yZGVyOjFweCBzb2xpZCAjZjFmMWYxO3BhZGRpbmc6NHB4IDEwcHggNHB4IDExcHg7bWFyZ2luOjAgNXB4O2JvcmRlci1yYWRpdXM6MTAwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2t9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtYnRuLXNtYWxsOmhvdmVye2JhY2tncm91bmQ6I2YxZjFmMX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1idG4tc21hbGw6Zm9jdXN7YmFja2dyb3VuZDojZTllOWU5O2JvcmRlci1jb2xvcjojZTllOWU5fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVse3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6M3B4Oy13ZWJraXQtYm94LXNoYWRvdzowIDFweCAxMHB4IHJnYmEoMCwwLDAsLjQpO2JveC1zaGFkb3c6MCAxcHggMTBweCByZ2JhKDAsMCwwLC40KTtmb250LXNpemU6MTNweDtwb3NpdGlvbjpyZWxhdGl2ZTtjb2xvcjojNGQ0ZDRkO2Rpc3BsYXk6YmxvY2s7em9vbToxfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsICp7Zm9udC1mYW1pbHk6cHJveGltYV9ub3ZhIWltcG9ydGFudH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtbW9kZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVpbjstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouM3M7LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50Om9uY2U7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47cGFkZGluZzowIDIwcHggMjBweDttYXJnaW46YXV0b30jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAqLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIGlucHV0e2ZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIGEsI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgYnV0dG9uey13ZWJraXQtdHJhbnNpdGlvbjphbGwgLjJzIGVhc2U7LW1vei10cmFuc2l0aW9uOmFsbCAuMnMgZWFzZTt0cmFuc2l0aW9uOmFsbCAuMnMgZWFzZTtmb250LXdlaWdodDo3MDB9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLWhlYWRlcnttYXJnaW4tYm90dG9tOjA7bWFyZ2luLXRvcDowfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1oZWFkZXIgaDF7Zm9udC1zaXplOjI0cHg7Zm9udC13ZWlnaHQ6MTAwO21hcmdpbi1ib3R0b206MTBweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtaWNvbi1jb250YWluZXJ7aGVpZ2h0OjkwcHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLWljb24tY29udGFpbmVyIC5hMC1pbWFnZXttYXJnaW46YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tYm90dG9tOjEwcHg7bWFyZ2luLXRvcDoyMHB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1pY29uLWNvbnRhaW5lciAuYTAtaW1hZ2UuYTAtZ3JhdmF0YXIgaW1ne2JvcmRlci1yYWRpdXM6NThweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtaWNvbi1jb250YWluZXIgLmEwLWltYWdlIGltZ3t3aWR0aDphdXRvO2hlaWdodDo1OHB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1pY29uLWNvbnRhaW5lciAuYTAtYXZhdGFye2JhY2tncm91bmQ6I2YxZjFmMTttYXJnaW46YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tYm90dG9tOjEwcHg7Ym9yZGVyLXJhZGl1czoxMDAlO3dpZHRoOjYwcHg7aGVpZ2h0OjYwcHg7bWFyZ2luLXRvcDoyMHB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1pY29uLWNvbnRhaW5lciAuYTAtYXZhdGFyIGl7Y29sb3I6I0VCNTQyNDtmb250LXNpemU6MjhweDtkaXNwbGF5OmJsb2NrO3BhZGRpbmctdG9wOjE2cHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLWZvb3RlcnttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToxMHB4O2Rpc3BsYXk6YmxvY2s7b3ZlcmZsb3c6aGlkZGVufSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1mb290ZXIgLmEwLWxvZ297bWFyZ2luLXRvcDowO2Rpc3BsYXk6YmxvY2t9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLWZvb3RlciAuYTAtbG9nbyBpe2NvbG9yOiNFQjU0MjQ7Zm9udC1zaXplOjE4cHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLWluc3RydWN0aW9uc3ttYXJnaW4tYm90dG9tOjEwcHg7bGluZS1oZWlnaHQ6MThweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtbGFzdC10aW1le2ZvbnQtc2l6ZToxNHB4O21hcmdpbi1ib3R0b206MjBweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtY29ycG9yYXRlLWNyZWRlbnRpYWxze21hcmdpbi1ib3R0b206MTBweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtZW1haWwsI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLXVzZXJuYW1le2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNjY2N9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLXBhc3N3b3JkLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1yZXBlYXRQYXNzd29yZHtib3JkZXItdG9wOjFweCBzb2xpZCAjY2NjfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1wYXNzd29yZHtib3JkZXI6MH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtbm90LWxvZ2dlZGluIC5hMC1lbWFpbCwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtcmVzZXQgLmEwLWVtYWlse2JvcmRlci10b3A6MH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtc3NvLW5vdGljZS1jb250YWluZXJ7bWFyZ2luLXRvcDoyMHB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1zc28tbm90aWNlLWNvbnRhaW5lciBpe3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDoxcHg7bWFyZ2luLXJpZ2h0OjJweDtmb250LXNpemU6MTFweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtc3NvLW5vdGljZS1jb250YWluZXIgLmEwLXNzby1ub3RpY2V7Zm9udC1zaXplOjEwcHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2xldHRlci1zcGFjaW5nOjFweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtZW1haWwgLmEwLWlucHV0LWJveCwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmQgLmEwLWlucHV0LWJveCwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtcmVwZWF0UGFzc3dvcmQgLmEwLWlucHV0LWJveCwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtdXNlcm5hbWUgLmEwLWlucHV0LWJveHtwb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6NTBweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtZW1haWwgLmEwLWlucHV0LWJveCBpLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1wYXNzd29yZCAuYTAtaW5wdXQtYm94IGksI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLXJlcGVhdFBhc3N3b3JkIC5hMC1pbnB1dC1ib3ggaSwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtdXNlcm5hbWUgLmEwLWlucHV0LWJveCBpe2ZvbnQtc2l6ZToxNHB4O3otaW5kZXg6MTAwMDt0b3A6MThweDtsZWZ0OjE2cHg7cG9zaXRpb246YWJzb2x1dGU7Y29sb3I6Izk5OX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtZW1haWwgaW5wdXQsI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLXBhc3N3b3JkIGlucHV0LCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1yZXBlYXRQYXNzd29yZCBpbnB1dCwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtdXNlcm5hbWUgaW5wdXR7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3BhZGRpbmc6MTZweCAxMHB4O3BhZGRpbmctbGVmdDo0MHB4O2JvcmRlci1yYWRpdXM6MDtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO2xlZnQ6MDtib3R0b206MDt0b3A6MDtiYWNrZ3JvdW5kOiNmZmY7bWF4LXdpZHRoOjI0OHB4O3dpZHRoOjEwMCV9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLWVtYWlsIGlucHV0OmZvY3VzLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1wYXNzd29yZCBpbnB1dDpmb2N1cywjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtcmVwZWF0UGFzc3dvcmQgaW5wdXQ6Zm9jdXMsI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLXVzZXJuYW1lIGlucHV0OmZvY3Vze2JhY2tncm91bmQ6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojOWRhNGFkOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAuMnMgZWFzZS1pbn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCBpbnB1dDotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM5ZGE0YWR9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgaW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6IzlkYTRhZH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCBpbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzlkYTRhZH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCBpbnB1dDpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNjY2fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIGlucHV0OmZvY3VzOi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6IzY2Nn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCBpbnB1dDpmb2N1czo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojNjY2fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIGlucHV0OmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNjY2fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1pbnB1dHN7Ym9yZGVyOjFweCBzb2xpZCAjY2NjO2JvcmRlci1yYWRpdXM6M3B4O292ZXJmbG93OmhpZGRlbn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtZW1haWwgaW5wdXR7Ym9yZGVyLWJvdHRvbTowO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6M3B4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjNweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmQgaW5wdXQsI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLXVzZXJuYW1lIGlucHV0e2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjNweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtc2VwYXJhdG9ye21hcmdpbi1ib3R0b206MTBweDttYXJnaW4tdG9wOjZweDtjb2xvcjojOTk5O2ZvbnQtc2l6ZToxMnB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1zZXBhcmF0b3Igc3BhbntsZXR0ZXItc3BhY2luZzoxcHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIGJ1dHRvbi5hMC1wcmltYXJ5e3BhZGRpbmc6MjBweCAxMHB4Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO292ZXJmbG93OmhpZGRlbjt3aGl0ZS1zcGFjZTpub3dyYXA7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OjcwMDtkaXNwbGF5OmJsb2NrIWltcG9ydGFudDt3aWR0aDoxMDAlIWltcG9ydGFudDtmbG9hdDpub25lO21pbi13aWR0aDphdXRvO2xldHRlci1zcGFjaW5nOjFweDttYXJnaW4tYm90dG9tOjIwcHg7bWFyZ2luLXRvcDoyMHB4O2JhY2tncm91bmQtY29sb3I6IzE2MjE0RDtjb2xvcjojZmZmO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yYWRpdXM6M3B4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIGJ1dHRvbi5hMC1wcmltYXJ5OmhvdmVye2JhY2tncm91bmQ6IzBiMTAyNX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCBidXR0b24uYTAtcHJpbWFyeTpmb2N1c3tiYWNrZ3JvdW5kOiMzZTQ5NzV9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgaW5wdXRbZGlzYWJsZWRde2JhY2tncm91bmQtY29sb3I6I2Q5ZGVlMH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtc3VjY2Vzc3tjb2xvcjpncmVlbn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtZXJyb3J7Y29sb3I6cmVkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1lcnJvciwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtc3VjY2Vzc3ttYXJnaW4tYm90dG9tOjEwcHg7cGFkZGluZzowIDE1cHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtZXJyb3JzLmEwLWVycm9ycy1nbG9iYWx7Ym9yZGVyLWNvbG9yOnJlZH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1lcnJvcnMgLmEwLWVycm9yLWlucHV0IGl7Y29sb3I6cmVkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWVycm9ycyAuYTAtZXJyb3ItaW5wdXQgc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTVweDtyaWdodDoxNHB4O2ZvbnQtc2l6ZTo5cHg7bGV0dGVyLXNwYWNpbmc6MXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjb2xvcjpyZWQ7Ym9yZGVyOjFweCBzb2xpZCByZWQ7cGFkZGluZzo0cHggNnB4IDRweCA3cHg7Ym9yZGVyLXJhZGl1czozcHg7ZGlzcGxheTpibG9jazt6LWluZGV4OjEwMDAwfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWVycm9ycyAuYTAtZXJyb3ItaW5wdXQgaW5wdXR7Y29sb3I6cmVkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWVycm9ycyAuYTAtZXJyb3ItaW5wdXQgaW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmVkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWVycm9ycyAuYTAtZXJyb3ItaW5wdXQgaW5wdXQ6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpyZWR9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtZXJyb3JzIC5hMC1lcnJvci1pbnB1dCBpbnB1dDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpyZWR9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtZXJyb3JzIC5hMC1lcnJvci1pbnB1dCBpbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmVkfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsIC5hMC1jbG9zZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MjBweDtyaWdodDoyMHB4O2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXI7Zm9udC1zaXplOjE2cHg7Y29sb3I6I2NjY30jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtY2xvc2U6aG92ZXJ7Y29sb3I6IzMzM30jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtc2lnbnVwLWZvb3RlciBzbWFsbHttYXJnaW4tdG9wOjEwcHg7ZGlzcGxheTpibG9ja30jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmRfcG9saWN5X2Fycm93e2JhY2tncm91bmQ6IzFGMjQyRX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmRfcG9saWN5X2Fycm93OmFmdGVye3RvcDoxMDAlO2xlZnQ6MThweDtib3JkZXI6c29saWQgdHJhbnNwYXJlbnQ7Y29udGVudDpcXFwiIFxcXCI7aGVpZ2h0OjA7d2lkdGg6MDtwb3NpdGlvbjphYnNvbHV0ZTtwb2ludGVyLWV2ZW50czpub25lO2JvcmRlci1jb2xvcjpyZ2JhKDMxLDM2LDQ2LDApO2JvcmRlci10b3AtY29sb3I6IzFGMjQyRTtib3JkZXItdG9wLWNvbG9yOnJnYmEoMzEsMzYsNDYsLjk1KTtib3JkZXItd2lkdGg6OXB4O21hcmdpbi1sZWZ0Oi05cHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgLmEwLXBhc3N3b3JkX3BvbGljeXtkaXNwbGF5Om5vbmU7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlaW47LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjNzOy13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDpvbmNlOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1pbnB1dHMtd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3l7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjUwcHg7bGVmdDoyLjUlO3dpZHRoOjk1JTtkaXNwbGF5OmJsb2NrO3RleHQtYWxpZ246bGVmdDttYXJnaW4tdG9wOjE1cHg7cGFkZGluZzoxNXB4O3BhZGRpbmctdG9wOjEycHg7YmFja2dyb3VuZDojMUYyNDJFO2JhY2tncm91bmQ6cmdiYSgzMSwzNiw0NiwuOTUpO2JvcmRlci1yYWRpdXM6NXB4O3otaW5kZXg6MTAwMH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3k6YWZ0ZXJ7dG9wOjEwMCU7bGVmdDoxOHB4O2JvcmRlcjpzb2xpZCB0cmFuc3BhcmVudDtjb250ZW50OlxcXCIgXFxcIjtoZWlnaHQ6MDt3aWR0aDowO3Bvc2l0aW9uOmFic29sdXRlO3BvaW50ZXItZXZlbnRzOm5vbmU7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzYsNDYsMCk7Ym9yZGVyLXRvcC1jb2xvcjojMUYyNDJFO2JvcmRlci10b3AtY29sb3I6cmdiYSgzMSwzNiw0NiwuOTUpO2JvcmRlci13aWR0aDo5cHg7bWFyZ2luLWxlZnQ6LTlweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3kgbGksI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtYWN0aXZlLXB3ZC1zdHJlbmd0aCAuYTAtcGFzc3dvcmRfcG9saWN5IHVse21hcmdpbjowO3BhZGRpbmc6MDtsaXN0LXN0eWxlOm5vbmU7Y29sb3I6I2RkNGIzOX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3kgdWwgbGkgdWwgbGl7Y29sb3I6I2ZmZn0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3kgdWwgbGkgdWwgbGk6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7d2lkdGg6NXB4O2hlaWdodDo1cHg7Ym9yZGVyLXJhZGl1czo3cHg7Ym9yZGVyOjJweCBzb2xpZCAjZmZmO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3RvcDo3cHg7bGVmdDoycHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtYWN0aXZlLXB3ZC1zdHJlbmd0aCAuYTAtcGFzc3dvcmRfcG9saWN5IHVsIGxpIHVsIGxpLmEwLWNoZWNrZWQ6YmVmb3Jle3RvcDozcHg7bGVmdDowfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWFjdGl2ZS1wd2Qtc3RyZW5ndGggLmEwLXBhc3N3b3JkX3BvbGljeSBsaXtsaW5lLWhlaWdodDoxLjU7bWFyZ2luLXRvcDo1cHg7Zm9udC1zaXplOjEycHg7Zm9udC13ZWlnaHQ6NjAwOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAuM3MgZWFzZS1pbjstbW96LXRyYW5zaXRpb246Y29sb3IgLjNzIGVhc2UtaW47dHJhbnNpdGlvbjpjb2xvciAuM3MgZWFzZS1pbjtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nLWxlZnQ6MThweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3kgbGkuYTAtY2hlY2tlZHtjb2xvcjojN0VEMzIxfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWFjdGl2ZS1wd2Qtc3RyZW5ndGggLmEwLXBhc3N3b3JkX3BvbGljeSBsaS5hMC1jaGVja2VkOmJlZm9yZXtmb250LWZhbWlseTphdXRoMCFpbXBvcnRhbnQ7Zm9udC1zdHlsZTpub3JtYWwhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OjQwMCFpbXBvcnRhbnQ7Zm9udC12YXJpYW50Om5vcm1hbCFpbXBvcnRhbnQ7dGV4dC10cmFuc2Zvcm06bm9uZSFpbXBvcnRhbnQ7c3BlYWs6bm9uZTtsaW5lLWhlaWdodDoxOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlO2NvbnRlbnQ6XFxcImFcXFwiO2JvcmRlcjowO3dpZHRoOmF1dG87aGVpZ2h0OmF1dG87Ym9yZGVyLXJhZGl1czowO2ZvbnQtc2l6ZToxMnB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWFjdGl2ZS1wd2Qtc3RyZW5ndGggLmEwLXBhc3N3b3JkX3BvbGljeSBsaTpiZWZvcmV7Zm9udC1mYW1pbHk6YXV0aDAhaW1wb3J0YW50O2ZvbnQtc3R5bGU6bm9ybWFsIWltcG9ydGFudDtmb250LXdlaWdodDo0MDAhaW1wb3J0YW50O2ZvbnQtdmFyaWFudDpub3JtYWwhaW1wb3J0YW50O3RleHQtdHJhbnNmb3JtOm5vbmUhaW1wb3J0YW50O3NwZWFrOm5vbmU7bGluZS1oZWlnaHQ6MTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTtjb250ZW50OlxcXCJlXFxcIjttYXJnaW4tcmlnaHQ6MTBweDtmb250LXNpemU6MTFweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6M3B4O2xlZnQ6MH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoICNhMC1jaGFuZ2VfcGFzc3dvcmQgLmEwLXBhc3N3b3JkX3BvbGljeXtib3R0b206MTAwcHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgI2EwLWNoYW5nZV9wYXNzd29yZCAuYTAtcGFzc3dvcmR7bWFyZ2luLWJvdHRvbTowfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsICNhMC1jaGFuZ2VfcGFzc3dvcmQgLmEwLXBhc3N3b3JkIGlucHV0e2JvcmRlci1yYWRpdXM6MH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbCAjYTAtY2hhbmdlX3Bhc3N3b3JkIC5hMC1jb2xsYXBzZS1yZXNldCAuYTAtaW5zdHJ1Y3Rpb25ze21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjIwcHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwgI2EwLWNoYW5nZV9wYXNzd29yZCAuYTAtcmVzZXRfZWFzeV9wYXNzd29yZCBpbnB1dHtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czozcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czozcHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtc2FkLXBsYWNlaG9sZGVye2Rpc3BsYXk6bm9uZX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0IC5hMC1zYWQtcGxhY2Vob2xkZXJ7ZGlzcGxheTpibG9jazt0ZXh0LWFsaWduOmxlZnQ7Zm9udC13ZWlnaHQ6NzAwO21hcmdpbjoxNHB4IDAgMTBweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0IC5hMC1pbnB1dHN7Ym9yZGVyOjAhaW1wb3J0YW50fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLW5vLXBsYWNlaG9sZGVyLXN1cHBvcnQgLmEwLWlucHV0cyAuYTAtZW1haWwsI2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtbm8tcGxhY2Vob2xkZXItc3VwcG9ydCAuYTAtaW5wdXRzIC5hMC1wYXNzd29yZCwjYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0IC5hMC1pbnB1dHMgLmEwLXJlcGVhdFBhc3N3b3JkLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLW5vLXBsYWNlaG9sZGVyLXN1cHBvcnQgLmEwLWlucHV0cyAuYTAtdXNlcm5hbWV7Ym9yZGVyOjB9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtbm8tcGxhY2Vob2xkZXItc3VwcG9ydCAuYTAtaW5wdXRzIC5hMC1pbnB1dC1ib3h7Ym9yZGVyOjFweCBzb2xpZCAjY2NjfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLW5vLXBsYWNlaG9sZGVyLXN1cHBvcnQgLmEwLWlucHV0cyAuYTAtaW5wdXQtYm94IGlucHV0e2JvcmRlcjowIWltcG9ydGFudH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1jb3Jkb3ZhLmEwLWlvcyAuYTAtY2VudHJpeHtwYWRkaW5nLXRvcDoyMHB4fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6NDgwcHgpeyNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLWllOC1vdmVybGF5e2JhY2tncm91bmQ6bm9uZSFpbXBvcnRhbnR9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAjYTAtb25lc3RlcHstd2Via2l0LXRyYW5zaXRpb246bm9uZTstbW96LXRyYW5zaXRpb246bm9uZTt0cmFuc2l0aW9uOm5vbmV9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtYWN0aXZlLXB3ZC1zdHJlbmd0aCAuYTAtZW1haWxQYXNzd29yZHtwb3NpdGlvbjpzdGF0aWN9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtYWN0aXZlLXB3ZC1zdHJlbmd0aCAuYTAtcGFzc3dvcmRfcG9saWN5e3Bvc2l0aW9uOnN0YXRpYzt3aWR0aDphdXRvO2xlZnQ6YXV0bzt0b3A6YXV0bztiYWNrZ3JvdW5kOjAgMDtwYWRkaW5nOjAgMTVweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3kgbGkuYTAtY2hlY2tlZHtjb2xvcjojNUU5RDE5fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWFjdGl2ZS1wd2Qtc3RyZW5ndGggLmEwLXBhc3N3b3JkX3BvbGljeSB1bCBsaSB1bCBsaXtjb2xvcjojM2U0OTc1fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBhbmVsLmEwLWFjdGl2ZS1wd2Qtc3RyZW5ndGggLmEwLXBhc3N3b3JkX3BvbGljeSB1bCBsaSB1bCBsaTpiZWZvcmV7Ym9yZGVyLWNvbG9yOiMzZTQ5NzV9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcGFuZWwuYTAtYWN0aXZlLXB3ZC1zdHJlbmd0aCAuYTAtcGFzc3dvcmRfcG9saWN5OmJlZm9yZXt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7ZGlzcGxheTpibG9jazttYXJnaW4tYm90dG9tOjEwcHg7Zm9udC1zaXplOjExcHg7Y29udGVudDpcXFwiUGFzc3dvcmQgUG9saWN5OlxcXCI7Y29sb3I6Izk5OX0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wYW5lbC5hMC1hY3RpdmUtcHdkLXN0cmVuZ3RoIC5hMC1wYXNzd29yZF9wb2xpY3k6YWZ0ZXJ7ZGlzcGxheTpub25lfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1vdmVybGF5e2Rpc3BsYXk6YmxvY2s7b3ZlcmZsb3c6YXV0bztwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOiNmZmZ9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcG9wdXAgLmEwLWNlbnRyaXh7dmVydGljYWwtYWxpZ246dG9wO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246c3RhdGljfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbHstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7YmFja2dyb3VuZDojZmZmfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbCAuYTAtbW9kZXtwYWRkaW5nOjAgMjBweCAyMHB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbCAuYTAtaWNvbi1jb250YWluZXJ7aGVpZ2h0OjYwcHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcG9wdXAgLmEwLWNlbnRyaXggLmEwLXBhbmVsIC5hMC1pY29uLWNvbnRhaW5lciAuYTAtaW1hZ2V7bWFyZ2luLXRvcDoxMHB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbCAuYTAtaWNvbi1jb250YWluZXIgLmEwLWltYWdlIGltZ3toZWlnaHQ6NDBweDt3aWR0aDphdXRvfSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbCAuYTAtaWNvbi1jb250YWluZXIgLmEwLWF2YXRhcnttYXJnaW4tdG9wOjEwcHg7d2lkdGg6NDBweDtoZWlnaHQ6NDBweH0jYTAtbG9jay5hMC10aGVtZS1kZWZhdWx0IC5hMC1wb3B1cCAuYTAtY2VudHJpeCAuYTAtcGFuZWwgLmEwLWljb24tY29udGFpbmVyIC5hMC1hdmF0YXIgaXtmb250LXNpemU6MjBweDtwYWRkaW5nLXRvcDoxMHB4fSNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbCAjYTAtY2hhbmdlX3Bhc3N3b3JkIC5hMC1jb2xsYXBzZS1yZXNldCAuYTAtaW5zdHJ1Y3Rpb25zLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbCBoMXttYXJnaW4tYm90dG9tOjEwcHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcG9wdXAgLmEwLWNlbnRyaXggLmEwLXBhbmVsIC5hMC1kYi1hY3Rpb25zLCNhMC1sb2NrLmEwLXRoZW1lLWRlZmF1bHQgLmEwLXBvcHVwIC5hMC1jZW50cml4IC5hMC1wYW5lbCAuYTAtb3B0aW9uc3ttYXJnaW4tdG9wOjIwcHg7Zm9udC1zaXplOjE0cHh9I2EwLWxvY2suYTAtdGhlbWUtZGVmYXVsdCAuYTAtcG9wdXAgLmEwLWNlbnRyaXggLmEwLXBhbmVsIC5hMC1mb290ZXJ7bWFyZ2luLXRvcDo0MHB4fX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjQ4MHB4KXtib2R5LmEwLWxvY2stb3Blbj4qe2Rpc3BsYXk6bm9uZX1ib2R5LmEwLWxvY2stb3BlbiAuYTAtbG9jay1jb250YWluZXJ7ZGlzcGxheTpibG9ja30uYTAtbG9jay1jb250YWluZXJ7YmFja2dyb3VuZDojZmZmO29wYWNpdHk6MX19XCI7XG5cbi8qKlxuICogSW5zZXJ0IGBjc3NgIGluIEhFQUQgRWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGluc2VydCAoY3NzKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdXRvLWJvb3RcbiAqL1xuXG5pbnNlcnQoc3R5bGUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYSAmJiAhd2luZG93Lm1hdGNoTWVkaWEoIFwiKG1pbi13aWR0aDogMzQwcHgpXCIgKS5tYXRjaGVzO1xufTsiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2JvbnpvLWF1Z21lbnRlZCcpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vb2JqZWN0LWNyZWF0ZScpO1xudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgnLi9sb2dnZWRpbi5lanMnKTtcbnZhciBidXR0b25UbXBsICA9IHJlcXVpcmUoJy4uL2h0bWwvem9jaWFsLWJ1dHRvbi5lanMnKTtcbnZhciBzdG9wID0gcmVxdWlyZSgnLi4vc3RvcC1ldmVudCcpO1xuXG4vKipcbiAqIEV4cG9zZSBLZXJiZXJvc1BhbmVsXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBLZXJiZXJvc1BhbmVsO1xuXG4vKipcbiAqIENyZWF0ZSBgS2VyYmVyb3NQYW5lbGBcbiAqXG4gKiBAcGFyYW0ge0F1dGgwTG9ja30gd2lkZ2V0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cblxuZnVuY3Rpb24gS2VyYmVyb3NQYW5lbCh3aWRnZXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEtlcmJlcm9zUGFuZWwpKSB7XG4gICAgcmV0dXJuIG5ldyBLZXJiZXJvc1BhbmVsKHdpZGdldCwgb3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gQm90aCBgd2lkZ2V0YCBhbmQgYG9wdGlvbnNgIGFyZSByZXF1aXJlZFxuICBpZiAoMiAhPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwYXJhbWV0ZXJzIGZvciBLZXJiZXJvc1BhbmVsJyk7XG4gIH1cblxuICB0aGlzLm5hbWUgPSAna2VyYmVyb3MnXG4gIHRoaXMud2lkZ2V0ID0gd2lkZ2V0O1xuICB0aGlzLm9wdGlvbnMgPSB0aGlzLnJlc29sdmVPcHRpb25zKG9wdGlvbnMpO1xuICB0aGlzLmVsID0gbnVsbDtcblxuICBFbWl0dGVyLmNhbGwodGhpcyk7XG59XG5cbi8qKlxuICogSW5oZXJpdCBmcm9tIGBFdmVudEVtaXR0ZXJgXG4gKi9cblxuS2VyYmVyb3NQYW5lbC5wcm90b3R5cGUgPSBjcmVhdGUoRW1pdHRlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFF1ZXJ5IGZvciBlbGVtZW50cyBhdCBgdGhpcy5lbGAgY29udGV4dFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7Qm9uem9BdWdtZW50ZWR9XG4gKiBAcHVibGljXG4gKi9cbktlcmJlcm9zUGFuZWwucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgaWYgKCF0aGlzLmVsKSB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgZ2V0IGVsZW1lbnQgc2luY2Ugbm8gYGVsYCBpcyBzZXQgdG8gbG9jYWwgY29udGV4dCcpO1xuICByZXR1cm4gJChzZWxlY3RvciwgdGhpcy5lbCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBgZWxgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge05vZGVFbGVtZW50fVxuICogQHB1YmxpY1xuICovXG5cbktlcmJlcm9zUGFuZWwucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB0aGlzLnJlc29sdmVPcHRpb25zKG9wdGlvbnMpO1xuICB2YXIgd2lkZ2V0ID0gdGhpcy53aWRnZXQ7XG5cbiAgdGhpcy5lbCA9ICQuY3JlYXRlKHdpZGdldC5yZW5kZXIodGVtcGxhdGUsIG9wdHMpKVswXTtcbiAgdGhpcy5iaW5kQWxsKCk7XG4gIHJldHVybiB0aGlzLmVsO1xufVxuXG4vKipcbiAqIFJldHVybiBgZWxgIG9yIGNyZWF0ZSBpdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtOb2RlRWxlbWVudH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5LZXJiZXJvc1BhbmVsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG51bGwgIT0gdGhpcy5lbFxuICAgID8gdGhpcy5lbFxuICAgIDogdGhpcy5jcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyBsb2dpbiBvcHRpb25zIHBhc3NlZCB0byB0ZW1wbGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbktlcmJlcm9zUGFuZWwucHJvdG90eXBlLnJlc29sdmVPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICByZXR1cm4gXy5leHRlbmQoe30sIHRoaXMud2lkZ2V0Lm9wdGlvbnMsICB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBCaW5kIGV2ZW50cyB0byBgdGhpcy5lbGAsIGxpa2Ugc3VibWl0XG4gKi9cbktlcmJlcm9zUGFuZWwucHJvdG90eXBlLmJpbmRBbGwgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgd2lkZ2V0ID0gdGhpcy53aWRnZXQ7XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gIHZhciBjb25uZWN0aW9uID0gd2lkZ2V0LiRzc29EYXRhLmNvbm5lY3Rpb247XG4gIC8vdGhpcyBjb3VsZCBiZSBhZCBvciBhdXRoMC1hZGxkYXBcbiAgdmFyIHN0cmF0ZWd5X25hbWUgPSB3aWRnZXQuJHNzb0RhdGEuc3RyYXRlZ3k7XG4gIHZhciBzdHJhdGVneSA9IHdpZGdldC4kc3RyYXRlZ2llc1tzdHJhdGVneV9uYW1lXTtcblxuICBpZiAoIXN0cmF0ZWd5KSByZXR1cm47XG5cbiAgdGhpcy5xdWVyeSgnZm9ybScpLmEwX29uKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgIHN0b3AoZSk7XG4gICAgd2lkZ2V0Ll9zaWduSW5FbnRlcnByaXNlKGUpO1xuICB9KTtcblxuICB2YXIgYnV0dG9uID0gJC5jcmVhdGUoYnV0dG9uVG1wbCh7XG4gICAgdXNlX2JpZ19idXR0b25zOiB0cnVlLFxuICAgIG5hbWU6IHN0cmF0ZWd5X25hbWUsXG4gICAgdGl0bGU6IG9wdGlvbnMuaTE4bi50KCd3aW5kb3dzQXV0aFRpdGxlJykucmVwbGFjZSgne2Nvbm5lY3Rpb259JywgY29ubmVjdGlvbiksXG4gICAgY3NzOiBzdHJhdGVneS5jc3MsXG4gICAgaW1hZ2VpY29uOiBzdHJhdGVneS5pbWFnZWljb24sXG4gIH0pKTtcblxuICB0aGlzLnF1ZXJ5KCcuYTAtbGFzdC10aW1lJykuaHRtbChvcHRpb25zLmkxOG4udCgnc2lnbmluOmRvbWFpblVzZXJMYWJlbCcpKTtcblxuICB0aGlzLnF1ZXJ5KCcuYTAtc3RyYXRlZ3kgZGl2JykucmVtb3ZlKCk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLXN0cmF0ZWd5JylcbiAgICAuYXBwZW5kKGJ1dHRvbik7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLXN0cmF0ZWd5IC5hMC16b2NpYWxbZGF0YS1zdHJhdGVneV0nKS5hMF9vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHN0b3AoZSk7XG4gICAgd2lkZ2V0Ll9zaWduaW5Tb2NpYWwoc3RyYXRlZ3lfbmFtZSwgY29ubmVjdGlvbiwgbnVsbCwgc2VsZik7XG4gIH0pO1xuXG4gIHRoaXMucXVlcnkoJy5hMC1hbGwnKS5hMF9vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHN0b3AoZSk7XG4gICAgLy8gbm8gbmVlZCB0byBjaGVjayBvdGhlciBwYW5lbHMgc2luY2VcbiAgICAvLyBubyByZXNldCBub3Igc2lnbnVwIG1vZGVzIGFsbG93IGZvclxuICAgIC8vIHJldHVybiB1c2VyIGV4cGVyaWVuY2UuLi5cbiAgICB3aWRnZXQuX3NpZ25pblBhbmVsKHNlbGYub3B0aW9ucyk7XG4gIH0pO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlLCByZXRocm93KSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyEjP1thLXpBLVowLTldKzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cImEwLWxvZ2dlZGluIGEwLW1vZGVcIj5cXG4gICAgPGZvcm0gbm92YWxpZGF0ZT5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtY2VudGVyZWQgYTAtbGFzdC10aW1lXCI+JywgZXNjYXBlKCgzLCAgaTE4bi50KCdzaWduaW46cmV0dXJuVXNlckxhYmVsJykgKSksICc8L3NwYW4+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtc3RyYXRlZ3lcIj48L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFBhc3N3b3JkIGEwLWhpZGVcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtZW1haWxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhMC1lbWFpbC1yZWFkb25seVwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWRcXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKCgxMiwgIGkxOG4udCgnc2lnbmluOmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoMTMsICBpMThuLnQoJ3NpZ25pbjplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJhMC1oaWRlXCI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoMTgsICBpMThuLnQoJ3NpZ25pbjpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJwYXNzd29yZFwiIHR5cGU9XCJwYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICBhdXRvZm9jdXNcXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKCgyMiwgIGkxOG4udCgnc2lnbmluOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoMjMsICBpMThuLnQoJ3NpZ25pbjpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtYWN0aW9uXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYTAtcHJpbWFyeSBhMC1uZXh0XCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj4nLCBlc2NhcGUoKDI2LCAgaTE4bi50KCdzaWduaW46YWN0aW9uJykgKSksICc8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgJyk7Mjc7IGlmIChvcHRpb25zLnNob3dGb3Jnb3QgIT09IGZhbHNlKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJhMC1jcmVhdGUtYWNjb3VudFwiPlxcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCInLCBlc2NhcGUoKDI5LCAgb3B0aW9ucy5yZXNldExpbmsgfHwgJ2phdmFzY3JpcHQ6IHt9JyApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImEwLWZvcmdvdC1wYXNzXCI+JywgZXNjYXBlKCgzMCwgIGkxOG4udCgnc2lnbmluOmZvcmdvdFRleHQnKSApKSwgJzwvYT5cXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgJyk7MzI7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhMC1jZW50ZXJlZCBhMC1hbGwgYTAtYnRuLXNtYWxsXCI+JywgZXNjYXBlKCgzNSwgIGkxOG4udCgnc2lnbmluOmFsbCcpICkpLCAnPC9hPlxcbiAgICA8L2Zvcm0+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn0pIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyICQgPSByZXF1aXJlKCcuLi9ib256by1hdWdtZW50ZWQnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL29iamVjdC1jcmVhdGUnKTtcbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJy4vbG9hZGluZy5lanMnKTtcblxuLyoqXG4gKiBFeHBvc2UgTG9hZGluZ1BhbmVsXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkaW5nUGFuZWw7XG5cbi8qKlxuICogQ3JlYXRlIGBMb2FkaW5nUGFuZWxgXG4gKlxuICogQHBhcmFtIHtBdXRoMExvY2t9IHdpZGdldFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIExvYWRpbmdQYW5lbCh3aWRnZXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIExvYWRpbmdQYW5lbCkpIHtcbiAgICByZXR1cm4gbmV3IExvYWRpbmdQYW5lbCh3aWRnZXQsIG9wdGlvbnMpO1xuICB9O1xuXG4gIC8vIEJvdGggYHdpZGdldGAgYW5kIGBvcHRpb25zYCBhcmUgcmVxdWlyZWRcbiAgaWYgKDIgIT09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVycyBmb3IgTG9hZGluZ1BhbmVsJyk7XG4gIH1cblxuICB0aGlzLm5hbWUgPSAnbG9hZGluZyc7XG4gIHRoaXMud2lkZ2V0ID0gd2lkZ2V0O1xuICB0aGlzLm9wdGlvbnMgPSB0aGlzLnJlc29sdmVPcHRpb25zKG9wdGlvbnMpO1xuICB0aGlzLmVsID0gbnVsbDtcblxuICBFbWl0dGVyLmNhbGwodGhpcyk7XG59XG5cbi8qKlxuICogSW5oZXJpdCBmcm9tIGBFdmVudEVtaXR0ZXJgXG4gKi9cblxuTG9hZGluZ1BhbmVsLnByb3RvdHlwZSA9IGNyZWF0ZShFbWl0dGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogUXVlcnkgZm9yIGVsZW1lbnRzIGF0IGB0aGlzLmVsYCBjb250ZXh0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtCb256b0F1Z21lbnRlZH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5Mb2FkaW5nUGFuZWwucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgaWYgKCF0aGlzLmVsKSB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgZ2V0IGVsZW1lbnQgc2luY2Ugbm8gYGVsYCBpcyBzZXQgdG8gbG9jYWwgY29udGV4dCcpO1xuICByZXR1cm4gJChzZWxlY3RvciwgdGhpcy5lbCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGBlbGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7Tm9kZUVsZW1lbnR9XG4gKiBAcHVibGljXG4gKi9cblxuTG9hZGluZ1BhbmVsLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgdmFyIHdpZGdldCA9IHRoaXMud2lkZ2V0O1xuXG4gIHRoaXMuZWwgPSAkLmNyZWF0ZSh3aWRnZXQucmVuZGVyKHRlbXBsYXRlLCBvcHRzKSlbMF07XG4gIHRoaXMuYmluZEFsbCgpO1xuICByZXR1cm4gdGhpcy5lbDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYGVsYCBvciBjcmVhdGUgaXRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7Tm9kZUVsZW1lbnR9XG4gKiBAcHVibGljXG4gKi9cblxuTG9hZGluZ1BhbmVsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG51bGwgIT0gdGhpcy5lbFxuICAgID8gdGhpcy5lbFxuICAgIDogdGhpcy5jcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyBsb2dpbiBvcHRpb25zIHBhc3NlZCB0byB0ZW1wbGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkxvYWRpbmdQYW5lbC5wcm90b3R5cGUucmVzb2x2ZU9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHJldHVybiBfLmV4dGVuZCh7fSwgdGhpcy53aWRnZXQub3B0aW9ucywgIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogQmluZCBldmVudHMgdG8gYHRoaXMuZWxgLCBsaWtlIHN1Ym1pdFxuICovXG5cbkxvYWRpbmdQYW5lbC5wcm90b3R5cGUuYmluZEFsbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcztcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZSwgcmV0aHJvdykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hIz9bYS16QS1aMC05XSs7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoLycvZywgJyYjMzk7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1sb2FkaW5nIGEwLW1vZGVcIj5cXG4gICAgJyk7MjsgaWYgKGxvY2Fscy5hbHRfc3Bpbm5lcikgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBjbGFzcz1cImEwLXNwaW5uZXIgYTAtc3Bpbi1pbWdcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnLCBlc2NhcGUoKDMsICBsb2NhbHMuYWx0X3NwaW5uZXIgKSksICdcXCcpXCI+PC9kaXY+XFxuICAgICcpOzQ7IH0gZWxzZSB7IDsgYnVmLnB1c2goJ1xcbiAgICA8ZGl2IGNsYXNzPVwiYTAtc3Bpbm5lciBhMC1zcGluLWNvbnRhaW5lclwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNwaW5uZXItY3NzXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtc2lkZSBhMC1zcF9sZWZ0XCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhMC1maWxsXCI+PC9zcGFuPlxcbiAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtc2lkZSBhMC1zcF9yaWdodFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtZmlsbFwiPjwvc3Bhbj5cXG4gICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtc3Bpbi1tZXNzYWdlXCI+XFxuICAgICAgICAgICAgPHNwYW4+Jm5ic3A7PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICAnKTsxODsgfSA7IGJ1Zi5wdXNoKCdcXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufSkiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vb2JqZWN0LWNyZWF0ZScpO1xudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgnLi9sb2dnZWRpbi5lanMnKTtcbnZhciBsb2dnZWRpbkJ0blRtcGwgPSByZXF1aXJlKCcuL2xvZ2dlZGluX2J1dHRvbi5lanMnKTtcbnZhciBzdG9wID0gcmVxdWlyZSgnLi4vc3RvcC1ldmVudCcpO1xudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2JvbnpvLWF1Z21lbnRlZCcpO1xudmFyIGdyYXZhdGFyID0gcmVxdWlyZSgnLi4vZ3JhdmF0YXInKTtcblxuLyoqXG4gKiBFeHBvc2UgTG9nZ2VkaW5QYW5lbFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTG9nZ2VkaW5QYW5lbDtcblxuLyoqXG4gKiBDcmVhdGUgYExvZ2dlZGluUGFuZWxgXG4gKlxuICogQHBhcmFtIHtBdXRoMExvY2t9IHdpZGdldFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIExvZ2dlZGluUGFuZWwod2lkZ2V0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBMb2dnZWRpblBhbmVsKSkge1xuICAgIHJldHVybiBuZXcgTG9nZ2VkaW5QYW5lbCh3aWRnZXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gQm90aCBgd2lkZ2V0YCBhbmQgYG9wdGlvbnNgIGFyZSByZXF1aXJlZFxuICBpZiAoMiAhPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwYXJhbWV0ZXJzIGZvciBMb2dnZWRpblBhbmVsJyk7XG4gIH1cblxuICB0aGlzLm5hbWUgPSAnbG9nZ2VkaW4nO1xuICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgdGhpcy5vcHRpb25zID0gdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5lbCA9IG51bGw7XG5cbiAgRW1pdHRlci5jYWxsKHRoaXMpO1xufVxuXG4vKipcbiAqIEluaGVyaXQgZnJvbSBgRXZlbnRFbWl0dGVyYFxuICovXG5cbkxvZ2dlZGluUGFuZWwucHJvdG90eXBlID0gY3JlYXRlKEVtaXR0ZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBRdWVyeSBmb3IgZWxlbWVudHMgYXQgYHRoaXMuZWxgIGNvbnRleHRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4ge0JvbnpvQXVnbWVudGVkfVxuICogQHB1YmxpY1xuICovXG5cbkxvZ2dlZGluUGFuZWwucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgaWYgKCF0aGlzLmVsKSB7IHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBnZXQgZWxlbWVudCBzaW5jZSBubyBgZWxgIGlzIHNldCB0byBsb2NhbCBjb250ZXh0Jyk7IH1cbiAgcmV0dXJuICQoc2VsZWN0b3IsIHRoaXMuZWwpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYGVsYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtOb2RlRWxlbWVudH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5Mb2dnZWRpblBhbmVsLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgdmFyIHdpZGdldCA9IHRoaXMud2lkZ2V0O1xuXG4gIHRoaXMuZWwgPSAkLmNyZWF0ZSh3aWRnZXQucmVuZGVyKHRlbXBsYXRlLCBvcHRzKSlbMF07XG4gIHRoaXMuYmluZEFsbCgpO1xuICByZXR1cm4gdGhpcy5lbDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGBlbGAgb3IgY3JlYXRlIGl0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge05vZGVFbGVtZW50fVxuICogQHB1YmxpY1xuICovXG5cbkxvZ2dlZGluUGFuZWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbnVsbCAhPSB0aGlzLmVsXG4gICAgPyB0aGlzLmVsXG4gICAgOiB0aGlzLmNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyBsb2dpbiBvcHRpb25zIHBhc3NlZCB0byB0ZW1wbGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkxvZ2dlZGluUGFuZWwucHJvdG90eXBlLnJlc29sdmVPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICByZXR1cm4gXy5leHRlbmQoe30sIHRoaXMud2lkZ2V0Lm9wdGlvbnMsICB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBCaW5kIGV2ZW50cyB0byBgdGhpcy5lbGAsIGxpa2Ugc3VibWl0XG4gKi9cblxuTG9nZ2VkaW5QYW5lbC5wcm90b3R5cGUuYmluZEFsbCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB3aWRnZXQgPSB0aGlzLndpZGdldDtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgdmFyIHN0cmF0ZWd5X25hbWUgPSB3aWRnZXQuJHNzb0RhdGEubGFzdFVzZWRDb25uZWN0aW9uLnN0cmF0ZWd5O1xuICB2YXIgc3RyYXRlZ3kgPSB3aWRnZXQuJHN0cmF0ZWdpZXNbc3RyYXRlZ3lfbmFtZV07XG5cbiAgaWYgKCFzdHJhdGVneSkgeyByZXR1cm47IH1cblxuICB0aGlzLnF1ZXJ5KCdmb3JtJykuYTBfb24oJ3N1Ym1pdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgc3RvcChlKTtcbiAgICB3aWRnZXQuX3NpZ25JbkVudGVycHJpc2UoZSk7XG4gIH0pO1xuXG4gIGlmIChvcHRpb25zLmdyYXZhdGFyKSB7XG4gICAgZ3JhdmF0YXIodGhpcy53aWRnZXQsIHdpZGdldC4kc3NvRGF0YS5sYXN0VXNlZFVzZXJuYW1lKTtcbiAgfVxuXG5cbiAgdmFyIGJ1dHRvbiA9ICQuY3JlYXRlKGxvZ2dlZGluQnRuVG1wbCh7XG4gICAgbmFtZTogc3RyYXRlZ3lfbmFtZSxcbiAgICB0aXRsZTogc3RyYXRlZ3kudGl0bGUsXG4gICAgY3NzOiBzdHJhdGVneS5jc3MsXG4gICAgaW1hZ2VpY29uOiBzdHJhdGVneS5pbWFnZWljb24sXG4gICAgdXNlcm5hbWU6IHdpZGdldC4kc3NvRGF0YS5sYXN0VXNlZFVzZXJuYW1lXG4gIH0pKTtcblxuICB0aGlzLnF1ZXJ5KCcuYTAtbGFzdC10aW1lJykuaHRtbChvcHRpb25zLmkxOG4udCgnc2lnbmluOnJldHVyblVzZXJMYWJlbCcpKTtcblxuICB0aGlzLnF1ZXJ5KCcuYTAtc3RyYXRlZ3kgZGl2JykucmVtb3ZlKCk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLXN0cmF0ZWd5JykuYXBwZW5kKGJ1dHRvbik7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLXN0cmF0ZWd5IC5hMC16b2NpYWxbZGF0YS1zdHJhdGVneV0nKS5hMF9vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHN0b3AoZSk7XG5cbiAgICB3aWRnZXQuX3NpZ25pblNvY2lhbChcbiAgICAgIHN0cmF0ZWd5X25hbWUsXG4gICAgICB3aWRnZXQuJHNzb0RhdGEubGFzdFVzZWRDb25uZWN0aW9uICYmIHdpZGdldC4kc3NvRGF0YS5sYXN0VXNlZENvbm5lY3Rpb24ubmFtZSxcbiAgICAgIG9wdGlvbnMuX2dldExvZ2dlZEluQXV0aFBhcmFtcyhzdHJhdGVneV9uYW1lLCB3aWRnZXQuJHNzb0RhdGEpLFxuICAgICAgc2VsZlxuICAgICk7XG4gIH0pO1xuXG4gIHRoaXMucXVlcnkoJy5hMC1hbGwnKS5hMF9vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHN0b3AoZSk7XG4gICAgLy8gbm8gbmVlZCB0byBjaGVjayBvdGhlciBwYW5lbHMgc2luY2VcbiAgICAvLyBubyByZXNldCBub3Igc2lnbnVwIG1vZGVzIGFsbG93IGZvclxuICAgIC8vIHJldHVybiB1c2VyIGV4cGVyaWVuY2UuLi5cbiAgICBncmF2YXRhcih3aWRnZXQsICcnKTtcbiAgICB3aWRnZXQuX3NpZ25pblBhbmVsKHNlbGYub3B0aW9ucyk7XG4gIH0pO1xuXG59O1xuXG5Mb2dnZWRpblBhbmVsLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiAkKHNlbGVjdG9yLCB0aGlzLmVsKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGUsIHJldGhyb3cpIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/ISM/W2EtekEtWjAtOV0rOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IHRhYmluZGV4PVwiMFwiXFxuXHRcdGRhdGEtc3RyYXRlZ3k9XCInLCBlc2NhcGUoKDIsICBuYW1lICkpLCAnXCJcXG5cdFx0dGl0bGU9XCInLCBlc2NhcGUoKDMsICB1c2VybmFtZSA/ICh1c2VybmFtZSArICcgKCcgKyB0aXRsZSArICcpJykgOiB0aXRsZSApKSwgJ1wiXFxuXHRcdGNsYXNzPVwiYTAtem9jaWFsIGEwLWJsb2NrIGEwLScsIGVzY2FwZSgoNCwgIGNzcyApKSwgJyAnLCBlc2NhcGUoKDQsICBsb2NhbHMuaW1hZ2VpY29uID8gJ2EwLWltYWdlLWljb24nIDogJycgKSksICdcIj5cXG5cdDxzcGFuPicsIGVzY2FwZSgoNSwgIHVzZXJuYW1lIHx8IHRpdGxlICkpLCAnPC9zcGFuPlxcbjwvZGl2PicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59KSIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vYm9uem8tYXVnbWVudGVkJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9vYmplY3QtY3JlYXRlJyk7XG52YXIgc3RvcCA9IHJlcXVpcmUoJy4uL3N0b3AtZXZlbnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vYmluZCcpO1xudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgnLi9yZXNldC5lanMnKTtcbnZhciByZWdleCA9IHJlcXVpcmUoJy4uL3JlZ2V4Jyk7XG52YXIgUGFzc3dvcmRTdHJlbmd0aCA9IHJlcXVpcmUoJy4uL3Bhc3N3b3JkLXN0cmVuZ3RoJyk7XG52YXIgZW1wdHkgPSByZWdleC5lbXB0eTtcbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIGVtYWlsX3BhcnNlciA9IHJlZ2V4LmVtYWlsX3BhcnNlcjtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLyoqXG4gKiBFeHBvc2UgUmVzZXRQYW5lbFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzZXRQYW5lbDtcblxuLyoqXG4gKiBDcmVhdGUgYFJlc2V0UGFuZWxgXG4gKlxuICogQHBhcmFtIHtBdXRoMExvY2t9IHdpZGdldFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIFJlc2V0UGFuZWwod2lkZ2V0LCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNldFBhbmVsKSkge1xuICAgIHJldHVybiBuZXcgUmVzZXRQYW5lbCh3aWRnZXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gQm90aCBgd2lkZ2V0YCBhbmQgYG9wdGlvbnNgIGFyZSByZXF1aXJlZFxuICBpZiAoMiAhPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwYXJhbWV0ZXJzIGZvciBSZXNldFBhbmVsJyk7XG4gIH1cblxuICB0aGlzLm5hbWUgPSAncmVzZXQnO1xuICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgdGhpcy5vcHRpb25zID0gdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5lbCA9IG51bGw7XG5cbiAgRW1pdHRlci5jYWxsKHRoaXMpO1xufVxuXG4vKipcbiAqIEluaGVyaXQgZnJvbSBgRXZlbnRFbWl0dGVyYFxuICovXG5cblJlc2V0UGFuZWwucHJvdG90eXBlID0gY3JlYXRlKEVtaXR0ZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBRdWVyeSBmb3IgZWxlbWVudHMgYXQgYHRoaXMuZWxgIGNvbnRleHRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4ge0JvbnpvQXVnbWVudGVkfVxuICogQHB1YmxpY1xuICovXG5cblJlc2V0UGFuZWwucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgaWYgKCF0aGlzLmVsKSB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgZ2V0IGVsZW1lbnQgc2luY2Ugbm8gYGVsYCBpcyBzZXQgdG8gbG9jYWwgY29udGV4dCcpO1xuICByZXR1cm4gJChzZWxlY3RvciwgdGhpcy5lbCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBgZWxgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge05vZGVFbGVtZW50fVxuICogQHB1YmxpY1xuICovXG5cblJlc2V0UGFuZWwucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB0aGlzLnJlc29sdmVPcHRpb25zKG9wdGlvbnMpO1xuICB2YXIgd2lkZ2V0ID0gdGhpcy53aWRnZXQ7XG5cbiAgdGhpcy5lbCA9ICQuY3JlYXRlKHdpZGdldC5yZW5kZXIodGVtcGxhdGUsIG9wdHMpKVswXTtcbiAgdGhpcy5iaW5kQWxsKCk7XG4gIHJldHVybiB0aGlzLmVsO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYGVsYCBvciBjcmVhdGUgaXRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7Tm9kZUVsZW1lbnR9XG4gKiBAcHVibGljXG4gKi9cblxuUmVzZXRQYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBudWxsICE9IHRoaXMuZWwgPyB0aGlzLmVsIDogdGhpcy5jcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgbG9naW4gb3B0aW9ucyBwYXNzZWQgdG8gdGVtcGxhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5SZXNldFBhbmVsLnByb3RvdHlwZS5yZXNvbHZlT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgcmV0dXJuIF8uZXh0ZW5kKHt9LCB0aGlzLndpZGdldC5vcHRpb25zLCAgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogQmluZCBldmVudHMgdG8gYHRoaXMuZWxgLCBsaWtlIHN1Ym1pdFxuICpcbiAqIEByZXR1cm4ge1Jlc2V0UGFuZWx9XG4gKiBAcHJpdmF0ZVxuICovXG5cblJlc2V0UGFuZWwucHJvdG90eXBlLmJpbmRBbGwgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgLy8gaGlkZSBvbmx5IGFuZCBvbmx5IGlmIHNldCB0byBmYWxzZVxuICB0aGlzLnF1ZXJ5KCcuYTAtb3B0aW9ucycpXG4gICAgLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgIW9wdGlvbnMuc2hvd1Jlc2V0QWN0aW9uKTtcblxuICB0aGlzLnF1ZXJ5KCdmb3JtJylcbiAgICAuYTBfb2ZmKCdzdWJtaXQnKVxuICAgIC5hMF9vbignc3VibWl0JywgYmluZCh0aGlzLm9uc3VibWl0LCB0aGlzKSk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLW9wdGlvbnMgLmEwLWNhbmNlbCcpXG4gICAgLmEwX29uKCdjbGljaycsIGJpbmQodGhpcy5vbmNhbmNlbCwgdGhpcykpO1xuXG4gIHZhciBwYXNzd29yZFN0cmVuZ3RoID0gbmV3IFBhc3N3b3JkU3RyZW5ndGgodGhpcy5xdWVyeSgnLmEwLXBhc3N3b3JkX3BvbGljeScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnkoJyNhMC1yZXNldF9lYXN5X3Bhc3N3b3JkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogSGFuZGxlciBmb3IgYHN1Ym1pdGAgZm9ybSBldmVudFxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGVcbiAqIEBwcml2YXRlXG4gKi9cblxuUmVzZXRQYW5lbC5wcm90b3R5cGUub25zdWJtaXQgPSBmdW5jdGlvbihlKSB7XG4gIHN0b3AoZSk7XG5cbiAgaWYgKCF0aGlzLnZhbGlkKCkpIHsgcmV0dXJuOyB9XG4gIHRoaXMuc3VibWl0KCk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGBjYW5jZWxgIGV2ZW50IGNsaWNrXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZVxuICogQHByaXZhdGVcbiAqL1xuXG5SZXNldFBhbmVsLnByb3RvdHlwZS5vbmNhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgc3RvcChlKTtcbiAgdmFyIHdpZGdldCA9IHRoaXMud2lkZ2V0O1xuICB3aWRnZXQuX3Nob3dTdWNjZXNzKCk7XG4gIHdpZGdldC5fc2hvd0Vycm9yKCk7XG4gIHdpZGdldC5fZm9jdXNFcnJvcigpO1xuICB3aWRnZXQuX3NpZ25pblBhbmVsKCk7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGZvcm0gZm9yIGVycnJvcyBiZWZvcmUgYHN1Ym1pdGBcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cblJlc2V0UGFuZWwucHJvdG90eXBlLnZhbGlkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb2sgPSB0cnVlO1xuICB2YXIgZW1haWxfaW5wdXQgPSB0aGlzLnF1ZXJ5KCdpbnB1dFtuYW1lPWVtYWlsXScpO1xuICB2YXIgZW1haWwgPSB0cmltKGVtYWlsX2lucHV0LnZhbCgpKTtcbiAgdmFyIGVtYWlsX2VtcHR5ID0gZW1wdHkudGVzdChlbWFpbCk7XG4gIHZhciBlbWFpbF9wYXJzZWQgPSBlbWFpbF9wYXJzZXIuZXhlYyhlbWFpbC50b0xvd2VyQ2FzZSgpKTtcbiAgdmFyIHZhbGlkYXRlX3VzZXJuYW1lID0gdGhpcy5vcHRpb25zLl9pc1VzZXJuYW1lUmVxdWlyZWQoKTtcbiAgdmFyIHVzZXJuYW1lX3BhcnNlZCA9IHJlZ2V4LnVzZXJuYW1lX3BhcnNlci5leGVjKGVtYWlsX2lucHV0LnZhbCgpLnRvTG93ZXJDYXNlKCkpO1xuICB2YXIgcGFzc3dvcmRfaW5wdXQgPSB0aGlzLnF1ZXJ5KCdpbnB1dFtuYW1lPXBhc3N3b3JkXScpO1xuICB2YXIgcGFzc3dvcmQgPSBwYXNzd29yZF9pbnB1dC52YWwoKTtcbiAgdmFyIHBhc3N3b3JkX2VtcHR5ID0gZW1wdHkudGVzdChwYXNzd29yZCk7XG4gIHZhciByZXBlYXRfcGFzc3dvcmRfaW5wdXQgPSB0aGlzLnF1ZXJ5KCdpbnB1dFtuYW1lPXJlcGVhdF9wYXNzd29yZF0nKTtcbiAgdmFyIHJlcGVhdF9wYXNzd29yZCA9IHJlcGVhdF9wYXNzd29yZF9pbnB1dC52YWwoKTtcbiAgdmFyIHJlcGVhdF9wYXNzd29yZF9lbXB0eSA9IGVtcHR5LnRlc3QocmVwZWF0X3Bhc3N3b3JkKTtcbiAgdmFyIHdpZGdldCA9IHRoaXMud2lkZ2V0O1xuXG4gIC8vIGFzdW1lIHZhbGlkIGJ5IGRlZmF1bHRcbiAgLy8gYW5kIHJlc2V0IGVycm9yc1xuICB3aWRnZXQuX3Nob3dFcnJvcigpO1xuICB3aWRnZXQuX2ZvY3VzRXJyb3IoKTtcblxuICBpZiAoZW1haWxfZW1wdHkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQpO1xuICAgIG9rID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIWVtYWlsX3BhcnNlZCAmJiAhZW1haWxfZW1wdHkpIHtcbiAgICBpZih2YWxpZGF0ZV91c2VybmFtZSAmJiAhdXNlcm5hbWVfcGFyc2VkKSB7XG4gICAgICBvayA9IGZhbHNlIHx8ICh2YWxpZGF0ZV91c2VybmFtZSAmJiB1c2VybmFtZV9wYXJzZWQpO1xuICAgICAgaWYoIW9rKSB3aWRnZXQuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQsIHdpZGdldC5vcHRpb25zLmkxOG4udCgnaW52YWxpZCcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFzc3dvcmRfZW1wdHkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IocGFzc3dvcmRfaW5wdXQpO1xuICAgIG9rID0gZmFsc2U7XG4gIH1cblxuICBpZiAocmVwZWF0X3Bhc3N3b3JkX2VtcHR5KSB7XG4gICAgd2lkZ2V0Ll9mb2N1c0Vycm9yKHJlcGVhdF9wYXNzd29yZF9pbnB1dCk7XG4gICAgb2sgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChyZXBlYXRfcGFzc3dvcmRfaW5wdXQudmFsKCkgIT09IHBhc3N3b3JkX2lucHV0LnZhbCgpKSB7XG4gICAgd2lkZ2V0Ll9mb2N1c0Vycm9yKHJlcGVhdF9wYXNzd29yZF9pbnB1dCwgd2lkZ2V0Lm9wdGlvbnMuaTE4bi50KCdtdXN0TWF0Y2gnKSk7XG4gICAgb2sgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBvaztcbn1cblxuLyoqXG4gKiBTdWJtaXQgdmFsaWRhdGVkIGZvcm0gdG8gQXV0aDAgZm9yIHBhc3N3b3JkIHJlc2V0XG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG5SZXNldFBhbmVsLnByb3RvdHlwZS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwYW5lbCA9IHRoaXM7XG4gIHZhciB3aWRnZXQgPSBwYW5lbC53aWRnZXQ7XG4gIHZhciBlbWFpbF9pbnB1dCA9IHRoaXMucXVlcnkoJ2lucHV0W25hbWU9ZW1haWxdJyk7XG4gIHZhciB1c2VybmFtZSA9IGVtYWlsX2lucHV0LnZhbCgpO1xuICB2YXIgcGFzc3dvcmRfaW5wdXQgPSB0aGlzLnF1ZXJ5KCdpbnB1dFtuYW1lPXBhc3N3b3JkXScpO1xuICB2YXIgcGFzc3dvcmQgPSBwYXNzd29yZF9pbnB1dC52YWwoKTtcbiAgdmFyIHJlcGVhdF9wYXNzd29yZF9pbnB1dCA9IHRoaXMucXVlcnkoJ2lucHV0W25hbWU9cmVwZWF0X3Bhc3N3b3JkXScpO1xuICB2YXIgY29ubmVjdGlvbiAgPSB0aGlzLm9wdGlvbnMuX2dldEF1dGgwQ29ubmVjdGlvbigpO1xuICB2YXIgY2FsbGJhY2sgPSBwYW5lbC5vcHRpb25zLnBvcHVwQ2FsbGJhY2s7XG5cbiAgd2lkZ2V0Ll9sb2FkaW5nUGFuZWwoeyBtb2RlOiAncmVzZXQnIH0pO1xuXG4gIHdpZGdldC4kYXV0aDAuY2hhbmdlUGFzc3dvcmQoe1xuICAgIGNvbm5lY3Rpb246IGNvbm5lY3Rpb24ubmFtZSxcbiAgICB1c2VybmFtZTogICB1c2VybmFtZSxcbiAgICBwYXNzd29yZDogICBwYXNzd29yZFxuICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAvLyBUaGlzIGlzIG5vdyBkdW1teSwgYW5kIHNob3VsZCBubyBsb25nZXIgZXhpc3Qgc2luY2UgYWxsXG4gICAgLy8gZG9tIGV2ZW50cyBrZWVwIGEgcmVmZXJlbmNlIHRvIHdpZGdldC4kY29udGFpbmVyXG4gICAgaWYgKCAhd2lkZ2V0LiRjb250YWluZXIgfHwgd2lkZ2V0LnF1ZXJ5KClbMF0gIT09IHdpZGdldC4kY29udGFpbmVyLmNoaWxkTm9kZXNbMF0gKSB7XG4gICAgICByZXR1cm4gY29uc29sZSAmJiBjb25zb2xlLmxvZyAmJiBjb25zb2xlLmxvZygndGhpcyBwYXNzd29yZCByZXNldCB3YXMgdHJpZ2dlcmVkIGZyb20gYW5vdGhlciBub2RlIGluc3RhbmNlJywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBjbGVhbiBwYXNzd29yZCBpbnB1dCBlaXRoZXIgdGhlcmUgaXMgYW4gZXJyb3Igb3Igbm90XG4gICAgcGFzc3dvcmRfaW5wdXQudmFsKCcnKTtcbiAgICByZXBlYXRfcGFzc3dvcmRfaW5wdXQudmFsKCcnKTtcblxuICAgIGlmICghZXJyKSB7XG4gICAgICBlbWFpbF9pbnB1dC52YWwoJycpO1xuICAgICAgd2lkZ2V0Ll9zaWduaW5QYW5lbChwYW5lbC5vcHRpb25zKTtcbiAgICAgIHdpZGdldC5fc2hvd1N1Y2Nlc3Mod2lkZ2V0Lm9wdGlvbnMuaTE4bi50KCdyZXNldDpzdWNjZXNzVGV4dCcpKTtcblxuICAgICAgcmV0dXJuICdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjayA/IGNhbGxiYWNrLmFwcGx5KHdpZGdldCwgYXJncykgOiBudWxsO1xuICAgIH1cblxuICAgIHdpZGdldC5zZXRQYW5lbChwYW5lbCk7XG5cbiAgICBpZiAoNDAwID09PSBlcnIuc3RhdHVzKSB7XG4gICAgICBpZiAoJ2ludmFsaWRfcGFzc3dvcmQnID09PSBlcnIubmFtZSkge1xuICAgICAgICB3aWRnZXQuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQpO1xuICAgICAgICB3aWRnZXQuX3Nob3dFcnJvcih3aWRnZXQub3B0aW9ucy5pMThuLnQoJ3Jlc2V0OmludmFsaWRQYXNzd29yZCcpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2lkZ2V0Ll9mb2N1c0Vycm9yKGVtYWlsX2lucHV0KTtcbiAgICAgIHdpZGdldC5fc2hvd0Vycm9yKHdpZGdldC5vcHRpb25zLmkxOG4udCgncmVzZXQ6dXNlckRvZXNOb3RFeGlzdEVycm9yVGV4dCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2lkZ2V0Ll9zaG93RXJyb3Iod2lkZ2V0Lm9wdGlvbnMuaTE4bi50KCdyZXNldDpzZXJ2ZXJFcnJvclRleHQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjayA/IGNhbGxiYWNrLmFwcGx5KHdpZGdldCwgYXJncykgOiBudWxsO1xuXG4gIH0pO1xuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGUsIHJldGhyb3cpIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/ISM/W2EtekEtWjAtOV0rOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IGNsYXNzPVwiYTAtcmVzZXQgYTAtbW9kZVwiPlxcbiAgICA8Zm9ybSBpZD1cImEwLWNoYW5nZV9wYXNzd29yZFwiIGNsYXNzPVwiZm9ybS1yZXNldC1wYXNzd29yZFwiIG5vdmFsaWRhdGU+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtY29sbGFwc2UtcmVzZXRcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaGVhZGVyIGEwLWluc3RydWN0aW9uc1wiPicsIGVzY2FwZSgoNCwgIGkxOG4udCgncmVzZXQ6aGVhZGVyVGV4dCcpICkpLCAnPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0cy13cmFwcGVyXCI+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXRzXCI+XFxuXFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICcpOzExO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtYWlsUGxhY2Vob2xkZXIgPSBpMThuLnQoJ3NpZ25pbjplbWFpbFBsYWNlaG9sZGVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoIF9pc1VzZXJuYW1lUmVxdWlyZWQoKSA/ICcgLyAnICsgaTE4bi50KCdzaWduaW46dXNlcm5hbWVQbGFjZWhvbGRlcicpIDogJycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0QnVkaWNvbiA9IF9pc1VzZXJuYW1lUmVxdWlyZWQoKSB8fCAndXNlcm5hbWUnID09PSB1c2VybmFtZVN0eWxlID8gJzEnIDogJzUnO1xuICAgICAgICAgICAgICAgICAgICAgIDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtcmVzZXRfZWFzeV9lbWFpbFwiIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgJywgZXNjYXBlKCgxNywgIGVtYWlsUGxhY2Vob2xkZXIgKSksICdcXG4gICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYTAtaWNvbi1idWRpY29uLScsIGVzY2FwZSgoMjAsICBpbnB1dEJ1ZGljb24gKSksICdcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImEwLXJlc2V0X2Vhc3lfZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKCgyNSwgIGVtYWlsUGxhY2Vob2xkZXIgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKDI2LCAgZW1haWxQbGFjZWhvbGRlciApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtcGFzc3dvcmRcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImEwLXJlc2V0X2Vhc3lfcGFzc3dvcmRcIiBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoMzEsICBpMThuLnQoJ3Jlc2V0OnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXQtYm94XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb25cIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJwYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImEwLXJlc2V0X2Vhc3lfcGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKCgzOSwgIGkxOG4udCgncmVzZXQ6cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKCg0MCwgIGkxOG4udCgncmVzZXQ6cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1yZXBlYXRQYXNzd29yZFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtcmVzZXRfZWFzeV9yZXBlYXRfcGFzc3dvcmRcIiBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoNDUsICBpMThuLnQoJ3Jlc2V0OnJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXQtYm94XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb25cIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJyZXBlYXRfcGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJhMC1yZXNldF9lYXN5X3JlcGVhdF9wYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIiB2YWx1ZT1cIlwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoNTIsICBpMThuLnQoJ3Jlc2V0OnJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoNTMsICBpMThuLnQoJ3Jlc2V0OnJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXBhc3N3b3JkX3BvbGljeVwiPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1hY3Rpb25cIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJhMC1wcmltYXJ5IGEwLW5leHRcIiBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPicsIGVzY2FwZSgoNjEsICBpMThuLnQoJ3Jlc2V0OmFjdGlvbicpICkpLCAnPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1vcHRpb25zXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDoge31cIiBjbGFzcz1cImEwLWNlbnRlcmVkIGEwLWJ0bi1zbWFsbCBhMC1jYW5jZWxcIj4nLCBlc2NhcGUoKDYzLCAgaTE4bi50KCdyZXNldDpjYW5jZWxBY3Rpb24nKSApKSwgJzwvYT5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9mb3JtPlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59KSIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vYmluZCcpO1xudmFyIHJlZ2V4ID0gcmVxdWlyZSgnLi4vcmVnZXgnKTtcbnZhciBzdG9wID0gcmVxdWlyZSgnLi4vc3RvcC1ldmVudCcpO1xudmFyICQgPSByZXF1aXJlKCcuLi9ib256by1hdWdtZW50ZWQnKTtcbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJy4vc2lnbmluLmVqcycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL29iamVjdC1jcmVhdGUnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIGJ1dHRvblRtcGwgPSByZXF1aXJlKCcuLi9odG1sL3pvY2lhbC1idXR0b24uZWpzJyk7XG52YXIgbG9naW5BY3Rpb25zVG1wbCA9IHJlcXVpcmUoJy4vbG9naW5fYWN0aW9ucy5lanMnKTtcbnZhciBncmF2YXRhciA9IHJlcXVpcmUoJy4uL2dyYXZhdGFyJyk7XG5cbi8qKlxuICogRXhwb3NlIFNpZ25pblBhbmVsXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTaWduaW5QYW5lbDtcblxuLyoqXG4gKiBDcmVhdGUgYFNpZ25pblBhbmVsYFxuICpcbiAqIEBwYXJhbSB7QXV0aDBMb2NrfSB3aWRnZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5mdW5jdGlvbiBTaWduaW5QYW5lbCh3aWRnZXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNpZ25pblBhbmVsKSkge1xuICAgIHJldHVybiBuZXcgU2lnbmluUGFuZWwod2lkZ2V0LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8vIEJvdGggYHdpZGdldGAgYW5kIGBvcHRpb25zYCBhcmUgcmVxdWlyZWRcbiAgaWYgKDIgIT09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVycyBmb3IgU2lnbmluUGFuZWwnKTtcbiAgfVxuXG4gIHRoaXMubmFtZSA9ICdzaWduaW4nO1xuICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgdGhpcy5vcHRpb25zID0gdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5lbCA9IG51bGw7XG5cbiAgLy8gZGVib3VuY2UgZ3JhdmF0YXIgdXBkYXRlIG1ldGhvZFxuICB0aGlzLmdyYXZhdGFyID0gXy5kZWJvdW5jZSh0aGlzLmdyYXZhdGFyLCAzMDApO1xuXG4gIEVtaXR0ZXIuY2FsbCh0aGlzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0IGZyb20gYEV2ZW50RW1pdHRlcmBcbiAqL1xuXG5TaWduaW5QYW5lbC5wcm90b3R5cGUgPSBjcmVhdGUoRW1pdHRlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFF1ZXJ5IGZvciBlbGVtZW50cyBhdCBgdGhpcy5lbGAgY29udGV4dFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7Qm9uem9BdWdtZW50ZWR9XG4gKiBAcHVibGljXG4gKi9cblxuU2lnbmluUGFuZWwucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgaWYgKCF0aGlzLmVsKSB7IHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBnZXQgZWxlbWVudCBzaW5jZSBubyBgZWxgIGlzIHNldCB0byBsb2NhbCBjb250ZXh0Jyk7IH1cbiAgcmV0dXJuICQoc2VsZWN0b3IsIHRoaXMuZWwpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYGVsYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtOb2RlRWxlbWVudH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5TaWduaW5QYW5lbC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHRoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XG4gIHZhciB3aWRnZXQgPSB0aGlzLndpZGdldDtcblxuICB0aGlzLmVsID0gJC5jcmVhdGUod2lkZ2V0LnJlbmRlcih0ZW1wbGF0ZSwgb3B0cykpWzBdO1xuICB0aGlzLmJpbmRBbGwoKTtcbiAgcmV0dXJuIHRoaXMuZWw7XG59O1xuXG4vKipcbiAqIFJldHVybiBgZWxgIG9yIGNyZWF0ZSBpdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtOb2RlRWxlbWVudH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5TaWduaW5QYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBudWxsICE9IHRoaXMuZWxcbiAgICA/IHRoaXMuZWxcbiAgICA6IHRoaXMuY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIFJlc29sdmVzIGxvZ2luIG9wdGlvbnMgcGFzc2VkIHRvIHRlbXBsYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuU2lnbmluUGFuZWwucHJvdG90eXBlLnJlc29sdmVPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICByZXR1cm4gXy5leHRlbmQoe30sIHRoaXMud2lkZ2V0Lm9wdGlvbnMsICB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xufTtcblxuLypcbiAqIFJlbmRlciBhbmQgYmluZCBzb2NpYWwgc3RyYXRlZ2llc1xuICpcbiAqQHByaXZhdGVcbiAqL1xuU2lnbmluUGFuZWwucHJvdG90eXBlLnJlbmRlckFuZEJpbmRTb2NpYWxTdHJhdGVnaWVzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAvLyBsb2FkIHNvY2lhbCBidXR0b25zXG4gIHZhciBsaXN0ID0gdGhpcy5xdWVyeSgnLmEwLWljb25saXN0Jyk7XG5cbiAgdmFyIHNvY2lhbFN0cmF0ZWdpZXMgPSBfLmNoYWluKG9wdGlvbnMuJGNsaWVudC5zdHJhdGVnaWVzKS53aGVyZSh7IHNvY2lhbDogdHJ1ZSB9KTtcblxuICBpZiAob3B0aW9ucy5jb25uZWN0aW9ucykge1xuICAgIC8vIHNvcnQgc29jaWFsIHN0cmF0ZWdpZXMgYmFzZWQgb24gb3B0aW9ucy5jb25uZWN0aW9ucyBhcnJheSBvcmRlclxuICAgIHZhciBjb25uZWN0aW9ucyA9IG9wdGlvbnMuY29ubmVjdGlvbnM7XG4gICAgc29jaWFsU3RyYXRlZ2llcyA9IHNvY2lhbFN0cmF0ZWdpZXMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICB2YXIgbiA9IGNvbm5lY3Rpb25zLmluZGV4T2Yocy5jb25uZWN0aW9uc1swXS5uYW1lKTtcbiAgICAgIGNvbm5lY3Rpb25zW25dID0gJyc7XG4gICAgICByZXR1cm4gW24sIHNdO1xuICAgIH0pLnNvcnQoKS5tYXAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHhbMV07IH0pO1xuICB9XG5cbiAgc29jaWFsU3RyYXRlZ2llc1xuICAgIC5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHZhciBlID0ge1xuICAgICAgICB1c2VfYmlnX2J1dHRvbnM6IG9wdGlvbnMuX3VzZUJpZ1NvY2lhbEJ1dHRvbnMoKSxcbiAgICAgICAgdGl0bGU6IG9wdGlvbnMuaTE4bi50KCdsb2dpblNvY2lhbEJ1dHRvbicpLnJlcGxhY2UoJ3tjb25uZWN0aW9uOnRpdGxlfScsIHMudGl0bGUpXG4gICAgICB9O1xuICAgICAgcmV0dXJuICBfLmV4dGVuZCh7fSwgcywgZSk7XG4gICAgfSlcbiAgICAuZWFjaChmdW5jdGlvbiAocykgeyByZXR1cm4gbGlzdC5hcHBlbmQoYnV0dG9uVG1wbChzKSk7IH0pO1xuXG4gIGlmIChvcHRpb25zLl9nZXRTb2NpYWxTdHJhdGVnaWVzKCkubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVlcnkoJy5hMC1zZXBhcmF0b3IsIC5hMC1pY29ubGlzdCcpLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgZmFsc2UpO1xuICB9XG5cbiAgdGhpcy5xdWVyeSgnLmEwLXpvY2lhbFtkYXRhLXN0cmF0ZWd5XScsIGxpc3QpLmEwX29uKCdjbGljaycsIGJpbmQodGhpcy5vbnNvY2lhbGNsaWNrLCB0aGlzKSk7XG59O1xuXG4vKipcbiAqIEJpbmQgZXZlbnRzIHRvIGB0aGlzLmVsYCwgbGlrZSBzdWJtaXRcbiAqXG4gKiBAcmV0dXJuIHtTaWduaW5QYW5lbH1cbiAqIEBwcml2YXRlXG4gKi9cblxuU2lnbmluUGFuZWwucHJvdG90eXBlLmJpbmRBbGwgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdpZGdldCA9IHRoaXMud2lkZ2V0O1xuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICB0aGlzLnJlbmRlckFuZEJpbmRTb2NpYWxTdHJhdGVnaWVzKCk7XG5cbiAgLy8gcmVnaXN0ZXIgZW1haWwgdmFsaWRhdGlvbiBzdHVmZlxuICB0aGlzLnF1ZXJ5KCcuYTAtZW1haWwgaW5wdXQnKS5hMF9vbignaW5wdXQnLCBiaW5kKHRoaXMub25lbWFpbGlucHV0LCB0aGlzKSk7XG5cbiAgLy8gYmluZCB0byBzdWJtaXRcbiAgdGhpcy5xdWVyeSgnZm9ybScpLmEwX29uKCdzdWJtaXQnLCBiaW5kKHRoaXMub25zdWJtaXQsIHRoaXMpKTtcblxuICB2YXIgYWN0aW9ucyA9ICQuY3JlYXRlKHdpZGdldC5yZW5kZXIobG9naW5BY3Rpb25zVG1wbCwgb3B0aW9ucykpO1xuICB0aGlzLnF1ZXJ5KCcuYTAtZGItYWN0aW9ucycpLmFwcGVuZChhY3Rpb25zKTtcblxuICAvLyBzZXQgdXNlcm5hbWUgbW9kZVxuICBpZiAob3B0aW9ucy51c2VybmFtZVN0eWxlID09PSAndXNlcm5hbWUnKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0gb3B0aW9ucy5pMThuLnQoJ3NpZ25pbjp1c2VybmFtZVBsYWNlaG9sZGVyJyk7XG5cbiAgICB0aGlzLnF1ZXJ5KCcuYTAtZW1haWwgaW5wdXQnKVxuICAgICAgLmF0dHIoJ3R5cGUnLCAndGV4dCcpXG4gICAgICAuYXR0cigndGl0bGUnLCBwbGFjZWhvbGRlcilcbiAgICAgIC5hdHRyKCdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyKTtcblxuICAgIHRoaXMucXVlcnkoJy5hMC1lbWFpbCBsYWJlbCcpLnRleHQocGxhY2Vob2xkZXIpO1xuICB9XG5cbiAgdmFyIHNpZ251cF9idG4gPSB0aGlzLnF1ZXJ5KCcuYTAtc2lnbi11cCcpO1xuICBpZiAoIW9wdGlvbnMuc2lnbnVwTGluayAmJiBzaWdudXBfYnRuLmxlbmd0aCA+IDApIHtcbiAgICBzaWdudXBfYnRuLmEwX29uKCdjbGljaycsIGJpbmQodGhpcy5vbnNpZ251cGNsaWNrLCB0aGlzKSk7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMucmVzZXRMaW5rKSB7XG4gICAgdGhpcy5xdWVyeSgnLmEwLWZvcmdvdC1wYXNzJykuYTBfb24oJ2NsaWNrJywgYmluZCh0aGlzLm9ucmVzZXRjbGljaywgdGhpcykpO1xuICB9XG5cbiAgdGhpcy5xdWVyeSgnaW5wdXQnKS52YWwoJycpO1xuXG4gIC8vIHNob3cgZW1haWwsIHBhc3N3b3JkLCBzZXBhcmF0b3IgYW5kIGJ1dHRvbiBpZiB0aGVyZSBhcmUgZW50ZXJwcmlzZS9kYiBjb25uZWN0aW9uc1xuICB2YXIgYW55RW50ZXJwcmlzZU9yRGJDb25uZWN0aW9uID0gb3B0aW9ucy5faXNUaGVyZUFueUVudGVycHJpc2VPckRiQ29ubmVjdGlvbigpO1xuICB2YXIgYW55U29jaWFsQ29ubmVjdGlvbiA9IG9wdGlvbnMuX2lzVGhlcmVBbnlTb2NpYWxDb25uZWN0aW9uKCk7XG4gIHZhciBhbnlEQkNvbm5lY3Rpb24gPSBvcHRpb25zLl9pc1RoZXJlQW55REJDb25uZWN0aW9uKCk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLWVtYWlsIGlucHV0JykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhYW55RW50ZXJwcmlzZU9yRGJDb25uZWN0aW9uKTtcbiAgdGhpcy5xdWVyeSgnLmEwLXpvY2lhbC5hMC1wcmltYXJ5JykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhYW55RW50ZXJwcmlzZU9yRGJDb25uZWN0aW9uKTtcbiAgdGhpcy5xdWVyeSgnLmEwLXBhc3N3b3JkJykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhYW55REJDb25uZWN0aW9uKTtcbiAgdGhpcy5xdWVyeSgnLmEwLXNlcGFyYXRvcicpLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgIShhbnlFbnRlcnByaXNlT3JEYkNvbm5lY3Rpb24gJiYgYW55U29jaWFsQ29ubmVjdGlvbikpO1xuXG4gIHRoaXMucXVlcnkoJy5hMC1pbnB1dHMnKS50b2dnbGVDbGFzcygnYTAtaGlkZScsICFhbnlFbnRlcnByaXNlT3JEYkNvbm5lY3Rpb24pO1xuICB0aGlzLnF1ZXJ5KCcuYTAtYWN0aW9uJykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhYW55RW50ZXJwcmlzZU9yRGJDb25uZWN0aW9uKTtcblxufTtcblxuLyoqXG4gKiBTaG93IG9yIGhpZGUgcGFzc3dvcmQgaW5wdXQgd2hldGhlciBpdCBpcyBvciBpcyBub3RcbiAqIGFuIGVudGVycHJpc2UgY29ubmVjdGlvblxuICogWFhYOiBUaGlzIHNob3VsZCBiZSBtb3ZlZCB0byBgU2lnbmluUGFuZWxgIHZpZXdcbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBlXG4gKiBAcHJpdmF0ZVxuICovXG5cblNpZ25pblBhbmVsLnByb3RvdHlwZS5vbmVtYWlsaW5wdXQgPSBmdW5jdGlvbiAoZSkge1xuICBzdG9wKGUpO1xuICB2YXIgbWFpbEZpZWxkICAgPSB0aGlzLnF1ZXJ5KCcuYTAtZW1haWwgaW5wdXQnKTtcbiAgdmFyIHB3ZEZpZWxkICAgID0gdGhpcy5xdWVyeSgnLmEwLXBhc3N3b3JkIGlucHV0JykuZmlyc3QoKTtcbiAgdmFyIG5leHRCdXR0b24gID0gdGhpcy5xdWVyeSgnLmEwLWFjdGlvbiA+IGJ1dHRvbi5hMC1uZXh0Jyk7XG5cbiAgdmFyIGVtYWlsRG9tYWluID0gdGhpcy5vcHRpb25zLl9leHRyYWN0RW1haWxEb21haW4obWFpbEZpZWxkLnZhbCgpIHx8ICcnKTtcblxuICB2YXIgaXNFbnRlcnByaXNlQ29ubmVjdGlvbiA9IHRoaXMub3B0aW9ucy5faXNFbnRlcnByaXNlQ29ubmVjdGlvbihtYWlsRmllbGQudmFsKCkgfHwgJycpO1xuICB2YXIgYWRDb25uZWN0aW9uID0gdGhpcy5vcHRpb25zLl9maW5kQ29ubmVjdGlvbkJ5QUREb21haW4oZW1haWxEb21haW4pO1xuICB2YXIgbXNnO1xuXG4gIGlmICgndXNlcm5hbWUnICE9PSB0aGlzLm9wdGlvbnMudXNlcm5hbWVTdHlsZSAmJiB0aGlzLm9wdGlvbnMuZ3JhdmF0YXIpIHtcbiAgICB0aGlzLmdyYXZhdGFyKG1haWxGaWVsZC52YWwoKSk7XG4gIH1cblxuICAvLyBUT0RPIFJlZmFjdG9yXG4gIGlmICgndXNlcm5hbWUnICE9PSB0aGlzLm9wdGlvbnMudXNlcm5hbWVTdHlsZSAmJiBhZENvbm5lY3Rpb24pIHtcbiAgICB0aGlzLmhyZCA9IHRydWU7XG4gICAgdGhpcy5jdXJyZW50QURDb25uZWN0aW9uID0gYWRDb25uZWN0aW9uO1xuICAgIHRoaXMuY3VycmVudEFEQ29ubmVjdGlvbkRvbWFpbiA9IGVtYWlsRG9tYWluO1xuXG4gICAgdGhpcy5xdWVyeSgnLmEwLXNzby1ub3RpY2UtY29udGFpbmVyJykucmVtb3ZlQ2xhc3MoJ2EwLWhpZGUnKTtcbiAgICB0aGlzLnF1ZXJ5KCcuYTAtcGFzc3dvcmQnKS5hZGRDbGFzcygnYTAtaGlkZScpO1xuICAgIHRoaXMub2xkVGV4dCA9IG5leHRCdXR0b24udGV4dCgpO1xuXG4gICAgbXNnID0gdGhpcy5vcHRpb25zLmkxOG4udCgnc2lnbmluOmFjdGlvbkRvbWFpbicpO1xuICAgIG1zZyA9IG1zZy5yZXBsYWNlKCd7ZG9tYWlufScsIGVtYWlsRG9tYWluKTtcblxuICAgIG5leHRCdXR0b24udGV4dChtc2cpO1xuICAgIG5leHRCdXR0b24uYXR0cigndGl0bGUnLCBtc2cpO1xuXG4gICAgcmV0dXJuIHB3ZEZpZWxkLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gIH1cblxuICB0aGlzLmhyZCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5jdXJyZW50QURDb25uZWN0aW9uID0gdW5kZWZpbmVkO1xuICBpZiAodGhpcy5vbGRUZXh0KSB7XG4gICAgbmV4dEJ1dHRvbi50ZXh0KHRoaXMub2xkVGV4dCk7XG4gICAgbmV4dEJ1dHRvbi5hdHRyKCd0aXRsZScsIHRoaXMub2xkVGV4dCk7XG4gICAgdGhpcy5vbGRUZXh0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKGlzRW50ZXJwcmlzZUNvbm5lY3Rpb24pIHtcbiAgICB0aGlzLnF1ZXJ5KCcuYTAtc3NvLW5vdGljZS1jb250YWluZXInKS5yZW1vdmVDbGFzcygnYTAtaGlkZScpO1xuICAgIHRoaXMucXVlcnkoJy5hMC1wYXNzd29yZCcpLmFkZENsYXNzKCdhMC1oaWRlJyk7XG4gICAgdGhpcy5vbGRUZXh0ID0gbmV4dEJ1dHRvbi50ZXh0KCk7XG5cbiAgICBtc2cgPSB0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWduaW46YWN0aW9uRG9tYWluJyk7XG4gICAgbXNnID0gbXNnLnJlcGxhY2UoJ3tkb21haW59JywgZW1haWxEb21haW4pO1xuXG4gICAgbmV4dEJ1dHRvbi50ZXh0KG1zZyk7XG4gICAgbmV4dEJ1dHRvbi5hdHRyKCd0aXRsZScsIG1zZyk7XG5cbiAgICByZXR1cm4gcHdkRmllbGQuYXR0cignZGlzYWJsZWQnLCB0cnVlKTtcbiAgfVxuXG4gIHRoaXMucXVlcnkoJy5hMC1zc28tbm90aWNlLWNvbnRhaW5lcicpLmFkZENsYXNzKCdhMC1oaWRlJyk7XG4gIHRoaXMucXVlcnkoJy5hMC1wYXNzd29yZCcpLnJlbW92ZUNsYXNzKCdhMC1oaWRlJyk7XG5cbiAgcmV0dXJuIHB3ZEZpZWxkLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG59O1xuXG4vKipcbiAqIEludm9rZSBncmF2YXRhciB1cGRhdGUgZm9yIGBlbWFpbGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW1haWxcbiAqIEBwcml2YXRlXG4gKi9cblxuU2lnbmluUGFuZWwucHJvdG90eXBlLmdyYXZhdGFyID0gZnVuY3Rpb24oZW1haWwpIHtcbiAgZ3JhdmF0YXIodGhpcy53aWRnZXQsIGVtYWlsKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgZm9ybSBhbmQgY29udGludWUgd2l0aCBzaWduaW5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBlXG4gKiBAcHJpdmF0ZVxuICovXG5TaWduaW5QYW5lbC5wcm90b3R5cGUub25zdWJtaXQgPSBmdW5jdGlvbihlKSB7XG4gIHN0b3AoZSk7XG4gIHZhciB3aWRnZXQgPSB0aGlzLndpZGdldDtcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgdmFyIG9rID0gdHJ1ZTtcbiAgdmFyIHBhc3N3b3JkX2lucHV0ID0gdGhpcy5xdWVyeSgnaW5wdXRbbmFtZT1wYXNzd29yZF0nKTtcbiAgdmFyIHBhc3N3b3JkX2VtcHR5ID0gcmVnZXguZW1wdHkudGVzdChwYXNzd29yZF9pbnB1dC52YWwoKSk7XG4gIHZhciBwYXNzd29yZF9kaXNhYmxlZCA9IHBhc3N3b3JkX2lucHV0LmF0dHIoJ2Rpc2FibGVkJyk7XG4gIHZhciBwYXNzd29yZF9yZXF1aXJlZCA9IG9wdGlvbnMuX2lzVGhlcmVBbnlEQkNvbm5lY3Rpb24oKTtcblxuICB2YXIgdmFsaWRhdGVfdXNlcm5hbWUgPSBvcHRpb25zLl9pc1VzZXJuYW1lUmVxdWlyZWQoKTtcbiAgdmFyIGVtYWlsX2lucHV0ID0gdGhpcy5xdWVyeSgnaW5wdXRbbmFtZT1lbWFpbF0nKTtcbiAgdmFyIGVtYWlsX3BhcnNlZCA9IHJlZ2V4LmVtYWlsX3BhcnNlci5leGVjKGVtYWlsX2lucHV0LnZhbCgpLnRvTG93ZXJDYXNlKCkpO1xuICB2YXIgdXNlcm5hbWVfcGFyc2VkID0gcmVnZXgudXNlcm5hbWVfcGFyc2VyLmV4ZWMoZW1haWxfaW5wdXQudmFsKCkudG9Mb3dlckNhc2UoKSk7XG4gIHZhciBlbWFpbF9lbXB0eSA9IHJlZ2V4LmVtcHR5LnRlc3QoZW1haWxfaW5wdXQudmFsKCkpO1xuXG4gIC8vIENsZWFuIGVycm9yIGNvbnRhaW5lclxuICB3aWRnZXQuX3Nob3dFcnJvcigpO1xuICB3aWRnZXQuX2ZvY3VzRXJyb3IoKTtcblxuICBpZiAoZW1haWxfZW1wdHkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQpO1xuICAgIG9rID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIXdpZGdldC5faWdub3JlRW1haWxWYWxpZGF0aW9ucyhlbWFpbF9pbnB1dCkpIHtcbiAgICBpZiAoIWVtYWlsX3BhcnNlZCAmJiAhZW1haWxfZW1wdHkpIHtcbiAgICAgIG9rID0gZmFsc2UgfHwgKHZhbGlkYXRlX3VzZXJuYW1lICYmIHVzZXJuYW1lX3BhcnNlZCk7XG4gICAgICBpZighb2spIHdpZGdldC5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCwgb3B0aW9ucy5pMThuLnQoJ2ludmFsaWQnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhc3N3b3JkX2VtcHR5ICYmIHBhc3N3b3JkX3JlcXVpcmVkICYmICFwYXNzd29yZF9kaXNhYmxlZCkge1xuICAgIHdpZGdldC5fZm9jdXNFcnJvcihwYXNzd29yZF9pbnB1dCk7XG4gICAgb2sgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLmhyZCkge1xuICAgIHJldHVybiB0aGlzLmVuYWJsZUhSRCh0aGlzLmN1cnJlbnRBRENvbm5lY3Rpb24sIHRoaXMuY3VycmVudEFEQ29ubmVjdGlvbkRvbWFpbik7XG5cbiAgfVxuXG4gIGlmIChvayAmJiB0aGlzLmN1cnJlbnRBRENvbm5lY3Rpb24pIHtcbiAgICB2YXIgY29ubl9vYmogPSB0aGlzLm9wdGlvbnMuX2ZpbmRDb25uZWN0aW9uQnlBRERvbWFpbihcbiAgICAgIHRoaXMuY3VycmVudEFEQ29ubmVjdGlvbi5kb21haW4sXG4gICAgICB3aWRnZXQuJGNsaWVudC5zdHJhdGVnaWVzXG4gICAgKTtcbiAgICByZXR1cm4gd2lkZ2V0Ll9zaWduaW5XaXRoQXV0aDAodGhpcywgY29ubl9vYmopO1xuICB9XG5cbiAgaWYgKG9rKSB7IHJldHVybiB3aWRnZXQuX3NpZ25pbih0aGlzKTsgfVxufTtcblxuLyoqXG4gKiBIYW5kbGUgYGVgIGZvciBzb2NpYWwgY29ubmVjdGlvbnMgYnV0dG9uIGNsaWNrXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZVxuICogQHByaXZhdGVcbiAqL1xuXG5TaWduaW5QYW5lbC5wcm90b3R5cGUub25zb2NpYWxjbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICBzdG9wKGUpO1xuICAgIHRoaXMud2lkZ2V0Ll9zaWduaW5Tb2NpYWwoZSwgbnVsbCwgbnVsbCwgdGhpcyk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBgZWAgZm9yIHJlc2V0IGJ1dHRvbiBhY3Rpb24gY2xpY2tcbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBlXG4gKiBAcHJpdmF0ZVxuICovXG5cblNpZ25pblBhbmVsLnByb3RvdHlwZS5vbnJlc2V0Y2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gIHN0b3AoZSk7XG4gIHRoaXMud2lkZ2V0Ll9yZXNldFBhbmVsKHRoaXMub3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBgZWAgZm9yIHNpZ251cCBidXR0b24gYWN0aW9uIGNsaWNrXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZVxuICogQHByaXZhdGVcbiAqL1xuXG5TaWduaW5QYW5lbC5wcm90b3R5cGUub25zaWdudXBjbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgc3RvcChlKTtcbiAgdGhpcy53aWRnZXQuX3NpZ251cFBhbmVsKHRoaXMub3B0aW9ucyk7XG59O1xuXG5cbi8qKlxuICogRW5hYmxlcyBIb21lIFJlYWxtIERpc2NvdmVyeSBpbiBzaWduaW5cbiAqXG4gKiBAcGFyYW0ge0Nvbm5lY3Rpb259IGNvbm5cbiAqIEBwcml2YXRlXG4gKi9cbi8vIFRPRE8gUmVmYWN0b3JcblNpZ25pblBhbmVsLnByb3RvdHlwZS5lbmFibGVIUkQgPSBmdW5jdGlvbiAoYWRDb25uZWN0aW9uLCBlbWFpbERvbWFpbikge1xuICB0aGlzLmhyZCA9IHVuZGVmaW5lZDtcblxuICB2YXIgZW1haWxGaWVsZCA9IHRoaXMucXVlcnkoJy5hMC1lbWFpbCBpbnB1dCcpLmZpcnN0KCk7XG4gIHZhciBwd2RGaWVsZCAgID0gdGhpcy5xdWVyeSgnLmEwLXBhc3N3b3JkIGlucHV0JykuZmlyc3QoKTtcbiAgdmFyIG5leHRCdXR0b24gPSB0aGlzLnF1ZXJ5KCcuYTAtYWN0aW9uID4gYnV0dG9uLmEwLW5leHQnKTtcblxuICB2YXIgZW1haWxQYXJzZWQgPSByZWdleC5lbWFpbF9wYXJzZXIuZXhlYyhlbWFpbEZpZWxkLnZhbCgpKTtcblxuICB0aGlzLnF1ZXJ5KCcuYTAtcGFzc3dvcmQnKS5yZW1vdmVDbGFzcygnYTAtaGlkZScpO1xuICB0aGlzLnF1ZXJ5KCcuYTAtc3NvLW5vdGljZS1jb250YWluZXInKS5hZGRDbGFzcygnYTAtaGlkZScpO1xuICBuZXh0QnV0dG9uLnRleHQodGhpcy5vbGRUZXh0KTtcbiAgcHdkRmllbGQucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcblxuICB0aGlzLndpZGdldC5zZXRQYW5lbCh0aGlzKTtcblxuICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLm9wdGlvbnMuaTE4bi50KCdzaWduaW46dXNlcm5hbWVQbGFjZWhvbGRlcicpO1xuXG4gIHRoaXMuX29sZFBsYWNlaG9sZGVyID0gZW1haWxGaWVsZC5hdHRyKCd0aXRsZScpO1xuXG4gIGVtYWlsRmllbGRcbiAgLmF0dHIoJ3R5cGUnLCAndGV4dCcpXG4gIC5hdHRyKCd0aXRsZScsIHBsYWNlaG9sZGVyKVxuICAuYXR0cigncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlcik7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLWVtYWlsIGxhYmVsJykudGV4dChwbGFjZWhvbGRlcik7XG4gIGVtYWlsRmllbGQuZm9jdXMoKTtcbiAgaWYgKGVtYWlsUGFyc2VkLmxlbmd0aCA+IDEgJiYgdGhpcy5vcHRpb25zLmRlZmF1bHRBRFVzZXJuYW1lRnJvbUVtYWlsUHJlZml4KSB7XG4gICAgZW1haWxGaWVsZC52YWwoZW1haWxQYXJzZWRbMV0pO1xuICB9IGVsc2Uge1xuICAgIGVtYWlsRmllbGQudmFsKCcnKTtcbiAgfVxuXG4gIHRoaXMucXVlcnkoJy5hMC1jb3Jwb3JhdGUtY3JlZGVudGlhbHMnKS50b2dnbGVDbGFzcygnYTAtaGlkZScpO1xuICB0aGlzLnF1ZXJ5KCcuYTAtZG9tYWluJykudGV4dChlbWFpbERvbWFpbik7XG5cbiAgLy8gSGlkZSBvdGhlciBhY3Rpb25zIGJ1dHRvbnNcbiAgdmFyIGFjdGlvbnMgPSAkLmNyZWF0ZSh0aGlzLndpZGdldC5yZW5kZXIobG9naW5BY3Rpb25zVG1wbCwge1xuICAgIHNob3dTaWdudXBBY3Rpb246IGZhbHNlLFxuICAgIHNob3dSZXNldEFjdGlvbjogZmFsc2UsXG4gICAgc2hvd0NhbmNlbDogdHJ1ZVxuICB9KSk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLWRiLWFjdGlvbnMnKS5maXJzdCgpLmRlZXBFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICQoY2hpbGQpLmhpZGUoKTtcbiAgfSk7XG4gIHRoaXMucXVlcnkoJy5hMC1kYi1hY3Rpb25zJykuYXBwZW5kKGFjdGlvbnMpO1xuICB0aGlzLnF1ZXJ5KCcuYTAtZGItYWN0aW9ucycpLnNob3coKTtcblxuICB0aGlzLnF1ZXJ5KCcuYTAtY2FuY2VsJykuYTBfb24oJ2NsaWNrJywgYmluZCh0aGlzLm9uY2FuY2VsLCB0aGlzKSk7XG4gIHRoaXMuY3VycmVudEFEQ29ubmVjdGlvbiA9IGFkQ29ubmVjdGlvbjtcbiAgZW1haWxGaWVsZC5hMF9vZmYoJ2lucHV0Jyk7XG59O1xuXG5cbi8qKlxuICogSGFuZGxlIGBlYCBmb3IgY2FuY2VsIGJ1dHRvbiBhY3Rpb24gY2xpY2sgKHdoZW4gZG9pbmcgSFJEKVxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGVcbiAqIEBwcml2YXRlXG4gKi9cbi8vIFRPRE8gUmVmYWN0b3JcblNpZ25pblBhbmVsLnByb3RvdHlwZS5vbmNhbmNlbCA9IGZ1bmN0aW9uIChlKSB7XG4gIHN0b3AoZSk7XG5cbiAgdGhpcy5jdXJyZW50QURDb25uZWN0aW9uID0gdW5kZWZpbmVkO1xuXG4gIHZhciB3aWRnZXQgPSB0aGlzLndpZGdldDtcbiAgLy8gQ2xlYW4gZXJyb3IgY29udGFpbmVyXG4gIHdpZGdldC5fc2hvd0Vycm9yKCk7XG4gIHdpZGdldC5fZm9jdXNFcnJvcigpO1xuICB3aWRnZXQuc2V0UGFuZWwodGhpcyk7XG5cbiAgdmFyIGVtYWlsRmllbGQgPSB0aGlzLnF1ZXJ5KCcuYTAtZW1haWwgaW5wdXQnKS5maXJzdCgpO1xuICB2YXIgcHdkRmllbGQgICA9IHRoaXMucXVlcnkoJy5hMC1wYXNzd29yZCBpbnB1dCcpLmZpcnN0KCk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLWRiLWFjdGlvbnMnKS5maXJzdCgpLmRlZXBFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICQoY2hpbGQpLnNob3coKTtcbiAgfSk7XG5cbiAgdmFyIG9sZFBsYWNlaG9sZGVyID0gdGhpcy5fb2xkUGxhY2Vob2xkZXI7XG4gIHRoaXMuX29sZFBsYWNlaG9sZGVyID0gdW5kZWZpbmVkO1xuXG4gIHRoaXMucXVlcnkoJy5hMC1kYi1hY3Rpb25zIC5hMC1jYW5jZWwnKS5yZW1vdmUoKTtcbiAgZW1haWxGaWVsZFxuICAgIC5hdHRyKCd0eXBlJywgJ3RleHQnKVxuICAgIC5hdHRyKCd0aXRsZScsIG9sZFBsYWNlaG9sZGVyKVxuICAgIC5hdHRyKCdwbGFjZWhvbGRlcicsIG9sZFBsYWNlaG9sZGVyKTtcblxuICBlbWFpbEZpZWxkLnZhbCgnJyk7XG4gIHB3ZEZpZWxkLnZhbCgnJyk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLWVtYWlsIGxhYmVsJykudGV4dChvbGRQbGFjZWhvbGRlcik7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLWNvcnBvcmF0ZS1jcmVkZW50aWFscycpLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJyk7XG4gIGVtYWlsRmllbGQuYTBfb24oJ2lucHV0JywgYmluZCh0aGlzLm9uZW1haWxpbnB1dCwgdGhpcykpO1xuICBlbWFpbEZpZWxkLmZvY3VzKCk7XG59O1xuXG5cbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZSwgcmV0aHJvdykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hIz9bYS16QS1aMC05XSs7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoLycvZywgJyYjMzk7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1jcmVhdGUtYWNjb3VudCBhMC1idXR0b25zLWFjdGlvbnNcIj5cXG4gICcpOzI7IGlmIChsb2NhbHMuc2hvd0NhbmNlbCkgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxhIGhyZWY9XCInLCBlc2NhcGUoKDMsICBsb2NhbHMuY2FuY2VsTGluayB8fCAnamF2YXNjcmlwdDoge30nICkpLCAnXCJcXG4gICAgY2xhc3M9XCJhMC1jYW5jZWwgIGEwLWJ0bi1zbWFsbFwiPicsIGVzY2FwZSgoNCwgIGkxOG4udCgnc2lnbmluOmNhbmNlbEFjdGlvbicpICkpLCAnPC9hPlxcbiAgJyk7NTsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcpOzY7IGlmIChzaG93U2lnbnVwQWN0aW9uKSB7IDsgYnVmLnB1c2goJ1xcbiAgPGEgaHJlZj1cIicsIGVzY2FwZSgoNywgIGxvY2Fscy5zaWdudXBMaW5rIHx8ICdqYXZhc2NyaXB0OiB7fScgKSksICdcIlxcbiAgICBjbGFzcz1cImEwLXNpZ24tdXAgYTAtYnRuLXNtYWxsXCI+XFxuICAgICcsIGVzY2FwZSgoOSwgIGkxOG4udCgnc2lnbmluOnNpZ251cFRleHQnKSApKSwgJ1xcbiAgPC9hPlxcbiAgJyk7MTE7IH0gOyBidWYucHVzaCgnXFxuICAnKTsxMjsgaWYgKHNob3dTaWdudXBBY3Rpb24gJiYgc2hvd1Jlc2V0QWN0aW9uKSB7IDsgYnVmLnB1c2goJ1xcbiAgPHNwYW4gY2xhc3M9XCJhMC1kaXZpZGVyXCI+PC9zcGFuPlxcbiAgJyk7MTQ7IH0gOyBidWYucHVzaCgnXFxuICAnKTsxNTsgaWYgKHNob3dSZXNldEFjdGlvbikgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxhIGhyZWY9XCInLCBlc2NhcGUoKDE2LCAgbG9jYWxzLnJlc2V0TGluayB8fCAnamF2YXNjcmlwdDoge30nICkpLCAnXCJcXG4gICAgY2xhc3M9XCJhMC1mb3Jnb3QtcGFzcyAgYTAtYnRuLXNtYWxsXCI+JywgZXNjYXBlKCgxNywgIGkxOG4udCgnc2lnbmluOmZvcmdvdFRleHQnKSApKSwgJzwvYT5cXG4gICcpOzE4OyB9IDsgYnVmLnB1c2goJ1xcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59KSIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uIGFub255bW91cyhsb2NhbHMsIGZpbHRlcnMsIGVzY2FwZSwgcmV0aHJvdykge1xuZXNjYXBlID0gZXNjYXBlIHx8IGZ1bmN0aW9uIChodG1sKXtcbiAgcmV0dXJuIFN0cmluZyhodG1sKVxuICAgIC5yZXBsYWNlKC8mKD8hIz9bYS16QS1aMC05XSs7KS9nLCAnJmFtcDsnKVxuICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXG4gICAgLnJlcGxhY2UoLycvZywgJyYjMzk7JylcbiAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xufTtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1ub3Rsb2dnZWRpbiBhMC1tb2RlXCI+XFxuICAgIDxmb3JtIG5vdmFsaWRhdGU+XFxuICAgICAgPGRpdiBjbGFzcz1cImEwLWNvbGxhcHNlLXNvY2lhbFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWljb25saXN0IGEwLWhpZGVcIj48cCBjbGFzcz1cImEwLWhpZGVcIj4nLCBlc2NhcGUoKDQsICBpMThuLnQoJ3NpZ25pbjpvcicpICkpLCAnPC9wPjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNlcGFyYXRvciBhMC1oaWRlXCI+PHNwYW4+JywgZXNjYXBlKCg1LCAgaTE4bi50KCdzaWduaW46c2VwYXJhdG9yVGV4dCcpICkpLCAnPC9zcGFuPjwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XCJhMC1jb3Jwb3JhdGUtY3JlZGVudGlhbHMgYTAtaGlkZVwiPlBsZWFzZSBlbnRlciB5b3VyIDxzdHJvbmc+Y29ycG9yYXRlPC9zdHJvbmc+IGNyZWRlbnRpYWxzIGF0IDxzcGFuIGNsYXNzPVwiYTAtZG9tYWluXCI+PC9zcGFuPi48L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiYTAtZW1haWxQYXNzd29yZFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0c1wiPlxcblxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtZW1haWxcIj5cXG4gICAgICAgICAgICAgICcpOzEyO1xuICAgICAgICAgICAgICAgIHZhciBlbWFpbFBsYWNlaG9sZGVyID0gaTE4bi50KCdzaWduaW46ZW1haWxQbGFjZWhvbGRlcicpXG4gICAgICAgICAgICAgICAgICArICggX2lzVXNlcm5hbWVSZXF1aXJlZCgpID8gJyAvICcgKyBpMThuLnQoJ3NpZ25pbjp1c2VybmFtZVBsYWNlaG9sZGVyJykgOiAnJyApXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0QnVkaWNvbiA9IF9pc1VzZXJuYW1lUmVxdWlyZWQoKSB8fCAndXNlcm5hbWUnID09PSB1c2VybmFtZVN0eWxlID8gJzEnIDogJzUnO1xuICAgICAgICAgICAgICA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhMC1zaWduaW5fZWFzeV9lbWFpbFwiIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoMTgsICBlbWFpbFBsYWNlaG9sZGVyICkpLCAnXFxuICAgICAgICAgICAgICA8L2xhYmVsPlxcblxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvbi0nLCBlc2NhcGUoKDIyLCAgaW5wdXRCdWRpY29uICkpLCAnXCI+PC9pPlxcblxcbiAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cImVtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICAgIGlkPVwiYTAtc2lnbmluX2Vhc3lfZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKCgyNywgIGVtYWlsUGxhY2Vob2xkZXIgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKDI4LCAgZW1haWxQbGFjZWhvbGRlciApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtcGFzc3dvcmQgYTAtaGlkZVwiPlxcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhMC1zaWduaW5fZWFzeV9wYXNzd29yZFwiIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAnLCBlc2NhcGUoKDM0LCAgaTE4bi50KCdzaWduaW46cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgPC9sYWJlbD5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXQtYm94XCI+XFxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvblwiPjwvaT5cXG5cXG4gICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwicGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgIGlkPVwiYTAtc2lnbmluX2Vhc3lfcGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCInLCBlc2NhcGUoKDQzLCAgaTE4bi50KCdzaWduaW46cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoNDQsICBpMThuLnQoJ3NpZ25pbjpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwhLS0gLmEwLWlucHV0cyAtLT5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1zc28tbm90aWNlLWNvbnRhaW5lciBhMC1oaWRlXCI+PGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb25cIj48L2k+IDxzcGFuIGNsYXNzPVwiYTAtc3NvLW5vdGljZVwiPlNpbmdsZSBTaWduLW9uIGVuYWJsZWQ8L3NwYW4+PC9kaXY+XFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtYWN0aW9uXCI+XFxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJhMC1wcmltYXJ5IGEwLW5leHRcIj4nLCBlc2NhcGUoKDU0LCAgaTE4bi50KCdzaWduaW46YWN0aW9uJykgKSksICc8L2J1dHRvbj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtZGItYWN0aW9uc1wiPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZm9ybT5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufSkiLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2JvbnpvLWF1Z21lbnRlZCcpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vb2JqZWN0LWNyZWF0ZScpO1xudmFyIHN0b3AgPSByZXF1aXJlKCcuLi9zdG9wLWV2ZW50Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2JpbmQnKTtcbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJy4vc2lnbnVwLmVqcycpO1xudmFyIGJ1dHRvblRtcGwgPSByZXF1aXJlKCcuLi9odG1sL3pvY2lhbC1idXR0b24uZWpzJyk7XG52YXIgcmVnZXggPSByZXF1aXJlKCcuLi9yZWdleCcpO1xudmFyIGdyYXZhdGFyID0gcmVxdWlyZSgnLi4vZ3JhdmF0YXInKTtcbnZhciBQYXNzd29yZFN0cmVuZ3RoID0gcmVxdWlyZSgnLi4vcGFzc3dvcmQtc3RyZW5ndGgnKTtcbnZhciBlbXB0eSA9IHJlZ2V4LmVtcHR5O1xudmFyIGVtYWlsX3BhcnNlciA9IHJlZ2V4LmVtYWlsX3BhcnNlcjtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB1c2VybmFtZV9wYXJzZXIgPSByZWdleC51c2VybmFtZV9wYXJzZXI7XG5cbi8qKlxuICogRXhwb3NlIFNpZ251cFBhbmVsXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBTaWdudXBQYW5lbDtcblxuLyoqXG4gKiBDcmVhdGUgYFNpZ251cFBhbmVsYFxuICpcbiAqIEBwYXJhbSB7QXV0aDBMb2NrfSB3aWRnZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5mdW5jdGlvbiBTaWdudXBQYW5lbCh3aWRnZXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNpZ251cFBhbmVsKSkge1xuICAgIHJldHVybiBuZXcgU2lnbnVwUGFuZWwod2lkZ2V0LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8vIEJvdGggYHdpZGdldGAgYW5kIGBvcHRpb25zYCBhcmUgcmVxdWlyZWRcbiAgaWYgKDIgIT09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVycyBmb3IgU2lnbnVwUGFuZWwnKTtcbiAgfVxuXG4gIHRoaXMubmFtZSA9ICdzaWdudXAnO1xuICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgdGhpcy5vcHRpb25zID0gdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5lbCA9IG51bGw7XG5cbiAgLy8gZGVib3VuY2UgZ3JhdmF0YXIgdXBkYXRlIG1ldGhvZFxuICB0aGlzLmdyYXZhdGFyID0gXy5kZWJvdW5jZSh0aGlzLmdyYXZhdGFyLCAzMDApO1xuXG4gIEVtaXR0ZXIuY2FsbCh0aGlzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0IGZyb20gYEV2ZW50RW1pdHRlcmBcbiAqL1xuXG5TaWdudXBQYW5lbC5wcm90b3R5cGUgPSBjcmVhdGUoRW1pdHRlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFF1ZXJ5IGZvciBlbGVtZW50cyBhdCBgdGhpcy5lbGAgY29udGV4dFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7Qm9uem9BdWdtZW50ZWR9XG4gKiBAcHVibGljXG4gKi9cblxuU2lnbnVwUGFuZWwucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgaWYgKCF0aGlzLmVsKSB7IHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBnZXQgZWxlbWVudCBzaW5jZSBubyBgZWxgIGlzIHNldCB0byBsb2NhbCBjb250ZXh0Jyk7IH1cbiAgcmV0dXJuICQoc2VsZWN0b3IsIHRoaXMuZWwpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYGVsYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtOb2RlRWxlbWVudH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5TaWdudXBQYW5lbC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHRoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XG4gIHZhciB3aWRnZXQgPSB0aGlzLndpZGdldDtcblxuICB0aGlzLmVsID0gJC5jcmVhdGUod2lkZ2V0LnJlbmRlcih0ZW1wbGF0ZSwgb3B0cykpWzBdO1xuICB0aGlzLmJpbmRBbGwoKTtcbiAgcmV0dXJuIHRoaXMuZWw7XG59O1xuXG4vKipcbiAqIFJldHVybiBgZWxgIG9yIGNyZWF0ZSBpdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtOb2RlRWxlbWVudH1cbiAqIEBwdWJsaWNcbiAqL1xuXG5TaWdudXBQYW5lbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBudWxsICE9IHRoaXMuZWxcbiAgICA/IHRoaXMuZWxcbiAgICA6IHRoaXMuY3JlYXRlLmFwcGx5KHRoaXMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSk7XG59O1xuXG4vKipcbiAqIFJlc29sdmVzIGxvZ2luIG9wdGlvbnMgcGFzc2VkIHRvIHRlbXBsYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblxuU2lnbnVwUGFuZWwucHJvdG90eXBlLnJlc29sdmVPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICByZXR1cm4gXy5leHRlbmQoe30sIHRoaXMud2lkZ2V0Lm9wdGlvbnMsICB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xufTtcblxuXG4vKipcbiAqIEJpbmQgZXZlbnRzIHRvIGB0aGlzLmVsYCwgbGlrZSBzdWJtaXRcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cblNpZ251cFBhbmVsLnByb3RvdHlwZS5iaW5kQWxsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gIC8vIGhpZGUgb25seSBhbmQgb25seSBpZiBzZXQgdG8gZmFsc2VcbiAgdGhpcy5xdWVyeSgnLmEwLW9wdGlvbnMnKVxuICAgIC50b2dnbGVDbGFzcygnYTAtaGlkZScsICFvcHRpb25zLnNob3dTaWdudXBBY3Rpb24pO1xuXG4gIHZhciBsaXN0ID0gdGhpcy5xdWVyeSgnLmEwLWljb25saXN0JykuaHRtbCgnJyk7XG4gIF8uY2hhaW4ob3B0aW9ucy4kY2xpZW50LnN0cmF0ZWdpZXMpXG4gICAgLndoZXJlKHsgc29jaWFsOiB0cnVlIH0pXG4gICAgLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgdmFyIGUgPSB7XG4gICAgICAgIHVzZV9iaWdfYnV0dG9uczogb3B0aW9ucy5fdXNlQmlnU29jaWFsQnV0dG9ucygpLFxuICAgICAgICB0aXRsZTogb3B0aW9ucy5pMThuLnQoJ3NpZ251cFNvY2lhbEJ1dHRvbicpLnJlcGxhY2UoJ3tjb25uZWN0aW9uOnRpdGxlfScsIHMudGl0bGUpXG4gICAgICB9O1xuICAgICAgcmV0dXJuICBfLmV4dGVuZCh7fSwgcywgZSk7XG4gICAgfSlcbiAgICAuZWFjaChmdW5jdGlvbiAocykgeyByZXR1cm4gbGlzdC5hcHBlbmQoYnV0dG9uVG1wbChzKSk7IH0pO1xuXG4gIGlmIChvcHRpb25zLl9nZXRTb2NpYWxTdHJhdGVnaWVzKCkubGVuZ3RoID4gMCkge1xuICAgIHRoaXMucXVlcnkoJy5hMC1zZXBhcmF0b3IsIC5hMC1pY29ubGlzdCcpLnNob3coKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnF1ZXJ5KCcuYTAtc2VwYXJhdG9yLCAuYTAtaWNvbmxpc3QnKS5oaWRlKCk7XG4gIH1cblxuICB0aGlzLnF1ZXJ5KCcuYTAtZW1haWwgaW5wdXQnKS5hMF9vbignaW5wdXQnLCBiaW5kKHRoaXMub25lbWFpbGlucHV0LCB0aGlzKSk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLXpvY2lhbFtkYXRhLXN0cmF0ZWd5XScsIGxpc3QpXG4gICAgLmEwX29uKCdjbGljaycsIGJpbmQodGhpcy5vbnpvY2lhbGNsaWNrLCB0aGlzKSk7XG5cbiAgdGhpcy5xdWVyeSgnLmEwLW9wdGlvbnMgLmEwLWNhbmNlbCcpXG4gICAgLmEwX29uKCdjbGljaycsIGJpbmQodGhpcy5vbmNhbmNlbCwgdGhpcykpO1xuXG4gIHRoaXMucXVlcnkoJ2Zvcm0nKVxuICAgIC5hMF9vZmYoJ3N1Ym1pdCcpXG4gICAgLmEwX29uKCdzdWJtaXQnLCBiaW5kKHRoaXMub25zdWJtaXQsIHRoaXMpKTtcblxuICB2YXIgcGFzc3dvcmRTdHJlbmd0aCA9IG5ldyBQYXNzd29yZFN0cmVuZ3RoKHRoaXMucXVlcnkoJy5hMC1wYXNzd29yZF9wb2xpY3knKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5KCcjYTAtc2lnbnVwX2Vhc3lfcGFzc3dvcmQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBgem9jaWFsYCBzaWdudXAgY2xpY2tcbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBlXG4gKiBAcHJpdmF0ZVxuICovXG5cblNpZ251cFBhbmVsLnByb3RvdHlwZS5vbnpvY2lhbGNsaWNrID0gZnVuY3Rpb24oZSkge1xuICBzdG9wKGUpO1xuICB0aGlzLndpZGdldC5fc2lnbmluU29jaWFsKGUsIG51bGwsIG51bGwsIHRoaXMpO1xufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBgc3VibWl0YCBmb3JtIGV2ZW50XG4gKlxuICogQHBhcmFtIHtFdmVudH0gZVxuICogQHByaXZhdGVcbiAqL1xuXG5TaWdudXBQYW5lbC5wcm90b3R5cGUub25zdWJtaXQgPSBmdW5jdGlvbihlKSB7XG4gIHN0b3AoZSk7XG4gIGlmICghdGhpcy52YWxpZCgpKSByZXR1cm47XG4gIHRoaXMuc3VibWl0KCk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGBjYW5jZWxgIGV2ZW50IGNsaWNrXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZVxuICogQHByaXZhdGVcbiAqL1xuXG5TaWdudXBQYW5lbC5wcm90b3R5cGUub25jYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gIHN0b3AoZSk7XG5cbiAgdmFyIHdpZGdldCA9IHRoaXMud2lkZ2V0O1xuICB3aWRnZXQuX3Nob3dTdWNjZXNzKCk7XG4gIHdpZGdldC5fc2hvd0Vycm9yKCk7XG4gIHdpZGdldC5fZm9jdXNFcnJvcigpO1xuICB3aWRnZXQuX3NpZ25pblBhbmVsKCk7XG59O1xuXG5TaWdudXBQYW5lbC5wcm90b3R5cGUub25lbWFpbGlucHV0ID0gZnVuY3Rpb24gKGUpIHtcbiAgdmFyIG1haWxGaWVsZCA9IHRoaXMucXVlcnkoJy5hMC1lbWFpbCBpbnB1dCcpO1xuXG4gIGlmICgndXNlcm5hbWUnICE9PSB0aGlzLm9wdGlvbnMudXNlcm5hbWVTdHlsZSAmJiB0aGlzLm9wdGlvbnMuZ3JhdmF0YXIpIHtcbiAgICB0aGlzLmdyYXZhdGFyKG1haWxGaWVsZC52YWwoKSk7XG4gIH1cbn07XG5cbi8qKlxuICogSW52b2tlIGdyYXZhdGFyIHVwZGF0ZSBmb3IgYGVtYWlsYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbWFpbFxuICogQHByaXZhdGVcbiAqL1xuXG5TaWdudXBQYW5lbC5wcm90b3R5cGUuZ3JhdmF0YXIgPSBmdW5jdGlvbihlbWFpbCkge1xuICBncmF2YXRhcih0aGlzLndpZGdldCwgZW1haWwpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBTdWJtaXQgdmFsaWRhdGVkIGZvcm0gdG8gQXV0aDAgZm9yIHNpZ251cFxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuU2lnbnVwUGFuZWwucHJvdG90eXBlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGFuZWwgPSB0aGlzO1xuICB2YXIgd2lkZ2V0ID0gdGhpcy53aWRnZXQ7XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICB2YXIgY29ubmVjdGlvbiAgPSBvcHRpb25zLl9nZXRBdXRoMENvbm5lY3Rpb24oKTtcbiAgdmFyIGVtYWlsX2lucHV0ID0gdGhpcy5xdWVyeSgnaW5wdXRbbmFtZT1lbWFpbF0nKTtcbiAgdmFyIGVtYWlsID0gZW1haWxfaW5wdXQudmFsKCk7XG4gIHZhciB1c2VybmFtZV9pbnB1dCA9IHRoaXMucXVlcnkoJy5hMC11c2VybmFtZSBpbnB1dCcpO1xuICB2YXIgdXNlcm5hbWUgPSB1c2VybmFtZV9pbnB1dC52YWwoKTtcbiAgdmFyIHBhc3N3b3JkX2lucHV0ID0gdGhpcy5xdWVyeSgnaW5wdXRbbmFtZT1wYXNzd29yZF0nKTtcbiAgdmFyIHBhc3N3b3JkID0gcGFzc3dvcmRfaW5wdXQudmFsKCk7XG4gIHZhciBjYWxsYmFjayA9IHdpZGdldC5vcHRpb25zLnBvcHVwQ2FsbGJhY2s7XG5cbiAgd2lkZ2V0Ll9sb2FkaW5nUGFuZWwoeyBtb2RlOiAnc2lnbnVwJyB9KTtcblxuICB3aWRnZXQuJGF1dGgwLnNpZ251cCh7XG4gICAgY29ubmVjdGlvbjogY29ubmVjdGlvbi5uYW1lLFxuICAgIHVzZXJuYW1lOiAgIChvcHRpb25zLl9pc1VzZXJuYW1lUmVxdWlyZWQoKSkgPyB1c2VybmFtZSA6IGVtYWlsLFxuICAgIGVtYWlsOiAgICAgIGVtYWlsLFxuICAgIHBhc3N3b3JkOiAgIHBhc3N3b3JkLFxuICAgIGF1dG9fbG9naW46IGZhbHNlLFxuICAgIHBvcHVwOiAgICAgIHBhbmVsLm9wdGlvbnMucG9wdXAsXG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIC8vIFRoaXMgaXMgbm93IGR1bW15LCBhbmQgc2hvdWxkIG5vIGxvbmdlciBleGlzdCBzaW5jZSBhbGxcbiAgICAvLyBkb20gZXZlbnRzIGtlZXAgYSByZWZlcmVuY2UgdG8gd2lkZ2V0LiRjb250YWluZXJcbiAgICBpZiAoICF3aWRnZXQuJGNvbnRhaW5lciB8fCB3aWRnZXQucXVlcnkoKVswXSAhPT0gd2lkZ2V0LiRjb250YWluZXIuY2hpbGROb2Rlc1swXSApIHtcbiAgICAgIHJldHVybiBjb25zb2xlICYmIGNvbnNvbGUubG9nICYmIGNvbnNvbGUubG9nKCd0aGlzIHNpZ251cCB3YXMgdHJpZ2dlcmVkIGZyb20gYW5vdGhlciBub2RlIGluc3RhbmNlJywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBpZiAoIWVyciAmJiB3aWRnZXQub3B0aW9ucy5sb2dpbkFmdGVyU2lnbnVwKSByZXR1cm4gd2lkZ2V0Ll9zaWduaW5XaXRoQXV0aDAocGFuZWwpO1xuICAgIGlmICghZXJyICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjaykgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHdpZGdldCwgYXJncyksIHdpZGdldC5oaWRlKCk7XG4gICAgaWYgKCFlcnIpIHJldHVybiB3aWRnZXQuaGlkZSgpO1xuXG4gICAgLy8gZGlzcGxheSBzaWdudXAgYWdhaW5cbiAgICB3aWRnZXQuc2V0UGFuZWwocGFuZWwpO1xuXG4gICAgLy8gcmVuZGVyIGVycm9yc1xuICAgIGlmICg0MDAgIT09IGVyci5zdGF0dXMpIHtcbiAgICAgIHdpZGdldC5fc2hvd0Vycm9yKHdpZGdldC5vcHRpb25zLmkxOG4udCgnc2lnbnVwOnNlcnZlckVycm9yVGV4dCcpKVxuICAgICAgcmV0dXJuICdmdW5jdGlvbicgPT09IHR5cGVvZiBjYWxsYmFjayA/IGNhbGxiYWNrLmFwcGx5KHdpZGdldCwgYXJncykgOiBudWxsO1xuICAgIH1cblxuICAgIGlmICgnaW52YWxpZF9wYXNzd29yZCcgPT09IGVyci5uYW1lKSB7XG4gICAgICB3aWRnZXQuX2ZvY3VzRXJyb3IocGFzc3dvcmRfaW5wdXQsIHdpZGdldC5vcHRpb25zLmkxOG4udCgnaW52YWxpZCcpKTtcbiAgICAgIHdpZGdldC5fc2hvd0Vycm9yKHdpZGdldC5vcHRpb25zLmkxOG4udCgnc2lnbnVwOmludmFsaWRQYXNzd29yZCcpKTtcbiAgICB9IGVsc2UgaWYgKCd1c2VybmFtZV9leGlzdHMnID09PSBlcnIubmFtZSkge1xuICAgICAgd2lkZ2V0Ll9mb2N1c0Vycm9yKHVzZXJuYW1lX2lucHV0KTtcbiAgICAgIHdpZGdldC5fc2hvd0Vycm9yKHdpZGdldC5vcHRpb25zLmkxOG4udCgnc2lnbnVwOnVzZXJuYW1lSW5Vc2VFcnJvclRleHQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZGdldC5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCk7XG4gICAgICB3aWRnZXQuX3Nob3dFcnJvcih3aWRnZXQub3B0aW9ucy5pMThuLnQoJ3NpZ251cDp1c2VyRXhpc3RzRXJyb3JUZXh0JykpO1xuICAgIH1cblxuICAgIHJldHVybiAnZnVuY3Rpb24nID09PSB0eXBlb2YgY2FsbGJhY2sgPyBjYWxsYmFjay5hcHBseSh3aWRnZXQsIGFyZ3MpIDogbnVsbDtcbiAgfSk7XG5cbn07XG5cbi8qKlxuICogVmFsaWRhdGUgZm9ybSBmb3IgZXJycm9zIGJlZm9yZSBgc3VibWl0YFxuICpcbiAqIEBwcml2YXRlXG4gKi9cblxuU2lnbnVwUGFuZWwucHJvdG90eXBlLnZhbGlkID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE86IExvdCBvZiBkdXBsaWNhdGVkIHZhbGlkYXRpb24gbG9naWMgd2l0aCBgbW9kZS1zaWduaW5gIGFuZCBgbW9kZS1yZXNldGAuXG4gIC8vIFdpbGwgYmUgYmV0dGVyIHRvIGNyZWF0ZSBhIG5ldyBvYmplY3QgdGhhdCBoYW5kbGUgaW5wdXQgdmFsaWRhdGlvbnMuXG4gIHZhciBvayA9IHRydWU7XG4gIHZhciBlbWFpbF9pbnB1dCA9IHRoaXMucXVlcnkoJ2lucHV0W25hbWU9ZW1haWxdJyk7XG4gIHZhciBlbWFpbF9lbXB0eSA9IGVtcHR5LnRlc3QoZW1haWxfaW5wdXQudmFsKCkpO1xuICB2YXIgZW1haWxfcGFyc2VkID0gZW1haWxfcGFyc2VyLmV4ZWMoZW1haWxfaW5wdXQudmFsKCkudG9Mb3dlckNhc2UoKSk7XG4gIHZhciBwYXNzd29yZF9pbnB1dCA9IHRoaXMucXVlcnkoJ2lucHV0W25hbWU9cGFzc3dvcmRdJyk7XG4gIHZhciBwYXNzd29yZF9lbXB0eSA9IGVtcHR5LnRlc3QocGFzc3dvcmRfaW5wdXQudmFsKCkpO1xuICB2YXIgd2lkZ2V0ID0gdGhpcy53aWRnZXQ7XG5cbiAgLy8gYXN1bWUgdmFsaWQgYnkgZGVmYXVsdFxuICAvLyBhbmQgcmVzZXQgZXJyb3JzXG4gIHdpZGdldC5fc2hvd0Vycm9yKCk7XG4gIHdpZGdldC5fZm9jdXNFcnJvcigpO1xuXG4gIGlmIChlbWFpbF9lbXB0eSkge1xuICAgIHdpZGdldC5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCk7XG4gICAgb2sgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICghZW1haWxfcGFyc2VkICYmICFlbWFpbF9lbXB0eSkge1xuICAgIHdpZGdldC5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCwgd2lkZ2V0Lm9wdGlvbnMuaTE4bi50KCdpbnZhbGlkJykpO1xuICAgIG9rID0gZmFsc2U7XG4gIH1cblxuICBpZih0aGlzLm9wdGlvbnMuX2lzVXNlcm5hbWVSZXF1aXJlZCgpKSB7XG4gICAgdmFyIHVzZXJuYW1lX2lucHV0ID0gdGhpcy5xdWVyeSgnaW5wdXRbbmFtZT11c2VybmFtZV0nKTtcbiAgICB2YXIgdXNlcm5hbWVfZW1wdHkgPSBlbXB0eS50ZXN0KHVzZXJuYW1lX2lucHV0LnZhbCgpKTtcbiAgICB2YXIgdXNlcm5hbWVfcGFyc2VkID0gdXNlcm5hbWVfcGFyc2VyLmV4ZWModXNlcm5hbWVfaW5wdXQudmFsKCkudG9Mb3dlckNhc2UoKSk7XG5cbiAgICBpZiAodXNlcm5hbWVfZW1wdHkpIHtcbiAgICAgIHdpZGdldC5fZm9jdXNFcnJvcih1c2VybmFtZV9pbnB1dCk7XG4gICAgICBvayA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXVzZXJuYW1lX3BhcnNlZCAmJiAhdXNlcm5hbWVfZW1wdHkpIHtcbiAgICAgIHdpZGdldC5fZm9jdXNFcnJvcih1c2VybmFtZV9pbnB1dCwgd2lkZ2V0Lm9wdGlvbnMuaTE4bi50KCdpbnZhbGlkJykpO1xuICAgICAgb2sgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFzc3dvcmRfZW1wdHkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IocGFzc3dvcmRfaW5wdXQpO1xuICAgIG9rID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gb2s7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlLCByZXRocm93KSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyEjP1thLXpBLVowLTldKzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cImEwLXNpZ251cCBhMC1tb2RlXCI+XFxuICAgIDxmb3JtIG5vdmFsaWRhdGU+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaGVhZGVyXCI+JywgZXNjYXBlKCgzLCAgaTE4bi50KCdzaWdudXA6ZGVzY3JpcHRpb24nKSApKSwgJzwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWNvbGxhcHNlLXNvY2lhbC1zaWdudXBcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWljb25saXN0XCI+PHAgY2xhc3M9XCJhMC1oaWRlXCI+JywgZXNjYXBlKCg1LCAgaTE4bi50KCdzaWduaW46b3InKSApKSwgJzwvcD48L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNlcGFyYXRvclwiPjxzcGFuPicsIGVzY2FwZSgoNiwgIGkxOG4udCgnc2lnbmluOnNlcGFyYXRvclRleHQnKSApKSwgJzwvc3Bhbj48L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWluc3RydWN0aW9uc1wiPicsIGVzY2FwZSgoOCwgIGkxOG4udCgnc2lnbnVwOmhlYWRlclRleHQnKSApKSwgJzwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsUGFzc3dvcmRcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXRzLXdyYXBwZXJcIj4gICAgICBcXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dHNcIj5cXG4gICAgICAgICAgICAgICAgJyk7MTI7IGlmKF9pc1VzZXJuYW1lUmVxdWlyZWQoKSkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtdXNlcm5hbWVcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImEwLXNpZ251cF9lYXN5X3VzZXJuYW1lXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAnLCBlc2NhcGUoKDE1LCAgaTE4bi50KCdzaWdudXA6dXNlcm5hbWVQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvbi0xXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwidXNlcm5hbWVcIiBpZD1cImEwLXNpZ251cF9lYXN5X3VzZXJuYW1lXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCInLCBlc2NhcGUoKDIxLCAgaTE4bi50KCdzaWdudXA6dXNlcm5hbWVQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKCgyMiwgIGkxOG4udCgnc2lnbnVwOnVzZXJuYW1lUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgJyk7MjU7IH07IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtc2lnbnVwX2Vhc3lfZW1haWxcIiBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAnLCBlc2NhcGUoKDI4LCAgaTE4bi50KCdzaWdudXA6ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvbi01XCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cImVtYWlsXCIgaWQ9XCJhMC1zaWdudXBfZWFzeV9lbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCIgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKCgzNCwgIGkxOG4udCgnc2lnbnVwOmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKDM1LCAgaTE4bi50KCdzaWdudXA6ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXCI+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1wYXNzd29yZFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImEwLXNpZ251cF9lYXN5X3Bhc3N3b3JkXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgJywgZXNjYXBlKCg0MCwgIGkxOG4udCgnc2lnbnVwOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb25cIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwicGFzc3dvcmRcIiBpZD1cImEwLXNpZ251cF9lYXN5X3Bhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKCg0NywgIGkxOG4udCgnc2lnbnVwOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoNDgsICBpMThuLnQoJ3NpZ251cDpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXBhc3N3b3JkX3BvbGljeVwiPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PiAgXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWFjdGlvblwiPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImEwLXByaW1hcnkgYTAtbmV4dFwiPicsIGVzY2FwZSgoNTcsICBpMThuLnQoJ3NpZ251cDphY3Rpb24nKSApKSwgJzwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtb3B0aW9uc1wiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6IHt9XCIgY2xhc3M9XCJhMC1jZW50ZXJlZCBhMC1idG4tc21hbGwgYTAtY2FuY2VsXCI+JywgZXNjYXBlKCg1OSwgIGkxOG4udCgnc2lnbnVwOmNhbmNlbEFjdGlvbicpICkpLCAnPC9hPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAnKTs2MjsgaWYgKGkxOG4udCgnc2lnbnVwOmZvb3RlclRleHQnKSAmJiBpMThuLnQoJ3NpZ251cDpmb290ZXJUZXh0JykubGVuZ3RoKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1zaWdudXAtZm9vdGVyXCI+XFxuICAgICAgICAgICAgICA8c21hbGw+XFxuICAgICAgICAgICAgICAgICcsICg2NSwgIGkxOG4udCgnc2lnbnVwOmZvb3RlclRleHQnKSApLCAnXFxuICAgICAgICAgICAgICA8L3NtYWxsPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICcpOzY4OyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZm9ybT5cXG48L2Rpdj5cXG4nKTsgfSkoKTtcbn0gXG5yZXR1cm4gYnVmLmpvaW4oJycpO1xufSkiLCIvL2llOSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvY3JlYXRlI1BvbHlmaWxsXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uKCl7XG4gIGZ1bmN0aW9uIEYoKXt9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG8pe1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLicpO1xuICAgIH1cbiAgICBGLnByb3RvdHlwZSA9IG87XG4gICAgcmV0dXJuIG5ldyBGKCk7XG4gIH07XG59KSgpOyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIHNtYWxsX3NjcmVlbiA9IHJlcXVpcmUoJy4uL2lzLXNtYWxsLXNjcmVlbicpO1xudmFyIG9jcmVhdGUgPSByZXF1aXJlKCcuLi9vYmplY3QtY3JlYXRlJyk7XG5cbnZhciByZWdleCA9IHJlcXVpcmUoJy4uL3JlZ2V4Jyk7XG52YXIgaTE4biA9IHJlcXVpcmUoJy4uL2kxOG4nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vYmluZCcpO1xudmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgb2tleXMgPSBfLmtleXM7XG5cbi8qKlxuICogRXhwb3NlIGBPcHRpb25zTWFuYWdlcmBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wdGlvbnNNYW5hZ2VyO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBgT3B0aW9uc01hbmFnZXJgIGZyb21cbiAqIGluc3RhbmNlT3B0aW9ucyBhbmQgZGlzcGxheU9wdGlvbnNcbiAqXG4gKiBAcGFyYW0ge0F1dGgwTG9ja30gd2lkZ2V0XG4gKiBAcGFyYW0ge09iamVjdH0gZGlzcGxheU9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cbmZ1bmN0aW9uIE9wdGlvbnNNYW5hZ2VyKHdpZGdldCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT3B0aW9uc01hbmFnZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBPcHRpb25zTWFuYWdlcih3aWRnZXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLy8gSW5pdGlhdGUgYEV2ZW50RW1pdHRlcmBcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgLy8gRmxhZyBPcHRpb25zTWFuYWdlciBhcyBgdW5sb2FkZWRgXG4gIHRoaXMuc3RhdGUoJ2xvYWRpbmcnKTtcblxuICAvLyBob2xkcyB3aWRnZXQgYXMgcmVmZXJlbmNlXG4gIHRoaXMuJHdpZGdldCA9IHdpZGdldDtcblxuICAvLyBzYXZlIHdpZGdldCdzICRjbGllbnQgb2JqZWN0IHJlZmVyZW5jZVxuICB0aGlzLiRjbGllbnQgPSB3aWRnZXQuJGNsaWVudDtcblxuICAvLyBzYXZlIGNvcHkgb2Ygd2lkZ2V0J3MgdmFsaWQgc3RyYXRlZ2llc1xuICB0aGlzLiRzdHJhdGVnaWVzID0gd2lkZ2V0LiRzdHJhdGVnaWVzO1xuXG4gIC8vIHNhdmUgd2lkZ2V0J3MgYGF1dGgwLWpzYCBpbnN0YW5jZSBvYmplY3RcbiAgdGhpcy4kYXV0aDAgPSB3aWRnZXQuJGF1dGgwO1xuXG4gIC8vIHNhdmUgd2lkZ2V0IGluc3RhbmNlIG9wdGlvbnMgd2l0aCBgJGAgcHJlcGVuZGVkXG4gIF8uZWFjaChva2V5cyh3aWRnZXQuJG9wdGlvbnMpLCBmdW5jdGlvbihrZXkpIHtcbiAgICB0aGlzWyckJyArIGtleV0gPSB3aWRnZXQuJG9wdGlvbnNba2V5XTtcbiAgfSwgdGhpcyk7XG5cbiAgLy8gY29waWVzIGFsbCBwcm92aWRlZCBvcHRpb25zIHRvIGluc3RhbmNlXG4gIC8vIGZpbHRlcmluZyBieSBhbGxvd2VkIG9wdGlvbnMgYHdoaXRlbGlzdGBcbiAgXy5lYWNoKG9rZXlzKG9wdGlvbnMpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAvLyB3ZSBzaG91bGQgd2hpdGVsaXN0IG9wdGlvbnNcbiAgICAvLyBzbyBubyBPcHRpb25zTWFuYWdlciBtZXRob2QgZ2V0cyBvdmVycmlkZW5cbiAgICAvLyBieSB1c2VyIGNvbmZpZ3VyYWJsZSBvYmplY3RcbiAgICAvLyBYWFg6IEJyb2tlbiwgZml4IGl0IVxuICAgIC8vIGlmICghfndoaXRlbGlzdC5pbmRleE9mKGtleSkgJiYgIX5zdXBwb3J0ZWRQYXJhbXMuaW5kZXhPZihrZXkpKSByZXR1cm47XG4gICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldO1xuICB9LCB0aGlzKTtcblxuICAvLyBTZXQgYGkxOG5gIGRpY3Rpb25hcnkgZm9yIHRlbXBsYXRlc1xuICB0aGlzLmkxOG4gPSBpMThuLmdldERpY3QodGhpcy5kaWN0KTtcblxuICAvLyBkZWZhdWx0IGF1dGhQYXJhbXMgdG8gZW1wdHkgb2JqZWN0XG4gIHRoaXMuYXV0aFBhcmFtcyA9IF8uZXh0ZW5kKHt9LCBvcHRpb25zLmF1dGhQYXJhbXMpO1xuXG4gIC8vIGVuYWJsZS9kaXNhYmxlIGxhc3QgbG9naW4gYW5kIEFEIGRpc2NvdmVyeVxuICB0aGlzLnJlbWVtYmVyTGFzdExvZ2luID0gbnVsbCAhPSBvcHRpb25zLnJlbWVtYmVyTGFzdExvZ2luID8gISFvcHRpb25zLnJlbWVtYmVyTGFzdExvZ2luIDogdHJ1ZTtcbiAgdGhpcy5pbnRlZ3JhdGVkV2luZG93c0xvZ2luID0gbnVsbCAhPSBvcHRpb25zLmludGVncmF0ZWRXaW5kb3dzTG9naW4gPyAhIW9wdGlvbnMuaW50ZWdyYXRlZFdpbmRvd3NMb2dpbiA6IHRydWU7XG5cbiAgLy8gZGVmYXVsdCB0aGVtZSBpcyBgZGVmYXVsdGBcbiAgdGhpcy50aGVtZSA9IG51bGwgIT0gb3B0aW9ucy50aGVtZSA/IG9wdGlvbnMudGhlbWUgOiAnZGVmYXVsdCc7XG5cbiAgLy8gZW5hYmxlL2Rpc2FibGUgZ3JhdmF0YXIgaW1hZ2UgZmV0Y2hcbiAgdGhpcy5ncmF2YXRhciA9IG51bGwgIT0gb3B0aW9ucy5ncmF2YXRhciA/ICEhb3B0aW9ucy5ncmF2YXRhciA6IHRydWU7XG5cbiAgLy8gSWYgcG9wdXBDYWxsYmFjaywgZW5hYmxlIHBvcHVwIG1vZGVcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zLnBvcHVwQ2FsbGJhY2spIHtcbiAgICB0aGlzLnBvcHVwID0gdHJ1ZTtcbiAgICAvLyBYWFg6IHRoZSBmb2xsb3dpbmcgdG8gc2hvdWxkIGFscmVhZHkgY29tZSB3aXRoXG4gICAgLy8gdGhlIG9wdGlvbnMgZnJvbSBjb25zdHJ1Y3Rvci4uLiByaWdodD9cbiAgICB0aGlzLnBvcHVwT3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCBvcHRpb25zLnBvcHVwT3B0aW9ucyk7XG4gICAgdGhpcy5wb3B1cENhbGxiYWNrID0gb3B0aW9ucy5wb3B1cENhbGxiYWNrO1xuICB9XG5cbiAgLy8gc2F2ZSBkZWZhdWx0IHJlc3BvbnNlVHlwZVxuICBpZiAob3B0aW9ucy5yZXNwb25zZVR5cGUpIHtcbiAgICB0aGlzLnJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVzcG9uc2VUeXBlID0gKHRoaXMucG9wdXAgfHwgIW9wdGlvbnMuY2FsbGJhY2tVUkwpID8gJ3Rva2VuJyA6ICdjb2RlJztcbiAgfVxuXG4gIC8vIE9wdGlvbnMgbW92ZWQgZnJvbSBjb25zdHJ1Y3RvciBhbmQgaGFja2VkIGludG8gYGF1dGgwLWpzYCBpbnN0YW5jZVxuICB0aGlzLiRhdXRoMC5fdXNlSlNPTlAgPSBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy4kYXV0aDAuX3VzZUpTT05QO1xuICB0aGlzLiRhdXRoMC5fY2FsbGJhY2tVUkwgPSBvcHRpb25zLmNhbGxiYWNrVVJMIHx8IHRoaXMuJGF1dGgwLl9jYWxsYmFja1VSTDtcbiAgdGhpcy4kYXV0aDAuX2NhbGxiYWNrT25Mb2NhdGlvbkhhc2ggPSAndG9rZW4nID09PSB0aGlzLnJlc3BvbnNlVHlwZSB8fCAhIXRoaXMuJGF1dGgwLl9jYWxsYmFja09uTG9jYXRpb25IYXNoO1xuXG4gIC8vIGZvcmNlIGBjbG9zYWJsZWAgd2hlbiBwcm92aWRlZCB3aXRoIGBjb250YWluZXJgXG4gIHRoaXMuY2xvc2FibGUgPSBudWxsICE9IG9wdGlvbnMuY2xvc2FibGUgPyAhIW9wdGlvbnMuY2xvc2FibGUgOiAhdGhpcy5jb250YWluZXI7XG5cbiAgLy8gZm9yY2UgYGxvZ2luQWZ0ZXJTaWdudXBgIHRvIHRydWUgdW5sZXMgcHJvdmlkZWRcbiAgdGhpcy5sb2dpbkFmdGVyU2lnbnVwID0gbnVsbCAhPSBvcHRpb25zLmxvZ2luQWZ0ZXJTaWdudXAgPyAhIW9wdGlvbnMubG9naW5BZnRlclNpZ251cCA6IHRydWU7XG5cbiAgLy8gZm9yY2UgYGRlZmF1bHRBRFVzZXJuYW1lRnJvbUVtYWlsUHJlZml4YCB0byB0cnVlIGlmIG5vdCBwcm92aWRlZFxuICAvLyBUaGlzIHZhcmlhYmxlIGlzIHVzZWRcbiAgdGhpcy5kZWZhdWx0QURVc2VybmFtZUZyb21FbWFpbFByZWZpeCA9IG51bGwgIT0gb3B0aW9ucy5kZWZhdWx0QURVc2VybmFtZUZyb21FbWFpbFByZWZpeCA/ICEhb3B0aW9ucy5kZWZhdWx0QURVc2VybmFtZUZyb21FbWFpbFByZWZpeCA6IHRydWU7XG5cbiAgLy8gU1NPIGJ5IGRlZmF1bHQuIFVzZXImUGFzc3dvcmQgY2FuIGJlIGF1dGhlbnRpY2F0ZWQgd2l0aCBhbiBhamF4IGNhbGxcbiAgLy8gSG93ZXZlciwgc2luY2UgdGhpcyBjYWxsIGlzIENPUlMgb3IgSlNPTlAgaXQgd2lsbCBub3Qgc2V0IHRoZSBjb29raWUsXG4gIC8vIGhlbmNlIFNTTyB3aWxsIG5vdCB3b3JrLlxuICAvLyBUbyBlbmFibGUgQWpheC9qc29ucC9jb3JzIHVzZSBzc286IGZhbHNlLlxuICB0aGlzLnNzbyA9IG51bGwgIT0gdGhpcy5zc28gPyAhIXRoaXMuc3NvIDogdHJ1ZTtcblxuICAvLyBEZWxheSBvcHRpb25zIHJlcXVpcmluZyAkY2xpZW50IGNvbmZpZ3VyYXRpb25cbiAgdGhpcy4kd2lkZ2V0LmdldENsaWVudENvbmZpZ3VyYXRpb24oYmluZCh0aGlzLl9vbmNsaWVudGxvYWRlZCwgdGhpcykpO1xufVxuXG4vKipcbiAqIEluaGVyaXQgZnJvbSBgRXZlbnRFbWl0dGVyYFxuICovXG5cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZSA9IG9jcmVhdGUoRXZlbnRFbWl0dGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogR2V0IG9yIFNldCBgJF9zdGF0ZWAgZm9yIHRyYWNrXG4gKiBgT3B0aW9uc01hbmFnZXJgcyByZWFkeSBzdGF0ZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAqIEByZXR1cm4ge09wdGlvbnNNYW5hZ2VyfVxuICogQHB1YmxpY1xuICovXG5cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5zdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlLCBtZXNzYWdlKSB7XG4gIGlmICgwID09PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMuJF9zdGF0ZTtcbiAgfVxuXG4gIC8vIGRlYnVnKCdzdGF0ZSBpcyBub3cgJXMnLCBzdGF0ZSk7XG4gIHRoaXMuJF9zdGF0ZSA9IHN0YXRlO1xuICB0aGlzLmVtaXQoc3RhdGUsIG1lc3NhZ2UpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgYGZuYCBmb3Igd2hlbiBgT3B0aW9uc01hbmFnZXJgXG4gKiBpcyByZWFkeSAob3IgYGxvYWRlZGApXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge09wdGlvbnNNYW5hZ2VyfVxuICogQHB1YmxpY1xuICovXG5cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5yZWFkeSA9IGZ1bmN0aW9uKGZuKSB7XG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgaWYgKCdsb2FkZWQnID09PSB0aGlzLnN0YXRlKCkpIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgfVxuXG4gIGlmICgnbG9hZGVkJyA9PT0gdGhpcy5zdGF0ZSgpKSB7XG4gICAgc2V0VGltZW91dChiaW5kKGRvbmUsIHRoaXMpLCAwKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9uY2UoJ2xvYWRlZCcsIGJpbmQoZG9uZSwgdGhpcykpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENvbnRpbnVlIHNldHVwIG9uY2UgY2xpZW50J3MgY29uZmlndXJhdGlvblxuICogaXMgcmV0cmlldmVkIGZyb20gYXNzZXRzIHVybCBvciBTM1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnRcbiAqIEByZXR1cm4ge09wdGlvbnNNYW5hZ2VyfVxuICogQHByaXZhdGVcbiAqL1xuXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX29uY2xpZW50bG9hZGVkID0gZnVuY3Rpb24oY2xpZW50KSB7XG5cbiAgLy8gUmVmcmVzaCBjbGllbnRzIGNvbmZpZ3VyYXRpb24gd2l0aCB3aGF0J3Mgc3RvcmVkXG4gIC8vIG9uIHRoZSBBdXRoMCdzIGhhc2hcbiAgdGhpcy4kY2xpZW50ID0gXy5leHRlbmQodGhpcy4kY2xpZW50LCBjbGllbnQpO1xuXG4gIC8vIEVucmljaCAkY2xpZW50LnN0cmF0ZWdpZXNcbiAgLy8gdGhlbiwgY29udGludWUgc2V0dGluZyB1cCB0aGUgbW9kZVxuICBpZiAodGhpcy5jb25uZWN0aW9ucykge1xuICAgIHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzID0gXy5jaGFpbih0aGlzLiRjbGllbnQuc3RyYXRlZ2llcylcbiAgICAgIC5tYXAoc3RyYXRlZ2llc0Nvbm5lY3Rpb25zTWFwcGVyKHRoaXMuY29ubmVjdGlvbnMpKVxuICAgICAgLmZpbHRlcihoYXNDb25uZWN0aW9uc0ZpbHRlcilcbiAgICAgIC52YWx1ZSgpO1xuICB9XG5cbiAgLy8gbWVyZ2Ugc3RyYXRlZ2llcyBpbmZvXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy4kY2xpZW50LnN0cmF0ZWdpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc25hbWUgPSB0aGlzLiRjbGllbnQuc3RyYXRlZ2llc1tpXS5uYW1lO1xuICAgIHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzW2ldID0gXy5leHRlbmQoe30sIHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzW2ldLCB0aGlzLiRzdHJhdGVnaWVzW3NuYW1lXSk7XG4gIH1cblxuICAvLyBIb2xkcyBhdXRoMCBzdHJhdGVnaWVzIG9ubHlcbiAgdGhpcy5hdXRoMFN0cmF0ZWdpZXMgPSBfLmNoYWluKHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzKVxuICAgIC5maWx0ZXIoYXV0aDBTdHJhdGVnaWVzRmlsdGVyKVxuICAgIC52YWx1ZSgpO1xuXG4gIC8vIHNob3cgc2lnbnVwL2ZvcmdvdCBsaW5rc1xuICB2YXIgYXV0aDBDb25uID0gdGhpcy5fZ2V0QXV0aDBDb25uZWN0aW9uKCkgfHwge307XG5cbiAgLy8gaWYgYm9vdGVkIG9uIGBzaWdudXBgIG9yIGByZXNldGAsIGJ1dCBub3QgY29uZmlndXJlZFxuICAvLyBvbiBjb25uZWN0aW9uID0+IG92ZXJyaWRlIG1vZGUgd2l0aCBgc2lnbmluYFxuICBpZiAodGhpcy5tb2RlID09PSAnc2lnbnVwJyAmJiAhYXV0aDBDb25uLnNob3dTaWdudXApIHsgdGhpcy5tb2RlID0gJ3NpZ25pbic7IH1cbiAgaWYgKHRoaXMubW9kZSA9PT0gJ3Jlc2V0JyAmJiAhYXV0aDBDb25uLnNob3dGb3Jnb3QpIHsgdGhpcy5tb2RlID0gJ3NpZ25pbic7IH1cblxuICAvLyBSZXNvbHZlIHNob3cgYWN0aW9uIGJ1dHRvbnMgb3Igbm90XG4gIHRoaXMuc2hvd1NpZ251cEFjdGlvbiA9ICh0aGlzLmRpc2FibGVTaWdudXBBY3Rpb24gIT09IHRydWUpICYmICgoYXV0aDBDb25uICYmIGF1dGgwQ29ubi5zaG93U2lnbnVwKSB8fCB0aGlzLnNpZ251cExpbmspO1xuICB0aGlzLnNob3dSZXNldEFjdGlvbiA9ICh0aGlzLmRpc2FibGVSZXNldEFjdGlvbiAhPT0gdHJ1ZSkgJiYgKChhdXRoMENvbm4gJiYgYXV0aDBDb25uLnNob3dGb3Jnb3QpIHx8IHRoaXMucmVzZXRMaW5rKTtcblxuICAgIC8vIG92ZXJyaWRlIHVzZXJuYW1lU3R5bGUgaWYgcmVxdWlyZWQgYnkgY29ubmVjdGlvblxuICAgIHZhciBhdXRoMENvbm5TdHJhdGVneSA9IHRoaXMuX2dldENsaWVudFN0cmF0ZWd5QnlDb25uZWN0aW9uTmFtZShhdXRoMENvbm4ubmFtZSkgfHwge307XG4gICAgaWYgKCF0aGlzLnVzZXJuYW1lU3R5bGUgJiYgKGF1dGgwQ29ublN0cmF0ZWd5Lm5hbWUgPT09ICdhZCcgfHwgYXV0aDBDb25uU3RyYXRlZ3kubmFtZSA9PT0gJ2F1dGgwLWFkbGRhcCcpKSB7XG4gICAgICB0aGlzLnVzZXJuYW1lU3R5bGUgPSAndXNlcm5hbWUnO1xuICAgIH1cblxuICAvLyBFbnN1cmUgdXNlcm5hbWVTdHlsZVxuICB0aGlzLnVzZXJuYW1lU3R5bGUgPSBudWxsICE9IHRoaXMudXNlcm5hbWVTdHlsZSA/IHRoaXMudXNlcm5hbWVTdHlsZSA6ICdlbWFpbCc7XG5cbiAgdGhpcy5zdGF0ZSgnbG9hZGVkJyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgd2hldGhlciBhcmUgdGhlcmUgb3Igbm90IGFueVxuICogc29jaWFsIGNvbm5lY3Rpb25zIHdpdGhpbiBjbGllbnRcbiAqIHN0cmF0ZWdpZXNcbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX2lzVGhlcmVBbnlTb2NpYWxDb25uZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2xpZW50ID0gdGhpcy4kY2xpZW50O1xuICB2YXIgZmlsdGVyID0geyBzb2NpYWw6IHRydWUgfTtcbiAgcmV0dXJuICEhXy5maW5kV2hlcmUoY2xpZW50LnN0cmF0ZWdpZXMsIGZpbHRlcik7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgd2hldGhlciBhcmUgdGhlcmUgb3Igbm90IGFueVxuICogZW50ZXJwcmlzZSBvciBEYXRhYnNlIGNvbm5lY3Rpb24gd2l0aGluXG4gKiBjbGllbnQgc3RyYXRlZ2llc1xuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5faXNUaGVyZUFueUVudGVycHJpc2VPckRiQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2xpZW50ID0gdGhpcy4kY2xpZW50O1xuICB2YXIgZmlsdGVyID0geyBzb2NpYWw6IGZhbHNlIH07XG4gIHJldHVybiAhIV8uZmluZFdoZXJlKGNsaWVudC5zdHJhdGVnaWVzLCBmaWx0ZXIpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIHdoZXRoZXIgYXJlIHRoZXJlIG9yIG5vdCBhbnlcbiAqIGRhdGFiYXNlIGNvbm5lY3Rpb24gd2l0aGluIGNsaWVudCBzdHJhdGVnaWVzXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl9pc1RoZXJlQW55REJDb25uZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjbGllbnQgPSB0aGlzLiRjbGllbnQ7XG4gIHZhciBmaWx0ZXIgPSB7IHVzZXJBbmRQYXNzOiB0cnVlIH07XG4gIHJldHVybiAhIV8uZmluZFdoZXJlKGNsaWVudC5zdHJhdGVnaWVzLCBmaWx0ZXIpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIHdoZXRoZXIgYXJlIHRoZXJlIG9yIG5vdCBhbnlcbiAqIEFjdGl2ZSBEaXJlY3RvcnkgY29ubmVjdGlvbiB3aXRoaW4gY2xpZW50XG4gKiBzdHJhdGVnaWVzXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl9pc1RoZXJlQW55QURDb25uZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBfLnNvbWUodGhpcy4kY2xpZW50LnN0cmF0ZWdpZXMsIGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIChzLm5hbWUgPT09ICdhZCcgfHwgcy5uYW1lID09PSAnYXV0aDAtYWRsZGFwJykgJiYgcy5jb25uZWN0aW9ucy5sZW5ndGggPiAwO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYW4gZW1haWwgZXh0cmFjdHMgaXQgZG9tYWluIHBhcnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGVtYWlsXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSBkb21haW4gb2YgdGhlIGVtYWlsXG4gKi9cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5fZXh0cmFjdEVtYWlsRG9tYWluID0gZnVuY3Rpb24gKGVtYWlsKSB7XG4gIHZhciBwYXJzZXIgPSByZWdleC5lbWFpbF9wYXJzZXI7XG4gIHZhciBlbWFpbE0gPSBwYXJzZXIuZXhlYyhlbWFpbC50b0xvd2VyQ2FzZSgpKTtcbiAgcmV0dXJuIGVtYWlsTSA/IGVtYWlsTS5zbGljZSgtMilbMF0gOiBudWxsO1xufTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gZmlsdGVyIEFEIGNvbm5lY3Rpb25zIGJ5IGRvbWFpbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX2ZpbmRDb25uZWN0aW9uQnlBRERvbWFpbiA9IGZ1bmN0aW9uIChkb21haW4sIHN0cmF0ZWdpZXMpIHtcbiAgcmV0dXJuIHRoaXMuX2ZpbHRlckNvbm5lY3Rpb25zKGRvbWFpbiwgc3RyYXRlZ2llcywge3VzZXJBbmRQYXNzOiB0cnVlfSk7XG59O1xuXG4vKipcbiAqIEhlbHBlciB0byBmaWx0ZXIgZW50ZXJwcmlzZSBjb25uZWN0aW9ucyBieSBkb21haW4uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl9maW5kQ29ubmVjdGlvbkJ5RG9tYWluID0gZnVuY3Rpb24gKGRvbWFpbiwgc3RyYXRlZ2llcykge1xuICByZXR1cm4gdGhpcy5fZmlsdGVyQ29ubmVjdGlvbnMoZG9tYWluLCBzdHJhdGVnaWVzLCB7dXNlckFuZFBhc3M6IHVuZGVmaW5lZH0pO1xufTtcblxuLyoqXG4gKiBHZXQgZnJvbSB0aGUgc3RyYXRlZ2llcyBsaXN0IChmaWx0ZXJlZCBieSBjcml0ZXJpYSkgY29ubmVjdGlvbnMgYW5kXG4gKiBmaWx0ZXIgdGhvc2UgY29ubmVjdGlvbnMgYnkgYSBnaXZlbiBkb21haW4uXG4gKlxuICogQHBhcmFtICAge1N0cmluZ30gIGRvbWFpbiAgICAgIERvbWFpbiB0byBiZSBmb3VuZC5cbiAqIEBwYXJhbSAgIHtBcnJheX0gICBzdHJhdGVnaWVzICBBcnJheSB3aXRoIGFsbCB0aGUgZXhpc3Rpbmcgc3RyYXRlZ2llc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGlzIGNsaWVudC5cbiAqIEBwYXJhbSAgIHtPYmplY3R9ICBjcml0ZXJpYSAgICBDcml0ZXJpYSB0byBmaWx0ZXIgc3RyYXRlZ2llcy5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgY29ubmVjdGlvbiBtYXRjaGluZyB0aGUgZG9tYWluIG9yIHVuZGVmaW5lZCBvdGhlcndpc2UuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl9maWx0ZXJDb25uZWN0aW9ucyA9IGZ1bmN0aW9uIChkb21haW4sIHN0cmF0ZWdpZXMsIGNyaXRlcmlhKSB7XG4gIHN0cmF0ZWdpZXMgPSBzdHJhdGVnaWVzIHx8IHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzO1xuICB2YXIgY29ubl9vYmogPSBfLmNoYWluKHN0cmF0ZWdpZXMpXG4gICAgLndoZXJlKGNyaXRlcmlhKVxuICAgIC5wbHVjaygnY29ubmVjdGlvbnMnKVxuICAgIC5mbGF0dGVuKClcbiAgICAubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgbCA9IFtdO1xuICAgICAgaWYgKGUuZG9tYWluKSB7XG4gICAgICAgIGwucHVzaChlLmRvbWFpbik7XG4gICAgICB9XG4gICAgICBsID0gbC5jb25jYXQoZS5kb21haW5fYWxpYXNlcyB8fCBbXSk7XG4gICAgICBlLmRvbWFpbnMgPSBsO1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSlcbiAgICAuZmluZChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5kb21haW5zLmluZGV4T2YoZG9tYWluKSAhPT0gLTE7IH0pXG4gICAgLnZhbHVlKCk7XG5cbiAgcmV0dXJuIGNvbm5fb2JqO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyB3ZXRoZXIgYGVtYWlsYCdzIGRvbWFpbiBiZWxvbmdzIHRvXG4gKiBhbiBlbnRlcnByaXNlIGNvbm5lY3Rpb24gb3Igbm90LCBhbmQgYWx0ZXJzXG4gKiBgb3V0cHV0YCBvYmplY3QgaW4gdGhlIHdheS4uLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbWFpbFxuICogQHBhcmFtIHtPYmplY3R9IG91dHB1dFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cblxuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl9pc0VudGVycHJpc2VDb25uZWN0aW9uID0gZnVuY3Rpb24gKGVtYWlsLCBvdXRwdXQpIHtcbiAgdmFyIGNsaWVudCA9IHRoaXMuJGNsaWVudDtcbiAgdmFyIGRvbWFpbiA9IHRoaXMuX2V4dHJhY3RFbWFpbERvbWFpbihlbWFpbCk7XG5cbiAgdmFyIGNvbm4gPSB0aGlzLl9maWx0ZXJDb25uZWN0aW9ucyhkb21haW4sIGNsaWVudC5zdHJhdGVnaWVzLCB7dXNlckFuZFBhc3M6IHVuZGVmaW5lZH0pO1xuXG4gIGlmIChjb25uICYmIG91dHB1dCkge1xuICAgIG91dHB1dC5kb21haW4gPSBjb25uLmRvbWFpbjtcbiAgfVxuXG4gIHJldHVybiAhIWNvbm47XG59O1xuXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX2lzRnJlZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy4kY2xpZW50LnN1YnNjcmlwdGlvbiAmJiAhflsnZnJlZScsICdkZXYnXS5pbmRleE9mKHRoaXMuJGNsaWVudC5zdWJzY3JpcHRpb24pO1xufTtcblxuLyoqXG4gKiBHZXQgcmVzb2x2ZWQgQXV0aDAgY29ubmVjdGlvbiB0byBzaWduaW4gYnkgYHVzZXJOYW1lYFxuICogWFhYOiBObyBpZGVhIHdoYXQgbG9naWMgdGhpcyBmb2xsb3dzLi4uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVzZXJOYW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0QXV0aDBDb25uZWN0aW9uID0gZnVuY3Rpb24odXNlcm5hbWUpIHtcblxuICAvLyBpZiBzcGVjaWZpZWQsIHVzZSBpdCwgb3RoZXJ3aXNlIHJldHVybiBmaXJzdFxuICBpZiAobnVsbCAhPSB0aGlzLmRlZmF1bHRVc2VyUGFzc3dvcmRDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuIF8uY2hhaW4odGhpcy5hdXRoMFN0cmF0ZWdpZXMpXG4gICAgICAucGx1Y2soJ2Nvbm5lY3Rpb25zJylcbiAgICAgIC5mbGF0dGVuKClcbiAgICAgIC5maW5kV2hlcmUoeyBuYW1lOiB0aGlzLmRlZmF1bHRVc2VyUGFzc3dvcmRDb25uZWN0aW9uIH0pXG4gICAgICAudmFsdWUoKTtcbiAgfVxuXG4gIHZhciBkb21haW4gPSB1c2VybmFtZSAmJiB+dXNlcm5hbWUuaW5kZXhPZignQCcpID8gdXNlcm5hbWUuc3BsaXQoJ0AnKVsxXSA6ICcnO1xuXG4gIGlmICh1c2VybmFtZSAmJiBkb21haW4gJiYgdGhpcy4kY2xpZW50LnN0cmF0ZWdpZXMpIHtcbiAgICAvL3RoZXJlIGlzIHN0aWxsIGEgY2hhbmNlIHRoYXQgdGhlIGNvbm5lY3Rpb24gbWlnaHQgYmVcbiAgICAvL2FkbGRhcCBhbmQgd2l0aCBkb21haW5cbiAgICB2YXIgY29ubiA9IF8uY2hhaW4odGhpcy4kY2xpZW50LnN0cmF0ZWdpZXMpXG4gICAgICAgICAgICAgICAgLnBsdWNrKCdjb25uZWN0aW9ucycpXG4gICAgICAgICAgICAgICAgLmZsYXR0ZW4oKVxuICAgICAgICAgICAgICAgIC5maW5kV2hlcmUoe2RvbWFpbjogZG9tYWlufSlcbiAgICAgICAgICAgICAgICAudmFsdWUoKTtcbiAgICBpZiAoY29ubikge1xuICAgICAgcmV0dXJuIGNvbm47XG4gICAgfVxuICB9XG5cbiAgLy8gQnkgZGVmYXVsdCwgaWYgZXhpc3RzLCByZXR1cm4gYXV0aDAgY29ubmVjdGlvbiAoZGItY29ubikgb3IgZmlyc3RcbiAgdmFyIGRlZmF1bHRTdHJhdGVneSA9IF8uZmluZFdoZXJlKHRoaXMuYXV0aDBTdHJhdGVnaWVzLCB7IG5hbWU6ICdhdXRoMCcgfSk7XG4gIGRlZmF1bHRTdHJhdGVneSA9IGRlZmF1bHRTdHJhdGVneSB8fCAodGhpcy5hdXRoMFN0cmF0ZWdpZXMubGVuZ3RoID4gMCA/IHRoaXMuYXV0aDBTdHJhdGVnaWVzWzBdIDogbnVsbCk7XG5cbiAgcmV0dXJuIGRlZmF1bHRTdHJhdGVneSAmJiBkZWZhdWx0U3RyYXRlZ3kuY29ubmVjdGlvbnMubGVuZ3RoID4gMCA/IGRlZmF1bHRTdHJhdGVneS5jb25uZWN0aW9uc1swXSA6IG51bGw7XG59O1xuXG4vKipcbiAqIEdldCBMb2dnZWRpbiBhdXRoIHBhcmFtZXRlcnMgZnJvbSBgc3RyYXRlZ3lgIGFuZCBgc3NvRGF0YWBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyYXRlZ3lcbiAqIEBwYXJhbSB7T2JqZWN0fSBzc29EYXRhXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0TG9nZ2VkSW5BdXRoUGFyYW1zID0gZnVuY3Rpb24gKHN0cmF0ZWd5LCBzc29EYXRhKSB7XG4gIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICBjYXNlICdnb29nbGUtb2F1dGgyJzpcbiAgICAgIHJldHVybiB7IGxvZ2luX2hpbnQ6IHNzb0RhdGEubGFzdFVzZWRVc2VybmFtZSB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGNsaWVudCBzdHJhdGVneSBieSBjb25uZWN0aW9uIGBjb25uTmFtZWBcbiAqIFhYWDogQ2hlY2sgdGhhdCB0aGVyZSBtYXkgZXhpc3QgMiBjb25uZWN0aW9uIHdpdGggc2FtZSBuYW1lXG4gKiBidXQgYXQgZGlmZmVyZW50IHN0cmF0ZWdpZXMuLi4gaW4gdGhhdCBjYXNlIHRoaXMgaXMgd3JvbmcsXG4gKiBhbmQgaXQgc2hvdWxkIGFsc28gYWNjZXB0IGEgc3RyYXRlZ3kgbmFtZSBhcyBzZWNvbmQgcGFyYW1ldGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGNvbm5OYW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5cbk9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0Q2xpZW50U3RyYXRlZ3lCeUNvbm5lY3Rpb25OYW1lID0gZnVuY3Rpb24gKGNvbm5OYW1lKSB7XG4gIHJldHVybiBfLmNoYWluKHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBfLmZpbmRXaGVyZShzLmNvbm5lY3Rpb25zLCB7IG5hbWU6IGNvbm5OYW1lIH0pO1xuICAgIH0pLnZhbHVlKClbMF07XG59O1xuXG4vKipcbiAqIEdldCBjb25maWd1cmVkIGNsaWVudCBzdHJhdGVneSBieSBzdHJhdGVneSBgbmFtZWBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX2dldENsaWVudFN0cmF0ZWd5QnlOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF8uZmluZFdoZXJlKHRoaXMuJGNsaWVudC5zdHJhdGVnaWVzLCB7IG5hbWU6IG5hbWUgfSk7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgd2hldGhlciB1c2Ugb3IgZG9uJ3QgdXNlIGJpZyBzb2NpYWwgYnV0dG9uc1xuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHVibGljXG4gKi9cblxuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl91c2VCaWdTb2NpYWxCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBudWxsICE9IHRoaXMuc29jaWFsQmlnQnV0dG9ucyA/ICEhdGhpcy5zb2NpYWxCaWdCdXR0b25zIDogIXRoaXMuX2lzVGhlcmVBbnlFbnRlcnByaXNlT3JEYkNvbm5lY3Rpb24oKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgYCRjbGllbnRgIHN0cmF0ZWdpZXMgYnkgYHNvY2lhbDogdHJ1ZWBcbiAqXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX2dldFNvY2lhbFN0cmF0ZWdpZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIF8ud2hlcmUodGhpcy4kY2xpZW50LnN0cmF0ZWdpZXMsIHsgc29jaWFsOiB0cnVlIH0pO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIGRpc2FibGUgdGhlIGZvY3VzIG9uIGBpc19zbWFsbF9zY3JlZW5gXG4gKiBvciBhdCBlbWJlZGVkIG1vZGUgaW4gYGNvbnRhaW5lcmAuIE9yIG92ZXJyaWRlXG4gKiBieSB1c2VyIHByZWZlcmVuY2VzXG4gKlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBwdWJsaWNcbiAqL1xuXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX2ZvY3VzRGlzYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG51bGwgIT0gdGhpcy5mb2N1c0lucHV0ID8gIXRoaXMuZm9jdXNJbnB1dCA6IChzbWFsbF9zY3JlZW4oKSB8fCAhIXRoaXMuY29udGFpbmVyKTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZSB3aGV0aGVyIGl0IHNob3VsZCBvciBzaG91bGQgbm90XG4gKiBzaG93IGxhc3QgbG9naW4gY29ubmVjdGlvblxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHVibGljXG4gKi9cblxuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl9zaG91bGRTaG93TGFzdExvZ2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciAkc3NvRGF0YSA9IHRoaXMuJHdpZGdldC4kc3NvRGF0YTtcblxuICB2YXIgY29ubmVjdGlvblN0cmF0ZWd5ID0gJHNzb0RhdGEgJiYgJHNzb0RhdGEubGFzdFVzZWRDb25uZWN0aW9uICYmICRzc29EYXRhLmxhc3RVc2VkQ29ubmVjdGlvbi5zdHJhdGVneTtcbiAgdmFyIGlzQURPckF1dGgwID0gY29ubmVjdGlvblN0cmF0ZWd5ID09PSAnYXV0aDAnIHx8IGNvbm5lY3Rpb25TdHJhdGVneSA9PT0gJ2FkJztcblxuICAvLyBEb24ndCBzaG93IGxhc3QgbG9naW4gaWYgaW4gUGhvbmVnYXAgd2l0aCBBRCBvciBhdXRoMCBjb25uZWN0aW9uXG4gIGlmICh3aW5kb3cuY29yZG92YSAmJiBpc0FET3JBdXRoMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzaG91bGRTaG93ID0gJHNzb0RhdGFcbiAgICAmJiAkc3NvRGF0YS5zc29cbiAgICAmJiAkc3NvRGF0YS5sYXN0VXNlZENvbm5lY3Rpb25cbiAgICAmJiB0aGlzLl9pc0VuYWJsZWRDb25uZWN0aW9uKCRzc29EYXRhLmxhc3RVc2VkQ29ubmVjdGlvbi5uYW1lKVxuICAgICYmICEhdGhpcy5yZW1lbWJlckxhc3RMb2dpbjtcblxuICByZXR1cm4gc2hvdWxkU2hvdztcbn07XG5cbi8qKlxuICogUmVzb2x2ZSB3aGV0aGVyIGl0IGlzIG9yIGlzIG5vdCBhIGNvbm5lY3Rpb25cbiAqIGJldHdlZW4gZW5hYmxlZCBjbGllbnQncyBjb25uZWN0aW9uIHN0cmF0ZWdpZXNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY29ubmVjdGlvbk5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHVibGljXG4gKi9cblxuT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLl9pc0VuYWJsZWRDb25uZWN0aW9uID0gZnVuY3Rpb24oY29ubmVjdGlvbk5hbWUpIHtcbiAgdmFyIHN0cmF0ZWd5ID0gdGhpcy5fZ2V0Q2xpZW50U3RyYXRlZ3lCeUNvbm5lY3Rpb25OYW1lKGNvbm5lY3Rpb25OYW1lKTtcbiAgcmV0dXJuIHN0cmF0ZWd5ICE9IG51bGwgPyB0cnVlIDogZmFsc2U7XG59O1xuXG5PcHRpb25zTWFuYWdlci5wcm90b3R5cGUuX2lzVXNlcm5hbWVSZXF1aXJlZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGJDb25uZWN0aW9uID0gdGhpcy5fZ2V0QXV0aDBDb25uZWN0aW9uKCk7XG4gIHJldHVybiBkYkNvbm5lY3Rpb24gJiYgZGJDb25uZWN0aW9uLnJlcXVpcmVzX3VzZXJuYW1lO1xufVxuXG4vKipcbiAqIFByaXZhdGUgaGVscGVyc1xuICovXG5cbmZ1bmN0aW9uIGF1dGgwU3RyYXRlZ2llc0ZpbHRlcihzdHJhdGVneSkge1xuICByZXR1cm4gc3RyYXRlZ3kudXNlckFuZFBhc3MgJiYgc3RyYXRlZ3kuY29ubmVjdGlvbnMubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gaGFzQ29ubmVjdGlvbnNGaWx0ZXIoc3RyYXRlZ3kpIHtcbiAgcmV0dXJuIHN0cmF0ZWd5LmNvbm5lY3Rpb25zLmxlbmd0aCA+IDA7XG59XG5cbmZ1bmN0aW9uIHN0cmF0ZWdpZXNDb25uZWN0aW9uc01hcHBlcihjb25uZWN0aW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmF0ZWd5KSB7XG4gICAgLy8gWFhYOiBXZSBuZWVkIHRvIHJlcGxhY2Ugd2l0aCBMb2Rhc2hcbiAgICAvLyBubyBkZWVwIGNsb25lL2V4dGVuZCBpcyBhIHBhaW4gZm9yIHJlZmVyZW50aWFsIG9iamVjdHMuLi5cbiAgICB2YXIgY2xvbmVkID0gXy5leHRlbmQoe30sIHN0cmF0ZWd5KTtcbiAgICBjbG9uZWQuY29ubmVjdGlvbnMgPSBfLmZpbHRlcihjbG9uZWQuY29ubmVjdGlvbnMsIGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICByZXR1cm4gXy5jb250YWlucyhjb25uZWN0aW9ucywgY29ubmVjdGlvbi5uYW1lKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9O1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBmb3JtYXQgPSByZXF1aXJlKCd1dGlsJykuZm9ybWF0O1xudmFyIGNyZWF0ZVBvbGljeSA9IHJlcXVpcmUoJ3Bhc3N3b3JkLXNoZXJpZmYnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vYm9uem8tYXVnbWVudGVkJyk7XG52YXIgaXNTbWFsbFNjcmVlbiA9IHJlcXVpcmUoJy4uL2lzLXNtYWxsLXNjcmVlbicpO1xuXG4vKipcbiAqIEV4cG9zZSBQYXNzd29yZFN0cmVuZ3RoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gUGFzc3dvcmRTdHJlbmd0aDtcblxuLyoqXG4gKiBDcmVhdGUgYFBhc3N3b3JkU3RyZW5ndGhgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVsICAgICBFbGVtZW50IHdoZXJlIHRoZSBQYXNzd29yZFN0cmVuZ3RoIHdpbGwgYmUgcmVuZGVyXG4gKiBAcGFyYW0ge09iamVjdH0gcHdkRWwgIFBhc3N3b3JkIGVsZW1lbnQgdG8gdmFsaWRhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYXNzd29yZFN0cmVuZ3RoKGVsLCBwd2RFbCwgb3B0aW9ucykge1xuICB0aGlzLmVsID0gZWw7XG4gIHRoaXMucHdkRWwgPSBwd2RFbDtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICB0aGlzLmJpbmRBbGwoKTtcbn1cblxuLyoqXG4gKiBCaW5kIGV2ZW50cyB0byBgdGhpcy5wd2RFbGBcbiAqL1xuUGFzc3dvcmRTdHJlbmd0aC5wcm90b3R5cGUuYmluZEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbm5lY3Rpb24gID0gdGhpcy5vcHRpb25zLl9nZXRBdXRoMENvbm5lY3Rpb24oKTtcbiAgdmFyIHBvbGljeSA9IGNyZWF0ZVBvbGljeShjb25uZWN0aW9uLnBhc3N3b3JkUG9saWN5KTtcbiAgdmFyIHB3ZCA9IHRoaXMucHdkRWw7XG4gIHZhciBlbCA9IHRoaXMuZWw7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHBhbmVsID0gJCgnLmEwLXBhbmVsJyk7XG5cbiAgLy8gVE9ETyBEZWJvdW5jZT9cbiAgcHdkLmEwX29uKCdrZXl1cCcsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWlzc2luZyA9IHBvbGljeS5taXNzaW5nKHB3ZC52YWwoKSk7XG4gICAgZWwuaHRtbChmbGF0RGVzY3JpcHRpb25zKHNlbGYub3B0aW9ucywgbWlzc2luZywgMCkpO1xuXG4gICAgdmFyIHNob3dQd2RTdHJlbmd0aCA9ICQoJy5hMC1wYXNzd29yZF9wb2xpY3kgLmEwLWNoZWNrZWQnKS5sZW5ndGggIT09ICQoJy5hMC1wYXNzd29yZF9wb2xpY3kgbGknKS5sZW5ndGg7XG5cbiAgICBwYW5lbC50b2dnbGVDbGFzcygnYTAtYWN0aXZlLXB3ZC1zdHJlbmd0aCcsIHNob3dQd2RTdHJlbmd0aCk7XG5cbiAgICAvLyBUT0RPIFVuLWNvbW1lbnQgdG8gZW5hYmxlIG1hcmsgcGFzc3dvcmQgYXMgaW52YWxpZCB3aGlsZVxuICAgIC8vIG5vdCBtZWV0aW5nIGNyaXRlcmlhLiBCZWFyIGluIG1pbmQgdGhhdCBhMC1lcnJvci9zIHNob3VsZFxuICAgIC8vIGJlIGFkZGVkIHRvIC5hMC1wYW5lbFxuICAgIC8vIGlmICghbWlzc2luZy52ZXJpZmllZCkge1xuICAgIC8vICAgJCgnLmEwLXBhc3N3b3JkIC5hMC1pbnB1dC1ib3gnKS5hZGRDbGFzcygnYTAtZXJyb3ItaW5wdXQnKTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgJCgnLmEwLXBhc3N3b3JkIC5hMC1pbnB1dC1ib3gnKS5yZW1vdmVDbGFzcygnYTAtZXJyb3ItaW5wdXQnKTtcbiAgICAvLyB9XG4gIH0pO1xuXG4gIHBhbmVsLmEwX29uKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZihpc1NtYWxsU2NyZWVuKCkgJiYgZS50YXJnZXQubm9kZU5hbWUgIT09ICdJTlBVVCcpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgfSk7XG5cbiAgcHdkLmEwX29uKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgIGlmKCFpc1NtYWxsU2NyZWVuKCkpIHtcbiAgICAgIHBhbmVsLnJlbW92ZUNsYXNzKCdhMC1hY3RpdmUtcHdkLXN0cmVuZ3RoJyk7XG4gICAgfVxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGZsYXRTaW5nbGVEZXNjcmlwdGlvbiAob3B0aW9ucywgZGVzY3JpcHRpb24sIGluZGV4KSB7XG4gIHZhciByZXN1bHQgPSAobmV3IEFycmF5KGluZGV4KzEpKS5qb2luKCcgJyk7XG4gIHZhciB2ZXJpZmllZCA9IChkZXNjcmlwdGlvbi52ZXJpZmllZCA/ICdhMC1jaGVja2VkJyA6ICcnKTtcbiAgdmFyIG1lc3NhZ2UgPSBvcHRpb25zLmkxOG4udCgnc2lnbnVwOnBhc3N3b3JkU3RyZW5ndGg6JyArIGRlc2NyaXB0aW9uLmNvZGUpO1xuXG4gIGlmIChkZXNjcmlwdGlvbi5mb3JtYXQpIHtcbiAgICBtZXNzYWdlID0gZm9ybWF0LmFwcGx5KG51bGwsIFttZXNzYWdlXS5jb25jYXQoZGVzY3JpcHRpb24uZm9ybWF0KSk7XG4gIH1cblxuICB2YXIgY2hpbGRyZW5EZXNjcmlwdGlvbiA9IGZsYXREZXNjcmlwdGlvbnMob3B0aW9ucywgZGVzY3JpcHRpb24gfHwge30sIGluZGV4ICsgMSk7XG4gIHJlc3VsdCArPSBmb3JtYXQoJzxsaSBjbGFzcz1cIiVzXCI+JXMlczwvbGk+JywgdmVyaWZpZWQsIG1lc3NhZ2UsIGNoaWxkcmVuRGVzY3JpcHRpb24pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZsYXREZXNjcmlwdGlvbnMgKG9wdGlvbnMsIGRlc2NyaXB0aW9ucywgaW5kZXgpIHtcbiAgaWYgKCEoZGVzY3JpcHRpb25zLnJ1bGVzICYmIGRlc2NyaXB0aW9ucy5ydWxlcy5sZW5ndGgpICYmXG4gICAgICAhKGRlc2NyaXB0aW9ucy5pdGVtcyAmJiBkZXNjcmlwdGlvbnMuaXRlbXMubGVuZ3RoKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBpdGVtcyA9IGRlc2NyaXB0aW9ucy5ydWxlcyB8fCBkZXNjcmlwdGlvbnMuaXRlbXM7XG5cbiAgdmFyIGZpcnN0RGVzY3JpcHRpb24gPSBmbGF0U2luZ2xlRGVzY3JpcHRpb24ob3B0aW9ucywgaXRlbXNbMF0sIGluZGV4KTtcblxuICBkZXNjcmlwdGlvbnMgPSBpdGVtcy5zbGljZSgxKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gcmVzdWx0ICsgJ1xcbicgKyBmbGF0U2luZ2xlRGVzY3JpcHRpb24ob3B0aW9ucywgZGVzY3JpcHRpb24sIGluZGV4KTtcbiAgfSwgZmlyc3REZXNjcmlwdGlvbik7XG5cbiAgcmV0dXJuICc8dWw+JyArIGRlc2NyaXB0aW9ucyArICc8L3VsPic7XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHIgPSBtb2R1bGUuZXhwb3J0cztcblxuLy8gQ2hlY2sgZm9yIGEgdmFsaWQgZW1haWwgYWRkcmVzc1xuci5lbWFpbF9wYXJzZXIgPSAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcblxuci51c2VybmFtZV9wYXJzZXIgPSAvXlthLXpBLVowLTlfXXsxLDE1fSQvO1xuLy8gY2hlY2sgZm9yIGFuIGVtcHR5IGZvcm0gdmFsdWVcbnIuZW1wdHkgPSAvXlxccyokLztcbiIsIi8qKlxuICogRXhwb3NlIGBzdG9wYFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcDtcblxuLyoqXG4gKiBDYWxsIGBwcmV2ZW50RGVmYXVsdGAgYW5kIGBzdG9wUHJvcGFnYXRpb25gIG9uIGBlYFxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGVcbiAqIEByZXR1cm4ge0V2ZW50fVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN0b3AoZSkge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIHJldHVybiBlO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2dvb2dsZS1vcGVuaWQnOiB7XG4gICAgICAgIGNzczogJ2dvb2dsZScsXG4gICAgICAgIHRpdGxlOiAnR29vZ2xlIE9wZW5JZCcsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2dvb2dsZS1hcHBzJzoge1xuICAgICAgICBjc3M6ICdnb29nbGUnLFxuICAgICAgICB0aXRsZTogJ0dvb2dsZSBBcHBzJyxcbiAgICAgICAgc29jaWFsOiBmYWxzZVxuICAgIH0sXG4gICAgJ2dvb2dsZS1vYXV0aDInOiB7XG4gICAgICAgIGNzczogJ2dvb2dsZXBsdXMnLFxuICAgICAgICB0aXRsZTogJ0dvb2dsZScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2ZhY2Vib29rJzoge1xuICAgICAgICBjc3M6ICdmYWNlYm9vaycsXG4gICAgICAgIHRpdGxlOiAnRmFjZWJvb2snLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd3aW5kb3dzbGl2ZSc6IHtcbiAgICAgICAgY3NzOiAnd2luZG93cycsXG4gICAgICAgIHRpdGxlOiAnTWljcm9zb2Z0IEFjY291bnQnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdsaW5rZWRpbic6IHtcbiAgICAgICAgY3NzOiAnbGlua2VkaW4nLFxuICAgICAgICB0aXRsZTogJ0xpbmtlZEluJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnZ2l0aHViJzoge1xuICAgICAgICBjc3M6ICdnaXRodWInLFxuICAgICAgICB0aXRsZTogJ0dpdEh1YicsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3BheXBhbCc6IHtcbiAgICAgICAgY3NzOiAncGF5cGFsJyxcbiAgICAgICAgdGl0bGU6ICdQYXlQYWwnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd0d2l0dGVyJzoge1xuICAgICAgICBjc3M6ICd0d2l0dGVyJyxcbiAgICAgICAgdGl0bGU6ICdUd2l0dGVyJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnYW1hem9uJzoge1xuICAgICAgICBjc3M6ICdhbWF6b24nLFxuICAgICAgICB0aXRsZTogJ0FtYXpvbicsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3Zrb250YWt0ZSc6IHtcbiAgICAgICAgY3NzOiAndmsnLFxuICAgICAgICB0aXRsZTogJ3ZLb250YWt0ZScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3lhbmRleCc6IHtcbiAgICAgICAgY3NzOiAneWFuZGV4JyxcbiAgICAgICAgdGl0bGU6ICdZYW5kZXgnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdvZmZpY2UzNjUnOiB7XG4gICAgICAgIGNzczogJ29mZmljZTM2NScsXG4gICAgICAgIHRpdGxlOiAnT2ZmaWNlMzY1JyxcbiAgICAgICAgc29jaWFsOiBmYWxzZVxuICAgIH0sXG4gICAgJ3dhYWQnOiB7XG4gICAgICAgIGNzczogJ3dhYWQnLFxuICAgICAgICB0aXRsZTogJ1dpbmRvd3MgQXp1cmUgQUQnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnYWRmcyc6IHtcbiAgICAgICAgY3NzOiAnd2luZG93cycsXG4gICAgICAgIHRpdGxlOiAnQURGUycsXG4gICAgICAgIHNvY2lhbDogZmFsc2VcbiAgICB9LFxuICAgICdzYW1scCc6IHtcbiAgICAgICAgY3NzOiAnZ3Vlc3QnLFxuICAgICAgICB0aXRsZTogJ1NBTUwnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAncGluZ2ZlZGVyYXRlJzoge1xuICAgICAgICBjc3M6ICdndWVzdCcsXG4gICAgICAgIHRpdGxlOiAnUGluZyBGZWRlcmF0ZScsXG4gICAgICAgIHNvY2lhbDogZmFsc2VcbiAgICB9LFxuICAgICdpcCc6IHtcbiAgICAgICAgY3NzOiAnZ3Vlc3QnLFxuICAgICAgICB0aXRsZTogJ0lQIEFkZHJlc3MnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnbXNjcm0nOiB7XG4gICAgICAgIGNzczogJ2d1ZXN0JyxcbiAgICAgICAgdGl0bGU6ICdEeW5hbWljcyBDUk0nLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnYWQnOiB7XG4gICAgICAgIGNzczogJ3dpbmRvd3MnLFxuICAgICAgICB0aXRsZTogJ0FEIC8gTERBUCcsXG4gICAgICAgIHNvY2lhbDogZmFsc2UsXG4gICAgICAgIHVzZXJBbmRQYXNzOiB0cnVlXG4gICAgfSxcbiAgICAnY3VzdG9tJzoge1xuICAgICAgICBjc3M6ICdndWVzdCcsXG4gICAgICAgIHRpdGxlOiAnQ3VzdG9tIEF1dGgnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnYXV0aDAnOiB7XG4gICAgICAgIGNzczogJ2d1ZXN0JyxcbiAgICAgICAgdGl0bGU6ICdBdXRoMCcsXG4gICAgICAgIHNvY2lhbDogZmFsc2UsXG4gICAgICAgIHVzZXJBbmRQYXNzOiB0cnVlXG4gICAgfSxcbiAgICAnYXV0aDAtYWRsZGFwJzoge1xuICAgICAgICBjc3M6ICdndWVzdCcsXG4gICAgICAgIHRpdGxlOiAnQUQvTERBUCcsXG4gICAgICAgIHNvY2lhbDogZmFsc2UsXG4gICAgICAgIHVzZXJBbmRQYXNzOiB0cnVlXG4gICAgfSxcbiAgICAndGhpcnR5c2V2ZW5zaWduYWxzJzoge1xuICAgICAgICBjc3M6ICd0aGlydHlzZXZlbnNpZ25hbHMnLFxuICAgICAgICB0aXRsZTogJzM3IFNpZ25hbHMnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdib3gnOiB7XG4gICAgICAgIGNzczogJ2JveCcsXG4gICAgICAgIHRpdGxlOiAnQm94JyxcbiAgICAgICAgc29jaWFsOiB0cnVlLFxuICAgICAgICBpbWFnZWljb246IHRydWVcbiAgICB9LFxuICAgICdzYWxlc2ZvcmNlJzoge1xuICAgICAgICBjc3M6ICdzYWxlc2ZvcmNlJyxcbiAgICAgICAgdGl0bGU6ICdTYWxlc2ZvcmNlJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnc2FsZXNmb3JjZS1zYW5kYm94Jzoge1xuICAgICAgICBjc3M6ICdzYWxlc2ZvcmNlJyxcbiAgICAgICAgdGl0bGU6ICdTYWxlc2ZvcmNlIChzYW5kYm94KScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2ZpdGJpdCc6IHtcbiAgICAgICAgY3NzOiAnZml0Yml0JyxcbiAgICAgICAgdGl0bGU6ICdGaXRiaXQnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdiYWlkdSc6IHtcbiAgICAgICAgY3NzOiAnYmFpZHUnLFxuICAgICAgICB0aXRsZTogJ+eZvuW6picsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3JlbnJlbic6IHtcbiAgICAgICAgY3NzOiAncmVucmVuJyxcbiAgICAgICAgdGl0bGU6ICfkurrkuronLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd5YWhvbyc6IHtcbiAgICAgICAgY3NzOiAneWFob28nLFxuICAgICAgICB0aXRsZTogJ1lhaG9vIScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2FvbCc6IHtcbiAgICAgICAgY3NzOiAnYW9sJyxcbiAgICAgICAgdGl0bGU6ICdBb2wnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd5YW1tZXInOiB7XG4gICAgICAgIGNzczogJ3lhbW1lcicsXG4gICAgICAgIHRpdGxlOiAnWWFtbWVyJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnd29yZHByZXNzJzoge1xuICAgICAgICBjc3M6ICd3b3JkcHJlc3MnLFxuICAgICAgICB0aXRsZTogJ1dvcmRwcmVzcycsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2R3b2xsYSc6IHtcbiAgICAgICAgY3NzOiAnZHdvbGxhJyxcbiAgICAgICAgdGl0bGU6ICdEd29sbGEnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdzaG9waWZ5Jzoge1xuICAgICAgICBjc3M6ICdzaG9waWZ5JyxcbiAgICAgICAgdGl0bGU6ICdTaG9waWZ5JyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnbWlpY2FyZCc6IHtcbiAgICAgICAgY3NzOiAnbWlpY2FyZCcsXG4gICAgICAgIHRpdGxlOiAnbWlpQ2FyZCcsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3NvdW5kY2xvdWQnOiB7XG4gICAgICAgIGNzczogJ3NvdW5kY2xvdWQnLFxuICAgICAgICB0aXRsZTogJ1NvdW5kY2xvdWQnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdlYmF5Jzoge1xuICAgICAgICBjc3M6ICdlYmF5JyxcbiAgICAgICAgdGl0bGU6ICdlYmF5JyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnZXZlcm5vdGUnOiB7XG4gICAgICAgIGNzczogJ2V2ZXJub3RlJyxcbiAgICAgICAgdGl0bGU6ICdFdmVybm90ZScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2V2ZXJub3RlLXNhbmRib3gnOiB7XG4gICAgICAgIGNzczogJ2V2ZXJub3RlJyxcbiAgICAgICAgdGl0bGU6ICdFdmVybm90ZSAoc2FuZGJveCknLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdzaGFyZXBvaW50Jzoge1xuICAgICAgICBjc3M6ICdzaGFyZXBvaW50JyxcbiAgICAgICAgdGl0bGU6ICdTaGFyZVBvaW50IEFwcHMnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnd2VpYm8nOiB7XG4gICAgICAgIGNzczogJ3dlaWJvJyxcbiAgICAgICAgdGl0bGU6ICfmlrDmtarlvq7ljZonLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdpbnN0YWdyYW0nOiB7XG4gICAgICAgIGNzczogJ2luc3RhZ3JhbScsXG4gICAgICAgIHRpdGxlOiAnSW5zdGFncmFtJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAndGhlY2l0eSc6IHtcbiAgICAgICAgY3NzOiAndGhlY2l0eScsXG4gICAgICAgIHRpdGxlOiAnVGhlIENpdHknLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd0aGVjaXR5LXNhbmRib3gnOiB7XG4gICAgICAgIGNzczogJ3RoZWNpdHknLFxuICAgICAgICB0aXRsZTogJ1RoZSBDaXR5IChzYW5kYm94KScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3BsYW5uaW5nY2VudGVyJzoge1xuICAgICAgICBjc3M6ICdwbGFubmluZ2NlbnRlcicsXG4gICAgICAgIHRpdGxlOiAnUGxhbm5pbmcgQ2VudGVyJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnZXhhY3QnOiB7XG4gICAgICAgIGNzczogJ2V4YWN0JyxcbiAgICAgICAgdGl0bGU6ICdFeGFjdCcsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH1cbn07IiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnLCAnS2h0bWwnLCAnJ107XG52YXIgYW5pbWF0aW9uRW5kTmFtZXMgPSB7XG4gICdBbmltYXRpb24nOidhbmltYXRpb25lbmQnLFxuICAnT0FuaW1hdGlvbic6J29BbmltYXRpb25FbmQnLFxuICAnTW96QW5pbWF0aW9uJzonYW5pbWF0aW9uZW5kJyxcbiAgJ1dlYmtpdEFuaW1hdGlvbic6J3dlYmtpdEFuaW1hdGlvbkVuZCdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gXy5jaGFpbihwcmVmaXhlcylcbiAgICAubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyAnQW5pbWF0aW9uJztcbiAgICB9KVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVtzXSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uIChzdXBwb3J0ZWRBbmltYXRpb24pIHtcbiAgICAgIHJldHVybiBhbmltYXRpb25FbmROYW1lc1tzdXBwb3J0ZWRBbmltYXRpb25dO1xuICAgIH0pXG4gICAgLmZpcnN0KClcbiAgICAudmFsdWUoKTtcbn07XG4iLCJmdW5jdGlvbiBwbGFjZWhvbGRlcklzU3VwcG9ydGVkKCkge1xuICB2YXIgdGVzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIHJldHVybiAoJ3BsYWNlaG9sZGVyJyBpbiB0ZXN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwbGFjZWhvbGRlcklzU3VwcG9ydGVkKCk7IiwidmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZVVybDogZnVuY3Rpb24gKHVybCkge1xuICAgIHZhciBwYXJzZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgcGFyc2VyLmhyZWYgPSB1cmw7XG4gICAgcmV0dXJuIHBhcnNlcjtcbiAgfSxcblxuICBlbmRzV2l0aDogZnVuY3Rpb24gKHN0ciwgc3VmZml4KSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKHN1ZmZpeCwgc3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICE9PSAtMTtcbiAgfSxcblxuICBleHRyYWN0OiBmdW5jdGlvbiAob2JqLCBwcm9wcykge1xuICAgIHZhciBwcmUgPSBfLnBpY2sob2JqLCBwcm9wcyk7XG5cbiAgICByZXR1cm4gXy5jaGFpbihfLnBhaXJzKHByZSkpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcGFpclsxXSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICB9KS5yZWR1Y2UoZnVuY3Rpb24gKHIsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgcltjdXJyZW50WzBdXSA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfSwge30pLnZhbHVlKCk7XG4gIH0sXG5cbiAgaXNDb3Jkb3ZhOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2luZG93LmNvcmRvdmE7XG4gIH0sXG5cbiAgaXNJT1M6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAod2luZG93Lm5hdmlnYXRvciAmJlxuICAgICAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCAmJlxuICAgICAgICAgIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKSB7XG4gICAgICAvLyBuYXZpZ2F0b3IudXNlckFnZW50IGV4YW1wbGVzOlxuICAgICAgLy9cbiAgICAgIC8vIFNhZmFyaSBNb2JpbGUgKGlQaG9uZSlcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIFwiTW96aWxsYS81LjAgKGlQaG9uZTsgQ1BVIGlQaG9uZSBPUyAxMF8xMF8xIGxpa2UgTWFjIE9TIFgpIEFwcGxlV2ViS2l0LzYwMC4xLjQgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzguMCBNb2JpbGUvMTJCNDExIFNhZmFyaS82MDAuMS40XCJcbiAgICAgIC8vXG4gICAgICAvLyBQaG9uZWdhcCAoaVBob25lKVxuICAgICAgLy8gLS0tLS0tLS1cbiAgICAgIC8vIFwiTW96aWxsYS81LjAgKGlQaG9uZTsgQ1BVIGlQaG9uZSBPUyAxMF8xMF8xIGxpa2UgTWFjIE9TIFgpIEFwcGxlV2ViS2l0LzYwMC4xLjQgKEtIVE1MLCBsaWtlIEdlY2tvKSBNb2JpbGUvMTJCNDExICgyMDUwNzQ5MDcyKVwiXG4gICAgICAvL1xuICAgICAgLy8gU2FmYXJpIE1vYmlsZSAoaVBhZClcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIE1vemlsbGEvNS4wKGlQYWQ7IFU7IENQVSBpUGhvbmUgT1MgM18yIGxpa2UgTWFjIE9TIFg7IGVuLXVzKSBBcHBsZVdlYktpdC81MzEuMjEuMTAgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMC40IE1vYmlsZS83QjMxNCBTYWZhcmkvNTMxLjIxLjEwXG4gICAgICByZXR1cm4gISFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8uKmlQaG9uZSBPUy4qLyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIganNvbl9wYXJzZSA9IHJlcXVpcmUoJy4vanNvbi1wYXJzZScpO1xuXG4vKipcbiAqIEV4cG9zZSBgTG9naW5FcnJvcmBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvZ2luRXJyb3I7XG5cbi8qKlxuICogQ3JlYXRlIGEgYExvZ2luRXJyb3JgIGJ5IGV4dGVuZCBvZiBgRXJyb3JgXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuICogQHBhcmFtIHtTdHJpbmd9IGRldGFpbHNcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBMb2dpbkVycm9yKHN0YXR1cywgZGV0YWlscykge1xuICB2YXIgb2JqO1xuXG4gIGlmICh0eXBlb2YgZGV0YWlscyA9PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBvYmogPSBqc29uX3BhcnNlKGRldGFpbHMpO1xuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICBvYmogPSB7IG1lc3NhZ2U6IGRldGFpbHMgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb2JqID0gZGV0YWlscyB8fCB7IGRlc2NyaXB0aW9uOiAnc2VydmVyIGVycm9yJyB9O1xuICB9XG5cbiAgaWYgKG9iaiAmJiAhb2JqLmNvZGUpIHtcbiAgICBvYmouY29kZSA9IG9iai5lcnJvcjtcbiAgfVxuXG4gIHZhciBlcnIgPSBFcnJvci5jYWxsKHRoaXMsIG9iai5kZXNjcmlwdGlvbiB8fCBvYmoubWVzc2FnZSB8fCBvYmouZXJyb3IpO1xuXG4gIGVyci5zdGF0dXMgPSBzdGF0dXM7XG4gIGVyci5uYW1lID0gb2JqLmNvZGU7XG4gIGVyci5jb2RlID0gb2JqLmNvZGU7XG4gIGVyci5kZXRhaWxzID0gb2JqO1xuXG4gIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICBlcnIuY29kZSA9IFwiVW5rbm93blwiO1xuICAgIGVyci5tZXNzYWdlID0gXCJVbmtub3duIGVycm9yLlwiO1xuICB9XG5cbiAgcmV0dXJuIGVycjtcbn1cblxuLyoqXG4gKiBFeHRlbmQgYExvZ2luRXJyb3IucHJvdG90eXBlYCB3aXRoIGBFcnJvci5wcm90b3R5cGVgXG4gKiBhbmQgYExvZ2luRXJyb3JgIGFzIGNvbnN0cnVjdG9yXG4gKi9cblxuaWYgKE9iamVjdCAmJiBPYmplY3QuY3JlYXRlKSB7XG4gIExvZ2luRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogTG9naW5FcnJvciB9XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBFeHBvc2UgYHJlcXVpcmVkYFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZWQ7XG5cbi8qKlxuICogQXNzZXJ0IGBwcm9wYCBhcyByZXF1aXJlbWVudCBvZiBgb2JqYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7cHJvcH0gcHJvcFxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHJlcXVpcmVkIChvYmosIHByb3ApIHtcbiAgaWYgKCFvYmpbcHJvcF0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvcCArICcgaXMgcmVxdWlyZWQuJyk7XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgQmFzZTY0ID0gcmVxdWlyZSgnQmFzZTY0Jyk7XG5cbi8qKlxuICogRXhwb3NlIGBiYXNlNjRfdXJsX2RlY29kZWBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2U2NF91cmxfZGVjb2RlO1xuXG4vKipcbiAqIERlY29kZSBhIGBiYXNlNjRgIGBlbmNvZGVVUklDb21wb25lbnRgIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBiYXNlNjRfdXJsX2RlY29kZShzdHIpIHtcbiAgdmFyIG91dHB1dCA9IHN0ci5yZXBsYWNlKFwiLVwiLCBcIitcIikucmVwbGFjZShcIl9cIiwgXCIvXCIpO1xuXG4gIHN3aXRjaCAob3V0cHV0Lmxlbmd0aCAlIDQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBvdXRwdXQgKz0gXCI9PVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgb3V0cHV0ICs9IFwiPVwiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFwiSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIVwiO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoQmFzZTY0LmF0b2Iob3V0cHV0KSkpO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBhc3NlcnRfcmVxdWlyZWQgICA9IHJlcXVpcmUoJy4vYXNzZXJ0X3JlcXVpcmVkJyk7XG52YXIgYmFzZTY0X3VybF9kZWNvZGUgPSByZXF1aXJlKCcuL2Jhc2U2NF91cmxfZGVjb2RlJyk7XG52YXIgaXNfYXJyYXkgICAgICAgICAgPSByZXF1aXJlKCcuL2lzLWFycmF5Jyk7XG5cbnZhciBxcyAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ3FzJyk7XG52YXIgeHRlbmQgICAgICAgICAgICAgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIHRyaW0gICAgICAgICAgICAgID0gcmVxdWlyZSgndHJpbScpO1xudmFyIHJlcXdlc3QgICAgICAgICAgID0gcmVxdWlyZSgncmVxd2VzdCcpO1xudmFyIFdpbkNoYW4gICAgICAgICAgID0gcmVxdWlyZSgnd2luY2hhbicpO1xuXG52YXIganNvbnAgICAgICAgICAgICAgPSByZXF1aXJlKCdqc29ucCcpO1xudmFyIGpzb25wT3B0cyAgICAgICAgID0geyBwYXJhbTogJ2NieCcsIHRpbWVvdXQ6IDgwMDAsIHByZWZpeDogJ19fYXV0aDBqcCcgfTtcblxudmFyIHVzZV9qc29ucCAgICAgICAgID0gcmVxdWlyZSgnLi91c2VfanNvbnAnKTtcbnZhciBMb2dpbkVycm9yICAgICAgICA9IHJlcXVpcmUoJy4vTG9naW5FcnJvcicpO1xudmFyIGpzb25fcGFyc2UgICAgICAgID0gcmVxdWlyZSgnLi9qc29uLXBhcnNlJyk7XG5cbi8qKlxuICogU3RyaW5naWZ5IHBvcHVwIG9wdGlvbnMgb2JqZWN0IGludG9cbiAqIGB3aW5kb3cub3BlbmAgc3RyaW5nIG9wdGlvbnMgZm9ybWF0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBvcHVwT3B0aW9uc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5naWZ5UG9wdXBTZXR0aW5ncyhwb3B1cE9wdGlvbnMpIHtcbiAgdmFyIHNldHRpbmdzID0gJyc7XG5cbiAgZm9yICh2YXIga2V5IGluIHBvcHVwT3B0aW9ucykge1xuICAgIHNldHRpbmdzICs9IGtleSArICc9JyArIHBvcHVwT3B0aW9uc1trZXldICsgJywnO1xuICB9XG5cbiAgcmV0dXJuIHNldHRpbmdzLnNsaWNlKDAsIC0xKTtcbn1cblxuXG4vKipcbiAqIENoZWNrIHRoYXQgYSBrZXkgaGFzIGJlZW4gc2V0IHRvIHNvbWV0aGluZyBkaWZmZXJlbnQgdGhhbiBudWxsXG4gKiBvciB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICovXG5mdW5jdGlvbiBjaGVja0lmU2V0KG9iaiwga2V5KSB7XG4gIC8qXG4gICAqIGZhbHNlICAgICAgIT0gbnVsbCAtPiB0cnVlXG4gICAqIHRydWUgICAgICAgIT0gbnVsbCAtPiB0cnVlXG4gICAqIHVuZGVmaW5lZCAgIT0gbnVsbCAtPiBmYWxzZVxuICAgKiBudWxsICAgICAgICE9IG51bGwgLT4gZmFsc2VcbiAgICovXG4gIHJldHVybiAhIShvYmogJiYgb2JqW2tleV0gIT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBdXRoMGAgaW5zdGFuY2Ugd2l0aCBgb3B0aW9uc2BcbiAqXG4gKiBAY2xhc3MgQXV0aDBcbiAqL1xuZnVuY3Rpb24gQXV0aDAgKG9wdGlvbnMpIHtcbiAgLy8gWFhYIERlcHJlY2F0ZWQ6IFdlIHByZWZlciBuZXcgQXV0aDAoLi4uKVxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQXV0aDApKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoMChvcHRpb25zKTtcbiAgfVxuXG4gIGFzc2VydF9yZXF1aXJlZChvcHRpb25zLCAnY2xpZW50SUQnKTtcbiAgYXNzZXJ0X3JlcXVpcmVkKG9wdGlvbnMsICdkb21haW4nKTtcblxuICB0aGlzLl91c2VKU09OUCA9IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB1c2VfanNvbnAoKTtcbiAgdGhpcy5fY2xpZW50SUQgPSBvcHRpb25zLmNsaWVudElEO1xuICB0aGlzLl9jYWxsYmFja1VSTCA9IG9wdGlvbnMuY2FsbGJhY2tVUkwgfHwgZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcbiAgdGhpcy5fZG9tYWluID0gb3B0aW9ucy5kb21haW47XG4gIHRoaXMuX2NhbGxiYWNrT25Mb2NhdGlvbkhhc2ggPSBmYWxzZSB8fCBvcHRpb25zLmNhbGxiYWNrT25Mb2NhdGlvbkhhc2g7XG4gIHRoaXMuX2NvcmRvdmFTb2NpYWxQbHVnaW5zID0ge1xuICAgIGZhY2Vib29rOiB0aGlzLl9waG9uZWdhcEZhY2Vib29rTG9naW5cbiAgfTtcbiAgdGhpcy5fdXNlQ29yZG92YVNvY2lhbFBsdWdpbnMgPSBmYWxzZSB8fCBvcHRpb25zLnVzZUNvcmRvdmFTb2NpYWxQbHVnaW5zO1xuXG4gIC8vIFRPRE8gQ2hhbmdlIHRoaXMgdG8gYSBwcm9wZXJ0eSBuYW1lZCAnZGlzYWJsZVNTTycgZm9yIGNvbnNpc3RlbmN5LlxuICAvLyBCeSBkZWZhdWx0LCBvcHRpb25zLnNzbyBpcyB0cnVlXG4gIGlmICghY2hlY2tJZlNldChvcHRpb25zLCAnc3NvJykpIHtcbiAgICBvcHRpb25zLnNzbyA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBvcnQgdmVyc2lvbiB3aXRoIGBBdXRoMGAgY29uc3RydWN0b3JcbiAqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gdmVyc2lvblxuICovXG5cbkF1dGgwLnZlcnNpb24gPSBcIjYuMC4yXCI7XG5cbi8qKlxuICogUmVkaXJlY3QgY3VycmVudCBsb2NhdGlvbiB0byBgdXJsYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkF1dGgwLnByb3RvdHlwZS5fcmVkaXJlY3QgPSBmdW5jdGlvbiAodXJsKSB7XG4gIGdsb2JhbC53aW5kb3cubG9jYXRpb24gPSB1cmw7XG59O1xuXG5BdXRoMC5wcm90b3R5cGUuX2dldENhbGxiYWNrT25Mb2NhdGlvbkhhc2ggPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHJldHVybiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5jYWxsYmFja09uTG9jYXRpb25IYXNoICE9PSAndW5kZWZpbmVkJykgP1xuICAgIG9wdGlvbnMuY2FsbGJhY2tPbkxvY2F0aW9uSGFzaCA6IHRoaXMuX2NhbGxiYWNrT25Mb2NhdGlvbkhhc2g7XG59O1xuXG5BdXRoMC5wcm90b3R5cGUuX2dldENhbGxiYWNrVVJMID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICByZXR1cm4gKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMuY2FsbGJhY2tVUkwgIT09ICd1bmRlZmluZWQnKSA/XG4gICAgb3B0aW9ucy5jYWxsYmFja1VSTCA6IHRoaXMuX2NhbGxiYWNrVVJMO1xufTtcblxuLyoqXG4gKiBSZW5kZXJzIGFuZCBzdWJtaXRzIGEgV1NGZWQgZm9ybVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmb3JtSHRtbFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLl9yZW5kZXJBbmRTdWJtaXRXU0ZlZEZvcm0gPSBmdW5jdGlvbiAob3B0aW9ucywgZm9ybUh0bWwpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gZm9ybUh0bWw7XG4gIHZhciBmb3JtID0gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpLmNoaWxkcmVuWzBdO1xuXG4gIGlmIChvcHRpb25zLnBvcHVwICYmICF0aGlzLl9nZXRDYWxsYmFja09uTG9jYXRpb25IYXNoKG9wdGlvbnMpKSB7XG4gICAgZm9ybS50YXJnZXQgPSAnYXV0aDBfc2lnbnVwX3BvcHVwJztcbiAgfVxuXG4gIGZvcm0uc3VibWl0KCk7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgcmVzcG9uc2UgdHlwZSBhcyBgdG9rZW5gIG9yIGBjb2RlYFxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gYHNjb3BlYCBhbmQgYHJlc3BvbnNlX3R5cGVgIHByb3BlcnRpZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkF1dGgwLnByb3RvdHlwZS5fZ2V0TW9kZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6ICdvcGVuaWQnLFxuICAgIHJlc3BvbnNlX3R5cGU6IHRoaXMuX2dldENhbGxiYWNrT25Mb2NhdGlvbkhhc2gob3B0aW9ucykgPyAndG9rZW4nIDogJ2NvZGUnXG4gIH07XG59O1xuXG5BdXRoMC5wcm90b3R5cGUuX2NvbmZpZ3VyZU9mZmxpbmVNb2RlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5zY29wZSAmJiBvcHRpb25zLnNjb3BlLmluZGV4T2YoJ29mZmxpbmVfYWNjZXNzJykgPj0gMCkge1xuICAgIG9wdGlvbnMuZGV2aWNlID0gb3B0aW9ucy5kZXZpY2UgfHwgJ0Jyb3dzZXInO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB1c2VyIGluZm9ybWF0aW9uIGZyb20gQVBJXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb2ZpbGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZF90b2tlblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkF1dGgwLnByb3RvdHlwZS5fZ2V0VXNlckluZm8gPSBmdW5jdGlvbiAocHJvZmlsZSwgaWRfdG9rZW4sIGNhbGxiYWNrKSB7XG5cbiAgaWYgKHByb2ZpbGUgJiYgIXByb2ZpbGUudXNlcl9pZCkgeyAvLyB0aGUgc2NvcGUgd2FzIGp1c3Qgb3BlbmlkXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB1cmwgPSAnaHR0cHM6Ly8nICsgc2VsZi5fZG9tYWluICsgJy90b2tlbmluZm8/JztcblxuICAgIHZhciBmYWlsID0gZnVuY3Rpb24gKHN0YXR1cywgZGVzY3JpcHRpb24pIHtcbiAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihzdGF0dXMgKyAnOiAnICsgKGRlc2NyaXB0aW9uIHx8ICcnKSk7XG5cbiAgICAgIC8vIFRoZXNlIHR3byBwcm9wZXJ0aWVzIGFyZSBhZGRlZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG9sZCB2ZXJzaW9ucyAobm8gRXJyb3IgaW5zdGFuY2Ugd2FzIHJldHVybmVkKVxuICAgICAgZXJyb3IuZXJyb3IgPSBzdGF0dXM7XG4gICAgICBlcnJvci5lcnJvcl9kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuXG4gICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgICAgcmV0dXJuIGpzb25wKHVybCArIHFzLnN0cmluZ2lmeSh7aWRfdG9rZW46IGlkX3Rva2VufSksIGpzb25wT3B0cywgZnVuY3Rpb24gKGVyciwgcmVzcCkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGZhaWwoMCwgZXJyLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3Auc3RhdHVzID09PSAyMDAgP1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3AudXNlcikgOlxuICAgICAgICAgIGZhaWwocmVzcC5zdGF0dXMsIHJlc3AuZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcXdlc3Qoe1xuICAgICAgdXJsOiAgICAgICAgICB1cmwsXG4gICAgICBtZXRob2Q6ICAgICAgICdwb3N0JyxcbiAgICAgIHR5cGU6ICAgICAgICAgJ2pzb24nLFxuICAgICAgY3Jvc3NPcmlnaW46ICB0cnVlLFxuICAgICAgZGF0YTogICAgICAgICB7aWRfdG9rZW46IGlkX3Rva2VufVxuICAgIH0pLmZhaWwoZnVuY3Rpb24gKGVycikge1xuICAgICAgZmFpbChlcnIuc3RhdHVzLCBlcnIucmVzcG9uc2VUZXh0KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyaW5mbykge1xuICAgICAgY2FsbGJhY2sobnVsbCwgdXNlcmluZm8pO1xuICAgIH0pO1xuICB9XG5cbiAgY2FsbGJhY2sobnVsbCwgcHJvZmlsZSk7XG59O1xuXG4vKipcbiAqIEdldCBwcm9maWxlIGRhdGEgYnkgYGlkX3Rva2VuYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZF90b2tlblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmdldFByb2ZpbGUgPSBmdW5jdGlvbiAoaWRfdG9rZW4sIGNhbGxiYWNrKSB7XG4gIGlmICghaWRfdG9rZW4gfHwgdHlwZW9mIGlkX3Rva2VuICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0ludmFsaWQgdG9rZW4nKSk7XG4gIH1cblxuICB0aGlzLl9nZXRVc2VySW5mbyh0aGlzLmRlY29kZUp3dChpZF90b2tlbiksIGlkX3Rva2VuLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGEgdXNlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5BdXRoMC5wcm90b3R5cGUudmFsaWRhdGVVc2VyID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBlbmRwb2ludCA9ICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL3B1YmxpYy9hcGkvdXNlcnMvdmFsaWRhdGVfdXNlcnBhc3N3b3JkJztcbiAgdmFyIHF1ZXJ5ID0geHRlbmQoXG4gICAgb3B0aW9ucyxcbiAgICB7XG4gICAgICBjbGllbnRfaWQ6ICAgIHRoaXMuX2NsaWVudElELFxuICAgICAgdXNlcm5hbWU6ICAgICB0cmltKG9wdGlvbnMudXNlcm5hbWUgfHwgb3B0aW9ucy5lbWFpbCB8fCAnJylcbiAgICB9KTtcblxuICBpZiAodGhpcy5fdXNlSlNPTlApIHtcbiAgICByZXR1cm4ganNvbnAoZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCBqc29ucE9wdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3AgJiYgcmVzcC5zdGF0dXMgIT09IDQwNCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKHJlc3AuZXJyb3IpKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3Auc3RhdHVzID09PSAyMDApO1xuICAgIH0pO1xuICB9XG5cbiAgcmVxd2VzdCh7XG4gICAgdXJsOiAgICAgZW5kcG9pbnQsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICd0ZXh0JyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVyci5zdGF0dXMgIT09IDQwNCkgeyByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKGVyci5yZXNwb25zZVRleHQpKTsgfVxuICAgICAgY2FsbGJhY2sobnVsbCwgZmFsc2UpO1xuICAgIH0sXG4gICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3Auc3RhdHVzID09PSAyMDApO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIERlY29kZSBKc29uIFdlYiBUb2tlblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBqd3RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmRlY29kZUp3dCA9IGZ1bmN0aW9uIChqd3QpIHtcbiAgdmFyIGVuY29kZWQgPSBqd3QgJiYgand0LnNwbGl0KCcuJylbMV07XG4gIHJldHVybiBqc29uX3BhcnNlKGJhc2U2NF91cmxfZGVjb2RlKGVuY29kZWQpKTtcbn07XG5cbi8qKlxuICogR2l2ZW4gdGhlIGhhc2ggKG9yIGEgcXVlcnkpIG9mIGFuIFVSTCByZXR1cm5zIGEgZGljdGlvbmFyeSB3aXRoIG9ubHkgcmVsZXZhbnRcbiAqIGF1dGhlbnRpY2F0aW9uIGluZm9ybWF0aW9uLiBJZiBzdWNjZWVkcyBpdCB3aWxsIHJldHVybiB0aGUgZm9sbG93aW5nIGZpZWxkczpcbiAqIGBwcm9maWxlYCwgYGlkX3Rva2VuYCwgYGFjY2Vzc190b2tlbmAgYW5kIGBzdGF0ZWAuIEluIGNhc2Ugb2YgZXJyb3IsIGl0IHdpbGxcbiAqIHJldHVybiBgZXJyb3JgIGFuZCBgZXJyb3JfZGVzY3JpcHRpb25gLlxuICpcbiAqIEBtZXRob2QgcGFyc2VIYXNoXG4gKiBAcGFyYW0ge1N0cmluZ30gW2hhc2g9d2luZG93LmxvY2F0aW9uLmhhc2hdIFVSTCB0byBiZSBwYXJzZWRcbiAqIEBleGFtcGxlXG4gKiAgICAgIHZhciBhdXRoMCA9IG5ldyBBdXRoMCh7Li4ufSk7XG4gKlxuICogICAgICAvLyBSZXR1cm5zIHtwcm9maWxlOiB7KiogZGVjb2RlZCBpZCB0b2tlbiAqKn0sIHN0YXRlOiBcImdvb2RcIn1cbiAqICAgICAgYXV0aDAucGFyc2VIYXNoKCcjaWRfdG9rZW49Li4uLi4mc3RhdGU9Z29vZCZmb289YmFyJyk7XG4gKlxuICogICAgICAvLyBSZXR1cm5zIHtlcnJvcjogXCJpbnZhbGlkX2NyZWRlbnRpYWxzXCIsIGVycm9yX2Rlc2NyaXB0aW9uOiB1bmRlZmluZWR9XG4gKiAgICAgIGF1dGgwLnBhcnNlSGFzaCgnI2Vycm9yPWludmFsaWRfY3JlZGVudGlhbHMnKTtcbiAqXG4gKiAgICAgIC8vIFJldHVybnMge2Vycm9yOiBcImludmFsaWRfY3JlZGVudGlhbHNcIiwgZXJyb3JfZGVzY3JpcHRpb246IHVuZGVmaW5lZH1cbiAqICAgICAgYXV0aDAucGFyc2VIYXNoKCc/ZXJyb3I9aW52YWxpZF9jcmVkZW50aWFscycpO1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLnBhcnNlSGFzaCA9IGZ1bmN0aW9uIChoYXNoKSB7XG4gIGhhc2ggPSBoYXNoIHx8IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICB2YXIgcGFyc2VkX3FzO1xuICBpZiAoaGFzaC5tYXRjaCgvZXJyb3IvKSkge1xuICAgIGhhc2ggPSBoYXNoLnN1YnN0cigxKS5yZXBsYWNlKC9eXFwvLywgJycpO1xuICAgIHBhcnNlZF9xcyA9IHFzLnBhcnNlKGhhc2gpO1xuICAgIHZhciBlcnIgPSB7XG4gICAgICBlcnJvcjogcGFyc2VkX3FzLmVycm9yLFxuICAgICAgZXJyb3JfZGVzY3JpcHRpb246IHBhcnNlZF9xcy5lcnJvcl9kZXNjcmlwdGlvblxuICAgIH07XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICBpZighaGFzaC5tYXRjaCgvYWNjZXNzX3Rva2VuLykpIHtcbiAgICAvLyBJbnZhbGlkIGhhc2ggVVJMXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaGFzaCA9IGhhc2guc3Vic3RyKDEpLnJlcGxhY2UoL15cXC8vLCAnJyk7XG4gIHBhcnNlZF9xcyA9IHFzLnBhcnNlKGhhc2gpO1xuICB2YXIgaWRfdG9rZW4gPSBwYXJzZWRfcXMuaWRfdG9rZW47XG4gIHZhciByZWZyZXNoX3Rva2VuID0gcGFyc2VkX3FzLnJlZnJlc2hfdG9rZW47XG4gIHZhciBwcm9mID0gdGhpcy5kZWNvZGVKd3QoaWRfdG9rZW4pO1xuICB2YXIgaW52YWxpZEp3dCA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHZhciBlcnIgPSB7XG4gICAgICBlcnJvcjogJ2ludmFsaWRfdG9rZW4nLFxuICAgICAgZXJyb3JfZGVzY3JpcHRpb246IGVycm9yXG4gICAgfTtcbiAgICByZXR1cm4gZXJyO1xuICB9O1xuXG4gIC8vIGF1ZCBzaG91bGQgYmUgdGhlIGNsaWVudElEXG4gIGlmIChwcm9mLmF1ZCAhPT0gdGhpcy5fY2xpZW50SUQpIHtcbiAgICByZXR1cm4gaW52YWxpZEp3dChcbiAgICAgICdUaGUgY2xpZW50SUQgY29uZmlndXJlZCAoJyArIHRoaXMuX2NsaWVudElEICsgJykgZG9lcyBub3QgbWF0Y2ggd2l0aCB0aGUgY2xpZW50SUQgc2V0IGluIHRoZSB0b2tlbiAoJyArIHByb2YuYXVkICsgJykuJyk7XG4gIH1cblxuICAvLyBpc3Mgc2hvdWxkIGJlIHRoZSBBdXRoMCBkb21haW4gKGkuZS46IGh0dHBzOi8vY29udG9zby5hdXRoMC5jb20vKVxuICBpZiAocHJvZi5pc3MgJiYgcHJvZi5pc3MgIT09ICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnLycpIHtcbiAgICByZXR1cm4gaW52YWxpZEp3dChcbiAgICAgICdUaGUgZG9tYWluIGNvbmZpZ3VyZWQgKGh0dHBzOi8vJyArIHRoaXMuX2RvbWFpbiArICcvKSBkb2VzIG5vdCBtYXRjaCB3aXRoIHRoZSBkb21haW4gc2V0IGluIHRoZSB0b2tlbiAoJyArIHByb2YuaXNzICsgJykuJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByb2ZpbGU6IHByb2YsXG4gICAgaWRfdG9rZW46IGlkX3Rva2VuLFxuICAgIGFjY2Vzc190b2tlbjogcGFyc2VkX3FzLmFjY2Vzc190b2tlbixcbiAgICBzdGF0ZTogcGFyc2VkX3FzLnN0YXRlLFxuICAgIHJlZnJlc2hfdG9rZW46IHJlZnJlc2hfdG9rZW5cbiAgfTtcbn07XG5cbi8qKlxuICogU2lnbnVwXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU2lnbnVwIE9wdGlvbnNcbiAqICBAcGFyYW0ge1N0cmluZ30gZW1haWwgTmV3IHVzZXIgZW1haWxcbiAqICBAcGFyYW0ge1N0cmluZ30gcGFzc3dvcmQgTmV3IHVzZXIgcGFzc3dvcmRcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5BdXRoMC5wcm90b3R5cGUuc2lnbnVwID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgcXVlcnkgPSB4dGVuZChcbiAgICB0aGlzLl9nZXRNb2RlKG9wdGlvbnMpLFxuICAgIG9wdGlvbnMsXG4gICAge1xuICAgICAgY2xpZW50X2lkOiB0aGlzLl9jbGllbnRJRCxcbiAgICAgIHJlZGlyZWN0X3VyaTogdGhpcy5fZ2V0Q2FsbGJhY2tVUkwob3B0aW9ucyksXG4gICAgICB1c2VybmFtZTogdHJpbShvcHRpb25zLnVzZXJuYW1lIHx8ICcnKSxcbiAgICAgIGVtYWlsOiB0cmltKG9wdGlvbnMuZW1haWwgfHwgb3B0aW9ucy51c2VybmFtZSB8fCAnJyksXG4gICAgICB0ZW5hbnQ6IHRoaXMuX2RvbWFpbi5zcGxpdCgnLicpWzBdXG4gICAgfSk7XG5cbiAgdGhpcy5fY29uZmlndXJlT2ZmbGluZU1vZGUocXVlcnkpO1xuXG4gIHZhciBwb3B1cDtcblxuICBpZiAob3B0aW9ucy5wb3B1cCAgJiYgIXRoaXMuX2dldENhbGxiYWNrT25Mb2NhdGlvbkhhc2gob3B0aW9ucykpIHtcbiAgICBwb3B1cCA9IHRoaXMuX2J1aWxkUG9wdXBXaW5kb3cob3B0aW9ucyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5wb3B1cCAgJiYgb3B0aW9ucy5zc28pIHtcbiAgICBwb3B1cCA9IHRoaXMuX2J1aWxkUG9wdXBXaW5kb3cob3B0aW9ucyk7XG4gIH1cblxuICBmdW5jdGlvbiBzdWNjZXNzICgpIHtcbiAgICBpZiAoJ2F1dG9fbG9naW4nIGluIG9wdGlvbnMgJiYgIW9wdGlvbnMuYXV0b19sb2dpbikge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlbGYubG9naW4ob3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gZmFpbCAoc3RhdHVzLCByZXNwKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IExvZ2luRXJyb3Ioc3RhdHVzLCByZXNwKTtcbiAgICBpZiAocG9wdXAgJiYgcG9wdXAua2lsbCkge1xuICAgICAgcG9wdXAua2lsbCgpO1xuICAgIH1cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG5cbiAgaWYgKHRoaXMuX3VzZUpTT05QKSB7XG4gICAgcmV0dXJuIGpzb25wKCdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL2RiY29ubmVjdGlvbnMvc2lnbnVwPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCBqc29ucE9wdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGZhaWwoMCwgZXJyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwLnN0YXR1cyA9PSAyMDAgP1xuICAgICAgICAgICAgICBzdWNjZXNzKCkgOlxuICAgICAgICAgICAgICBmYWlsKHJlc3Auc3RhdHVzLCByZXNwLmVycik7XG4gICAgfSk7XG4gIH1cblxuICByZXF3ZXN0KHtcbiAgICB1cmw6ICAgICAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9kYmNvbm5lY3Rpb25zL3NpZ251cCcsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICdodG1sJyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgIGNyb3NzT3JpZ2luOiB0cnVlLFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBmYWlsKGVyci5zdGF0dXMsIGVyci5yZXNwb25zZVRleHQpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIENoYW5nZSBwYXNzd29yZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5BdXRoMC5wcm90b3R5cGUuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHF1ZXJ5ID0ge1xuICAgIHRlbmFudDogICAgICAgICB0aGlzLl9kb21haW4uc3BsaXQoJy4nKVswXSxcbiAgICBjbGllbnRfaWQ6ICAgICAgdGhpcy5fY2xpZW50SUQsXG4gICAgY29ubmVjdGlvbjogICAgIG9wdGlvbnMuY29ubmVjdGlvbixcbiAgICB1c2VybmFtZTogICAgICAgdHJpbShvcHRpb25zLnVzZXJuYW1lIHx8ICcnKSxcbiAgICBlbWFpbDogICAgICAgICAgdHJpbShvcHRpb25zLmVtYWlsIHx8IG9wdGlvbnMudXNlcm5hbWUgfHwgJycpLFxuICAgIHBhc3N3b3JkOiAgICAgICBvcHRpb25zLnBhc3N3b3JkXG4gIH07XG5cblxuICBmdW5jdGlvbiBmYWlsIChzdGF0dXMsIHJlc3ApIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgTG9naW5FcnJvcihzdGF0dXMsIHJlc3ApO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fdXNlSlNPTlApIHtcbiAgICByZXR1cm4ganNvbnAoJ2h0dHBzOi8vJyArIHRoaXMuX2RvbWFpbiArICcvZGJjb25uZWN0aW9ucy9jaGFuZ2VfcGFzc3dvcmQ/JyArIHFzLnN0cmluZ2lmeShxdWVyeSksIGpzb25wT3B0cywgZnVuY3Rpb24gKGVyciwgcmVzcCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gZmFpbCgwLCBlcnIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3Auc3RhdHVzID09IDIwMCA/XG4gICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3AubWVzc2FnZSkgOlxuICAgICAgICAgICAgICBmYWlsKHJlc3Auc3RhdHVzLCByZXNwLmVycik7XG4gICAgfSk7XG4gIH1cblxuICByZXF3ZXN0KHtcbiAgICB1cmw6ICAgICAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9kYmNvbm5lY3Rpb25zL2NoYW5nZV9wYXNzd29yZCcsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICdodG1sJyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgZmFpbChlcnIuc3RhdHVzLCBlcnIucmVzcG9uc2VUZXh0KTtcbiAgICB9LFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCByKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBCdWlsZHMgcXVlcnkgc3RyaW5nIHRvIGJlIHBhc3NlZCB0byAvYXV0aG9yaXplIGJhc2VkIG9uIGRpY3Qga2V5IGFuZCB2YWx1ZXMuXG4gKlxuICogQG1ldGhvZCBfYnVpbGRBdXRob3JpemVRdWVyeVN0cmluZ1xuICogQHBhcmFtIHtBcnJheX0gYXJnc1xuICogQHBhcmFtIHtBcnJheX0gYmxhY2tsaXN0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5BdXRoMC5wcm90b3R5cGUuX2J1aWxkQXV0aG9yaXplUXVlcnlTdHJpbmcgPSBmdW5jdGlvbiAoYXJncywgYmxhY2tsaXN0KSB7XG4gIHZhciBxdWVyeSA9IHRoaXMuX2J1aWxkQXV0aG9yaXphdGlvblBhcmFtZXRlcnMoYXJncywgYmxhY2tsaXN0KTtcbiAgcmV0dXJuIHFzLnN0cmluZ2lmeShxdWVyeSk7XG59O1xuXG4vKipcbiAqIEJ1aWxkcyBwYXJhbWV0ZXIgZGljdGlvbmFyeSB0byBiZSBwYXNzZWQgdG8gL2F1dGhvcml6ZSBiYXNlZCBvbiBkaWN0IGtleSBhbmQgdmFsdWVzLlxuICpcbiAqIEBtZXRob2QgX2J1aWxkQXV0aG9yaXphdGlvblBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3NcbiAqIEBwYXJhbSB7QXJyYXl9IGJsYWNrbGlzdFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLl9idWlsZEF1dGhvcml6YXRpb25QYXJhbWV0ZXJzID0gZnVuY3Rpb24oYXJncywgYmxhY2tsaXN0KSB7XG4gIHZhciBxdWVyeSA9IHh0ZW5kLmFwcGx5KG51bGwsIGFyZ3MpO1xuXG4gIC8vIEFkZHMgb2ZmbGluZSBtb2RlIHRvIHRoZSBxdWVyeVxuICB0aGlzLl9jb25maWd1cmVPZmZsaW5lTW9kZShxdWVyeSk7XG5cbiAgLy8gRWxlbWVudHMgdG8gZmlsdGVyIGZyb20gcXVlcnkgc3RyaW5nXG4gIGJsYWNrbGlzdCA9IGJsYWNrbGlzdCB8fCBbJ3BvcHVwJywgJ3BvcHVwT3B0aW9ucyddO1xuXG4gIHZhciBpLCBrZXk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGJsYWNrbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGJsYWNrbGlzdFtpXTtcbiAgICBkZWxldGUgcXVlcnlba2V5XTtcbiAgfVxuXG4gIGlmIChxdWVyeS5jb25uZWN0aW9uX3Njb3BlICYmIGlzX2FycmF5KHF1ZXJ5LmNvbm5lY3Rpb25fc2NvcGUpKXtcbiAgICBxdWVyeS5jb25uZWN0aW9uX3Njb3BlID0gcXVlcnkuY29ubmVjdGlvbl9zY29wZS5qb2luKCcsJyk7XG4gIH1cblxuICByZXR1cm4gcXVlcnk7XG59O1xuXG4vKipcbiAqIExvZ2luIHVzZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmxvZ2luID0gQXV0aDAucHJvdG90eXBlLnNpZ25pbiA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy51c2VybmFtZSAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgIHR5cGVvZiBvcHRpb25zLmVtYWlsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzLmxvZ2luV2l0aFVzZXJuYW1lUGFzc3dvcmQob3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKCEhd2luZG93LmNvcmRvdmEpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dpblBob25lZ2FwKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghIW9wdGlvbnMucG9wdXAgJiYgdGhpcy5fZ2V0Q2FsbGJhY2tPbkxvY2F0aW9uSGFzaChvcHRpb25zKSkge1xuICAgIHJldHVybiB0aGlzLmxvZ2luV2l0aFBvcHVwKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBxdWVyeSA9IHRoaXMuX2J1aWxkQXV0aG9yaXplUXVlcnlTdHJpbmcoW1xuICAgIHRoaXMuX2dldE1vZGUob3B0aW9ucyksXG4gICAgb3B0aW9ucyxcbiAgICB7IGNsaWVudF9pZDogdGhpcy5fY2xpZW50SUQsIHJlZGlyZWN0X3VyaTogdGhpcy5fZ2V0Q2FsbGJhY2tVUkwob3B0aW9ucykgfVxuICBdKTtcblxuICB2YXIgdXJsID0gJ2h0dHBzOi8vJyArIHRoaXMuX2RvbWFpbiArICcvYXV0aG9yaXplPycgKyBxdWVyeTtcblxuICBpZiAob3B0aW9ucy5wb3B1cCkge1xuICAgIHRoaXMuX2J1aWxkUG9wdXBXaW5kb3cob3B0aW9ucywgdXJsKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9yZWRpcmVjdCh1cmwpO1xuICB9XG59O1xuXG4vKipcbiAqIENvbXB1dGUgYG9wdGlvbnMud2lkdGhgIGFuZCBgb3B0aW9ucy5oZWlnaHRgIGZvciB0aGUgcG9wdXAgdG9cbiAqIG9wZW4gYW5kIHJldHVybiBhbmQgZXh0ZW5kZWQgb2JqZWN0IHdpdGggb3B0aW1hbCBgdG9wYCBhbmQgYGxlZnRgXG4gKiBwb3NpdGlvbiBhcmd1bWVudHMgZm9yIHRoZSBwb3B1cCB3aW5kb3dzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkF1dGgwLnByb3RvdHlwZS5fY29tcHV0ZVBvcHVwUG9zaXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG5cbiAgdmFyIHNjcmVlblggPSB0eXBlb2Ygd2luZG93LnNjcmVlblggIT09ICd1bmRlZmluZWQnID8gd2luZG93LnNjcmVlblggOiB3aW5kb3cuc2NyZWVuTGVmdDtcbiAgdmFyIHNjcmVlblkgPSB0eXBlb2Ygd2luZG93LnNjcmVlblkgIT09ICd1bmRlZmluZWQnID8gd2luZG93LnNjcmVlblkgOiB3aW5kb3cuc2NyZWVuVG9wO1xuICB2YXIgb3V0ZXJXaWR0aCA9IHR5cGVvZiB3aW5kb3cub3V0ZXJXaWR0aCAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cub3V0ZXJXaWR0aCA6IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG4gIHZhciBvdXRlckhlaWdodCA9IHR5cGVvZiB3aW5kb3cub3V0ZXJIZWlnaHQgIT09ICd1bmRlZmluZWQnID8gd2luZG93Lm91dGVySGVpZ2h0IDogKGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IC0gMjIpO1xuICAvLyBYWFg6IHdoYXQgaXMgdGhlIDIyP1xuXG4gIC8vIFVzZSBgb3V0ZXJXaWR0aCAtIHdpZHRoYCBhbmQgYG91dGVySGVpZ2h0IC0gaGVpZ2h0YCBmb3IgaGVscCBpblxuICAvLyBwb3NpdGlvbmluZyB0aGUgcG9wdXAgY2VudGVyZWQgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgd2luZG93XG4gIHZhciBsZWZ0ID0gc2NyZWVuWCArIChvdXRlcldpZHRoIC0gd2lkdGgpIC8gMjtcbiAgdmFyIHRvcCA9IHNjcmVlblkgKyAob3V0ZXJIZWlnaHQgLSBoZWlnaHQpIC8gMjtcblxuICByZXR1cm4geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBsZWZ0OiBsZWZ0LCB0b3A6IHRvcCB9O1xufTtcblxuLyoqXG4gKiBsb2dpblBob25lZ2FwIG1ldGhvZCBpcyB0cmlnZ2VyZWQgd2hlbiAhIXdpbmRvdy5jb3Jkb3ZhIGlzIHRydWUuXG4gKlxuICogQG1ldGhvZCBsb2dpblBob25lZ2FwXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9ICAgIG9wdGlvbnMgICBMb2dpbiBvcHRpb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gIGNhbGxiYWNrICBUbyBiZSBjYWxsZWQgYWZ0ZXIgbG9naW4gaGFwcGVuZWQuIENhbGxiYWNrIGFyZ3VtZW50c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmU6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnIsIHByb2ZpbGUsIGlkVG9rZW4sIGFjY2Vzc1Rva2VuLCBzdGF0ZSlcbiAqXG4gKiBAZXhhbXBsZVxuICogICAgICB2YXIgYXV0aDAgPSBuZXcgQXV0aDAoeyBjbGllbnRJZDogJy4uLicsIGRvbWFpbjogJy4uLid9KTtcbiAqXG4gKiAgICAgIGF1dGgwLnNpZ25pbih7fSwgZnVuY3Rpb24gKGVyciwgcHJvZmlsZSwgaWRUb2tlbiwgYWNjZXNzVG9rZW4sIHN0YXRlKSB7XG4gKiAgICAgICAgaWYgKGVycikge1xuICogICAgICAgICBhbGVydChlcnIpO1xuICogICAgICAgICByZXR1cm47XG4gKiAgICAgICAgfVxuICpcbiAqICAgICAgICBhbGVydCgnV2VsY29tZSAnICsgcHJvZmlsZS5uYW1lKTtcbiAqICAgICAgfSk7XG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmxvZ2luUGhvbmVnYXAgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHRoaXMuX3Nob3VsZEF1dGhlbnRpY2F0ZVdpdGhDb3Jkb3ZhUGx1Z2luKG9wdGlvbnMuY29ubmVjdGlvbikpIHtcbiAgICB0aGlzLl9zb2NpYWxQaG9uZWdhcExvZ2luKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbW9iaWxlQ2FsbGJhY2tVUkwgPSAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9tb2JpbGUnO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBxdWVyeSA9IHRoaXMuX2J1aWxkQXV0aG9yaXplUXVlcnlTdHJpbmcoW1xuICAgIHRoaXMuX2dldE1vZGUob3B0aW9ucyksXG4gICAgb3B0aW9ucyxcbiAgICB7IGNsaWVudF9pZDogdGhpcy5fY2xpZW50SUQsIHJlZGlyZWN0X3VyaTogbW9iaWxlQ2FsbGJhY2tVUkx9XSk7XG5cbiAgICB2YXIgcG9wdXBVcmwgPSAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9hdXRob3JpemU/JyArIHF1ZXJ5O1xuXG4gICAgdmFyIHBvcHVwT3B0aW9ucyA9IHh0ZW5kKHtsb2NhdGlvbjogJ3llcyd9ICxcbiAgICAgIG9wdGlvbnMucG9wdXBPcHRpb25zKTtcblxuICAgIC8vIFRoaXMgd2Fzbid0IHNlbmQgYmVmb3JlIHNvIHdlIGRvbid0IHNlbmQgaXQgbm93IGVpdGhlclxuICAgIGRlbGV0ZSBwb3B1cE9wdGlvbnMud2lkdGg7XG4gICAgZGVsZXRlIHBvcHVwT3B0aW9ucy5oZWlnaHQ7XG5cblxuXG4gICAgdmFyIHJlZiA9IHdpbmRvdy5vcGVuKHBvcHVwVXJsLCAnX2JsYW5rJywgc3RyaW5naWZ5UG9wdXBTZXR0aW5ncyhwb3B1cE9wdGlvbnMpKTtcbiAgICB2YXIgYW5zd2VyZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihldmVudCkge1xuICAgICAgaWYgKGFuc3dlcmVkKSB7IHJldHVybjsgfVxuICAgICAgY2FsbGJhY2sobmV3IEVycm9yKGV2ZW50Lm1lc3NhZ2UpLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgIGFuc3dlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZWYuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydEhhbmRsZXIoZXZlbnQpIHtcbiAgICAgIGlmIChhbnN3ZXJlZCkgeyByZXR1cm47IH1cblxuICAgICAgaWYgKCBldmVudC51cmwgJiYgIShldmVudC51cmwuaW5kZXhPZihtb2JpbGVDYWxsYmFja1VSTCArICcjJykgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC51cmwuaW5kZXhPZihtb2JpbGVDYWxsYmFja1VSTCArICc/JykgPT09IDApKSB7IHJldHVybjsgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gc2VsZi5wYXJzZUhhc2goZXZlbnQudXJsLnNsaWNlKG1vYmlsZUNhbGxiYWNrVVJMLmxlbmd0aCkpO1xuXG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ0Vycm9yIHBhcnNpbmcgaGFzaCcpLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgYW5zd2VyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVmLmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQuaWRfdG9rZW4pIHtcbiAgICAgICAgc2VsZi5nZXRQcm9maWxlKHJlc3VsdC5pZF90b2tlbiwgZnVuY3Rpb24gKGVyciwgcHJvZmlsZSkge1xuICAgICAgICAgIGNhbGxiYWNrKGVyciwgcHJvZmlsZSwgcmVzdWx0LmlkX3Rva2VuLCByZXN1bHQuYWNjZXNzX3Rva2VuLCByZXN1bHQuc3RhdGUsIHJlc3VsdC5yZWZyZXNoX3Rva2VuKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFuc3dlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHJlZi5jbG9zZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBDYXNlIHdoZXJlIHdlJ3ZlIGZvdW5kIGFuIGVycm9yXG4gICAgICBjYWxsYmFjayhuZXcgRXJyb3IocmVzdWx0LmVyciB8fCByZXN1bHQuZXJyb3IgfHwgJ1NvbWV0aGluZyB3ZW50IHdyb25nJyksIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgYW5zd2VyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlZi5jbG9zZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4aXRIYW5kbGVyKCkge1xuICAgICAgaWYgKGFuc3dlcmVkKSB7IHJldHVybjsgfVxuXG4gICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ0Jyb3dzZXIgd2luZG93IGNsb3NlZCcpLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcblxuICAgICAgcmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWRlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgICByZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0Jywgc3RhcnRIYW5kbGVyKTtcbiAgICAgIHJlZi5yZW1vdmVFdmVudExpc3RlbmVyKCdleGl0JywgZXhpdEhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJlZi5hZGRFdmVudExpc3RlbmVyKCdsb2FkZXJyb3InLCBlcnJvckhhbmRsZXIpO1xuICAgIHJlZi5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBzdGFydEhhbmRsZXIpO1xuICAgIHJlZi5hZGRFdmVudExpc3RlbmVyKCdleGl0JywgZXhpdEhhbmRsZXIpO1xuXG59O1xuXG4vKipcbiAqIGxvZ2luV2l0aFBvcHVwIG1ldGhvZCBpcyB0cmlnZ2VyZWQgd2hlbiBsb2dpbiBtZXRob2QgcmVjZWl2ZXMgYSB7cG9wdXA6IHRydWV9IGluXG4gKiB0aGUgbG9naW4gb3B0aW9ucy5cbiAqXG4gKiBAbWV0aG9kIGxvZ2luV2l0aFBvcHVwXG4gKiBAcGFyYW0ge09iamVjdH0gICBvcHRpb25zICAgIExvZ2luIG9wdGlvbnMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAgIFRvIGJlIGNhbGxlZCBhZnRlciBsb2dpbiBoYXBwZW5lZCAod2hldGhlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIG9yIGZhaWx1cmUpLiBUaGlzIHBhcmFtZXRlciBpcyBtYW5kYXRvcnkgd2hlblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24gY2FsbGJhY2tPbkxvY2F0aW9uSGFzaCBpcyB0cnV0aHkgYnV0IHNob3VsZCBub3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgdXNlZCB3aGVuIGZhbHN5LlxuICogQGV4YW1wbGVcbiAqICAgICAgIHZhciBhdXRoMCA9IG5ldyBBdXRoMCh7IGNsaWVudElkOiAnLi4uJywgZG9tYWluOiAnLi4uJywgY2FsbGJhY2tPbkxvY2F0aW9uSGFzaDogdHJ1ZSB9KTtcbiAqXG4gKiAgICAgICAvLyBFcnJvciEgTm8gY2FsbGJhY2tcbiAqICAgICAgIGF1dGgwLmxvZ2luKHtwb3B1cDogdHJ1ZX0pO1xuICpcbiAqICAgICAgIC8vIE9rIVxuICogICAgICAgYXV0aDAubG9naW4oe3BvcHVwOiB0cnVlfSwgZnVuY3Rpb24gKCkgeyB9KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogICAgICAgdmFyIGF1dGgwID0gbmV3IEF1dGgwKHsgY2xpZW50SWQ6ICcuLi4nLCBkb21haW46ICcuLi4nfSk7XG4gKlxuICogICAgICAgLy8gT2shXG4gKiAgICAgICBhdXRoMC5sb2dpbih7cG9wdXA6IHRydWV9KTtcbiAqXG4gKiAgICAgICAvLyBFcnJvciEgTm8gY2FsbGJhY2sgd2lsbCBiZSBleGVjdXRlZCBvbiByZXNwb25zZV90eXBlPWNvZGVcbiAqICAgICAgIGF1dGgwLmxvZ2luKHtwb3B1cDogdHJ1ZX0sIGZ1bmN0aW9uICgpIHsgfSk7XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwLnByb3RvdHlwZS5sb2dpbldpdGhQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcigncG9wdXAgbW9kZSBzaG91bGQgcmVjZWl2ZSBhIG1hbmRhdG9yeSBjYWxsYmFjaycpO1xuICB9XG5cbiAgdmFyIHF1ZXJ5ID0gdGhpcy5fYnVpbGRBdXRob3JpemVRdWVyeVN0cmluZyhbXG4gICAgdGhpcy5fZ2V0TW9kZShvcHRpb25zKSxcbiAgICBvcHRpb25zLFxuICAgIHsgY2xpZW50X2lkOiB0aGlzLl9jbGllbnRJRCwgb3dwOiB0cnVlIH1dKTtcblxuXG4gIHZhciBwb3B1cFVybCA9ICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL2F1dGhvcml6ZT8nICsgcXVlcnk7XG5cbiAgdmFyIHBvcHVwT3B0aW9ucyA9IHh0ZW5kKFxuICAgIHNlbGYuX2NvbXB1dGVQb3B1cFBvc2l0aW9uKHtcbiAgICAgIHdpZHRoOiAob3B0aW9ucy5wb3B1cE9wdGlvbnMgJiYgb3B0aW9ucy5wb3B1cE9wdGlvbnMud2lkdGgpIHx8IDUwMCxcbiAgICAgIGhlaWdodDogKG9wdGlvbnMucG9wdXBPcHRpb25zICYmIG9wdGlvbnMucG9wdXBPcHRpb25zLmhlaWdodCkgfHwgNjAwXG4gIH0pLFxuICAgIG9wdGlvbnMucG9wdXBPcHRpb25zKTtcblxuXG4gIC8vIFRPRE8gRXJyb3JzIHNob3VsZCBiZSBMb2dpbkVycm9yIGZvciBjb25zaXN0ZW5jeVxuICB2YXIgcG9wdXAgPSBXaW5DaGFuLm9wZW4oe1xuICAgIHVybDogcG9wdXBVcmwsXG4gICAgcmVsYXlfdXJsOiAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9yZWxheS5odG1sJyxcbiAgICB3aW5kb3dfZmVhdHVyZXM6IHN0cmluZ2lmeVBvcHVwU2V0dGluZ3MocG9wdXBPcHRpb25zKVxuICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICAvLyBXaW5jaGFuIGFsd2F5cyByZXR1cm5zIHN0cmluZyBlcnJvcnMsIHdlIHdyYXAgdGhlbSBpbnNpZGUgRXJyb3Igb2JqZWN0c1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihlcnIpLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5pZF90b2tlbikge1xuICAgICAgcmV0dXJuIHNlbGYuZ2V0UHJvZmlsZShyZXN1bHQuaWRfdG9rZW4sIGZ1bmN0aW9uIChlcnIsIHByb2ZpbGUpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBwcm9maWxlLCByZXN1bHQuaWRfdG9rZW4sIHJlc3VsdC5hY2Nlc3NfdG9rZW4sIHJlc3VsdC5zdGF0ZSwgcmVzdWx0LnJlZnJlc2hfdG9rZW4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2FzZSB3aGVyZSB3ZSd2ZSBmb3VuZCBhbiBlcnJvclxuICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IocmVzdWx0ID8gcmVzdWx0LmVyciA6ICdTb21ldGhpbmcgd2VudCB3cm9uZycpLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgfSk7XG5cbiAgcG9wdXAuZm9jdXMoKTtcbn07XG5cbi8qKlxuICogX3Nob3VsZEF1dGhlbnRpY2F0ZVdpdGhDb3Jkb3ZhUGx1Z2luIG1ldGhvZCBjaGVja3Mgd2hldGhlciBBdXRoMCBpcyBwcm9wZXJseSBjb25maWd1cmVkIHRvXG4gKiBoYW5kbGUgYXV0aGVudGljYXRpb24gb2YgYSBzb2NpYWwgY29ubm5lY3Rpb24gdXNpbmcgYSBwaG9uZWdhcCBwbHVnaW4uXG4gKlxuICogQG1ldGhvZCBfc2hvdWxkQXV0aGVudGljYXRlV2l0aENvcmRvdmFQbHVnaW5cbiAqIEBwYXJhbSB7U3RyaW5nfSAgIGNvbm5lY3Rpb24gICAgTmFtZSBvZiB0aGUgY29ubmVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLl9zaG91bGRBdXRoZW50aWNhdGVXaXRoQ29yZG92YVBsdWdpbiA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgdmFyIHNvY2lhbFBsdWdpbiA9IHRoaXMuX2NvcmRvdmFTb2NpYWxQbHVnaW5zW2Nvbm5lY3Rpb25dO1xuICByZXR1cm4gdGhpcy5fdXNlQ29yZG92YVNvY2lhbFBsdWdpbnMgJiYgISFzb2NpYWxQbHVnaW47XG59O1xuXG4vKipcbiAqIF9zb2NpYWxQaG9uZWdhcExvZ2luIHBlcmZvcm1zIHNvY2lhbCBhdXRoZW50aWNhdGlvbiB1c2luZyBhIHBob25lZ2FwIHBsdWdpblxuICpcbiAqIEBtZXRob2QgX3NvY2lhbFBob25lZ2FwTG9naW5cbiAqIEBwYXJhbSB7U3RyaW5nfSAgIGNvbm5lY3Rpb24gICBOYW1lIG9mIHRoZSBjb25uZWN0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgICAgIFRvIGJlIGNhbGxlZCBhZnRlciBsb2dpbiBoYXBwZW5lZCAod2hldGhlclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3Mgb3IgZmFpbHVyZSkuXG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwLnByb3RvdHlwZS5fc29jaWFsUGhvbmVnYXBMb2dpbiA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzb2NpYWxBdXRoZW50aWNhdGlvbiA9IHRoaXMuX2NvcmRvdmFTb2NpYWxQbHVnaW5zW29wdGlvbnMuY29ubmVjdGlvbl07XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc29jaWFsQXV0aGVudGljYXRpb24ob3B0aW9ucy5jb25uZWN0aW9uX3Njb3BlLCBmdW5jdGlvbihlcnJvciwgYWNjZXNzVG9rZW4sIGV4dHJhcykge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbG9naW5PcHRpb25zID0geHRlbmQoeyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH0sIG9wdGlvbnMsIGV4dHJhcyk7XG4gICAgc2VsZi5sb2dpbldpdGhTb2NpYWxBY2Nlc3NUb2tlbihsb2dpbk9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIF9waG9uZWdhcEZhY2Vib29rTG9naW4gcGVyZm9ybXMgc29jaWFsIGF1dGhlbnRpY2F0aW9uIHdpdGggRmFjZWJvb2sgdXNpbmcgcGhvbmVnYXAtZmFjZWJvb2stcGx1Z2luXG4gKlxuICogQG1ldGhvZCBfcGhvbmVnYXBGYWNlYm9va0xvZ2luXG4gKiBAcGFyYW0ge09iamVjdH0gICBzY29wZXMgICAgIEZCIHNjb3BlcyB1c2VkIHRvIGxvZ2luLiBJdCBjYW4gYmUgYW4gQXJyYXkgb2YgU3RyaW5nIG9yIGEgc2luZ2xlIFN0cmluZy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCBpcyBbXCJwdWJsaWNfcHJvZmlsZVwiXVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgICBUbyBiZSBjYWxsZWQgYWZ0ZXIgbG9naW4gaGFwcGVuZWQgKHdoZXRoZXIgc3VjY2VzcyBvciBmYWlsdXJlKS4gSXQgd2lsbFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB0aGUgYWNjZXNzVG9rZW4gYW5kIGFueSBleHRyYSBpbmZvcm1hdGlvbiBuZWVlZGVkIGJ5IEF1dGgwIEFQSVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBFcnJvciBpZiB0aGUgYXV0aGVudGljYXRpb24gZmFpbHMuIENhbGxiYWNrIHNob3VsZCBiZTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgYWNjZXNzVG9rZW4sIGV4dHJhcykgeyB9XG4gKiBAcHJpdmF0ZVxuICovXG5cbkF1dGgwLnByb3RvdHlwZS5fcGhvbmVnYXBGYWNlYm9va0xvZ2luID0gZnVuY3Rpb24oc2NvcGVzLCBjYWxsYmFjaykge1xuICBpZiAoIXdpbmRvdy5mYWNlYm9va0Nvbm5lY3RQbHVnaW4gfHwgIXdpbmRvdy5mYWNlYm9va0Nvbm5lY3RQbHVnaW4ubG9naW4pIHtcbiAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ21pc3NpbmcgcGx1Z2luIHBob25lZ2FwLWZhY2Vib29rLXBsdWdpbicpLCBudWxsLCBudWxsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZmJTY29wZXM7XG4gIGlmIChzY29wZXMgJiYgaXNfYXJyYXkoc2NvcGVzKSl7XG4gICAgZmJTY29wZXMgPSBzY29wZXM7XG4gIH0gZWxzZSBpZiAoc2NvcGVzKSB7XG4gICAgZmJTY29wZXMgPSBbc2NvcGVzXTtcbiAgfSBlbHNlIHtcbiAgICBmYlNjb3BlcyA9IFsncHVibGljX3Byb2ZpbGUnXTtcbiAgfVxuICB3aW5kb3cuZmFjZWJvb2tDb25uZWN0UGx1Z2luLmxvZ2luKGZiU2NvcGVzLCBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICBjYWxsYmFjayhudWxsLCBzdGF0ZS5hdXRoUmVzcG9uc2UuYWNjZXNzVG9rZW4sIHt9KTtcbiAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBjYWxsYmFjayhuZXcgRXJyb3IoZXJyb3IpLCBudWxsLCBudWxsKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGhhbmRsZXMgdGhlIHNjZW5hcmlvIHdoZXJlIGEgZGIgY29ubmVjdGlvbiBpcyB1c2VkIHdpdGhcbiAqIHBvcHVwOiB0cnVlIGFuZCBzc286IHRydWUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuQXV0aDAucHJvdG90eXBlLmxvZ2luV2l0aFVzZXJuYW1lUGFzc3dvcmRBbmRTU08gPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcG9wdXBPcHRpb25zID0geHRlbmQoXG4gICAgc2VsZi5fY29tcHV0ZVBvcHVwUG9zaXRpb24oe1xuICAgICAgd2lkdGg6IChvcHRpb25zLnBvcHVwT3B0aW9ucyAmJiBvcHRpb25zLnBvcHVwT3B0aW9ucy53aWR0aCkgfHwgNTAwLFxuICAgICAgaGVpZ2h0OiAob3B0aW9ucy5wb3B1cE9wdGlvbnMgJiYgb3B0aW9ucy5wb3B1cE9wdGlvbnMuaGVpZ2h0KSB8fCA2MDBcbiAgfSksXG4gICAgb3B0aW9ucy5wb3B1cE9wdGlvbnMpO1xuXG4gIC8vIFRPRE8gUmVmYWN0b3IgdGhpcyB3aXRoIHRoZSBvdGhlciB3aW5jaGFuIGxvZ2ljIGZvciBsb2dpbldpdGhQb3B1cC5cbiAgdmFyIHBvcHVwID0gV2luQ2hhbi5vcGVuKHtcbiAgICB1cmw6ICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL3Nzb19kYmNvbm5lY3Rpb25fcG9wdXAvJyArIHRoaXMuX2NsaWVudElELFxuICAgIHJlbGF5X3VybDogJ2h0dHBzOi8vJyArIHRoaXMuX2RvbWFpbiArICcvcmVsYXkuaHRtbCcsXG4gICAgd2luZG93X2ZlYXR1cmVzOiBzdHJpbmdpZnlQb3B1cFNldHRpbmdzKHBvcHVwT3B0aW9ucyksXG4gICAgcG9wdXA6IHRoaXMuX2N1cnJlbnRfcG9wdXAsXG4gICAgcGFyYW1zOiB7XG4gICAgICBkb21haW46ICAgICAgICAgICAgICAgICB0aGlzLl9kb21haW4sXG4gICAgICBjbGllbnRJRDogICAgICAgICAgICAgICB0aGlzLl9jbGllbnRJRCxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgLy8gVE9ETyBXaGF0IGhhcHBlbnMgd2l0aCBpMThuP1xuICAgICAgICB1c2VybmFtZTogICBvcHRpb25zLnVzZXJuYW1lLFxuICAgICAgICBwYXNzd29yZDogICBvcHRpb25zLnBhc3N3b3JkLFxuICAgICAgICBjb25uZWN0aW9uOiBvcHRpb25zLmNvbm5lY3Rpb24sXG4gICAgICAgIHN0YXRlOiAgICAgIG9wdGlvbnMuc3RhdGVcbiAgICAgIH1cbiAgICB9XG4gIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIC8vIFdpbmNoYW4gYWx3YXlzIHJldHVybnMgc3RyaW5nIGVycm9ycywgd2Ugd3JhcCB0aGVtIGluc2lkZSBFcnJvciBvYmplY3RzXG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IExvZ2luRXJyb3IoZXJyKSwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuaWRfdG9rZW4pIHtcbiAgICAgIHJldHVybiBzZWxmLmdldFByb2ZpbGUocmVzdWx0LmlkX3Rva2VuLCBmdW5jdGlvbiAoZXJyLCBwcm9maWxlKSB7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgcHJvZmlsZSwgcmVzdWx0LmlkX3Rva2VuLCByZXN1bHQuYWNjZXNzX3Rva2VuLCByZXN1bHQuc3RhdGUsIHJlc3VsdC5yZWZyZXNoX3Rva2VuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENhc2Ugd2UndmUgZm91bmQgYW4gZXJyb3JcbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0ICYmIHJlc3VsdC5lcnIgP1xuICAgICAgICAgICAgICAgICAgICBuZXcgTG9naW5FcnJvcihyZXN1bHQuZXJyLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmVyciAmJiByZXN1bHQuZXJyLmRldGFpbHMgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnIuZGV0YWlscyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmVycikgOlxuICAgICAgICAgICAgICAgICAgICBuZXcgTG9naW5FcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcnKSxcbiAgICAgICAgICAgIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICB9KTtcblxuICBwb3B1cC5mb2N1cygpO1xufTtcblxuLyoqXG4gKiBMb2dpbiB3aXRoIFJlc291cmNlIE93bmVyIChSTylcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmxvZ2luV2l0aFJlc291cmNlT3duZXIgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcXVlcnkgPSB4dGVuZChcbiAgICB0aGlzLl9nZXRNb2RlKG9wdGlvbnMpLFxuICAgIG9wdGlvbnMsXG4gICAge1xuICAgICAgY2xpZW50X2lkOiAgICB0aGlzLl9jbGllbnRJRCxcbiAgICAgIHVzZXJuYW1lOiAgICAgdHJpbShvcHRpb25zLnVzZXJuYW1lIHx8IG9wdGlvbnMuZW1haWwgfHwgJycpLFxuICAgICAgZ3JhbnRfdHlwZTogICAncGFzc3dvcmQnXG4gICAgfSk7XG5cbiAgdGhpcy5fY29uZmlndXJlT2ZmbGluZU1vZGUocXVlcnkpO1xuXG4gIHZhciBlbmRwb2ludCA9ICcvb2F1dGgvcm8nO1xuXG4gIGZ1bmN0aW9uIGVucmljaEdldFByb2ZpbGUocmVzcCwgY2FsbGJhY2spIHtcbiAgICBzZWxmLmdldFByb2ZpbGUocmVzcC5pZF90b2tlbiwgZnVuY3Rpb24gKGVyciwgcHJvZmlsZSkge1xuICAgICAgY2FsbGJhY2soZXJyLCBwcm9maWxlLCByZXNwLmlkX3Rva2VuLCByZXNwLmFjY2Vzc190b2tlbiwgcmVzcC5zdGF0ZSwgcmVzcC5yZWZyZXNoX3Rva2VuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCBqc29ucE9wdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3ApIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IExvZ2luRXJyb3IocmVzcC5zdGF0dXMsIHJlc3AuZXJyb3IpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfVxuICAgICAgZW5yaWNoR2V0UHJvZmlsZShyZXNwLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICByZXF3ZXN0KHtcbiAgICB1cmw6ICAgICAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICdqc29uJyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgZW5yaWNoR2V0UHJvZmlsZShyZXNwLCBjYWxsYmFjayk7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgdmFyIGVyID0gZXJyO1xuICAgICAgaWYgKCFlci5zdGF0dXMgfHwgZXIuc3RhdHVzID09PSAwKSB7IC8vaWUxMCB0cmlja1xuICAgICAgICBlciA9IHt9O1xuICAgICAgICBlci5zdGF0dXMgPSA0MDE7XG4gICAgICAgIGVyLnJlc3BvbnNlVGV4dCA9IHtcbiAgICAgICAgICBjb2RlOiAnaW52YWxpZF91c2VyX3Bhc3N3b3JkJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVyLnJlc3BvbnNlVGV4dCA9IGVycjtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IG5ldyBMb2dpbkVycm9yKGVyLnN0YXR1cywgZXIucmVzcG9uc2VUZXh0KTtcbiAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBMb2dpbiB3aXRoIFNvY2lhbCBBY2Nlc3MgVG9rZW5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmxvZ2luV2l0aFNvY2lhbEFjY2Vzc1Rva2VuID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5fYnVpbGRBdXRob3JpemF0aW9uUGFyYW1ldGVycyhbXG4gICAgICB7IHNjb3BlOiAnb3BlbmlkJyB9LFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHsgY2xpZW50X2lkOiB0aGlzLl9jbGllbnRJRCB9XG4gICAgXSk7XG5cbiAgdmFyIGVuZHBvaW50ID0gJy9vYXV0aC9hY2Nlc3NfdG9rZW4nO1xuXG4gIGZ1bmN0aW9uIGVucmljaEdldFByb2ZpbGUocmVzcCwgY2FsbGJhY2spIHtcbiAgICBzZWxmLmdldFByb2ZpbGUocmVzcC5pZF90b2tlbiwgZnVuY3Rpb24gKGVyciwgcHJvZmlsZSkge1xuICAgICAgY2FsbGJhY2soZXJyLCBwcm9maWxlLCByZXNwLmlkX3Rva2VuLCByZXNwLmFjY2Vzc190b2tlbiwgcmVzcC5zdGF0ZSwgcmVzcC5yZWZyZXNoX3Rva2VuKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCBqc29ucE9wdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3ApIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IExvZ2luRXJyb3IocmVzcC5zdGF0dXMsIHJlc3AuZXJyb3IpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfVxuICAgICAgZW5yaWNoR2V0UHJvZmlsZShyZXNwLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICByZXF3ZXN0KHtcbiAgICB1cmw6ICAgICAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICdqc29uJyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgZW5yaWNoR2V0UHJvZmlsZShyZXNwLCBjYWxsYmFjayk7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgdmFyIGVyID0gZXJyO1xuICAgICAgaWYgKCFlci5zdGF0dXMgfHwgZXIuc3RhdHVzID09PSAwKSB7IC8vaWUxMCB0cmlja1xuICAgICAgICBlciA9IHt9O1xuICAgICAgICBlci5zdGF0dXMgPSA0MDE7XG4gICAgICAgIGVyLnJlc3BvbnNlVGV4dCA9IHtcbiAgICAgICAgICBjb2RlOiAnaW52YWxpZF9yZXF1ZXN0J1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVyLnJlc3BvbnNlVGV4dCA9IGVycjtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IG5ldyBMb2dpbkVycm9yKGVyLnN0YXR1cywgZXIucmVzcG9uc2VUZXh0KTtcbiAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBPcGVuIGEgcG9wdXAsIHN0b3JlIHRoZSB3aW5yZWYgaW4gdGhlIGluc3RhbmNlIGFuZCByZXR1cm4gaXQuXG4gKlxuICogV2UgdXN1YWxseSBuZWVkIHRvIGNhbGwgdGhpcyBtZXRob2QgYmVmb3JlIGFueSBhamF4IHRyYW5zYWN0aW9uIGluIG9yZGVyXG4gKiB0byBwcmV2ZW50IHRoZSBicm93c2VyIHRvIGJsb2NrIHRoZSBwb3B1cC5cbiAqXG4gKiBAcGFyYW0gIHtbdHlwZV19ICAgb3B0aW9ucyAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLl9idWlsZFBvcHVwV2luZG93ID0gZnVuY3Rpb24gKG9wdGlvbnMsIHVybCkge1xuICBpZiAodGhpcy5fY3VycmVudF9wb3B1cCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50X3BvcHVwO1xuICB9XG5cbiAgdmFyIHBvcHVwT3B0aW9ucyA9IHN0cmluZ2lmeVBvcHVwU2V0dGluZ3MoeHRlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHsgd2lkdGg6IDUwMCwgaGVpZ2h0OiA2MDAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wdGlvbnMucG9wdXBPcHRpb25zIHx8IHt9KSkpO1xuXG4gIHRoaXMuX2N1cnJlbnRfcG9wdXAgPSB3aW5kb3cub3Blbih1cmwgfHwgJ2Fib3V0OmJsYW5rJywgJ2F1dGgwX3NpZ251cF9wb3B1cCcscG9wdXBPcHRpb25zKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5fY3VycmVudF9wb3B1cC5raWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgICBkZWxldGUgc2VsZi5fY3VycmVudF9wb3B1cDtcbiAgfTtcblxuICByZXR1cm4gdGhpcy5fY3VycmVudF9wb3B1cDtcbn07XG5cbi8qKlxuICogTG9naW4gd2l0aCBVc2VybmFtZSBhbmQgUGFzc3dvcmRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdWNudGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmxvZ2luV2l0aFVzZXJuYW1lUGFzc3dvcmQgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgLy8gWFhYOiBXYXJuaW5nOiBUaGlzIGNoZWNrIGlzIHdoZXRoZXIgY2FsbGJhY2sgYXJndW1lbnRzIGFyZVxuICAvLyBmbihlcnIpIGNhc2UgY2FsbGJhY2subGVuZ3RoID09PSAxIChhIHJlZGlyZWN0IHNob3VsZCBiZSBwZXJmb3JtZWQpIHZzLlxuICAvLyBmbihlcnIsIHByb2ZpbGUsIGlkX3Rva2VuLCBhY2Nlc3NfdG9rZW4sIHN0YXRlKSBjYWxsYmFjay5sZW5ndGggPiAxIChub1xuICAvLyByZWRpcmVjdCBzaG91bGQgYmUgcGVyZm9ybWVkKVxuICBpZiAoY2FsbGJhY2sgJiYgY2FsbGJhY2subGVuZ3RoID4gMSAmJiAhb3B0aW9ucy5zc28pIHtcbiAgICByZXR1cm4gdGhpcy5sb2dpbldpdGhSZXNvdXJjZU93bmVyKG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHBvcHVwO1xuXG4gIC8vIFRPRE8gV2Ugc2hvdWxkIGRlcHJlY2F0ZSB0aGlzLCByZWFsbHkgaGFja3kgYW5kIGNvbmZ1c2VzIHBlb3BsZS5cbiAgaWYgKG9wdGlvbnMucG9wdXAgICYmICF0aGlzLl9nZXRDYWxsYmFja09uTG9jYXRpb25IYXNoKG9wdGlvbnMpKSB7XG4gICAgcG9wdXAgPSB0aGlzLl9idWlsZFBvcHVwV2luZG93KG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucG9wdXAgJiYgb3B0aW9ucy5zc28gKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naW5XaXRoVXNlcm5hbWVQYXNzd29yZEFuZFNTTyhvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cblxuXG4gIHZhciBxdWVyeSA9IHh0ZW5kKFxuICAgIHRoaXMuX2dldE1vZGUob3B0aW9ucyksXG4gICAgb3B0aW9ucyxcbiAgICB7XG4gICAgICBjbGllbnRfaWQ6IHRoaXMuX2NsaWVudElELFxuICAgICAgcmVkaXJlY3RfdXJpOiB0aGlzLl9nZXRDYWxsYmFja1VSTChvcHRpb25zKSxcbiAgICAgIHVzZXJuYW1lOiB0cmltKG9wdGlvbnMudXNlcm5hbWUgfHwgb3B0aW9ucy5lbWFpbCB8fCAnJyksXG4gICAgICB0ZW5hbnQ6IHRoaXMuX2RvbWFpbi5zcGxpdCgnLicpWzBdXG4gICAgfSk7XG5cbiAgdGhpcy5fY29uZmlndXJlT2ZmbGluZU1vZGUocXVlcnkpO1xuXG4gIHZhciBlbmRwb2ludCA9ICcvdXNlcm5hbWVwYXNzd29yZC9sb2dpbic7XG5cbiAgaWYgKHRoaXMuX3VzZUpTT05QKSB7XG4gICAgcmV0dXJuIGpzb25wKCdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyBlbmRwb2ludCArICc/JyArIHFzLnN0cmluZ2lmeShxdWVyeSksIGpzb25wT3B0cywgZnVuY3Rpb24gKGVyciwgcmVzcCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAocG9wdXAgJiYgcG9wdXAua2lsbCkgeyBwb3B1cC5raWxsKCk7IH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3ApIHtcbiAgICAgICAgaWYgKHBvcHVwICYmIHBvcHVwLmtpbGwpIHsgcG9wdXAua2lsbCgpOyB9XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBMb2dpbkVycm9yKHJlc3Auc3RhdHVzLCByZXNwLmVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH1cbiAgICAgIHNlbGYuX3JlbmRlckFuZFN1Ym1pdFdTRmVkRm9ybShvcHRpb25zLCByZXNwLmZvcm0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV0dXJuX2Vycm9yIChlcnJvcikge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICByZXF3ZXN0KHtcbiAgICB1cmw6ICAgICAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICdodG1sJyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgc2VsZi5fcmVuZGVyQW5kU3VibWl0V1NGZWRGb3JtKG9wdGlvbnMsIHJlc3ApO1xuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHZhciBlciA9IGVycjtcbiAgICAgIGlmIChwb3B1cCAmJiBwb3B1cC5raWxsKSB7XG4gICAgICAgIHBvcHVwLmtpbGwoKTtcbiAgICAgIH1cbiAgICAgIGlmICghZXIuc3RhdHVzIHx8IGVyLnN0YXR1cyA9PT0gMCkgeyAvL2llMTAgdHJpY2tcbiAgICAgICAgZXIgPSB7fTtcbiAgICAgICAgZXIuc3RhdHVzID0gNDAxO1xuICAgICAgICBlci5yZXNwb25zZVRleHQgPSB7XG4gICAgICAgICAgY29kZTogJ2ludmFsaWRfdXNlcl9wYXNzd29yZCdcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IG5ldyBMb2dpbkVycm9yKGVyLnN0YXR1cywgZXIucmVzcG9uc2VUZXh0KTtcbiAgICAgIHJldHVybiByZXR1cm5fZXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5BdXRoMC5wcm90b3R5cGUucmVuZXdJZFRva2VuID0gZnVuY3Rpb24gKGlkX3Rva2VuLCBjYWxsYmFjaykge1xuICB0aGlzLmdldERlbGVnYXRpb25Ub2tlbih7XG4gICAgaWRfdG9rZW46IGlkX3Rva2VuLFxuICAgIHNjb3BlOiAncGFzc3Rocm91Z2gnLFxuICAgIGFwaTogJ2F1dGgwJ1xuICB9LCBjYWxsYmFjayk7XG59O1xuXG5BdXRoMC5wcm90b3R5cGUucmVmcmVzaFRva2VuID0gZnVuY3Rpb24gKHJlZnJlc2hfdG9rZW4sIGNhbGxiYWNrKSB7XG4gIHRoaXMuZ2V0RGVsZWdhdGlvblRva2VuKHtcbiAgICByZWZyZXNoX3Rva2VuOiByZWZyZXNoX3Rva2VuLFxuICAgIHNjb3BlOiAncGFzc3Rocm91Z2gnLFxuICAgIGFwaTogJ2F1dGgwJ1xuICB9LCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEdldCBkZWxlZ2F0aW9uIHRva2VuIGZvciBjZXJ0YWluIGFkZG9uIG9yIGNlcnRhaW4gb3RoZXIgY2xpZW50SWRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICBhdXRoMC5nZXREZWxlZ2F0aW9uVG9rZW4oe1xuICogICAgICBpZF90b2tlbjogICAnPHVzZXItaWQtdG9rZW4+JyxcbiAqICAgICAgdGFyZ2V0OiAgICAgJzxhcHAtY2xpZW50LWlkPidcbiAqICAgICAgYXBpX3R5cGU6ICdhdXRoMCdcbiAqICAgICB9LCBmdW5jdGlvbiAoZXJyLCBkZWxlZ2F0aW9uUmVzdWx0KSB7XG4gKiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcbiAqICAgICAgICAvLyBEbyBzdHVmZiB3aXRoIGRlbGVnYXRpb24gdG9rZW5cbiAqICAgICAgICBleHBlY3QoZGVsZWdhdGlvblJlc3VsdC5pZF90b2tlbikudG8uZXhpc3Q7XG4gKiAgICAgICAgZXhwZWN0KGRlbGVnYXRpb25SZXN1bHQudG9rZW5fdHlwZSkudG8uZXFsKCdCZWFyZXInKTtcbiAqICAgICAgICBleHBlY3QoZGVsZWdhdGlvblJlc3VsdC5leHBpcmVzX2luKS50by5lcWwoMzYwMDApO1xuICogICAgIH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICAvLyBnZXQgYSBkZWxlZ2F0aW9uIHRva2VuIGZyb20gYSBGaXJlYmFzZSBBUEkgQXBwXG4gICogICAgIGF1dGgwLmdldERlbGVnYXRpb25Ub2tlbih7XG4gKiAgICAgIGlkX3Rva2VuOiAgICc8dXNlci1pZC10b2tlbj4nLFxuICogICAgICB0YXJnZXQ6ICAgICAnPGFwcC1jbGllbnQtaWQ+J1xuICogICAgICBhcGlfdHlwZTogJ2ZpcmViYXNlJ1xuICogICAgIH0sIGZ1bmN0aW9uIChlcnIsIGRlbGVnYXRpb25SZXN1bHQpIHtcbiAqICAgICAgLy8gVXNlIHlvdXIgZmlyZWJhc2UgdG9rZW4gaGVyZVxuICogICAgfSk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogIEBwYXJhbSB7U3RyaW5nfSBbaWRfdG9rZW5dXG4gKiAgQHBhcmFtIHtTdHJpbmd9IFt0YXJnZXRdXG4gKiAgQHBhcmFtIHtTdHJpbmd9IFthcGlfdHlwZV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja11cbiAqIEBhcGkgcHVibGljXG4gKi9cbkF1dGgwLnByb3RvdHlwZS5nZXREZWxlZ2F0aW9uVG9rZW4gPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKCFvcHRpb25zLmlkX3Rva2VuICYmICFvcHRpb25zLnJlZnJlc2hfdG9rZW4gKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBzZW5kIGVpdGhlciBhbiBpZF90b2tlbiBvciBhIHJlZnJlc2hfdG9rZW4gdG8gZ2V0IGEgZGVsZWdhdGlvbiB0b2tlbi4nKTtcbiAgfVxuXG4gIHZhciBxdWVyeSA9IHh0ZW5kKHtcbiAgICBncmFudF90eXBlOiAndXJuOmlldGY6cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6and0LWJlYXJlcicsXG4gICAgY2xpZW50X2lkOiAgdGhpcy5fY2xpZW50SUQsXG4gICAgdGFyZ2V0OiBvcHRpb25zLnRhcmdldENsaWVudElkIHx8IHRoaXMuX2NsaWVudElELFxuICAgIGFwaV90eXBlOiBvcHRpb25zLmFwaVxuICB9LCBvcHRpb25zKTtcblxuICBkZWxldGUgcXVlcnkuaGFzT3duUHJvcGVydHk7XG4gIGRlbGV0ZSBxdWVyeS50YXJnZXRDbGllbnRJZDtcbiAgZGVsZXRlIHF1ZXJ5LmFwaTtcblxuICB2YXIgZW5kcG9pbnQgPSAnL2RlbGVnYXRpb24nO1xuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCBqc29ucE9wdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3ApIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IExvZ2luRXJyb3IocmVzcC5zdGF0dXMsIHJlc3AuZXJyb3JfZGVzY3JpcHRpb24gfHwgcmVzcC5lcnJvcik7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCByZXNwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlcXdlc3Qoe1xuICAgIHVybDogICAgICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyBlbmRwb2ludCxcbiAgICBtZXRob2Q6ICAncG9zdCcsXG4gICAgdHlwZTogICAgJ2pzb24nLFxuICAgIGRhdGE6ICAgIHF1ZXJ5LFxuICAgIGNyb3NzT3JpZ2luOiB0cnVlLFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCByZXNwKTtcbiAgICB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYWxsYmFjayhKU09OLnBhcnNlKGVyci5yZXNwb25zZVRleHQpKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHZhciBlciA9IGVycjtcbiAgICAgICAgaWYgKCFlci5zdGF0dXMgfHwgZXIuc3RhdHVzID09PSAwKSB7IC8vaWUxMCB0cmlja1xuICAgICAgICAgIGVyID0ge307XG4gICAgICAgICAgZXIuc3RhdHVzID0gNDAxO1xuICAgICAgICAgIGVyLnJlc3BvbnNlVGV4dCA9IHtcbiAgICAgICAgICAgIGNvZGU6ICdpbnZhbGlkX29wZXJhdGlvbidcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKG5ldyBMb2dpbkVycm9yKGVyLnN0YXR1cywgZXIucmVzcG9uc2VUZXh0KSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogVHJpZ2dlciBsb2dvdXQgcmVkaXJlY3Qgd2l0aFxuICogcGFyYW1zIGZyb20gYHF1ZXJ5YCBvYmplY3RcbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgYXV0aDAubG9nb3V0KCk7XG4gKiAgICAgLy8gcmVkaXJlY3RzIHRvIC0+ICdodHRwczovL3lvdXJhcHAuYXV0aDAuY29tL2xvZ291dCdcbiAqXG4gKiAgICAgYXV0aDAubG9nb3V0KHtyZXR1cm5UbzogJ2h0dHA6Ly9sb2dvdXQnfSk7XG4gKiAgICAgLy8gcmVkaXJlY3RzIHRvIC0+ICdodHRwczovL3lvdXJhcHAuYXV0aDAuY29tL2xvZ291dD9yZXR1cm5Ubz1odHRwOi8vbG9nb3V0J1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5BdXRoMC5wcm90b3R5cGUubG9nb3V0ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gIHZhciB1cmwgPSAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9sb2dvdXQnO1xuICBpZiAocXVlcnkpIHtcbiAgICB1cmwgKz0gJz8nICsgcXMuc3RyaW5naWZ5KHF1ZXJ5KTtcbiAgfVxuICB0aGlzLl9yZWRpcmVjdCh1cmwpO1xufTtcblxuLyoqXG4gKiBHZXQgc2luZ2xlIHNpZ24gb24gRGF0YVxuICpcbiAqIEV4YW1wbGVzOlxuICogICAgIGF1dGgwLmdldFNTT0RhdGEoZnVuY3Rpb24gKGVyciwgc3NvRGF0YSkge1xuICogICAgICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcbiAqICAgICAgIGV4cGVjdChzc29EYXRhLnNzbykudG8uZXhpc3Q7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGF1dGgwLmdldFNTT0RhdGEoZmFsc2UsIGZuKTtcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdpdGhBY3RpdmVEaXJlY3Rvcmllc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXV0aDAucHJvdG90eXBlLmdldFNTT0RhdGEgPSBmdW5jdGlvbiAod2l0aEFjdGl2ZURpcmVjdG9yaWVzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHdpdGhBY3RpdmVEaXJlY3RvcmllcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gd2l0aEFjdGl2ZURpcmVjdG9yaWVzO1xuICAgIHdpdGhBY3RpdmVEaXJlY3RvcmllcyA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVybCA9ICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL3VzZXIvc3NvZGF0YSc7XG5cbiAgaWYgKHdpdGhBY3RpdmVEaXJlY3Rvcmllcykge1xuICAgIHVybCArPSAnPycgKyBxcy5zdHJpbmdpZnkoe2xkYXBzOiAxLCBjbGllbnRfaWQ6IHRoaXMuX2NsaWVudElEfSk7XG4gIH1cblxuICAvLyBvdmVycmlkZSB0aW1lb3V0XG4gIHZhciBqc29ucE9wdGlvbnMgPSB4dGVuZCh7fSwganNvbnBPcHRzLCB7IHRpbWVvdXQ6IDMwMDAgfSk7XG5cbiAgcmV0dXJuIGpzb25wKHVybCwganNvbnBPcHRpb25zLCBmdW5jdGlvbiAoZXJyLCByZXNwKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgZXJyID8ge3NzbzpmYWxzZX0gOiByZXNwKTsgLy8gQWx3YXlzIHJldHVybiBPSywgcmVnYXJkbGVzcyBvZiBhbnkgZXJyb3JzXG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXQgYWxsIGNvbmZpZ3VyZWQgY29ubmVjdGlvbnMgZm9yIGEgY2xpZW50XG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgIGF1dGgwLmdldENvbm5lY3Rpb25zKGZ1bmN0aW9uIChlcnIsIGNvbm5zKSB7XG4gKiAgICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xuICogICAgICAgZXhwZWN0KGNvbm5zLmxlbmd0aCkudG8uYmUuYWJvdmUoMCk7XG4gKiAgICAgICBleHBlY3QoY29ubnNbMF0ubmFtZSkudG8uZXFsKCdBcHByZW5kYS5jb20nKTtcbiAqICAgICAgIGV4cGVjdChjb25uc1swXS5zdHJhdGVneSkudG8uZXFsKCdhZGZzJyk7XG4gKiAgICAgICBleHBlY3QoY29ubnNbMF0uc3RhdHVzKS50by5lcWwoZmFsc2UpO1xuICogICAgICAgZXhwZWN0KGNvbm5zWzBdLmRvbWFpbikudG8uZXFsKCdBcHByZW5kYS5jb20nKTtcbiAqICAgICAgIGV4cGVjdChjb25uc1swXS5kb21haW5fYWxpYXNlcykudG8uZXFsKFsnQXBwcmVuZGEuY29tJywgJ2Zvby5jb20nLCAnYmFyLmNvbSddKTtcbiAqICAgICB9KTtcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwdWJsaWNcbiAqL1xuLy8gWFhYIFdlIG1heSBjaGFuZ2UgdGhlIHdheSB0aGlzIG1ldGhvZCB3b3JrcyBpbiB0aGUgZnV0dXJlIHRvIHVzZSBjbGllbnQncyBzMyBmaWxlLlxuXG5BdXRoMC5wcm90b3R5cGUuZ2V0Q29ubmVjdGlvbnMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGpzb25wKCdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL3B1YmxpYy9hcGkvJyArIHRoaXMuX2NsaWVudElEICsgJy9jb25uZWN0aW9ucycsIGpzb25wT3B0cywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYEF1dGgwYCBjb25zdHJ1Y3RvclxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aDA7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBSZXNvbHZlIGBpc0FycmF5YCBhcyBuYXRpdmUgb3IgZmFsbGJhY2tcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG51bGwgIT0gQXJyYXkuaXNBcnJheVxuICA/IEFycmF5LmlzQXJyYXlcbiAgOiBpc0FycmF5O1xuXG4vKipcbiAqIFdyYXAgYEFycmF5LmlzQXJyYXlgIFBvbHlmaWxsIGZvciBJRTlcbiAqIHNvdXJjZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaXNBcnJheSAoYXJyYXkpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyYXkpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKlxuICogRXhwb3NlIGBKU09OLnBhcnNlYCBtZXRob2Qgb3IgZmFsbGJhY2sgaWYgbm90XG4gKiBleGlzdHMgb24gYHdpbmRvd2BcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9ICd1bmRlZmluZWQnID09PSB0eXBlb2Ygd2luZG93LkpTT05cbiAgPyByZXF1aXJlKCdqc29uLWZhbGxiYWNrJykucGFyc2VcbiAgOiB3aW5kb3cuSlNPTi5wYXJzZTtcbiIsIi8qKlxuICogRXhwb3NlIGB1c2VfanNvbnBgXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VfanNvbnA7XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgYGpzb25wYCBpcyByZXF1aXJlZFxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdXNlX2pzb25wKCkge1xuICB2YXIgeGhyID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0ID8gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgOiBudWxsO1xuXG4gIGlmICh4aHIgJiYgJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gV2Ugbm8gbG9uZ2VyIHN1cHBvcnQgWERvbWFpblJlcXVlc3QgZm9yIElFOCBhbmQgSUU5IGZvciBDT1JTIGJlY2F1c2UgaXQgaGFzIG1hbnkgcXVpcmtzLlxuICAvLyBpZiAoJ1hEb21haW5SZXF1ZXN0JyBpbiB3aW5kb3cgJiYgd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAvLyAgIHJldHVybiBmYWxzZTtcbiAgLy8gfVxuXG4gIHJldHVybiB0cnVlO1xufSIsIjsoZnVuY3Rpb24gKCkge1xuXG4gIHZhclxuICAgIG9iamVjdCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMsIC8vICM4OiB3ZWIgd29ya2Vyc1xuICAgIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JyxcbiAgICBJTlZBTElEX0NIQVJBQ1RFUl9FUlIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZmFicmljYXRlIGEgc3VpdGFibGUgZXJyb3Igb2JqZWN0XG4gICAgICB0cnkgeyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCckJyk7IH1cbiAgICAgIGNhdGNoIChlcnJvcikgeyByZXR1cm4gZXJyb3I7IH19KCkpO1xuXG4gIC8vIGVuY29kZXJcbiAgLy8gW2h0dHBzOi8vZ2lzdC5naXRodWIuY29tLzk5OTE2Nl0gYnkgW2h0dHBzOi8vZ2l0aHViLmNvbS9uaWduYWddXG4gIG9iamVjdC5idG9hIHx8IChcbiAgb2JqZWN0LmJ0b2EgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBmb3IgKFxuICAgICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzLCBvdXRwdXQgPSAnJztcbiAgICAgIC8vIGlmIHRoZSBuZXh0IGlucHV0IGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICAgIGlucHV0LmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgICApIHtcbiAgICAgIGNoYXJDb2RlID0gaW5wdXQuY2hhckNvZGVBdChpZHggKz0gMy80KTtcbiAgICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUjtcbiAgICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcblxuICAvLyBkZWNvZGVyXG4gIC8vIFtodHRwczovL2dpc3QuZ2l0aHViLmNvbS8xMDIwMzk2XSBieSBbaHR0cHM6Ly9naXRodWIuY29tL2F0a11cbiAgb2JqZWN0LmF0b2IgfHwgKFxuICBvYmplY3QuYXRvYiA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvPSskLywgJycpXG4gICAgaWYgKGlucHV0Lmxlbmd0aCAlIDQgPT0gMSkgdGhyb3cgSU5WQUxJRF9DSEFSQUNURVJfRVJSO1xuICAgIGZvciAoXG4gICAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlcnNcbiAgICAgIHZhciBiYyA9IDAsIGJzLCBidWZmZXIsIGlkeCA9IDAsIG91dHB1dCA9ICcnO1xuICAgICAgLy8gZ2V0IG5leHQgY2hhcmFjdGVyXG4gICAgICBidWZmZXIgPSBpbnB1dC5jaGFyQXQoaWR4KyspO1xuICAgICAgLy8gY2hhcmFjdGVyIGZvdW5kIGluIHRhYmxlPyBpbml0aWFsaXplIGJpdCBzdG9yYWdlIGFuZCBhZGQgaXRzIGFzY2lpIHZhbHVlO1xuICAgICAgfmJ1ZmZlciAmJiAoYnMgPSBiYyAlIDQgPyBicyAqIDY0ICsgYnVmZmVyIDogYnVmZmVyLFxuICAgICAgICAvLyBhbmQgaWYgbm90IGZpcnN0IG9mIGVhY2ggNCBjaGFyYWN0ZXJzLFxuICAgICAgICAvLyBjb252ZXJ0IHRoZSBmaXJzdCA4IGJpdHMgdG8gb25lIGFzY2lpIGNoYXJhY3RlclxuICAgICAgICBiYysrICUgNCkgPyBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgyNTUgJiBicyA+PiAoLTIgKiBiYyAmIDYpKSA6IDBcbiAgICApIHtcbiAgICAgIC8vIHRyeSB0byBmaW5kIGNoYXJhY3RlciBpbiB0YWJsZSAoMC02Mywgbm90IGZvdW5kID0+IC0xKVxuICAgICAgYnVmZmVyID0gY2hhcnMuaW5kZXhPZihidWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcblxufSgpKTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgcmV0dXJuICgnV2Via2l0QXBwZWFyYW5jZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAod2luZG93LmNvbnNvbGUgJiYgKGNvbnNvbGUuZmlyZWJ1ZyB8fCAoY29uc29sZS5leGNlcHRpb24gJiYgY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgIChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncygpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybiBhcmdzO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncyA9IFthcmdzWzBdLCBjLCAnY29sb3I6IGluaGVyaXQnXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO1xuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xuICByZXR1cm4gYXJncztcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LFxuICAvLyB3aGVyZSB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiAnZnVuY3Rpb24nID09IHR5cGVvZiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYWxTdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gbG9jYWxTdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBkZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXJjYXNlZCBsZXR0ZXIsIGkuZS4gXCJuXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXNseSBhc3NpZ25lZCBjb2xvci5cbiAqL1xuXG52YXIgcHJldkNvbG9yID0gMDtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcigpIHtcbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW3ByZXZDb2xvcisrICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVidWcobmFtZXNwYWNlKSB7XG5cbiAgLy8gZGVmaW5lIHRoZSBgZGlzYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG4gIH1cbiAgZGlzYWJsZWQuZW5hYmxlZCA9IGZhbHNlO1xuXG4gIC8vIGRlZmluZSB0aGUgYGVuYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZW5hYmxlZCgpIHtcblxuICAgIHZhciBzZWxmID0gZW5hYmxlZDtcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gYWRkIHRoZSBgY29sb3JgIGlmIG5vdCBzZXRcbiAgICBpZiAobnVsbCA9PSBzZWxmLnVzZUNvbG9ycykgc2VsZi51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICAgIGlmIChudWxsID09IHNlbGYuY29sb3IgJiYgc2VsZi51c2VDb2xvcnMpIHNlbGYuY29sb3IgPSBzZWxlY3RDb2xvcigpO1xuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJW9cbiAgICAgIGFyZ3MgPSBbJyVvJ10uY29uY2F0KGFyZ3MpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuZm9ybWF0QXJncykge1xuICAgICAgYXJncyA9IGV4cG9ydHMuZm9ybWF0QXJncy5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgdmFyIGxvZ0ZuID0gZW5hYmxlZC5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuICBlbmFibGVkLmVuYWJsZWQgPSB0cnVlO1xuXG4gIHZhciBmbiA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpID8gZW5hYmxlZCA6IGRpc2FibGVkO1xuXG4gIGZuLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblxuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgdmFyIHNwbGl0ID0gKG5hbWVzcGFjZXMgfHwgJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucyl7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIHJldHVybiBvcHRpb25zLmxvbmdcbiAgICA/IGxvbmcodmFsKVxuICAgIDogc2hvcnQodmFsKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtc3xzZWNvbmRzP3xzfG1pbnV0ZXM/fG18aG91cnM/fGh8ZGF5cz98ZHx5ZWFycz98eSk/JC9pLmV4ZWMoc3RyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuO1xuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIGlmIChtcyA+PSBoKSByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICBpZiAobXMgPj0gbSkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgaWYgKG1zID49IHMpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKVxuICAgIHx8IHBsdXJhbChtcywgaCwgJ2hvdXInKVxuICAgIHx8IHBsdXJhbChtcywgbSwgJ21pbnV0ZScpXG4gICAgfHwgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJylcbiAgICB8fCBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSByZXR1cm47XG4gIGlmIChtcyA8IG4gKiAxLjUpIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiLypcbiAgICBqc29uMi5qc1xuICAgIDIwMTEtMTAtMTlcblxuICAgIFB1YmxpYyBEb21haW4uXG5cbiAgICBOTyBXQVJSQU5UWSBFWFBSRVNTRUQgT1IgSU1QTElFRC4gVVNFIEFUIFlPVVIgT1dOIFJJU0suXG5cbiAgICBTZWUgaHR0cDovL3d3dy5KU09OLm9yZy9qcy5odG1sXG5cblxuICAgIFRoaXMgY29kZSBzaG91bGQgYmUgbWluaWZpZWQgYmVmb3JlIGRlcGxveW1lbnQuXG4gICAgU2VlIGh0dHA6Ly9qYXZhc2NyaXB0LmNyb2NrZm9yZC5jb20vanNtaW4uaHRtbFxuXG4gICAgVVNFIFlPVVIgT1dOIENPUFkuIElUIElTIEVYVFJFTUVMWSBVTldJU0UgVE8gTE9BRCBDT0RFIEZST00gU0VSVkVSUyBZT1UgRE9cbiAgICBOT1QgQ09OVFJPTC5cblxuXG4gICAgVGhpcyBmaWxlIGNyZWF0ZXMgYSBnbG9iYWwgSlNPTiBvYmplY3QgY29udGFpbmluZyB0d28gbWV0aG9kczogc3RyaW5naWZ5XG4gICAgYW5kIHBhcnNlLlxuXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgc3BhY2UpXG4gICAgICAgICAgICB2YWx1ZSAgICAgICBhbnkgSmF2YVNjcmlwdCB2YWx1ZSwgdXN1YWxseSBhbiBvYmplY3Qgb3IgYXJyYXkuXG5cbiAgICAgICAgICAgIHJlcGxhY2VyICAgIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IGRldGVybWluZXMgaG93IG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzIGFyZSBzdHJpbmdpZmllZCBmb3Igb2JqZWN0cy4gSXQgY2FuIGJlIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MuXG5cbiAgICAgICAgICAgIHNwYWNlICAgICAgIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgaW5kZW50YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG9mIG5lc3RlZCBzdHJ1Y3R1cmVzLiBJZiBpdCBpcyBvbWl0dGVkLCB0aGUgdGV4dCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICBiZSBwYWNrZWQgd2l0aG91dCBleHRyYSB3aGl0ZXNwYWNlLiBJZiBpdCBpcyBhIG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgc3BlY2lmeSB0aGUgbnVtYmVyIG9mIHNwYWNlcyB0byBpbmRlbnQgYXQgZWFjaFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwuIElmIGl0IGlzIGEgc3RyaW5nIChzdWNoIGFzICdcXHQnIG9yICcmbmJzcDsnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0IGNvbnRhaW5zIHRoZSBjaGFyYWN0ZXJzIHVzZWQgdG8gaW5kZW50IGF0IGVhY2ggbGV2ZWwuXG5cbiAgICAgICAgICAgIFRoaXMgbWV0aG9kIHByb2R1Y2VzIGEgSlNPTiB0ZXh0IGZyb20gYSBKYXZhU2NyaXB0IHZhbHVlLlxuXG4gICAgICAgICAgICBXaGVuIGFuIG9iamVjdCB2YWx1ZSBpcyBmb3VuZCwgaWYgdGhlIG9iamVjdCBjb250YWlucyBhIHRvSlNPTlxuICAgICAgICAgICAgbWV0aG9kLCBpdHMgdG9KU09OIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBhbmQgdGhlIHJlc3VsdCB3aWxsIGJlXG4gICAgICAgICAgICBzdHJpbmdpZmllZC4gQSB0b0pTT04gbWV0aG9kIGRvZXMgbm90IHNlcmlhbGl6ZTogaXQgcmV0dXJucyB0aGVcbiAgICAgICAgICAgIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBuYW1lL3ZhbHVlIHBhaXIgdGhhdCBzaG91bGQgYmUgc2VyaWFsaXplZCxcbiAgICAgICAgICAgIG9yIHVuZGVmaW5lZCBpZiBub3RoaW5nIHNob3VsZCBiZSBzZXJpYWxpemVkLiBUaGUgdG9KU09OIG1ldGhvZFxuICAgICAgICAgICAgd2lsbCBiZSBwYXNzZWQgdGhlIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIHZhbHVlLCBhbmQgdGhpcyB3aWxsIGJlXG4gICAgICAgICAgICBib3VuZCB0byB0aGUgdmFsdWVcblxuICAgICAgICAgICAgRm9yIGV4YW1wbGUsIHRoaXMgd291bGQgc2VyaWFsaXplIERhdGVzIGFzIElTTyBzdHJpbmdzLlxuXG4gICAgICAgICAgICAgICAgRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdCBpbnRlZ2VycyB0byBoYXZlIGF0IGxlYXN0IHR3byBkaWdpdHMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA8IDEwID8gJzAnICsgbiA6IG47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRVVENGdWxsWWVhcigpICAgKyAnLScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENNb250aCgpICsgMSkgKyAnLScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENEYXRlKCkpICAgICAgKyAnVCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENIb3VycygpKSAgICAgKyAnOicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENNaW51dGVzKCkpICAgKyAnOicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENTZWNvbmRzKCkpICAgKyAnWic7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgWW91IGNhbiBwcm92aWRlIGFuIG9wdGlvbmFsIHJlcGxhY2VyIG1ldGhvZC4gSXQgd2lsbCBiZSBwYXNzZWQgdGhlXG4gICAgICAgICAgICBrZXkgYW5kIHZhbHVlIG9mIGVhY2ggbWVtYmVyLCB3aXRoIHRoaXMgYm91bmQgdG8gdGhlIGNvbnRhaW5pbmdcbiAgICAgICAgICAgIG9iamVjdC4gVGhlIHZhbHVlIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB5b3VyIG1ldGhvZCB3aWxsIGJlXG4gICAgICAgICAgICBzZXJpYWxpemVkLiBJZiB5b3VyIG1ldGhvZCByZXR1cm5zIHVuZGVmaW5lZCwgdGhlbiB0aGUgbWVtYmVyIHdpbGxcbiAgICAgICAgICAgIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIHNlcmlhbGl6YXRpb24uXG5cbiAgICAgICAgICAgIElmIHRoZSByZXBsYWNlciBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiBpdCB3aWxsIGJlXG4gICAgICAgICAgICB1c2VkIHRvIHNlbGVjdCB0aGUgbWVtYmVycyB0byBiZSBzZXJpYWxpemVkLiBJdCBmaWx0ZXJzIHRoZSByZXN1bHRzXG4gICAgICAgICAgICBzdWNoIHRoYXQgb25seSBtZW1iZXJzIHdpdGgga2V5cyBsaXN0ZWQgaW4gdGhlIHJlcGxhY2VyIGFycmF5IGFyZVxuICAgICAgICAgICAgc3RyaW5naWZpZWQuXG5cbiAgICAgICAgICAgIFZhbHVlcyB0aGF0IGRvIG5vdCBoYXZlIEpTT04gcmVwcmVzZW50YXRpb25zLCBzdWNoIGFzIHVuZGVmaW5lZCBvclxuICAgICAgICAgICAgZnVuY3Rpb25zLCB3aWxsIG5vdCBiZSBzZXJpYWxpemVkLiBTdWNoIHZhbHVlcyBpbiBvYmplY3RzIHdpbGwgYmVcbiAgICAgICAgICAgIGRyb3BwZWQ7IGluIGFycmF5cyB0aGV5IHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBudWxsLiBZb3UgY2FuIHVzZVxuICAgICAgICAgICAgYSByZXBsYWNlciBmdW5jdGlvbiB0byByZXBsYWNlIHRob3NlIHdpdGggSlNPTiB2YWx1ZXMuXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh1bmRlZmluZWQpIHJldHVybnMgdW5kZWZpbmVkLlxuXG4gICAgICAgICAgICBUaGUgb3B0aW9uYWwgc3BhY2UgcGFyYW1ldGVyIHByb2R1Y2VzIGEgc3RyaW5naWZpY2F0aW9uIG9mIHRoZVxuICAgICAgICAgICAgdmFsdWUgdGhhdCBpcyBmaWxsZWQgd2l0aCBsaW5lIGJyZWFrcyBhbmQgaW5kZW50YXRpb24gdG8gbWFrZSBpdFxuICAgICAgICAgICAgZWFzaWVyIHRvIHJlYWQuXG5cbiAgICAgICAgICAgIElmIHRoZSBzcGFjZSBwYXJhbWV0ZXIgaXMgYSBub24tZW1wdHkgc3RyaW5nLCB0aGVuIHRoYXQgc3RyaW5nIHdpbGxcbiAgICAgICAgICAgIGJlIHVzZWQgZm9yIGluZGVudGF0aW9uLiBJZiB0aGUgc3BhY2UgcGFyYW1ldGVyIGlzIGEgbnVtYmVyLCB0aGVuXG4gICAgICAgICAgICB0aGUgaW5kZW50YXRpb24gd2lsbCBiZSB0aGF0IG1hbnkgc3BhY2VzLlxuXG4gICAgICAgICAgICBFeGFtcGxlOlxuXG4gICAgICAgICAgICB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkoWydlJywge3BsdXJpYnVzOiAndW51bSd9XSk7XG4gICAgICAgICAgICAvLyB0ZXh0IGlzICdbXCJlXCIse1wicGx1cmlidXNcIjpcInVudW1cIn1dJ1xuXG5cbiAgICAgICAgICAgIHRleHQgPSBKU09OLnN0cmluZ2lmeShbJ2UnLCB7cGx1cmlidXM6ICd1bnVtJ31dLCBudWxsLCAnXFx0Jyk7XG4gICAgICAgICAgICAvLyB0ZXh0IGlzICdbXFxuXFx0XCJlXCIsXFxuXFx0e1xcblxcdFxcdFwicGx1cmlidXNcIjogXCJ1bnVtXCJcXG5cXHR9XFxuXSdcblxuICAgICAgICAgICAgdGV4dCA9IEpTT04uc3RyaW5naWZ5KFtuZXcgRGF0ZSgpXSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1trZXldIGluc3RhbmNlb2YgRGF0ZSA/XG4gICAgICAgICAgICAgICAgICAgICdEYXRlKCcgKyB0aGlzW2tleV0gKyAnKScgOiB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gdGV4dCBpcyAnW1wiRGF0ZSgtLS1jdXJyZW50IHRpbWUtLS0pXCJdJ1xuXG5cbiAgICAgICAgSlNPTi5wYXJzZSh0ZXh0LCByZXZpdmVyKVxuICAgICAgICAgICAgVGhpcyBtZXRob2QgcGFyc2VzIGEgSlNPTiB0ZXh0IHRvIHByb2R1Y2UgYW4gb2JqZWN0IG9yIGFycmF5LlxuICAgICAgICAgICAgSXQgY2FuIHRocm93IGEgU3ludGF4RXJyb3IgZXhjZXB0aW9uLlxuXG4gICAgICAgICAgICBUaGUgb3B0aW9uYWwgcmV2aXZlciBwYXJhbWV0ZXIgaXMgYSBmdW5jdGlvbiB0aGF0IGNhbiBmaWx0ZXIgYW5kXG4gICAgICAgICAgICB0cmFuc2Zvcm0gdGhlIHJlc3VsdHMuIEl0IHJlY2VpdmVzIGVhY2ggb2YgdGhlIGtleXMgYW5kIHZhbHVlcyxcbiAgICAgICAgICAgIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgdmFsdWUuXG4gICAgICAgICAgICBJZiBpdCByZXR1cm5zIHdoYXQgaXQgcmVjZWl2ZWQsIHRoZW4gdGhlIHN0cnVjdHVyZSBpcyBub3QgbW9kaWZpZWQuXG4gICAgICAgICAgICBJZiBpdCByZXR1cm5zIHVuZGVmaW5lZCB0aGVuIHRoZSBtZW1iZXIgaXMgZGVsZXRlZC5cblxuICAgICAgICAgICAgRXhhbXBsZTpcblxuICAgICAgICAgICAgLy8gUGFyc2UgdGhlIHRleHQuIFZhbHVlcyB0aGF0IGxvb2sgbGlrZSBJU08gZGF0ZSBzdHJpbmdzIHdpbGxcbiAgICAgICAgICAgIC8vIGJlIGNvbnZlcnRlZCB0byBEYXRlIG9iamVjdHMuXG5cbiAgICAgICAgICAgIG15RGF0YSA9IEpTT04ucGFyc2UodGV4dCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBhID1cbi9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlUKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSg/OlxcLlxcZCopPylaJC8uZXhlYyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoK2FbMV0sICthWzJdIC0gMSwgK2FbM10sICthWzRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICthWzVdLCArYVs2XSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBteURhdGEgPSBKU09OLnBhcnNlKCdbXCJEYXRlKDA5LzA5LzIwMDEpXCJdJywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuc2xpY2UoMCwgNSkgPT09ICdEYXRlKCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnNsaWNlKC0xKSA9PT0gJyknKSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBuZXcgRGF0ZSh2YWx1ZS5zbGljZSg1LCAtMSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgIFRoaXMgaXMgYSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24uIFlvdSBhcmUgZnJlZSB0byBjb3B5LCBtb2RpZnksIG9yXG4gICAgcmVkaXN0cmlidXRlLlxuKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSwgcmVnZXhwOiB0cnVlICovXG5cbi8qbWVtYmVycyBcIlwiLCBcIlxcYlwiLCBcIlxcdFwiLCBcIlxcblwiLCBcIlxcZlwiLCBcIlxcclwiLCBcIlxcXCJcIiwgSlNPTiwgXCJcXFxcXCIsIGFwcGx5LFxuICAgIGNhbGwsIGNoYXJDb2RlQXQsIGdldFVUQ0RhdGUsIGdldFVUQ0Z1bGxZZWFyLCBnZXRVVENIb3VycyxcbiAgICBnZXRVVENNaW51dGVzLCBnZXRVVENNb250aCwgZ2V0VVRDU2Vjb25kcywgaGFzT3duUHJvcGVydHksIGpvaW4sXG4gICAgbGFzdEluZGV4LCBsZW5ndGgsIHBhcnNlLCBwcm90b3R5cGUsIHB1c2gsIHJlcGxhY2UsIHNsaWNlLCBzdHJpbmdpZnksXG4gICAgdGVzdCwgdG9KU09OLCB0b1N0cmluZywgdmFsdWVPZlxuKi9cblxuXG4vLyBDcmVhdGUgYSBKU09OIG9iamVjdCBvbmx5IGlmIG9uZSBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0LiBXZSBjcmVhdGUgdGhlXG4vLyBtZXRob2RzIGluIGEgY2xvc3VyZSB0byBhdm9pZCBjcmVhdGluZyBnbG9iYWwgdmFyaWFibGVzLlxuXG52YXIgSlNPTiA9IHt9O1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIGYobikge1xuICAgICAgICAvLyBGb3JtYXQgaW50ZWdlcnMgdG8gaGF2ZSBhdCBsZWFzdCB0d28gZGlnaXRzLlxuICAgICAgICByZXR1cm4gbiA8IDEwID8gJzAnICsgbiA6IG47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBEYXRlLnByb3RvdHlwZS50b0pTT04gIT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICBEYXRlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoa2V5KSB7XG5cbiAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZSh0aGlzLnZhbHVlT2YoKSlcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0VVRDRnVsbFllYXIoKSAgICAgKyAnLScgK1xuICAgICAgICAgICAgICAgICAgICBmKHRoaXMuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICtcbiAgICAgICAgICAgICAgICAgICAgZih0aGlzLmdldFVUQ0RhdGUoKSkgICAgICArICdUJyArXG4gICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENIb3VycygpKSAgICAgKyAnOicgK1xuICAgICAgICAgICAgICAgICAgICBmKHRoaXMuZ2V0VVRDTWludXRlcygpKSAgICsgJzonICtcbiAgICAgICAgICAgICAgICAgICAgZih0aGlzLmdldFVUQ1NlY29uZHMoKSkgICArICdaJ1xuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICBTdHJpbmcucHJvdG90eXBlLnRvSlNPTiAgICAgID1cbiAgICAgICAgICAgIE51bWJlci5wcm90b3R5cGUudG9KU09OICA9XG4gICAgICAgICAgICBCb29sZWFuLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpO1xuICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgY3ggPSAvW1xcdTAwMDBcXHUwMGFkXFx1MDYwMC1cXHUwNjA0XFx1MDcwZlxcdTE3YjRcXHUxN2I1XFx1MjAwYy1cXHUyMDBmXFx1MjAyOC1cXHUyMDJmXFx1MjA2MC1cXHUyMDZmXFx1ZmVmZlxcdWZmZjAtXFx1ZmZmZl0vZyxcbiAgICAgICAgZXNjYXBhYmxlID0gL1tcXFxcXFxcIlxceDAwLVxceDFmXFx4N2YtXFx4OWZcXHUwMGFkXFx1MDYwMC1cXHUwNjA0XFx1MDcwZlxcdTE3YjRcXHUxN2I1XFx1MjAwYy1cXHUyMDBmXFx1MjAyOC1cXHUyMDJmXFx1MjA2MC1cXHUyMDZmXFx1ZmVmZlxcdWZmZjAtXFx1ZmZmZl0vZyxcbiAgICAgICAgZ2FwLFxuICAgICAgICBpbmRlbnQsXG4gICAgICAgIG1ldGEgPSB7ICAgIC8vIHRhYmxlIG9mIGNoYXJhY3RlciBzdWJzdGl0dXRpb25zXG4gICAgICAgICAgICAnXFxiJzogJ1xcXFxiJyxcbiAgICAgICAgICAgICdcXHQnOiAnXFxcXHQnLFxuICAgICAgICAgICAgJ1xcbic6ICdcXFxcbicsXG4gICAgICAgICAgICAnXFxmJzogJ1xcXFxmJyxcbiAgICAgICAgICAgICdcXHInOiAnXFxcXHInLFxuICAgICAgICAgICAgJ1wiJyA6ICdcXFxcXCInLFxuICAgICAgICAgICAgJ1xcXFwnOiAnXFxcXFxcXFwnXG4gICAgICAgIH0sXG4gICAgICAgIHJlcDtcblxuXG4gICAgZnVuY3Rpb24gcXVvdGUoc3RyaW5nKSB7XG5cbi8vIElmIHRoZSBzdHJpbmcgY29udGFpbnMgbm8gY29udHJvbCBjaGFyYWN0ZXJzLCBubyBxdW90ZSBjaGFyYWN0ZXJzLCBhbmQgbm9cbi8vIGJhY2tzbGFzaCBjaGFyYWN0ZXJzLCB0aGVuIHdlIGNhbiBzYWZlbHkgc2xhcCBzb21lIHF1b3RlcyBhcm91bmQgaXQuXG4vLyBPdGhlcndpc2Ugd2UgbXVzdCBhbHNvIHJlcGxhY2UgdGhlIG9mZmVuZGluZyBjaGFyYWN0ZXJzIHdpdGggc2FmZSBlc2NhcGVcbi8vIHNlcXVlbmNlcy5cblxuICAgICAgICBlc2NhcGFibGUubGFzdEluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIGVzY2FwYWJsZS50ZXN0KHN0cmluZykgPyAnXCInICsgc3RyaW5nLnJlcGxhY2UoZXNjYXBhYmxlLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgdmFyIGMgPSBtZXRhW2FdO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gY1xuICAgICAgICAgICAgICAgIDogJ1xcXFx1JyArICgnMDAwMCcgKyBhLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gICAgICAgIH0pICsgJ1wiJyA6ICdcIicgKyBzdHJpbmcgKyAnXCInO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc3RyKGtleSwgaG9sZGVyKSB7XG5cbi8vIFByb2R1Y2UgYSBzdHJpbmcgZnJvbSBob2xkZXJba2V5XS5cblxuICAgICAgICB2YXIgaSwgICAgICAgICAgLy8gVGhlIGxvb3AgY291bnRlci5cbiAgICAgICAgICAgIGssICAgICAgICAgIC8vIFRoZSBtZW1iZXIga2V5LlxuICAgICAgICAgICAgdiwgICAgICAgICAgLy8gVGhlIG1lbWJlciB2YWx1ZS5cbiAgICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICAgIG1pbmQgPSBnYXAsXG4gICAgICAgICAgICBwYXJ0aWFsLFxuICAgICAgICAgICAgdmFsdWUgPSBob2xkZXJba2V5XTtcblxuLy8gSWYgdGhlIHZhbHVlIGhhcyBhIHRvSlNPTiBtZXRob2QsIGNhbGwgaXQgdG8gb2J0YWluIGEgcmVwbGFjZW1lbnQgdmFsdWUuXG5cbiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpO1xuICAgICAgICB9XG5cbi8vIElmIHdlIHdlcmUgY2FsbGVkIHdpdGggYSByZXBsYWNlciBmdW5jdGlvbiwgdGhlbiBjYWxsIHRoZSByZXBsYWNlciB0b1xuLy8gb2J0YWluIGEgcmVwbGFjZW1lbnQgdmFsdWUuXG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVwLmNhbGwoaG9sZGVyLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuXG4vLyBXaGF0IGhhcHBlbnMgbmV4dCBkZXBlbmRzIG9uIHRoZSB2YWx1ZSdzIHR5cGUuXG5cbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIHJldHVybiBxdW90ZSh2YWx1ZSk7XG5cbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcblxuLy8gSlNPTiBudW1iZXJzIG11c3QgYmUgZmluaXRlLiBFbmNvZGUgbm9uLWZpbml0ZSBudW1iZXJzIGFzIG51bGwuXG5cbiAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogJ251bGwnO1xuXG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBjYXNlICdudWxsJzpcblxuLy8gSWYgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbiBvciBudWxsLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLiBOb3RlOlxuLy8gdHlwZW9mIG51bGwgZG9lcyBub3QgcHJvZHVjZSAnbnVsbCcuIFRoZSBjYXNlIGlzIGluY2x1ZGVkIGhlcmUgaW5cbi8vIHRoZSByZW1vdGUgY2hhbmNlIHRoYXQgdGhpcyBnZXRzIGZpeGVkIHNvbWVkYXkuXG5cbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuXG4vLyBJZiB0aGUgdHlwZSBpcyAnb2JqZWN0Jywgd2UgbWlnaHQgYmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCBvciBhbiBhcnJheSBvclxuLy8gbnVsbC5cblxuICAgICAgICBjYXNlICdvYmplY3QnOlxuXG4vLyBEdWUgdG8gYSBzcGVjaWZpY2F0aW9uIGJsdW5kZXIgaW4gRUNNQVNjcmlwdCwgdHlwZW9mIG51bGwgaXMgJ29iamVjdCcsXG4vLyBzbyB3YXRjaCBvdXQgZm9yIHRoYXQgY2FzZS5cblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgICAgICAgICB9XG5cbi8vIE1ha2UgYW4gYXJyYXkgdG8gaG9sZCB0aGUgcGFydGlhbCByZXN1bHRzIG9mIHN0cmluZ2lmeWluZyB0aGlzIG9iamVjdCB2YWx1ZS5cblxuICAgICAgICAgICAgZ2FwICs9IGluZGVudDtcbiAgICAgICAgICAgIHBhcnRpYWwgPSBbXTtcblxuLy8gSXMgdGhlIHZhbHVlIGFuIGFycmF5P1xuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcblxuLy8gVGhlIHZhbHVlIGlzIGFuIGFycmF5LiBTdHJpbmdpZnkgZXZlcnkgZWxlbWVudC4gVXNlIG51bGwgYXMgYSBwbGFjZWhvbGRlclxuLy8gZm9yIG5vbi1KU09OIHZhbHVlcy5cblxuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbFtpXSA9IHN0cihpLCB2YWx1ZSkgfHwgJ251bGwnO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gSm9pbiBhbGwgb2YgdGhlIGVsZW1lbnRzIHRvZ2V0aGVyLCBzZXBhcmF0ZWQgd2l0aCBjb21tYXMsIGFuZCB3cmFwIHRoZW0gaW5cbi8vIGJyYWNrZXRzLlxuXG4gICAgICAgICAgICAgICAgdiA9IHBhcnRpYWwubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgICAgID8gJ1tdJ1xuICAgICAgICAgICAgICAgICAgICA6IGdhcFxuICAgICAgICAgICAgICAgICAgICA/ICdbXFxuJyArIGdhcCArIHBhcnRpYWwuam9pbignLFxcbicgKyBnYXApICsgJ1xcbicgKyBtaW5kICsgJ10nXG4gICAgICAgICAgICAgICAgICAgIDogJ1snICsgcGFydGlhbC5qb2luKCcsJykgKyAnXSc7XG4gICAgICAgICAgICAgICAgZ2FwID0gbWluZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgIH1cblxuLy8gSWYgdGhlIHJlcGxhY2VyIGlzIGFuIGFycmF5LCB1c2UgaXQgdG8gc2VsZWN0IHRoZSBtZW1iZXJzIHRvIGJlIHN0cmluZ2lmaWVkLlxuXG4gICAgICAgICAgICBpZiAocmVwICYmIHR5cGVvZiByZXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gcmVwLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBbaV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gcmVwW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChxdW90ZShrKSArIChnYXAgPyAnOiAnIDogJzonKSArIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcblxuLy8gT3RoZXJ3aXNlLCBpdGVyYXRlIHRocm91Z2ggYWxsIG9mIHRoZSBrZXlzIGluIHRoZSBvYmplY3QuXG5cbiAgICAgICAgICAgICAgICBmb3IgKGsgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBzdHIoaywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsLnB1c2gocXVvdGUoaykgKyAoZ2FwID8gJzogJyA6ICc6JykgKyB2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuLy8gSm9pbiBhbGwgb2YgdGhlIG1lbWJlciB0ZXh0cyB0b2dldGhlciwgc2VwYXJhdGVkIHdpdGggY29tbWFzLFxuLy8gYW5kIHdyYXAgdGhlbSBpbiBicmFjZXMuXG5cbiAgICAgICAgICAgIHYgPSBwYXJ0aWFsLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgID8gJ3t9J1xuICAgICAgICAgICAgICAgIDogZ2FwXG4gICAgICAgICAgICAgICAgPyAne1xcbicgKyBnYXAgKyBwYXJ0aWFsLmpvaW4oJyxcXG4nICsgZ2FwKSArICdcXG4nICsgbWluZCArICd9J1xuICAgICAgICAgICAgICAgIDogJ3snICsgcGFydGlhbC5qb2luKCcsJykgKyAnfSc7XG4gICAgICAgICAgICBnYXAgPSBtaW5kO1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH1cbiAgICB9XG5cbi8vIElmIHRoZSBKU09OIG9iamVjdCBkb2VzIG5vdCB5ZXQgaGF2ZSBhIHN0cmluZ2lmeSBtZXRob2QsIGdpdmUgaXQgb25lLlxuXG4gICAgaWYgKHR5cGVvZiBKU09OLnN0cmluZ2lmeSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBKU09OLnN0cmluZ2lmeSA9IGZ1bmN0aW9uICh2YWx1ZSwgcmVwbGFjZXIsIHNwYWNlKSB7XG5cbi8vIFRoZSBzdHJpbmdpZnkgbWV0aG9kIHRha2VzIGEgdmFsdWUgYW5kIGFuIG9wdGlvbmFsIHJlcGxhY2VyLCBhbmQgYW4gb3B0aW9uYWxcbi8vIHNwYWNlIHBhcmFtZXRlciwgYW5kIHJldHVybnMgYSBKU09OIHRleHQuIFRoZSByZXBsYWNlciBjYW4gYmUgYSBmdW5jdGlvblxuLy8gdGhhdCBjYW4gcmVwbGFjZSB2YWx1ZXMsIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCB3aWxsIHNlbGVjdCB0aGUga2V5cy5cbi8vIEEgZGVmYXVsdCByZXBsYWNlciBtZXRob2QgY2FuIGJlIHByb3ZpZGVkLiBVc2Ugb2YgdGhlIHNwYWNlIHBhcmFtZXRlciBjYW5cbi8vIHByb2R1Y2UgdGV4dCB0aGF0IGlzIG1vcmUgZWFzaWx5IHJlYWRhYmxlLlxuXG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGdhcCA9ICcnO1xuICAgICAgICAgICAgaW5kZW50ID0gJyc7XG5cbi8vIElmIHRoZSBzcGFjZSBwYXJhbWV0ZXIgaXMgYSBudW1iZXIsIG1ha2UgYW4gaW5kZW50IHN0cmluZyBjb250YWluaW5nIHRoYXRcbi8vIG1hbnkgc3BhY2VzLlxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNwYWNlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzcGFjZTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGVudCArPSAnICc7XG4gICAgICAgICAgICAgICAgfVxuXG4vLyBJZiB0aGUgc3BhY2UgcGFyYW1ldGVyIGlzIGEgc3RyaW5nLCBpdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGluZGVudCBzdHJpbmcuXG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGluZGVudCA9IHNwYWNlO1xuICAgICAgICAgICAgfVxuXG4vLyBJZiB0aGVyZSBpcyBhIHJlcGxhY2VyLCBpdCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gYXJyYXkuXG4vLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yLlxuXG4gICAgICAgICAgICByZXAgPSByZXBsYWNlcjtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlciAmJiB0eXBlb2YgcmVwbGFjZXIgIT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiByZXBsYWNlciAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHJlcGxhY2VyLmxlbmd0aCAhPT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdKU09OLnN0cmluZ2lmeScpO1xuICAgICAgICAgICAgfVxuXG4vLyBNYWtlIGEgZmFrZSByb290IG9iamVjdCBjb250YWluaW5nIG91ciB2YWx1ZSB1bmRlciB0aGUga2V5IG9mICcnLlxuLy8gUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3RyaW5naWZ5aW5nIHRoZSB2YWx1ZS5cblxuICAgICAgICAgICAgcmV0dXJuIHN0cignJywgeycnOiB2YWx1ZX0pO1xuICAgICAgICB9O1xuICAgIH1cblxuXG4vLyBJZiB0aGUgSlNPTiBvYmplY3QgZG9lcyBub3QgeWV0IGhhdmUgYSBwYXJzZSBtZXRob2QsIGdpdmUgaXQgb25lLlxuXG4gICAgaWYgKHR5cGVvZiBKU09OLnBhcnNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIEpTT04ucGFyc2UgPSBmdW5jdGlvbiAodGV4dCwgcmV2aXZlcikge1xuXG4vLyBUaGUgcGFyc2UgbWV0aG9kIHRha2VzIGEgdGV4dCBhbmQgYW4gb3B0aW9uYWwgcmV2aXZlciBmdW5jdGlvbiwgYW5kIHJldHVybnNcbi8vIGEgSmF2YVNjcmlwdCB2YWx1ZSBpZiB0aGUgdGV4dCBpcyBhIHZhbGlkIEpTT04gdGV4dC5cblxuICAgICAgICAgICAgdmFyIGo7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdhbGsoaG9sZGVyLCBrZXkpIHtcblxuLy8gVGhlIHdhbGsgbWV0aG9kIGlzIHVzZWQgdG8gcmVjdXJzaXZlbHkgd2FsayB0aGUgcmVzdWx0aW5nIHN0cnVjdHVyZSBzb1xuLy8gdGhhdCBtb2RpZmljYXRpb25zIGNhbiBiZSBtYWRlLlxuXG4gICAgICAgICAgICAgICAgdmFyIGssIHYsIHZhbHVlID0gaG9sZGVyW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB3YWxrKHZhbHVlLCBrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlW2tdID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsdWVba107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXZpdmVyLmNhbGwoaG9sZGVyLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuXG4vLyBQYXJzaW5nIGhhcHBlbnMgaW4gZm91ciBzdGFnZXMuIEluIHRoZSBmaXJzdCBzdGFnZSwgd2UgcmVwbGFjZSBjZXJ0YWluXG4vLyBVbmljb2RlIGNoYXJhY3RlcnMgd2l0aCBlc2NhcGUgc2VxdWVuY2VzLiBKYXZhU2NyaXB0IGhhbmRsZXMgbWFueSBjaGFyYWN0ZXJzXG4vLyBpbmNvcnJlY3RseSwgZWl0aGVyIHNpbGVudGx5IGRlbGV0aW5nIHRoZW0sIG9yIHRyZWF0aW5nIHRoZW0gYXMgbGluZSBlbmRpbmdzLlxuXG4gICAgICAgICAgICB0ZXh0ID0gU3RyaW5nKHRleHQpO1xuICAgICAgICAgICAgY3gubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGlmIChjeC50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShjeCwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdcXFxcdScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKCcwMDAwJyArIGEuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuLy8gSW4gdGhlIHNlY29uZCBzdGFnZSwgd2UgcnVuIHRoZSB0ZXh0IGFnYWluc3QgcmVndWxhciBleHByZXNzaW9ucyB0aGF0IGxvb2tcbi8vIGZvciBub24tSlNPTiBwYXR0ZXJucy4gV2UgYXJlIGVzcGVjaWFsbHkgY29uY2VybmVkIHdpdGggJygpJyBhbmQgJ25ldydcbi8vIGJlY2F1c2UgdGhleSBjYW4gY2F1c2UgaW52b2NhdGlvbiwgYW5kICc9JyBiZWNhdXNlIGl0IGNhbiBjYXVzZSBtdXRhdGlvbi5cbi8vIEJ1dCBqdXN0IHRvIGJlIHNhZmUsIHdlIHdhbnQgdG8gcmVqZWN0IGFsbCB1bmV4cGVjdGVkIGZvcm1zLlxuXG4vLyBXZSBzcGxpdCB0aGUgc2Vjb25kIHN0YWdlIGludG8gNCByZWdleHAgb3BlcmF0aW9ucyBpbiBvcmRlciB0byB3b3JrIGFyb3VuZFxuLy8gY3JpcHBsaW5nIGluZWZmaWNpZW5jaWVzIGluIElFJ3MgYW5kIFNhZmFyaSdzIHJlZ2V4cCBlbmdpbmVzLiBGaXJzdCB3ZVxuLy8gcmVwbGFjZSB0aGUgSlNPTiBiYWNrc2xhc2ggcGFpcnMgd2l0aCAnQCcgKGEgbm9uLUpTT04gY2hhcmFjdGVyKS4gU2Vjb25kLCB3ZVxuLy8gcmVwbGFjZSBhbGwgc2ltcGxlIHZhbHVlIHRva2VucyB3aXRoICddJyBjaGFyYWN0ZXJzLiBUaGlyZCwgd2UgZGVsZXRlIGFsbFxuLy8gb3BlbiBicmFja2V0cyB0aGF0IGZvbGxvdyBhIGNvbG9uIG9yIGNvbW1hIG9yIHRoYXQgYmVnaW4gdGhlIHRleHQuIEZpbmFsbHksXG4vLyB3ZSBsb29rIHRvIHNlZSB0aGF0IHRoZSByZW1haW5pbmcgY2hhcmFjdGVycyBhcmUgb25seSB3aGl0ZXNwYWNlIG9yICddJyBvclxuLy8gJywnIG9yICc6JyBvciAneycgb3IgJ30nLiBJZiB0aGF0IGlzIHNvLCB0aGVuIHRoZSB0ZXh0IGlzIHNhZmUgZm9yIGV2YWwuXG5cbiAgICAgICAgICAgIGlmICgvXltcXF0sOnt9XFxzXSokL1xuICAgICAgICAgICAgICAgICAgICAudGVzdCh0ZXh0LnJlcGxhY2UoL1xcXFwoPzpbXCJcXFxcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZywgJ0AnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiW15cIlxcXFxcXG5cXHJdKlwifHRydWV8ZmFsc2V8bnVsbHwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPy9nLCAnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKD86Xnw6fCwpKD86XFxzKlxcWykrL2csICcnKSkpIHtcblxuLy8gSW4gdGhlIHRoaXJkIHN0YWdlIHdlIHVzZSB0aGUgZXZhbCBmdW5jdGlvbiB0byBjb21waWxlIHRoZSB0ZXh0IGludG8gYVxuLy8gSmF2YVNjcmlwdCBzdHJ1Y3R1cmUuIFRoZSAneycgb3BlcmF0b3IgaXMgc3ViamVjdCB0byBhIHN5bnRhY3RpYyBhbWJpZ3VpdHlcbi8vIGluIEphdmFTY3JpcHQ6IGl0IGNhbiBiZWdpbiBhIGJsb2NrIG9yIGFuIG9iamVjdCBsaXRlcmFsLiBXZSB3cmFwIHRoZSB0ZXh0XG4vLyBpbiBwYXJlbnMgdG8gZWxpbWluYXRlIHRoZSBhbWJpZ3VpdHkuXG5cbiAgICAgICAgICAgICAgICBqID0gZXZhbCgnKCcgKyB0ZXh0ICsgJyknKTtcblxuLy8gSW4gdGhlIG9wdGlvbmFsIGZvdXJ0aCBzdGFnZSwgd2UgcmVjdXJzaXZlbHkgd2FsayB0aGUgbmV3IHN0cnVjdHVyZSwgcGFzc2luZ1xuLy8gZWFjaCBuYW1lL3ZhbHVlIHBhaXIgdG8gYSByZXZpdmVyIGZ1bmN0aW9uIGZvciBwb3NzaWJsZSB0cmFuc2Zvcm1hdGlvbi5cblxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IHdhbGsoeycnOiBqfSwgJycpXG4gICAgICAgICAgICAgICAgICAgIDogajtcbiAgICAgICAgICAgIH1cblxuLy8gSWYgdGhlIHRleHQgaXMgbm90IEpTT04gcGFyc2VhYmxlLCB0aGVuIGEgU3ludGF4RXJyb3IgaXMgdGhyb3duLlxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0pTT04ucGFyc2UnKTtcbiAgICAgICAgfTtcbiAgICB9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT04iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdqc29ucCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ganNvbnA7XG5cbi8qKlxuICogQ2FsbGJhY2sgaW5kZXguXG4gKi9cblxudmFyIGNvdW50ID0gMDtcblxuLyoqXG4gKiBOb29wIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG5vb3AoKXt9XG5cbi8qKlxuICogSlNPTlAgaGFuZGxlclxuICpcbiAqIE9wdGlvbnM6XG4gKiAgLSBwYXJhbSB7U3RyaW5nfSBxcyBwYXJhbWV0ZXIgKGBjYWxsYmFja2ApXG4gKiAgLSB0aW1lb3V0IHtOdW1iZXJ9IGhvdyBsb25nIGFmdGVyIGEgdGltZW91dCBlcnJvciBpcyBlbWl0dGVkIChgNjAwMDBgKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7T2JqZWN0fEZ1bmN0aW9ufSBvcHRpb25hbCBvcHRpb25zIC8gY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbmFsIGNhbGxiYWNrXG4gKi9cblxuZnVuY3Rpb24ganNvbnAodXJsLCBvcHRzLCBmbil7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBvcHRzKSB7XG4gICAgZm4gPSBvcHRzO1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcblxuICB2YXIgcHJlZml4ID0gb3B0cy5wcmVmaXggfHwgJ19fanAnO1xuICB2YXIgcGFyYW0gPSBvcHRzLnBhcmFtIHx8ICdjYWxsYmFjayc7XG4gIHZhciB0aW1lb3V0ID0gbnVsbCAhPSBvcHRzLnRpbWVvdXQgPyBvcHRzLnRpbWVvdXQgOiA2MDAwMDtcbiAgdmFyIGVuYyA9IGVuY29kZVVSSUNvbXBvbmVudDtcbiAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSB8fCBkb2N1bWVudC5oZWFkO1xuICB2YXIgc2NyaXB0O1xuICB2YXIgdGltZXI7XG5cbiAgLy8gZ2VuZXJhdGUgYSB1bmlxdWUgaWQgZm9yIHRoaXMgcmVxdWVzdFxuICB2YXIgaWQgPSBwcmVmaXggKyAoY291bnQrKyk7XG5cbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGlmIChmbikgZm4obmV3IEVycm9yKCdUaW1lb3V0JykpO1xuICAgIH0sIHRpbWVvdXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cCgpe1xuICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgd2luZG93W2lkXSA9IG5vb3A7XG4gIH1cblxuICB3aW5kb3dbaWRdID0gZnVuY3Rpb24oZGF0YSl7XG4gICAgZGVidWcoJ2pzb25wIGdvdCcsIGRhdGEpO1xuICAgIGlmICh0aW1lcikgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKGZuKSBmbihudWxsLCBkYXRhKTtcbiAgfTtcblxuICAvLyBhZGQgcXMgY29tcG9uZW50XG4gIHVybCArPSAofnVybC5pbmRleE9mKCc/JykgPyAnJicgOiAnPycpICsgcGFyYW0gKyAnPScgKyBlbmMoaWQpO1xuICB1cmwgPSB1cmwucmVwbGFjZSgnPyYnLCAnPycpO1xuXG4gIGRlYnVnKCdqc29ucCByZXEgXCIlc1wiJywgdXJsKTtcblxuICAvLyBjcmVhdGUgc2NyaXB0XG4gIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICBzY3JpcHQuc3JjID0gdXJsO1xuICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCB0YXJnZXQpO1xufVxuIiwiLyoqXG4gKiBPYmplY3QjdG9TdHJpbmcoKSByZWYgZm9yIHN0cmluZ2lmeSgpLlxuICovXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogT2JqZWN0I2hhc093blByb3BlcnR5IHJlZlxuICovXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXJyYXkjaW5kZXhPZiBzaGltLlxuICovXG5cbnZhciBpbmRleE9mID0gdHlwZW9mIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nXG4gID8gZnVuY3Rpb24oYXJyLCBlbCkgeyByZXR1cm4gYXJyLmluZGV4T2YoZWwpOyB9XG4gIDogZnVuY3Rpb24oYXJyLCBlbCkge1xuICAgICAgaWYgKHR5cGVvZiBhcnIgPT0gJ3N0cmluZycgJiYgdHlwZW9mIFwiYVwiWzBdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFyciA9IGFyci5zcGxpdCgnJyk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJyW2ldID09PSBlbCkgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuLyoqXG4gKiBBcnJheS5pc0FycmF5IHNoaW0uXG4gKi9cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIE9iamVjdC5rZXlzIHNoaW0uXG4gKi9cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHJldCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiBBcnJheSNmb3JFYWNoIHNoaW0uXG4gKi9cblxudmFyIGZvckVhY2ggPSB0eXBlb2YgQXJyYXkucHJvdG90eXBlLmZvckVhY2ggPT09ICdmdW5jdGlvbidcbiAgPyBmdW5jdGlvbihhcnIsIGZuKSB7IHJldHVybiBhcnIuZm9yRWFjaChmbik7IH1cbiAgOiBmdW5jdGlvbihhcnIsIGZuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgZm4oYXJyW2ldKTtcbiAgICB9O1xuXG4vKipcbiAqIEFycmF5I3JlZHVjZSBzaGltLlxuICovXG5cbnZhciByZWR1Y2UgPSBmdW5jdGlvbihhcnIsIGZuLCBpbml0aWFsKSB7XG4gIGlmICh0eXBlb2YgYXJyLnJlZHVjZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGFyci5yZWR1Y2UoZm4sIGluaXRpYWwpO1xuICB2YXIgcmVzID0gaW5pdGlhbDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHJlcyA9IGZuKHJlcywgYXJyW2ldKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogQ2FjaGUgbm9uLWludGVnZXIgdGVzdCByZWdleHAuXG4gKi9cblxudmFyIGlzaW50ID0gL15bMC05XSskLztcblxuZnVuY3Rpb24gcHJvbW90ZShwYXJlbnQsIGtleSkge1xuICBpZiAocGFyZW50W2tleV0ubGVuZ3RoID09IDApIHJldHVybiBwYXJlbnRba2V5XSA9IHt9XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIGkgaW4gcGFyZW50W2tleV0pIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnRba2V5XSwgaSkpIHtcbiAgICAgIHRbaV0gPSBwYXJlbnRba2V5XVtpXTtcbiAgICB9XG4gIH1cbiAgcGFyZW50W2tleV0gPSB0O1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gcGFyc2UocGFydHMsIHBhcmVudCwga2V5LCB2YWwpIHtcbiAgdmFyIHBhcnQgPSBwYXJ0cy5zaGlmdCgpO1xuXG4gIC8vIGlsbGVnYWxcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoT2JqZWN0LnByb3RvdHlwZSwga2V5KSkgcmV0dXJuO1xuXG4gIC8vIGVuZFxuICBpZiAoIXBhcnQpIHtcbiAgICBpZiAoaXNBcnJheShwYXJlbnRba2V5XSkpIHtcbiAgICAgIHBhcmVudFtrZXldLnB1c2godmFsKTtcbiAgICB9IGVsc2UgaWYgKCdvYmplY3QnID09IHR5cGVvZiBwYXJlbnRba2V5XSkge1xuICAgICAgcGFyZW50W2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmICgndW5kZWZpbmVkJyA9PSB0eXBlb2YgcGFyZW50W2tleV0pIHtcbiAgICAgIHBhcmVudFtrZXldID0gdmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRba2V5XSA9IFtwYXJlbnRba2V5XSwgdmFsXTtcbiAgICB9XG4gICAgLy8gYXJyYXlcbiAgfSBlbHNlIHtcbiAgICB2YXIgb2JqID0gcGFyZW50W2tleV0gPSBwYXJlbnRba2V5XSB8fCBbXTtcbiAgICBpZiAoJ10nID09IHBhcnQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKCcnICE9IHZhbCkgb2JqLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSBpZiAoJ29iamVjdCcgPT0gdHlwZW9mIG9iaikge1xuICAgICAgICBvYmpbb2JqZWN0S2V5cyhvYmopLmxlbmd0aF0gPSB2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmogPSBwYXJlbnRba2V5XSA9IFtwYXJlbnRba2V5XSwgdmFsXTtcbiAgICAgIH1cbiAgICAgIC8vIHByb3BcbiAgICB9IGVsc2UgaWYgKH5pbmRleE9mKHBhcnQsICddJykpIHtcbiAgICAgIHBhcnQgPSBwYXJ0LnN1YnN0cigwLCBwYXJ0Lmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKCFpc2ludC50ZXN0KHBhcnQpICYmIGlzQXJyYXkob2JqKSkgb2JqID0gcHJvbW90ZShwYXJlbnQsIGtleSk7XG4gICAgICBwYXJzZShwYXJ0cywgb2JqLCBwYXJ0LCB2YWwpO1xuICAgICAgLy8ga2V5XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaXNpbnQudGVzdChwYXJ0KSAmJiBpc0FycmF5KG9iaikpIG9iaiA9IHByb21vdGUocGFyZW50LCBrZXkpO1xuICAgICAgcGFyc2UocGFydHMsIG9iaiwgcGFydCwgdmFsKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSBwYXJlbnQga2V5L3ZhbCBwYWlyLlxuICovXG5cbmZ1bmN0aW9uIG1lcmdlKHBhcmVudCwga2V5LCB2YWwpe1xuICBpZiAofmluZGV4T2Yoa2V5LCAnXScpKSB7XG4gICAgdmFyIHBhcnRzID0ga2V5LnNwbGl0KCdbJylcbiAgICAgICwgbGVuID0gcGFydHMubGVuZ3RoXG4gICAgICAsIGxhc3QgPSBsZW4gLSAxO1xuICAgIHBhcnNlKHBhcnRzLCBwYXJlbnQsICdiYXNlJywgdmFsKTtcbiAgICAvLyBvcHRpbWl6ZVxuICB9IGVsc2Uge1xuICAgIGlmICghaXNpbnQudGVzdChrZXkpICYmIGlzQXJyYXkocGFyZW50LmJhc2UpKSB7XG4gICAgICB2YXIgdCA9IHt9O1xuICAgICAgZm9yICh2YXIgayBpbiBwYXJlbnQuYmFzZSkgdFtrXSA9IHBhcmVudC5iYXNlW2tdO1xuICAgICAgcGFyZW50LmJhc2UgPSB0O1xuICAgIH1cbiAgICBzZXQocGFyZW50LmJhc2UsIGtleSwgdmFsKTtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnQ7XG59XG5cbi8qKlxuICogQ29tcGFjdCBzcGFyc2UgYXJyYXlzLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBhY3Qob2JqKSB7XG4gIGlmICgnb2JqZWN0JyAhPSB0eXBlb2Ygb2JqKSByZXR1cm4gb2JqO1xuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICB2YXIgcmV0ID0gW107XG5cbiAgICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkge1xuICAgICAgICByZXQucHVzaChvYmpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgb2JqW2tleV0gPSBjb21wYWN0KG9ialtrZXldKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIG9iai5cbiAqL1xuXG5mdW5jdGlvbiBwYXJzZU9iamVjdChvYmope1xuICB2YXIgcmV0ID0geyBiYXNlOiB7fSB9O1xuXG4gIGZvckVhY2gob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihuYW1lKXtcbiAgICBtZXJnZShyZXQsIG5hbWUsIG9ialtuYW1lXSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb21wYWN0KHJldC5iYXNlKTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gc3RyLlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nKHN0ciwgb3B0aW9ucyl7XG4gIHZhciByZXQgPSByZWR1Y2UoU3RyaW5nKHN0cikuc3BsaXQob3B0aW9ucy5zZXBhcmF0b3IpLCBmdW5jdGlvbihyZXQsIHBhaXIpe1xuICAgIHZhciBlcWwgPSBpbmRleE9mKHBhaXIsICc9JylcbiAgICAgICwgYnJhY2UgPSBsYXN0QnJhY2VJbktleShwYWlyKVxuICAgICAgLCBrZXkgPSBwYWlyLnN1YnN0cigwLCBicmFjZSB8fCBlcWwpXG4gICAgICAsIHZhbCA9IHBhaXIuc3Vic3RyKGJyYWNlIHx8IGVxbCwgcGFpci5sZW5ndGgpXG4gICAgICAsIHZhbCA9IHZhbC5zdWJzdHIoaW5kZXhPZih2YWwsICc9JykgKyAxLCB2YWwubGVuZ3RoKTtcblxuICAgIC8vID9mb29cbiAgICBpZiAoJycgPT0ga2V5KSBrZXkgPSBwYWlyLCB2YWwgPSAnJztcbiAgICBpZiAoJycgPT0ga2V5KSByZXR1cm4gcmV0O1xuXG4gICAgcmV0dXJuIG1lcmdlKHJldCwgZGVjb2RlKGtleSksIGRlY29kZSh2YWwpKTtcbiAgfSwgeyBiYXNlOiB7fSB9KS5iYXNlO1xuXG4gIHJldHVybiBjb21wYWN0KHJldCk7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIHF1ZXJ5IGBzdHJgIG9yIGBvYmpgLCByZXR1cm5pbmcgYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgfCB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uKHN0ciwgb3B0aW9ucyl7XG4gIGlmIChudWxsID09IHN0ciB8fCAnJyA9PSBzdHIpIHJldHVybiB7fTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuc2VwYXJhdG9yID0gb3B0aW9ucy5zZXBhcmF0b3IgfHwgJyYnO1xuICByZXR1cm4gJ29iamVjdCcgPT0gdHlwZW9mIHN0clxuICAgID8gcGFyc2VPYmplY3Qoc3RyKVxuICAgIDogcGFyc2VTdHJpbmcoc3RyLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogVHVybiB0aGUgZ2l2ZW4gYG9iamAgaW50byBhIHF1ZXJ5IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxudmFyIHN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24ob2JqLCBwcmVmaXgpIHtcbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheShvYmosIHByZWZpeCk7XG4gIH0gZWxzZSBpZiAoJ1tvYmplY3QgT2JqZWN0XScgPT0gdG9TdHJpbmcuY2FsbChvYmopKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdChvYmosIHByZWZpeCk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIG9iaikge1xuICAgIHJldHVybiBzdHJpbmdpZnlTdHJpbmcob2JqLCBwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKG9iaikpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0cmluZ2lmeSB0aGUgZ2l2ZW4gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5naWZ5U3RyaW5nKHN0ciwgcHJlZml4KSB7XG4gIGlmICghcHJlZml4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzdHJpbmdpZnkgZXhwZWN0cyBhbiBvYmplY3QnKTtcbiAgcmV0dXJuIHByZWZpeCArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChzdHIpO1xufVxuXG4vKipcbiAqIFN0cmluZ2lmeSB0aGUgZ2l2ZW4gYGFycmAuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheShhcnIsIHByZWZpeCkge1xuICB2YXIgcmV0ID0gW107XG4gIGlmICghcHJlZml4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzdHJpbmdpZnkgZXhwZWN0cyBhbiBvYmplY3QnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICByZXQucHVzaChzdHJpbmdpZnkoYXJyW2ldLCBwcmVmaXggKyAnWycgKyBpICsgJ10nKSk7XG4gIH1cbiAgcmV0dXJuIHJldC5qb2luKCcmJyk7XG59XG5cbi8qKlxuICogU3RyaW5naWZ5IHRoZSBnaXZlbiBgb2JqYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3Qob2JqLCBwcmVmaXgpIHtcbiAgdmFyIHJldCA9IFtdXG4gICAgLCBrZXlzID0gb2JqZWN0S2V5cyhvYmopXG4gICAgLCBrZXk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICgnJyA9PSBrZXkpIGNvbnRpbnVlO1xuICAgIGlmIChudWxsID09IG9ialtrZXldKSB7XG4gICAgICByZXQucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldC5wdXNoKHN0cmluZ2lmeShvYmpba2V5XSwgcHJlZml4XG4gICAgICAgID8gcHJlZml4ICsgJ1snICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnXSdcbiAgICAgICAgOiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQuam9pbignJicpO1xufVxuXG4vKipcbiAqIFNldCBgb2JqYCdzIGBrZXlgIHRvIGB2YWxgIHJlc3BlY3RpbmdcbiAqIHRoZSB3ZWlyZCBhbmQgd29uZGVyZnVsIHN5bnRheCBvZiBhIHFzLFxuICogd2hlcmUgXCJmb289YmFyJmZvbz1iYXpcIiBiZWNvbWVzIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldChvYmosIGtleSwgdmFsKSB7XG4gIHZhciB2ID0gb2JqW2tleV07XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKE9iamVjdC5wcm90b3R5cGUsIGtleSkpIHJldHVybjtcbiAgaWYgKHVuZGVmaW5lZCA9PT0gdikge1xuICAgIG9ialtrZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodikpIHtcbiAgICB2LnB1c2godmFsKTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IFt2LCB2YWxdO1xuICB9XG59XG5cbi8qKlxuICogTG9jYXRlIGxhc3QgYnJhY2UgaW4gYHN0cmAgd2l0aGluIHRoZSBrZXkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbGFzdEJyYWNlSW5LZXkoc3RyKSB7XG4gIHZhciBsZW4gPSBzdHIubGVuZ3RoXG4gICAgLCBicmFjZVxuICAgICwgYztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGMgPSBzdHJbaV07XG4gICAgaWYgKCddJyA9PSBjKSBicmFjZSA9IGZhbHNlO1xuICAgIGlmICgnWycgPT0gYykgYnJhY2UgPSB0cnVlO1xuICAgIGlmICgnPScgPT0gYyAmJiAhYnJhY2UpIHJldHVybiBpO1xuICB9XG59XG5cbi8qKlxuICogRGVjb2RlIGBzdHJgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0ci5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cbiIsIi8qIVxuICAqIFJlcXdlc3QhIEEgZ2VuZXJhbCBwdXJwb3NlIFhIUiBjb25uZWN0aW9uIG1hbmFnZXJcbiAgKiBsaWNlbnNlIE1JVCAoYykgRHVzdGluIERpYXogMjAxNFxuICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvcmVxd2VzdFxuICAqL1xuXG4hZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZGVmaW5pdGlvbilcbiAgZWxzZSBjb250ZXh0W25hbWVdID0gZGVmaW5pdGlvbigpXG59KCdyZXF3ZXN0JywgdGhpcywgZnVuY3Rpb24gKCkge1xuXG4gIHZhciB3aW4gPSB3aW5kb3dcbiAgICAsIGRvYyA9IGRvY3VtZW50XG4gICAgLCBodHRwc1JlID0gL15odHRwL1xuICAgICwgcHJvdG9jb2xSZSA9IC8oXlxcdyspOlxcL1xcLy9cbiAgICAsIHR3b0h1bmRvID0gL14oMjBcXGR8MTIyMykkLyAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTAwNDY5NzIvbXNpZS1yZXR1cm5zLXN0YXR1cy1jb2RlLW9mLTEyMjMtZm9yLWFqYXgtcmVxdWVzdFxuICAgICwgYnlUYWcgPSAnZ2V0RWxlbWVudHNCeVRhZ05hbWUnXG4gICAgLCByZWFkeVN0YXRlID0gJ3JlYWR5U3RhdGUnXG4gICAgLCBjb250ZW50VHlwZSA9ICdDb250ZW50LVR5cGUnXG4gICAgLCByZXF1ZXN0ZWRXaXRoID0gJ1gtUmVxdWVzdGVkLVdpdGgnXG4gICAgLCBoZWFkID0gZG9jW2J5VGFnXSgnaGVhZCcpWzBdXG4gICAgLCB1bmlxaWQgPSAwXG4gICAgLCBjYWxsYmFja1ByZWZpeCA9ICdyZXF3ZXN0XycgKyAoK25ldyBEYXRlKCkpXG4gICAgLCBsYXN0VmFsdWUgLy8gZGF0YSBzdG9yZWQgYnkgdGhlIG1vc3QgcmVjZW50IEpTT05QIGNhbGxiYWNrXG4gICAgLCB4bWxIdHRwUmVxdWVzdCA9ICdYTUxIdHRwUmVxdWVzdCdcbiAgICAsIHhEb21haW5SZXF1ZXN0ID0gJ1hEb21haW5SZXF1ZXN0J1xuICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG5cbiAgICAsIGlzQXJyYXkgPSB0eXBlb2YgQXJyYXkuaXNBcnJheSA9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gQXJyYXkuaXNBcnJheVxuICAgICAgICA6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gYSBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgfVxuXG4gICAgLCBkZWZhdWx0SGVhZGVycyA9IHtcbiAgICAgICAgICAnY29udGVudFR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgICAgICAsICdyZXF1ZXN0ZWRXaXRoJzogeG1sSHR0cFJlcXVlc3RcbiAgICAgICAgLCAnYWNjZXB0Jzoge1xuICAgICAgICAgICAgICAnKic6ICAndGV4dC9qYXZhc2NyaXB0LCB0ZXh0L2h0bWwsIGFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwsICovKidcbiAgICAgICAgICAgICwgJ3htbCc6ICAnYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCdcbiAgICAgICAgICAgICwgJ2h0bWwnOiAndGV4dC9odG1sJ1xuICAgICAgICAgICAgLCAndGV4dCc6ICd0ZXh0L3BsYWluJ1xuICAgICAgICAgICAgLCAnanNvbic6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQnXG4gICAgICAgICAgICAsICdqcyc6ICAgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQsIHRleHQvamF2YXNjcmlwdCdcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAsIHhociA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgLy8gaXMgaXQgeC1kb21haW5cbiAgICAgICAgaWYgKG9bJ2Nyb3NzT3JpZ2luJ10gPT09IHRydWUpIHtcbiAgICAgICAgICB2YXIgeGhyID0gd2luW3htbEh0dHBSZXF1ZXN0XSA/IG5ldyBYTUxIdHRwUmVxdWVzdCgpIDogbnVsbFxuICAgICAgICAgIGlmICh4aHIgJiYgJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgICAgICAgICByZXR1cm4geGhyXG4gICAgICAgICAgfSBlbHNlIGlmICh3aW5beERvbWFpblJlcXVlc3RdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzJylcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAod2luW3htbEh0dHBSZXF1ZXN0XSkge1xuICAgICAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgLCBnbG9iYWxTZXR1cE9wdGlvbnMgPSB7XG4gICAgICAgIGRhdGFGaWx0ZXI6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgfVxuICAgICAgfVxuXG4gIGZ1bmN0aW9uIHN1Y2NlZWQocikge1xuICAgIHZhciBwcm90b2NvbCA9IHByb3RvY29sUmUuZXhlYyhyLnVybCk7XG4gICAgcHJvdG9jb2wgPSAocHJvdG9jb2wgJiYgcHJvdG9jb2xbMV0pIHx8IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbDtcbiAgICByZXR1cm4gaHR0cHNSZS50ZXN0KHByb3RvY29sKSA/IHR3b0h1bmRvLnRlc3Qoci5yZXF1ZXN0LnN0YXR1cykgOiAhIXIucmVxdWVzdC5yZXNwb25zZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVJlYWR5U3RhdGUociwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gdXNlIF9hYm9ydGVkIHRvIG1pdGlnYXRlIGFnYWluc3QgSUUgZXJyIGMwMGMwMjNmXG4gICAgICAvLyAoY2FuJ3QgcmVhZCBwcm9wcyBvbiBhYm9ydGVkIHJlcXVlc3Qgb2JqZWN0cylcbiAgICAgIGlmIChyLl9hYm9ydGVkKSByZXR1cm4gZXJyb3Ioci5yZXF1ZXN0KVxuICAgICAgaWYgKHIuX3RpbWVkT3V0KSByZXR1cm4gZXJyb3Ioci5yZXF1ZXN0LCAnUmVxdWVzdCBpcyBhYm9ydGVkOiB0aW1lb3V0JylcbiAgICAgIGlmIChyLnJlcXVlc3QgJiYgci5yZXF1ZXN0W3JlYWR5U3RhdGVdID09IDQpIHtcbiAgICAgICAgci5yZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG5vb3BcbiAgICAgICAgaWYgKHN1Y2NlZWQocikpIHN1Y2Nlc3Moci5yZXF1ZXN0KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgZXJyb3Ioci5yZXF1ZXN0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEhlYWRlcnMoaHR0cCwgbykge1xuICAgIHZhciBoZWFkZXJzID0gb1snaGVhZGVycyddIHx8IHt9XG4gICAgICAsIGhcblxuICAgIGhlYWRlcnNbJ0FjY2VwdCddID0gaGVhZGVyc1snQWNjZXB0J11cbiAgICAgIHx8IGRlZmF1bHRIZWFkZXJzWydhY2NlcHQnXVtvWyd0eXBlJ11dXG4gICAgICB8fCBkZWZhdWx0SGVhZGVyc1snYWNjZXB0J11bJyonXVxuXG4gICAgdmFyIGlzQUZvcm1EYXRhID0gdHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIChvWydkYXRhJ10gaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG4gICAgLy8gYnJlYWtzIGNyb3NzLW9yaWdpbiByZXF1ZXN0cyB3aXRoIGxlZ2FjeSBicm93c2Vyc1xuICAgIGlmICghb1snY3Jvc3NPcmlnaW4nXSAmJiAhaGVhZGVyc1tyZXF1ZXN0ZWRXaXRoXSkgaGVhZGVyc1tyZXF1ZXN0ZWRXaXRoXSA9IGRlZmF1bHRIZWFkZXJzWydyZXF1ZXN0ZWRXaXRoJ11cbiAgICBpZiAoIWhlYWRlcnNbY29udGVudFR5cGVdICYmICFpc0FGb3JtRGF0YSkgaGVhZGVyc1tjb250ZW50VHlwZV0gPSBvWydjb250ZW50VHlwZSddIHx8IGRlZmF1bHRIZWFkZXJzWydjb250ZW50VHlwZSddXG4gICAgZm9yIChoIGluIGhlYWRlcnMpXG4gICAgICBoZWFkZXJzLmhhc093blByb3BlcnR5KGgpICYmICdzZXRSZXF1ZXN0SGVhZGVyJyBpbiBodHRwICYmIGh0dHAuc2V0UmVxdWVzdEhlYWRlcihoLCBoZWFkZXJzW2hdKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q3JlZGVudGlhbHMoaHR0cCwgbykge1xuICAgIGlmICh0eXBlb2Ygb1snd2l0aENyZWRlbnRpYWxzJ10gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBodHRwLndpdGhDcmVkZW50aWFscyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGh0dHAud2l0aENyZWRlbnRpYWxzID0gISFvWyd3aXRoQ3JlZGVudGlhbHMnXVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYWxDYWxsYmFjayhkYXRhKSB7XG4gICAgbGFzdFZhbHVlID0gZGF0YVxuICB9XG5cbiAgZnVuY3Rpb24gdXJsYXBwZW5kICh1cmwsIHMpIHtcbiAgICByZXR1cm4gdXJsICsgKC9cXD8vLnRlc3QodXJsKSA/ICcmJyA6ICc/JykgKyBzXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVKc29ucChvLCBmbiwgZXJyLCB1cmwpIHtcbiAgICB2YXIgcmVxSWQgPSB1bmlxaWQrK1xuICAgICAgLCBjYmtleSA9IG9bJ2pzb25wQ2FsbGJhY2snXSB8fCAnY2FsbGJhY2snIC8vIHRoZSAnY2FsbGJhY2snIGtleVxuICAgICAgLCBjYnZhbCA9IG9bJ2pzb25wQ2FsbGJhY2tOYW1lJ10gfHwgcmVxd2VzdC5nZXRjYWxsYmFja1ByZWZpeChyZXFJZClcbiAgICAgICwgY2JyZWcgPSBuZXcgUmVnRXhwKCcoKF58XFxcXD98JiknICsgY2JrZXkgKyAnKT0oW14mXSspJylcbiAgICAgICwgbWF0Y2ggPSB1cmwubWF0Y2goY2JyZWcpXG4gICAgICAsIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgLCBsb2FkZWQgPSAwXG4gICAgICAsIGlzSUUxMCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRSAxMC4wJykgIT09IC0xXG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGlmIChtYXRjaFszXSA9PT0gJz8nKSB7XG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKGNicmVnLCAnJDE9JyArIGNidmFsKSAvLyB3aWxkY2FyZCBjYWxsYmFjayBmdW5jIG5hbWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNidmFsID0gbWF0Y2hbM10gLy8gcHJvdmlkZWQgY2FsbGJhY2sgZnVuYyBuYW1lXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybCA9IHVybGFwcGVuZCh1cmwsIGNia2V5ICsgJz0nICsgY2J2YWwpIC8vIG5vIGNhbGxiYWNrIGRldGFpbHMsIGFkZCAnZW1cbiAgICB9XG5cbiAgICB3aW5bY2J2YWxdID0gZ2VuZXJhbENhbGxiYWNrXG5cbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgc2NyaXB0LnNyYyA9IHVybFxuICAgIHNjcmlwdC5hc3luYyA9IHRydWVcbiAgICBpZiAodHlwZW9mIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgIT09ICd1bmRlZmluZWQnICYmICFpc0lFMTApIHtcbiAgICAgIC8vIG5lZWQgdGhpcyBmb3IgSUUgZHVlIHRvIG91dC1vZi1vcmRlciBvbnJlYWR5c3RhdGVjaGFuZ2UoKSwgYmluZGluZyBzY3JpcHRcbiAgICAgIC8vIGV4ZWN1dGlvbiB0byBhbiBldmVudCBsaXN0ZW5lciBnaXZlcyB1cyBjb250cm9sIG92ZXIgd2hlbiB0aGUgc2NyaXB0XG4gICAgICAvLyBpcyBleGVjdXRlZC4gU2VlIGh0dHA6Ly9qYXVib3VyZy5uZXQvMjAxMC8wNy9sb2FkaW5nLXNjcmlwdC1hcy1vbmNsaWNrLWhhbmRsZXItb2YuaHRtbFxuICAgICAgc2NyaXB0Lmh0bWxGb3IgPSBzY3JpcHQuaWQgPSAnX3JlcXdlc3RfJyArIHJlcUlkXG4gICAgfVxuXG4gICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoKHNjcmlwdFtyZWFkeVN0YXRlXSAmJiBzY3JpcHRbcmVhZHlTdGF0ZV0gIT09ICdjb21wbGV0ZScgJiYgc2NyaXB0W3JlYWR5U3RhdGVdICE9PSAnbG9hZGVkJykgfHwgbG9hZGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsXG4gICAgICBzY3JpcHQub25jbGljayAmJiBzY3JpcHQub25jbGljaygpXG4gICAgICAvLyBDYWxsIHRoZSB1c2VyIGNhbGxiYWNrIHdpdGggdGhlIGxhc3QgdmFsdWUgc3RvcmVkIGFuZCBjbGVhbiB1cCB2YWx1ZXMgYW5kIHNjcmlwdHMuXG4gICAgICBmbihsYXN0VmFsdWUpXG4gICAgICBsYXN0VmFsdWUgPSB1bmRlZmluZWRcbiAgICAgIGhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0KVxuICAgICAgbG9hZGVkID0gMVxuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgc2NyaXB0IHRvIHRoZSBET00gaGVhZFxuICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KVxuXG4gICAgLy8gRW5hYmxlIEpTT05QIHRpbWVvdXRcbiAgICByZXR1cm4ge1xuICAgICAgYWJvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsXG4gICAgICAgIGVycih7fSwgJ1JlcXVlc3QgaXMgYWJvcnRlZDogdGltZW91dCcsIHt9KVxuICAgICAgICBsYXN0VmFsdWUgPSB1bmRlZmluZWRcbiAgICAgICAgaGVhZC5yZW1vdmVDaGlsZChzY3JpcHQpXG4gICAgICAgIGxvYWRlZCA9IDFcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSZXF1ZXN0KGZuLCBlcnIpIHtcbiAgICB2YXIgbyA9IHRoaXMub1xuICAgICAgLCBtZXRob2QgPSAob1snbWV0aG9kJ10gfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKClcbiAgICAgICwgdXJsID0gdHlwZW9mIG8gPT09ICdzdHJpbmcnID8gbyA6IG9bJ3VybCddXG4gICAgICAvLyBjb252ZXJ0IG5vbi1zdHJpbmcgb2JqZWN0cyB0byBxdWVyeS1zdHJpbmcgZm9ybSB1bmxlc3Mgb1sncHJvY2Vzc0RhdGEnXSBpcyBmYWxzZVxuICAgICAgLCBkYXRhID0gKG9bJ3Byb2Nlc3NEYXRhJ10gIT09IGZhbHNlICYmIG9bJ2RhdGEnXSAmJiB0eXBlb2Ygb1snZGF0YSddICE9PSAnc3RyaW5nJylcbiAgICAgICAgPyByZXF3ZXN0LnRvUXVlcnlTdHJpbmcob1snZGF0YSddKVxuICAgICAgICA6IChvWydkYXRhJ10gfHwgbnVsbClcbiAgICAgICwgaHR0cFxuICAgICAgLCBzZW5kV2FpdCA9IGZhbHNlXG5cbiAgICAvLyBpZiB3ZSdyZSB3b3JraW5nIG9uIGEgR0VUIHJlcXVlc3QgYW5kIHdlIGhhdmUgZGF0YSB0aGVuIHdlIHNob3VsZCBhcHBlbmRcbiAgICAvLyBxdWVyeSBzdHJpbmcgdG8gZW5kIG9mIFVSTCBhbmQgbm90IHBvc3QgZGF0YVxuICAgIGlmICgob1sndHlwZSddID09ICdqc29ucCcgfHwgbWV0aG9kID09ICdHRVQnKSAmJiBkYXRhKSB7XG4gICAgICB1cmwgPSB1cmxhcHBlbmQodXJsLCBkYXRhKVxuICAgICAgZGF0YSA9IG51bGxcbiAgICB9XG5cbiAgICBpZiAob1sndHlwZSddID09ICdqc29ucCcpIHJldHVybiBoYW5kbGVKc29ucChvLCBmbiwgZXJyLCB1cmwpXG5cbiAgICAvLyBnZXQgdGhlIHhociBmcm9tIHRoZSBmYWN0b3J5IGlmIHBhc3NlZFxuICAgIC8vIGlmIHRoZSBmYWN0b3J5IHJldHVybnMgbnVsbCwgZmFsbC1iYWNrIHRvIG91cnNcbiAgICBodHRwID0gKG8ueGhyICYmIG8ueGhyKG8pKSB8fCB4aHIobylcblxuICAgIGh0dHAub3BlbihtZXRob2QsIHVybCwgb1snYXN5bmMnXSA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWUpXG4gICAgc2V0SGVhZGVycyhodHRwLCBvKVxuICAgIHNldENyZWRlbnRpYWxzKGh0dHAsIG8pXG4gICAgaWYgKHdpblt4RG9tYWluUmVxdWVzdF0gJiYgaHR0cCBpbnN0YW5jZW9mIHdpblt4RG9tYWluUmVxdWVzdF0pIHtcbiAgICAgICAgaHR0cC5vbmxvYWQgPSBmblxuICAgICAgICBodHRwLm9uZXJyb3IgPSBlcnJcbiAgICAgICAgLy8gTk9URTogc2VlXG4gICAgICAgIC8vIGh0dHA6Ly9zb2NpYWwubXNkbi5taWNyb3NvZnQuY29tL0ZvcnVtcy9lbi1VUy9pZXdlYmRldmVsb3BtZW50L3RocmVhZC8zMGVmM2FkZC03NjdjLTQ0MzYtYjhhOS1mMWNhMTliNDgxMmVcbiAgICAgICAgaHR0cC5vbnByb2dyZXNzID0gZnVuY3Rpb24oKSB7fVxuICAgICAgICBzZW5kV2FpdCA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgaHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVSZWFkeVN0YXRlKHRoaXMsIGZuLCBlcnIpXG4gICAgfVxuICAgIG9bJ2JlZm9yZSddICYmIG9bJ2JlZm9yZSddKGh0dHApXG4gICAgaWYgKHNlbmRXYWl0KSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHR0cC5zZW5kKGRhdGEpXG4gICAgICB9LCAyMDApXG4gICAgfSBlbHNlIHtcbiAgICAgIGh0dHAuc2VuZChkYXRhKVxuICAgIH1cbiAgICByZXR1cm4gaHR0cFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxd2VzdChvLCBmbikge1xuICAgIHRoaXMubyA9IG9cbiAgICB0aGlzLmZuID0gZm5cblxuICAgIGluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VHlwZShoZWFkZXIpIHtcbiAgICAvLyBqc29uLCBqYXZhc2NyaXB0LCB0ZXh0L3BsYWluLCB0ZXh0L2h0bWwsIHhtbFxuICAgIGlmIChoZWFkZXIubWF0Y2goJ2pzb24nKSkgcmV0dXJuICdqc29uJ1xuICAgIGlmIChoZWFkZXIubWF0Y2goJ2phdmFzY3JpcHQnKSkgcmV0dXJuICdqcydcbiAgICBpZiAoaGVhZGVyLm1hdGNoKCd0ZXh0JykpIHJldHVybiAnaHRtbCdcbiAgICBpZiAoaGVhZGVyLm1hdGNoKCd4bWwnKSkgcmV0dXJuICd4bWwnXG4gIH1cblxuICBmdW5jdGlvbiBpbml0KG8sIGZuKSB7XG5cbiAgICB0aGlzLnVybCA9IHR5cGVvZiBvID09ICdzdHJpbmcnID8gbyA6IG9bJ3VybCddXG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbFxuXG4gICAgLy8gd2hldGhlciByZXF1ZXN0IGhhcyBiZWVuIGZ1bGZpbGxlZCBmb3IgcHVycG9zZVxuICAgIC8vIG9mIHRyYWNraW5nIHRoZSBQcm9taXNlc1xuICAgIHRoaXMuX2Z1bGZpbGxlZCA9IGZhbHNlXG4gICAgLy8gc3VjY2VzcyBoYW5kbGVyc1xuICAgIHRoaXMuX3N1Y2Nlc3NIYW5kbGVyID0gZnVuY3Rpb24oKXt9XG4gICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVycyA9IFtdXG4gICAgLy8gZXJyb3IgaGFuZGxlcnNcbiAgICB0aGlzLl9lcnJvckhhbmRsZXJzID0gW11cbiAgICAvLyBjb21wbGV0ZSAoYm90aCBzdWNjZXNzIGFuZCBmYWlsKSBoYW5kbGVyc1xuICAgIHRoaXMuX2NvbXBsZXRlSGFuZGxlcnMgPSBbXVxuICAgIHRoaXMuX2VycmVkID0gZmFsc2VcbiAgICB0aGlzLl9yZXNwb25zZUFyZ3MgPSB7fVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgICBmbiA9IGZuIHx8IGZ1bmN0aW9uICgpIHt9XG5cbiAgICBpZiAob1sndGltZW91dCddKSB7XG4gICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGltZWRPdXQoKVxuICAgICAgfSwgb1sndGltZW91dCddKVxuICAgIH1cblxuICAgIGlmIChvWydzdWNjZXNzJ10pIHtcbiAgICAgIHRoaXMuX3N1Y2Nlc3NIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBvWydzdWNjZXNzJ10uYXBwbHkobywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvWydlcnJvciddKSB7XG4gICAgICB0aGlzLl9lcnJvckhhbmRsZXJzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICBvWydlcnJvciddLmFwcGx5KG8sIGFyZ3VtZW50cylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKG9bJ2NvbXBsZXRlJ10pIHtcbiAgICAgIHRoaXMuX2NvbXBsZXRlSGFuZGxlcnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9bJ2NvbXBsZXRlJ10uYXBwbHkobywgYXJndW1lbnRzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZSAocmVzcCkge1xuICAgICAgb1sndGltZW91dCddICYmIGNsZWFyVGltZW91dChzZWxmLnRpbWVvdXQpXG4gICAgICBzZWxmLnRpbWVvdXQgPSBudWxsXG4gICAgICB3aGlsZSAoc2VsZi5fY29tcGxldGVIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGYuX2NvbXBsZXRlSGFuZGxlcnMuc2hpZnQoKShyZXNwKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1Y2Nlc3MgKHJlc3ApIHtcbiAgICAgIHZhciB0eXBlID0gb1sndHlwZSddIHx8IHJlc3AgJiYgc2V0VHlwZShyZXNwLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKSkgLy8gcmVzcCBjYW4gYmUgdW5kZWZpbmVkIGluIElFXG4gICAgICByZXNwID0gKHR5cGUgIT09ICdqc29ucCcpID8gc2VsZi5yZXF1ZXN0IDogcmVzcFxuICAgICAgLy8gdXNlIGdsb2JhbCBkYXRhIGZpbHRlciBvbiByZXNwb25zZSB0ZXh0XG4gICAgICB2YXIgZmlsdGVyZWRSZXNwb25zZSA9IGdsb2JhbFNldHVwT3B0aW9ucy5kYXRhRmlsdGVyKHJlc3AucmVzcG9uc2VUZXh0LCB0eXBlKVxuICAgICAgICAsIHIgPSBmaWx0ZXJlZFJlc3BvbnNlXG4gICAgICB0cnkge1xuICAgICAgICByZXNwLnJlc3BvbnNlVGV4dCA9IHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gY2FuJ3QgYXNzaWduIHRoaXMgaW4gSUU8PTgsIGp1c3QgaWdub3JlXG4gICAgICB9XG4gICAgICBpZiAocikge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3AgPSB3aW4uSlNPTiA/IHdpbi5KU09OLnBhcnNlKHIpIDogZXZhbCgnKCcgKyByICsgJyknKVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKHJlc3AsICdDb3VsZCBub3QgcGFyc2UgSlNPTiBpbiByZXNwb25zZScsIGVycilcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnanMnOlxuICAgICAgICAgIHJlc3AgPSBldmFsKHIpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgICAgcmVzcCA9IHJcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICd4bWwnOlxuICAgICAgICAgIHJlc3AgPSByZXNwLnJlc3BvbnNlWE1MXG4gICAgICAgICAgICAgICYmIHJlc3AucmVzcG9uc2VYTUwucGFyc2VFcnJvciAvLyBJRSB0cm9sb2xvXG4gICAgICAgICAgICAgICYmIHJlc3AucmVzcG9uc2VYTUwucGFyc2VFcnJvci5lcnJvckNvZGVcbiAgICAgICAgICAgICAgJiYgcmVzcC5yZXNwb25zZVhNTC5wYXJzZUVycm9yLnJlYXNvblxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IHJlc3AucmVzcG9uc2VYTUxcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy5yZXNwID0gcmVzcFxuICAgICAgc2VsZi5fZnVsZmlsbGVkID0gdHJ1ZVxuICAgICAgZm4ocmVzcClcbiAgICAgIHNlbGYuX3N1Y2Nlc3NIYW5kbGVyKHJlc3ApXG4gICAgICB3aGlsZSAoc2VsZi5fZnVsZmlsbG1lbnRIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlc3AgPSBzZWxmLl9mdWxmaWxsbWVudEhhbmRsZXJzLnNoaWZ0KCkocmVzcClcbiAgICAgIH1cblxuICAgICAgY29tcGxldGUocmVzcClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aW1lZE91dCgpIHtcbiAgICAgIHNlbGYuX3RpbWVkT3V0ID0gdHJ1ZVxuICAgICAgc2VsZi5yZXF1ZXN0LmFib3J0KCkgICAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcnJvcihyZXNwLCBtc2csIHQpIHtcbiAgICAgIHJlc3AgPSBzZWxmLnJlcXVlc3RcbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy5yZXNwID0gcmVzcFxuICAgICAgc2VsZi5fcmVzcG9uc2VBcmdzLm1zZyA9IG1zZ1xuICAgICAgc2VsZi5fcmVzcG9uc2VBcmdzLnQgPSB0XG4gICAgICBzZWxmLl9lcnJlZCA9IHRydWVcbiAgICAgIHdoaWxlIChzZWxmLl9lcnJvckhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2VsZi5fZXJyb3JIYW5kbGVycy5zaGlmdCgpKHJlc3AsIG1zZywgdClcbiAgICAgIH1cbiAgICAgIGNvbXBsZXRlKHJlc3ApXG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0ID0gZ2V0UmVxdWVzdC5jYWxsKHRoaXMsIHN1Y2Nlc3MsIGVycm9yKVxuICB9XG5cbiAgUmVxd2VzdC5wcm90b3R5cGUgPSB7XG4gICAgYWJvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX2Fib3J0ZWQgPSB0cnVlXG4gICAgICB0aGlzLnJlcXVlc3QuYWJvcnQoKVxuICAgIH1cblxuICAsIHJldHJ5OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpbml0LmNhbGwodGhpcywgdGhpcy5vLCB0aGlzLmZuKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNtYWxsIGRldmlhdGlvbiBmcm9tIHRoZSBQcm9taXNlcyBBIENvbW1vbkpzIHNwZWNpZmljYXRpb25cbiAgICAgKiBodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcy9BXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBgdGhlbmAgd2lsbCBleGVjdXRlIHVwb24gc3VjY2Vzc2Z1bCByZXF1ZXN0c1xuICAgICAqL1xuICAsIHRoZW46IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsKSB7XG4gICAgICBzdWNjZXNzID0gc3VjY2VzcyB8fCBmdW5jdGlvbiAoKSB7fVxuICAgICAgZmFpbCA9IGZhaWwgfHwgZnVuY3Rpb24gKCkge31cbiAgICAgIGlmICh0aGlzLl9mdWxmaWxsZWQpIHtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VBcmdzLnJlc3AgPSBzdWNjZXNzKHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9lcnJlZCkge1xuICAgICAgICBmYWlsKHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwLCB0aGlzLl9yZXNwb25zZUFyZ3MubXNnLCB0aGlzLl9yZXNwb25zZUFyZ3MudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcnMucHVzaChzdWNjZXNzKVxuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXJzLnB1c2goZmFpbClcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYGFsd2F5c2Agd2lsbCBleGVjdXRlIHdoZXRoZXIgdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHNcbiAgICAgKi9cbiAgLCBhbHdheXM6IGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKHRoaXMuX2Z1bGZpbGxlZCB8fCB0aGlzLl9lcnJlZCkge1xuICAgICAgICBmbih0aGlzLl9yZXNwb25zZUFyZ3MucmVzcClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlSGFuZGxlcnMucHVzaChmbilcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYGZhaWxgIHdpbGwgZXhlY3V0ZSB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzXG4gICAgICovXG4gICwgZmFpbDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICBpZiAodGhpcy5fZXJyZWQpIHtcbiAgICAgICAgZm4odGhpcy5fcmVzcG9uc2VBcmdzLnJlc3AsIHRoaXMuX3Jlc3BvbnNlQXJncy5tc2csIHRoaXMuX3Jlc3BvbnNlQXJncy50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVycy5wdXNoKGZuKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICwgJ2NhdGNoJzogZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gdGhpcy5mYWlsKGZuKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcXdlc3QobywgZm4pIHtcbiAgICByZXR1cm4gbmV3IFJlcXdlc3QobywgZm4pXG4gIH1cblxuICAvLyBub3JtYWxpemUgbmV3bGluZSB2YXJpYW50cyBhY2NvcmRpbmcgdG8gc3BlYyAtPiBDUkxGXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShzKSB7XG4gICAgcmV0dXJuIHMgPyBzLnJlcGxhY2UoL1xccj9cXG4vZywgJ1xcclxcbicpIDogJydcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcmlhbChlbCwgY2IpIHtcbiAgICB2YXIgbiA9IGVsLm5hbWVcbiAgICAgICwgdCA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgLCBvcHRDYiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgLy8gSUUgZ2l2ZXMgdmFsdWU9XCJcIiBldmVuIHdoZXJlIHRoZXJlIGlzIG5vIHZhbHVlIGF0dHJpYnV0ZVxuICAgICAgICAgIC8vICdzcGVjaWZpZWQnIHJlZjogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9jb3JlLmh0bWwjSUQtODYyNTI5MjczXG4gICAgICAgICAgaWYgKG8gJiYgIW9bJ2Rpc2FibGVkJ10pXG4gICAgICAgICAgICBjYihuLCBub3JtYWxpemUob1snYXR0cmlidXRlcyddWyd2YWx1ZSddICYmIG9bJ2F0dHJpYnV0ZXMnXVsndmFsdWUnXVsnc3BlY2lmaWVkJ10gPyBvWyd2YWx1ZSddIDogb1sndGV4dCddKSlcbiAgICAgICAgfVxuICAgICAgLCBjaCwgcmEsIHZhbCwgaVxuXG4gICAgLy8gZG9uJ3Qgc2VyaWFsaXplIGVsZW1lbnRzIHRoYXQgYXJlIGRpc2FibGVkIG9yIHdpdGhvdXQgYSBuYW1lXG4gICAgaWYgKGVsLmRpc2FibGVkIHx8ICFuKSByZXR1cm5cblxuICAgIHN3aXRjaCAodCkge1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIGlmICghL3Jlc2V0fGJ1dHRvbnxpbWFnZXxmaWxlL2kudGVzdChlbC50eXBlKSkge1xuICAgICAgICBjaCA9IC9jaGVja2JveC9pLnRlc3QoZWwudHlwZSlcbiAgICAgICAgcmEgPSAvcmFkaW8vaS50ZXN0KGVsLnR5cGUpXG4gICAgICAgIHZhbCA9IGVsLnZhbHVlXG4gICAgICAgIC8vIFdlYktpdCBnaXZlcyB1cyBcIlwiIGluc3RlYWQgb2YgXCJvblwiIGlmIGEgY2hlY2tib3ggaGFzIG5vIHZhbHVlLCBzbyBjb3JyZWN0IGl0IGhlcmVcbiAgICAgICAgOyghKGNoIHx8IHJhKSB8fCBlbC5jaGVja2VkKSAmJiBjYihuLCBub3JtYWxpemUoY2ggJiYgdmFsID09PSAnJyA/ICdvbicgOiB2YWwpKVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICBjYihuLCBub3JtYWxpemUoZWwudmFsdWUpKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgaWYgKGVsLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdC1vbmUnKSB7XG4gICAgICAgIG9wdENiKGVsLnNlbGVjdGVkSW5kZXggPj0gMCA/IGVsLm9wdGlvbnNbZWwuc2VsZWN0ZWRJbmRleF0gOiBudWxsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMDsgZWwubGVuZ3RoICYmIGkgPCBlbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVsLm9wdGlvbnNbaV0uc2VsZWN0ZWQgJiYgb3B0Q2IoZWwub3B0aW9uc1tpXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBjb2xsZWN0IHVwIGFsbCBmb3JtIGVsZW1lbnRzIGZvdW5kIGZyb20gdGhlIHBhc3NlZCBhcmd1bWVudCBlbGVtZW50cyBhbGxcbiAgLy8gdGhlIHdheSBkb3duIHRvIGNoaWxkIGVsZW1lbnRzOyBwYXNzIGEgJzxmb3JtPicgb3IgZm9ybSBmaWVsZHMuXG4gIC8vIGNhbGxlZCB3aXRoICd0aGlzJz1jYWxsYmFjayB0byB1c2UgZm9yIHNlcmlhbCgpIG9uIGVhY2ggZWxlbWVudFxuICBmdW5jdGlvbiBlYWNoRm9ybUVsZW1lbnQoKSB7XG4gICAgdmFyIGNiID0gdGhpc1xuICAgICAgLCBlLCBpXG4gICAgICAsIHNlcmlhbGl6ZVN1YnRhZ3MgPSBmdW5jdGlvbiAoZSwgdGFncykge1xuICAgICAgICAgIHZhciBpLCBqLCBmYVxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmYSA9IGVbYnlUYWddKHRhZ3NbaV0pXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZmEubGVuZ3RoOyBqKyspIHNlcmlhbChmYVtqXSwgY2IpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBlID0gYXJndW1lbnRzW2ldXG4gICAgICBpZiAoL2lucHV0fHNlbGVjdHx0ZXh0YXJlYS9pLnRlc3QoZS50YWdOYW1lKSkgc2VyaWFsKGUsIGNiKVxuICAgICAgc2VyaWFsaXplU3VidGFncyhlLCBbICdpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnIF0pXG4gICAgfVxuICB9XG5cbiAgLy8gc3RhbmRhcmQgcXVlcnkgc3RyaW5nIHN0eWxlIHNlcmlhbGl6YXRpb25cbiAgZnVuY3Rpb24gc2VyaWFsaXplUXVlcnlTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHJlcXdlc3QudG9RdWVyeVN0cmluZyhyZXF3ZXN0LnNlcmlhbGl6ZUFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cykpXG4gIH1cblxuICAvLyB7ICduYW1lJzogJ3ZhbHVlJywgLi4uIH0gc3R5bGUgc2VyaWFsaXphdGlvblxuICBmdW5jdGlvbiBzZXJpYWxpemVIYXNoKCkge1xuICAgIHZhciBoYXNoID0ge31cbiAgICBlYWNoRm9ybUVsZW1lbnQuYXBwbHkoZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAobmFtZSBpbiBoYXNoKSB7XG4gICAgICAgIGhhc2hbbmFtZV0gJiYgIWlzQXJyYXkoaGFzaFtuYW1lXSkgJiYgKGhhc2hbbmFtZV0gPSBbaGFzaFtuYW1lXV0pXG4gICAgICAgIGhhc2hbbmFtZV0ucHVzaCh2YWx1ZSlcbiAgICAgIH0gZWxzZSBoYXNoW25hbWVdID0gdmFsdWVcbiAgICB9LCBhcmd1bWVudHMpXG4gICAgcmV0dXJuIGhhc2hcbiAgfVxuXG4gIC8vIFsgeyBuYW1lOiAnbmFtZScsIHZhbHVlOiAndmFsdWUnIH0sIC4uLiBdIHN0eWxlIHNlcmlhbGl6YXRpb25cbiAgcmVxd2VzdC5zZXJpYWxpemVBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyID0gW11cbiAgICBlYWNoRm9ybUVsZW1lbnQuYXBwbHkoZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICBhcnIucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSlcbiAgICB9LCBhcmd1bWVudHMpXG4gICAgcmV0dXJuIGFyclxuICB9XG5cbiAgcmVxd2VzdC5zZXJpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiAnJ1xuICAgIHZhciBvcHQsIGZuXG4gICAgICAsIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG5cbiAgICBvcHQgPSBhcmdzLnBvcCgpXG4gICAgb3B0ICYmIG9wdC5ub2RlVHlwZSAmJiBhcmdzLnB1c2gob3B0KSAmJiAob3B0ID0gbnVsbClcbiAgICBvcHQgJiYgKG9wdCA9IG9wdC50eXBlKVxuXG4gICAgaWYgKG9wdCA9PSAnbWFwJykgZm4gPSBzZXJpYWxpemVIYXNoXG4gICAgZWxzZSBpZiAob3B0ID09ICdhcnJheScpIGZuID0gcmVxd2VzdC5zZXJpYWxpemVBcnJheVxuICAgIGVsc2UgZm4gPSBzZXJpYWxpemVRdWVyeVN0cmluZ1xuXG4gICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3MpXG4gIH1cblxuICByZXF3ZXN0LnRvUXVlcnlTdHJpbmcgPSBmdW5jdGlvbiAobywgdHJhZCkge1xuICAgIHZhciBwcmVmaXgsIGlcbiAgICAgICwgdHJhZGl0aW9uYWwgPSB0cmFkIHx8IGZhbHNlXG4gICAgICAsIHMgPSBbXVxuICAgICAgLCBlbmMgPSBlbmNvZGVVUklDb21wb25lbnRcbiAgICAgICwgYWRkID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcbiAgICAgICAgICB2YWx1ZSA9ICgnZnVuY3Rpb24nID09PSB0eXBlb2YgdmFsdWUpID8gdmFsdWUoKSA6ICh2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZSlcbiAgICAgICAgICBzW3MubGVuZ3RoXSA9IGVuYyhrZXkpICsgJz0nICsgZW5jKHZhbHVlKVxuICAgICAgICB9XG4gICAgLy8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cbiAgICBpZiAoaXNBcnJheShvKSkge1xuICAgICAgZm9yIChpID0gMDsgbyAmJiBpIDwgby5sZW5ndGg7IGkrKykgYWRkKG9baV1bJ25hbWUnXSwgb1tpXVsndmFsdWUnXSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcbiAgICAgIC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuICAgICAgZm9yIChwcmVmaXggaW4gbykge1xuICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpKSBidWlsZFBhcmFtcyhwcmVmaXgsIG9bcHJlZml4XSwgdHJhZGl0aW9uYWwsIGFkZClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzcGFjZXMgc2hvdWxkIGJlICsgYWNjb3JkaW5nIHRvIHNwZWNcbiAgICByZXR1cm4gcy5qb2luKCcmJykucmVwbGFjZSgvJTIwL2csICcrJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkUGFyYW1zKHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkKSB7XG4gICAgdmFyIG5hbWUsIGksIHZcbiAgICAgICwgcmJyYWNrZXQgPSAvXFxbXFxdJC9cblxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgIC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuICAgICAgZm9yIChpID0gMDsgb2JqICYmIGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdiA9IG9ialtpXVxuICAgICAgICBpZiAodHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdChwcmVmaXgpKSB7XG4gICAgICAgICAgLy8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuICAgICAgICAgIGFkZChwcmVmaXgsIHYpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVpbGRQYXJhbXMocHJlZml4ICsgJ1snICsgKHR5cGVvZiB2ID09PSAnb2JqZWN0JyA/IGkgOiAnJykgKyAnXScsIHYsIHRyYWRpdGlvbmFsLCBhZGQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9iaiAmJiBvYmoudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cbiAgICAgIGZvciAobmFtZSBpbiBvYmopIHtcbiAgICAgICAgYnVpbGRQYXJhbXMocHJlZml4ICsgJ1snICsgbmFtZSArICddJywgb2JqW25hbWVdLCB0cmFkaXRpb25hbCwgYWRkKVxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cbiAgICAgIGFkZChwcmVmaXgsIG9iailcbiAgICB9XG4gIH1cblxuICByZXF3ZXN0LmdldGNhbGxiYWNrUHJlZml4ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsYmFja1ByZWZpeFxuICB9XG5cbiAgLy8galF1ZXJ5IGFuZCBaZXB0byBjb21wYXRpYmlsaXR5LCBkaWZmZXJlbmNlcyBjYW4gYmUgcmVtYXBwZWQgaGVyZSBzbyB5b3UgY2FuIGNhbGxcbiAgLy8gLmFqYXguY29tcGF0KG9wdGlvbnMsIGNhbGxiYWNrKVxuICByZXF3ZXN0LmNvbXBhdCA9IGZ1bmN0aW9uIChvLCBmbikge1xuICAgIGlmIChvKSB7XG4gICAgICBvWyd0eXBlJ10gJiYgKG9bJ21ldGhvZCddID0gb1sndHlwZSddKSAmJiBkZWxldGUgb1sndHlwZSddXG4gICAgICBvWydkYXRhVHlwZSddICYmIChvWyd0eXBlJ10gPSBvWydkYXRhVHlwZSddKVxuICAgICAgb1snanNvbnBDYWxsYmFjayddICYmIChvWydqc29ucENhbGxiYWNrTmFtZSddID0gb1snanNvbnBDYWxsYmFjayddKSAmJiBkZWxldGUgb1snanNvbnBDYWxsYmFjayddXG4gICAgICBvWydqc29ucCddICYmIChvWydqc29ucENhbGxiYWNrJ10gPSBvWydqc29ucCddKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlcXdlc3QobywgZm4pXG4gIH1cblxuICByZXF3ZXN0LmFqYXhTZXR1cCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICBmb3IgKHZhciBrIGluIG9wdGlvbnMpIHtcbiAgICAgIGdsb2JhbFNldHVwT3B0aW9uc1trXSA9IG9wdGlvbnNba11cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVxd2VzdFxufSk7XG4iLCJ2YXIgV2luQ2hhbiA9IChmdW5jdGlvbigpIHtcbiAgdmFyIFJFTEFZX0ZSQU1FX05BTUUgPSBcIl9fd2luY2hhbl9yZWxheV9mcmFtZVwiO1xuICB2YXIgQ0xPU0VfQ01EID0gXCJkaWVcIjtcblxuICAvLyBhIHBvcnRhYmxlIGFkZExpc3RlbmVyIGltcGxlbWVudGF0aW9uXG4gIGZ1bmN0aW9uIGFkZExpc3RlbmVyKHcsIGV2ZW50LCBjYikge1xuICAgIGlmKHcuYXR0YWNoRXZlbnQpIHcuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBjYik7XG4gICAgZWxzZSBpZiAody5hZGRFdmVudExpc3RlbmVyKSB3LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNiLCBmYWxzZSk7XG4gIH1cblxuICAvLyBhIHBvcnRhYmxlIHJlbW92ZUxpc3RlbmVyIGltcGxlbWVudGF0aW9uXG4gIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHcsIGV2ZW50LCBjYikge1xuICAgIGlmKHcuZGV0YWNoRXZlbnQpIHcuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBjYik7XG4gICAgZWxzZSBpZiAody5yZW1vdmVFdmVudExpc3RlbmVyKSB3LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGNiLCBmYWxzZSk7XG4gIH1cblxuXG4gIC8vIGNoZWNraW5nIGZvciBJRTggb3IgYWJvdmVcbiAgZnVuY3Rpb24gaXNJbnRlcm5ldEV4cGxvcmVyKCkge1xuICAgIHZhciBydiA9IC0xOyAvLyBSZXR1cm4gdmFsdWUgYXNzdW1lcyBmYWlsdXJlLlxuICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgaWYgKG5hdmlnYXRvci5hcHBOYW1lID09PSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJykge1xuICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIk1TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSlcIik7XG4gICAgICBpZiAocmUuZXhlYyh1YSkgIT0gbnVsbClcbiAgICAgICAgcnYgPSBwYXJzZUZsb2F0KFJlZ0V4cC4kMSk7XG4gICAgfVxuICAgIC8vIElFID4gMTFcbiAgICBlbHNlIGlmICh1YS5pbmRleE9mKFwiVHJpZGVudFwiKSA+IC0xKSB7XG4gICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwicnY6KFswLTldezIsMn1bXFwuMC05XXswLH0pXCIpO1xuICAgICAgaWYgKHJlLmV4ZWModWEpICE9PSBudWxsKSB7XG4gICAgICAgIHJ2ID0gcGFyc2VGbG9hdChSZWdFeHAuJDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBydiA+PSA4O1xuICB9XG5cbiAgLy8gY2hlY2tpbmcgTW9iaWxlIEZpcmVmb3ggKEZlbm5lYylcbiAgZnVuY3Rpb24gaXNGZW5uZWMoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlIG11c3QgY2hlY2sgZm9yIGJvdGggWFVMIGFuZCBKYXZhIHZlcnNpb25zIG9mIEZlbm5lYy4gIEJvdGggaGF2ZVxuICAgICAgLy8gZGlzdGluY3QgVUEgc3RyaW5ncy5cbiAgICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgcmV0dXJuICh1c2VyQWdlbnQuaW5kZXhPZignRmVubmVjLycpICE9IC0xKSB8fCAgLy8gWFVMXG4gICAgICAgICAgICAgKHVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94LycpICE9IC0xICYmIHVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgIT0gLTEpOyAgIC8vIEphdmFcbiAgICB9IGNhdGNoKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gZmVhdHVyZSBjaGVja2luZyB0byBzZWUgaWYgdGhpcyBwbGF0Zm9ybSBpcyBzdXBwb3J0ZWQgYXQgYWxsXG4gIGZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAod2luZG93LkpTT04gJiYgd2luZG93LkpTT04uc3RyaW5naWZ5ICYmXG4gICAgICAgICAgICB3aW5kb3cuSlNPTi5wYXJzZSAmJiB3aW5kb3cucG9zdE1lc3NhZ2UpO1xuICB9XG5cbiAgLy8gZ2l2ZW4gYSBVUkwsIGV4dHJhY3QgdGhlIG9yaWdpbi4gVGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLXNpbXBsZS1sb2dpbi9ibG9iL2QyY2I5NWI5ZjgxMmQ4NDg4YmRiZmJhNTFjM2E3YzE1M2JhMWEwNzQvanMvc3JjL3NpbXBsZS1sb2dpbi90cmFuc3BvcnRzL1dpbkNoYW4uanMjTDI1LUwzMFxuICBmdW5jdGlvbiBleHRyYWN0T3JpZ2luKHVybCkge1xuICAgIGlmICghL15odHRwcz86XFwvXFwvLy50ZXN0KHVybCkpIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIHZhciBtID0gL14oaHR0cHM/OlxcL1xcL1tcXC1fYS16QS1aXFwuMC05Ol0rKS8uZXhlYyh1cmwpO1xuICAgIGlmIChtKSByZXR1cm4gbVsxXTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgLy8gZmluZCB0aGUgcmVsYXkgaWZyYW1lIGluIHRoZSBvcGVuZXJcbiAgZnVuY3Rpb24gZmluZFJlbGF5KCkge1xuICAgIHZhciBsb2MgPSB3aW5kb3cubG9jYXRpb247XG4gICAgdmFyIGZyYW1lcyA9IHdpbmRvdy5vcGVuZXIuZnJhbWVzO1xuICAgIGZvciAodmFyIGkgPSBmcmFtZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChmcmFtZXNbaV0ubG9jYXRpb24ucHJvdG9jb2wgPT09IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAmJlxuICAgICAgICAgICAgZnJhbWVzW2ldLmxvY2F0aW9uLmhvc3QgPT09IHdpbmRvdy5sb2NhdGlvbi5ob3N0ICYmXG4gICAgICAgICAgICBmcmFtZXNbaV0ubmFtZSA9PT0gUkVMQVlfRlJBTUVfTkFNRSlcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBmcmFtZXNbaV07XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2goZSkgeyB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpc0lFID0gaXNJbnRlcm5ldEV4cGxvcmVyKCk7XG5cbiAgaWYgKGlzU3VwcG9ydGVkKCkpIHtcbiAgICAvKiAgR2VuZXJhbCBmbG93OlxuICAgICAqICAgICAgICAgICAgICAgICAgMC4gdXNlciBjbGlja3NcbiAgICAgKiAgKElFIFNQRUNJRklDKSAgIDEuIGNhbGxlciBhZGRzIHJlbGF5IGlmcmFtZSAoc2VydmVkIGZyb20gdHJ1c3RlZCBkb21haW4pIHRvIERPTVxuICAgICAqICAgICAgICAgICAgICAgICAgMi4gY2FsbGVyIG9wZW5zIHdpbmRvdyAod2l0aCBjb250ZW50IGZyb20gdHJ1c3RlZCBkb21haW4pXG4gICAgICogICAgICAgICAgICAgICAgICAzLiB3aW5kb3cgb24gb3BlbmluZyBhZGRzIGEgbGlzdGVuZXIgdG8gJ21lc3NhZ2UnXG4gICAgICogIChJRSBTUEVDSUZJQykgICA0LiB3aW5kb3cgb24gb3BlbmluZyBmaW5kcyBpZnJhbWVcbiAgICAgKiAgICAgICAgICAgICAgICAgIDUuIHdpbmRvdyBjaGVja3MgaWYgaWZyYW1lIGlzIFwibG9hZGVkXCIgLSBoYXMgYSAnZG9Qb3N0JyBmdW5jdGlvbiB5ZXRcbiAgICAgKiAgKElFIFNQRUNJRklDNSkgIDVhLiBpZiBpZnJhbWUuZG9Qb3N0IGV4aXN0cywgd2luZG93IHVzZXMgaXQgdG8gc2VuZCByZWFkeSBldmVudCB0byBjYWxsZXJcbiAgICAgKiAgKElFIFNQRUNJRklDNSkgIDViLiBpZiBpZnJhbWUuZG9Qb3N0IGRvZXNuJ3QgZXhpc3QsIHdpbmRvdyB3YWl0cyBmb3IgZnJhbWUgcmVhZHlcbiAgICAgKiAgKElFIFNQRUNJRklDNSkgIDViaS4gb25jZSByZWFkeSwgd2luZG93IGNhbGxzIGlmcmFtZS5kb1Bvc3QgdG8gc2VuZCByZWFkeSBldmVudFxuICAgICAqICAgICAgICAgICAgICAgICAgNi4gY2FsbGVyIHVwb24gcmVjaWVwdCBvZiAncmVhZHknLCBzZW5kcyBhcmdzXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW46IGZ1bmN0aW9uKG9wdHMsIGNiKSB7XG4gICAgICAgIGlmICghY2IpIHRocm93IFwibWlzc2luZyByZXF1aXJlZCBjYWxsYmFjayBhcmd1bWVudFwiO1xuXG4gICAgICAgIC8vIHRlc3QgcmVxdWlyZWQgb3B0aW9uc1xuICAgICAgICB2YXIgZXJyO1xuICAgICAgICBpZiAoIW9wdHMudXJsKSBlcnIgPSBcIm1pc3NpbmcgcmVxdWlyZWQgJ3VybCcgcGFyYW1ldGVyXCI7XG4gICAgICAgIGlmICghb3B0cy5yZWxheV91cmwpIGVyciA9IFwibWlzc2luZyByZXF1aXJlZCAncmVsYXlfdXJsJyBwYXJhbWV0ZXJcIjtcbiAgICAgICAgaWYgKGVycikgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2IoZXJyKTsgfSwgMCk7XG5cbiAgICAgICAgLy8gc3VwcGx5IGRlZmF1bHQgb3B0aW9uc1xuICAgICAgICBpZiAoIW9wdHMud2luZG93X25hbWUpIG9wdHMud2luZG93X25hbWUgPSBudWxsO1xuICAgICAgICBpZiAoIW9wdHMud2luZG93X2ZlYXR1cmVzIHx8IGlzRmVubmVjKCkpIG9wdHMud2luZG93X2ZlYXR1cmVzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIG9wdHMucGFyYW1zIG1heSBiZSB1bmRlZmluZWRcblxuICAgICAgICB2YXIgaWZyYW1lO1xuXG4gICAgICAgIC8vIHNhbml0eSBjaGVjaywgYXJlIHVybCBhbmQgcmVsYXlfdXJsIHRoZSBzYW1lIG9yaWdpbj9cbiAgICAgICAgdmFyIG9yaWdpbiA9IGV4dHJhY3RPcmlnaW4ob3B0cy51cmwpO1xuICAgICAgICBpZiAob3JpZ2luICE9PSBleHRyYWN0T3JpZ2luKG9wdHMucmVsYXlfdXJsKSkge1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2IoJ2ludmFsaWQgYXJndW1lbnRzOiBvcmlnaW4gb2YgdXJsIGFuZCByZWxheV91cmwgbXVzdCBtYXRjaCcpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1lc3NhZ2VUYXJnZXQ7XG5cbiAgICAgICAgaWYgKGlzSUUpIHtcbiAgICAgICAgICAvLyBmaXJzdCB3ZSBuZWVkIHRvIGFkZCBhIFwicmVsYXlcIiBpZnJhbWUgdG8gdGhlIGRvY3VtZW50IHRoYXQncyBzZXJ2ZWRcbiAgICAgICAgICAvLyBmcm9tIHRoZSB0YXJnZXQgZG9tYWluLiAgV2UgY2FuIHBvc3RtZXNzYWdlIGludG8gYSBpZnJhbWUsIGJ1dCBub3QgYVxuICAgICAgICAgIC8vIHdpbmRvd1xuICAgICAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgICAgLy8gaWZyYW1lLnNldEF0dHJpYnV0ZSgnbmFtZScsIGZyYW1lbmFtZSk7XG4gICAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3JjJywgb3B0cy5yZWxheV91cmwpO1xuICAgICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnbmFtZScsIFJFTEFZX0ZSQU1FX05BTUUpO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgICBtZXNzYWdlVGFyZ2V0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdyA9IG9wdHMucG9wdXAgfHwgd2luZG93Lm9wZW4ob3B0cy51cmwsIG9wdHMud2luZG93X25hbWUsIG9wdHMud2luZG93X2ZlYXR1cmVzKTtcbiAgICAgICAgaWYgKG9wdHMucG9wdXApIHtcbiAgICAgICAgICB3LmxvY2F0aW9uLmhyZWYgPSBvcHRzLnVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbWVzc2FnZVRhcmdldCkgbWVzc2FnZVRhcmdldCA9IHc7XG5cbiAgICAgICAgLy8gbGV0cyBsaXN0ZW4gaW4gY2FzZSB0aGUgd2luZG93IGJsb3dzIHVwIGJlZm9yZSB0ZWxsaW5nIHVzXG4gICAgICAgIHZhciBjbG9zZUludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHcgJiYgdy5jbG9zZWQpIHtcbiAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgICBjYignVXNlciBjbG9zZWQgdGhlIHBvcHVwIHdpbmRvdycpO1xuICAgICAgICAgICAgICBjYiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCA1MDApO1xuXG4gICAgICAgIHZhciByZXEgPSBKU09OLnN0cmluZ2lmeSh7YTogJ3JlcXVlc3QnLCBkOiBvcHRzLnBhcmFtc30pO1xuXG4gICAgICAgIC8vIGNsZWFudXAgb24gdW5sb2FkXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgICAgaWYgKGlmcmFtZSkgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgIGlmcmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoY2xvc2VJbnRlcnZhbCkgY2xvc2VJbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoY2xvc2VJbnRlcnZhbCk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIod2luZG93LCAnbWVzc2FnZScsIG9uTWVzc2FnZSk7XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIod2luZG93LCAndW5sb2FkJywgY2xlYW51cCk7XG4gICAgICAgICAgaWYgKHcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHcuY2xvc2UoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHNlY3VyaXR5VmlvbGF0aW9uKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaGFwcGVucyBpbiBPcGVyYSAxMiBzb21ldGltZXNcbiAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2Jyb3dzZXJpZC9pc3N1ZXMvMTg0NFxuICAgICAgICAgICAgICBtZXNzYWdlVGFyZ2V0LnBvc3RNZXNzYWdlKENMT1NFX0NNRCwgb3JpZ2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdyA9IG1lc3NhZ2VUYXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRMaXN0ZW5lcih3aW5kb3csICd1bmxvYWQnLCBjbGVhbnVwKTtcblxuICAgICAgICBmdW5jdGlvbiBvbk1lc3NhZ2UoZSkge1xuICAgICAgICAgIGlmIChlLm9yaWdpbiAhPT0gb3JpZ2luKSB7IHJldHVybjsgfVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgICAgIGlmIChkLmEgPT09ICdyZWFkeScpIG1lc3NhZ2VUYXJnZXQucG9zdE1lc3NhZ2UocmVxLCBvcmlnaW4pO1xuICAgICAgICAgICAgZWxzZSBpZiAoZC5hID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgY2IoZC5kKTtcbiAgICAgICAgICAgICAgICBjYiA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZC5hID09PSAncmVzcG9uc2UnKSB7XG4gICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgY2IobnVsbCwgZC5kKTtcbiAgICAgICAgICAgICAgICBjYiA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoKGVycikgeyB9XG4gICAgICAgIH1cblxuICAgICAgICBhZGRMaXN0ZW5lcih3aW5kb3csICdtZXNzYWdlJywgb25NZXNzYWdlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNsb3NlOiBjbGVhbnVwLFxuICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdy5mb2N1cygpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gSUU3IGJsb3dzIHVwIGhlcmUsIGRvIG5vdGhpbmdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBvbk9wZW46IGZ1bmN0aW9uKGNiKSB7XG4gICAgICAgIHZhciBvID0gXCIqXCI7XG4gICAgICAgIHZhciBtc2dUYXJnZXQgPSBpc0lFID8gZmluZFJlbGF5KCkgOiB3aW5kb3cub3BlbmVyO1xuICAgICAgICBpZiAoIW1zZ1RhcmdldCkgdGhyb3cgXCJjYW4ndCBmaW5kIHJlbGF5IGZyYW1lXCI7XG4gICAgICAgIGZ1bmN0aW9uIGRvUG9zdChtc2cpIHtcbiAgICAgICAgICBtc2cgPSBKU09OLnN0cmluZ2lmeShtc2cpO1xuICAgICAgICAgIGlmIChpc0lFKSBtc2dUYXJnZXQuZG9Qb3N0KG1zZywgbyk7XG4gICAgICAgICAgZWxzZSBtc2dUYXJnZXQucG9zdE1lc3NhZ2UobXNnLCBvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9uTWVzc2FnZShlKSB7XG4gICAgICAgICAgLy8gb25seSBvbmUgbWVzc2FnZSBnZXRzIHRocm91Z2gsIGJ1dCBsZXQncyBtYWtlIHN1cmUgaXQncyBhY3R1YWxseVxuICAgICAgICAgIC8vIHRoZSBtZXNzYWdlIHdlJ3JlIGxvb2tpbmcgZm9yIChvdGhlciBjb2RlIG1heSBiZSB1c2luZ1xuICAgICAgICAgIC8vIHBvc3RtZXNzYWdlKSAtIHdlIGRvIHRoaXMgYnkgZW5zdXJpbmcgdGhlIHBheWxvYWQgY2FuXG4gICAgICAgICAgLy8gYmUgcGFyc2VkLCBhbmQgaXQncyBnb3QgYW4gJ2EnIChhY3Rpb24pIHZhbHVlIG9mICdyZXF1ZXN0Jy5cbiAgICAgICAgICB2YXIgZDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikgeyB9XG4gICAgICAgICAgaWYgKCFkIHx8IGQuYSAhPT0gJ3JlcXVlc3QnKSByZXR1cm47XG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIod2luZG93LCAnbWVzc2FnZScsIG9uTWVzc2FnZSk7XG4gICAgICAgICAgbyA9IGUub3JpZ2luO1xuICAgICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgLy8gdGhpcyBzZXRUaW1lb3V0IGlzIGNyaXRpY2FsbHkgaW1wb3J0YW50IGZvciBJRTggLVxuICAgICAgICAgICAgLy8gaW4gaWU4IHNvbWV0aW1lcyBhZGRMaXN0ZW5lciBmb3IgJ21lc3NhZ2UnIGNhbiBzeW5jaHJvbm91c2x5XG4gICAgICAgICAgICAvLyBjYXVzZSB5b3VyIGNhbGxiYWNrIHRvIGJlIGludm9rZWQuICBhd2Vzb21lLlxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgY2IobywgZC5kLCBmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgY2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZG9Qb3N0KHthOiAncmVzcG9uc2UnLCBkOiByfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25EaWUoZSkge1xuICAgICAgICAgIGlmIChlLmRhdGEgPT09IENMT1NFX0NNRCkge1xuICAgICAgICAgICAgdHJ5IHsgd2luZG93LmNsb3NlKCk7IH0gY2F0Y2ggKG9fTykge31cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWRkTGlzdGVuZXIoaXNJRSA/IG1zZ1RhcmdldCA6IHdpbmRvdywgJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xuICAgICAgICBhZGRMaXN0ZW5lcihpc0lFID8gbXNnVGFyZ2V0IDogd2luZG93LCAnbWVzc2FnZScsIG9uRGllKTtcblxuICAgICAgICAvLyB3ZSBjYW5ub3QgcG9zdCB0byBvdXIgcGFyZW50IHRoYXQgd2UncmUgcmVhZHkgYmVmb3JlIHRoZSBpZnJhbWVcbiAgICAgICAgLy8gaXMgbG9hZGVkLiAoSUUgc3BlY2lmaWMgcG9zc2libGUgZmFpbHVyZSlcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkb1Bvc3Qoe2E6IFwicmVhZHlcIn0pO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAvLyB0aGlzIGNvZGUgc2hvdWxkIG5ldmVyIGJlIGV4ZWN0dWVkIG91dHNpZGUgSUVcbiAgICAgICAgICBhZGRMaXN0ZW5lcihtc2dUYXJnZXQsICdsb2FkJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZG9Qb3N0KHthOiBcInJlYWR5XCJ9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHdpbmRvdyBpcyB1bmxvYWRlZCBhbmQgdGhlIGNsaWVudCBoYXNuJ3QgY2FsbGVkIGNiLCBpdCdzIGFuIGVycm9yXG4gICAgICAgIHZhciBvblVubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJRTggZG9lc24ndCBsaWtlIHRoaXMuLi5cbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGlzSUUgPyBtc2dUYXJnZXQgOiB3aW5kb3csICdtZXNzYWdlJywgb25EaWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKG9oV2VsbCkgeyB9XG4gICAgICAgICAgaWYgKGNiKSBkb1Bvc3QoeyBhOiAnZXJyb3InLCBkOiAnY2xpZW50IGNsb3NlZCB3aW5kb3cnIH0pO1xuICAgICAgICAgIGNiID0gdW5kZWZpbmVkO1xuICAgICAgICAgIC8vIGV4cGxpY2l0bHkgY2xvc2UgdGhlIHdpbmRvdywgaW4gY2FzZSB0aGUgY2xpZW50IGlzIHRyeWluZyB0byByZWxvYWQgb3IgbmF2XG4gICAgICAgICAgdHJ5IHsgd2luZG93LmNsb3NlKCk7IH0gY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9O1xuICAgICAgICBhZGRMaXN0ZW5lcih3aW5kb3csICd1bmxvYWQnLCBvblVubG9hZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKHdpbmRvdywgJ3VubG9hZCcsIG9uVW5sb2FkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogZnVuY3Rpb24odXJsLCB3aW5vcHRzLCBhcmcsIGNiKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNiKFwidW5zdXBwb3J0ZWQgYnJvd3NlclwiKTsgfSwgMCk7XG4gICAgICB9LFxuICAgICAgb25PcGVuOiBmdW5jdGlvbihjYikge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYihcInVuc3VwcG9ydGVkIGJyb3dzZXJcIik7IH0sIDApO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pKCk7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFdpbkNoYW47XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGhhc0tleXNcblxuZnVuY3Rpb24gaGFzS2V5cyhzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlICE9PSBudWxsICYmXG4gICAgICAgICh0eXBlb2Ygc291cmNlID09PSBcIm9iamVjdFwiIHx8XG4gICAgICAgIHR5cGVvZiBzb3VyY2UgPT09IFwiZnVuY3Rpb25cIilcbn1cbiIsInZhciBLZXlzID0gcmVxdWlyZShcIm9iamVjdC1rZXlzXCIpXG52YXIgaGFzS2V5cyA9IHJlcXVpcmUoXCIuL2hhcy1rZXlzXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kXG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge31cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBpZiAoIWhhc0tleXMoc291cmNlKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gS2V5cyhzb3VyY2UpXG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IGtleXNbal1cbiAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IHNvdXJjZVtuYW1lXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldFxufVxuIiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgaXNGdW5jID0gKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhKGZuIGluc3RhbmNlb2YgUmVnRXhwKSkgfHwgdG9TdHJpbmcuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdGlmICghaXNGdW5jICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0aXNGdW5jID0gZm4gPT09IHdpbmRvdy5zZXRUaW1lb3V0IHx8IGZuID09PSB3aW5kb3cuYWxlcnQgfHwgZm4gPT09IHdpbmRvdy5jb25maXJtIHx8IGZuID09PSB3aW5kb3cucHJvbXB0O1xuXHR9XG5cdHJldHVybiBpc0Z1bmM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuXHRpZiAoIWlzRnVuY3Rpb24oZm4pKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0dmFyIGksIGssXG5cdFx0aXNTdHJpbmcgPSB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyxcblx0XHRsID0gb2JqLmxlbmd0aCxcblx0XHRjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXHRpZiAobCA9PT0gK2wpIHtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuXHRcdFx0XHRmbihpc1N0cmluZyA/IG9iai5jaGFyQXQoaSkgOiBvYmpbaV0sIGksIG9iaik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbi5jYWxsKGNvbnRleHQsIGlzU3RyaW5nID8gb2JqLmNoYXJBdChpKSA6IG9ialtpXSwgaSwgb2JqKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm9yIChrIGluIG9iaikge1xuXHRcdFx0aWYgKGhhc093bi5jYWxsKG9iaiwgaykpIHtcblx0XHRcdFx0aWYgKGNvbnRleHQgPT09IG51bGwpIHtcblx0XHRcdFx0XHRmbihvYmpba10sIGssIG9iaik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm4uY2FsbChjb250ZXh0LCBvYmpba10sIGssIG9iaik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgcmVxdWlyZSgnLi9zaGltJyk7XG5cbiIsInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmd1bWVudHMgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJndW1lbnRzKSB7XG5cdFx0aXNBcmd1bWVudHMgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XSdcblx0XHRcdCYmIHZhbHVlICE9PSBudWxsXG5cdFx0XHQmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG5cdFx0XHQmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJ1xuXHRcdFx0JiYgdmFsdWUubGVuZ3RoID49IDBcblx0XHRcdCYmIHRvU3RyaW5nLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmd1bWVudHM7XG59O1xuXG4iLCIoZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvZXM1LXNoaW1cblx0dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5cdFx0dG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHRcdGZvckVhY2ggPSByZXF1aXJlKCcuL2ZvcmVhY2gnKSxcblx0XHRpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG5cdFx0aGFzRG9udEVudW1CdWcgPSAhKHsndG9TdHJpbmcnOiBudWxsfSkucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyksXG5cdFx0aGFzUHJvdG9FbnVtQnVnID0gKGZ1bmN0aW9uICgpIHt9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgncHJvdG90eXBlJyksXG5cdFx0ZG9udEVudW1zID0gW1xuXHRcdFx0XCJ0b1N0cmluZ1wiLFxuXHRcdFx0XCJ0b0xvY2FsZVN0cmluZ1wiLFxuXHRcdFx0XCJ2YWx1ZU9mXCIsXG5cdFx0XHRcImhhc093blByb3BlcnR5XCIsXG5cdFx0XHRcImlzUHJvdG90eXBlT2ZcIixcblx0XHRcdFwicHJvcGVydHlJc0VudW1lcmFibGVcIixcblx0XHRcdFwiY29uc3RydWN0b3JcIlxuXHRcdF0sXG5cdFx0a2V5c1NoaW07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jyxcblx0XHRcdGlzRnVuY3Rpb24gPSB0b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG5cdFx0XHRpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpLFxuXHRcdFx0dGhlS2V5cyA9IFtdO1xuXG5cdFx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0XCIpO1xuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cykge1xuXHRcdFx0Zm9yRWFjaChvYmplY3QsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2godmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBuYW1lLFxuXHRcdFx0XHRza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblxuXHRcdFx0Zm9yIChuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2gobmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHRcdHZhciBjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuXHRcdFx0XHRza2lwQ29uc3RydWN0b3IgPSBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvYmplY3Q7XG5cblx0XHRcdGZvckVhY2goZG9udEVudW1zLCBmdW5jdGlvbiAoZG9udEVudW0pIHtcblx0XHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhlS2V5cztcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xufSgpKTtcblxuIiwiLyohXG4gICogQmVhbiAtIGNvcHlyaWdodCAoYykgSmFjb2IgVGhvcm50b24gMjAxMS0yMDEyXG4gICogaHR0cHM6Ly9naXRodWIuY29tL2ZhdC9iZWFuXG4gICogTUlUIGxpY2Vuc2VcbiAgKi9cbihmdW5jdGlvbiAobmFtZSwgY29udGV4dCwgZGVmaW5pdGlvbikge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShkZWZpbml0aW9uKVxuICBlbHNlIGNvbnRleHRbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0pKCdiZWFuJywgdGhpcywgZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQpIHtcbiAgbmFtZSAgICA9IG5hbWUgICAgfHwgJ2JlYW4nXG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IHRoaXNcblxuICB2YXIgd2luICAgICAgICAgICAgPSB3aW5kb3dcbiAgICAsIG9sZCAgICAgICAgICAgID0gY29udGV4dFtuYW1lXVxuICAgICwgbmFtZXNwYWNlUmVnZXggPSAvW15cXC5dKig/PVxcLi4qKVxcLnwuKi9cbiAgICAsIG5hbWVSZWdleCAgICAgID0gL1xcLi4qL1xuICAgICwgYWRkRXZlbnQgICAgICAgPSAnYWRkRXZlbnRMaXN0ZW5lcidcbiAgICAsIHJlbW92ZUV2ZW50ICAgID0gJ3JlbW92ZUV2ZW50TGlzdGVuZXInXG4gICAgLCBkb2MgICAgICAgICAgICA9IGRvY3VtZW50IHx8IHt9XG4gICAgLCByb290ICAgICAgICAgICA9IGRvYy5kb2N1bWVudEVsZW1lbnQgfHwge31cbiAgICAsIFczQ19NT0RFTCAgICAgID0gcm9vdFthZGRFdmVudF1cbiAgICAsIGV2ZW50U3VwcG9ydCAgID0gVzNDX01PREVMID8gYWRkRXZlbnQgOiAnYXR0YWNoRXZlbnQnXG4gICAgLCBPTkUgICAgICAgICAgICA9IHt9IC8vIHNpbmdsZXRvbiBmb3IgcXVpY2sgbWF0Y2hpbmcgbWFraW5nIGFkZCgpIGRvIG9uZSgpXG5cbiAgICAsIHNsaWNlICAgICAgICAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlXG4gICAgLCBzdHIyYXJyICAgICAgICA9IGZ1bmN0aW9uIChzLCBkKSB7IHJldHVybiBzLnNwbGl0KGQgfHwgJyAnKSB9XG4gICAgLCBpc1N0cmluZyAgICAgICA9IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbyA9PSAnc3RyaW5nJyB9XG4gICAgLCBpc0Z1bmN0aW9uICAgICA9IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbyA9PSAnZnVuY3Rpb24nIH1cblxuICAgICAgLy8gZXZlbnRzIHRoYXQgd2UgY29uc2lkZXIgdG8gYmUgJ25hdGl2ZScsIGFueXRoaW5nIG5vdCBpbiB0aGlzIGxpc3Qgd2lsbFxuICAgICAgLy8gYmUgdHJlYXRlZCBhcyBhIGN1c3RvbSBldmVudFxuICAgICwgc3RhbmRhcmROYXRpdmVFdmVudHMgPVxuICAgICAgICAnY2xpY2sgZGJsY2xpY2sgbW91c2V1cCBtb3VzZWRvd24gY29udGV4dG1lbnUgJyAgICAgICAgICAgICAgICAgICsgLy8gbW91c2UgYnV0dG9uc1xuICAgICAgICAnbW91c2V3aGVlbCBtb3VzZW11bHRpd2hlZWwgRE9NTW91c2VTY3JvbGwgJyAgICAgICAgICAgICAgICAgICAgICsgLy8gbW91c2Ugd2hlZWxcbiAgICAgICAgJ21vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgc2VsZWN0c3RhcnQgc2VsZWN0ZW5kICcgICAgICAgICAgICArIC8vIG1vdXNlIG1vdmVtZW50XG4gICAgICAgICdrZXlkb3duIGtleXByZXNzIGtleXVwICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyBrZXlib2FyZFxuICAgICAgICAnb3JpZW50YXRpb25jaGFuZ2UgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8gbW9iaWxlXG4gICAgICAgICdmb2N1cyBibHVyIGNoYW5nZSByZXNldCBzZWxlY3Qgc3VibWl0ICcgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyBmb3JtIGVsZW1lbnRzXG4gICAgICAgICdsb2FkIHVubG9hZCBiZWZvcmV1bmxvYWQgcmVzaXplIG1vdmUgRE9NQ29udGVudExvYWRlZCAnICAgICAgICAgKyAvLyB3aW5kb3dcbiAgICAgICAgJ3JlYWR5c3RhdGVjaGFuZ2UgbWVzc2FnZSAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIHdpbmRvd1xuICAgICAgICAnZXJyb3IgYWJvcnQgc2Nyb2xsICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWlzY1xuICAgICAgLy8gZWxlbWVudC5maXJlRXZlbnQoJ29uWFlaJy4uLiBpcyBub3QgZm9yZ2l2aW5nIGlmIHdlIHRyeSB0byBmaXJlIGFuIGV2ZW50XG4gICAgICAvLyB0aGF0IGRvZXNuJ3QgYWN0dWFsbHkgZXhpc3QsIHNvIG1ha2Ugc3VyZSB3ZSBvbmx5IGRvIHRoZXNlIG9uIG5ld2VyIGJyb3dzZXJzXG4gICAgLCB3M2NOYXRpdmVFdmVudHMgPVxuICAgICAgICAnc2hvdyAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8gbW91c2UgYnV0dG9uc1xuICAgICAgICAnaW5wdXQgaW52YWxpZCAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8gZm9ybSBlbGVtZW50c1xuICAgICAgICAndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwgJyAgICAgICAgICAgICAgICAgICAgICsgLy8gdG91Y2hcbiAgICAgICAgJ2dlc3R1cmVzdGFydCBnZXN0dXJlY2hhbmdlIGdlc3R1cmVlbmQgJyAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIGdlc3R1cmVcbiAgICAgICAgJ3RleHRpbnB1dCAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIFRleHRFdmVudFxuICAgICAgICAncmVhZHlzdGF0ZWNoYW5nZSBwYWdlc2hvdyBwYWdlaGlkZSBwb3BzdGF0ZSAnICAgICAgICAgICAgICAgICAgICsgLy8gd2luZG93XG4gICAgICAgICdoYXNoY2hhbmdlIG9mZmxpbmUgb25saW5lICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyB3aW5kb3dcbiAgICAgICAgJ2FmdGVycHJpbnQgYmVmb3JlcHJpbnQgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIHByaW50aW5nXG4gICAgICAgICdkcmFnc3RhcnQgZHJhZ2VudGVyIGRyYWdvdmVyIGRyYWdsZWF2ZSBkcmFnIGRyb3AgZHJhZ2VuZCAnICAgICAgKyAvLyBkbmRcbiAgICAgICAgJ2xvYWRzdGFydCBwcm9ncmVzcyBzdXNwZW5kIGVtcHRpZWQgc3RhbGxlZCBsb2FkbWV0YWRhdGEgJyAgICAgICArIC8vIG1lZGlhXG4gICAgICAgICdsb2FkZWRkYXRhIGNhbnBsYXkgY2FucGxheXRocm91Z2ggcGxheWluZyB3YWl0aW5nIHNlZWtpbmcgJyAgICAgKyAvLyBtZWRpYVxuICAgICAgICAnc2Vla2VkIGVuZGVkIGR1cmF0aW9uY2hhbmdlIHRpbWV1cGRhdGUgcGxheSBwYXVzZSByYXRlY2hhbmdlICcgICsgLy8gbWVkaWFcbiAgICAgICAgJ3ZvbHVtZWNoYW5nZSBjdWVjaGFuZ2UgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIG1lZGlhXG4gICAgICAgICdjaGVja2luZyBub3VwZGF0ZSBkb3dubG9hZGluZyBjYWNoZWQgdXBkYXRlcmVhZHkgb2Jzb2xldGUgJyAgICAgICAvLyBhcHBjYWNoZVxuXG4gICAgICAvLyBjb252ZXJ0IHRvIGEgaGFzaCBmb3IgcXVpY2sgbG9va3Vwc1xuICAgICwgbmF0aXZlRXZlbnRzID0gKGZ1bmN0aW9uIChoYXNoLCBldmVudHMsIGkpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykgZXZlbnRzW2ldICYmIChoYXNoW2V2ZW50c1tpXV0gPSAxKVxuICAgICAgICByZXR1cm4gaGFzaFxuICAgICAgfSh7fSwgc3RyMmFycihzdGFuZGFyZE5hdGl2ZUV2ZW50cyArIChXM0NfTU9ERUwgPyB3M2NOYXRpdmVFdmVudHMgOiAnJykpKSlcblxuICAgICAgLy8gY3VzdG9tIGV2ZW50cyBhcmUgZXZlbnRzIHRoYXQgd2UgKmZha2UqLCB0aGV5IGFyZSBub3QgcHJvdmlkZWQgbmF0aXZlbHkgYnV0XG4gICAgICAvLyB3ZSBjYW4gdXNlIG5hdGl2ZSBldmVudHMgdG8gZ2VuZXJhdGUgdGhlbVxuICAgICwgY3VzdG9tRXZlbnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzQW5jZXN0b3IgPSAnY29tcGFyZURvY3VtZW50UG9zaXRpb24nIGluIHJvb3RcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIChjb250YWluZXIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudCkgJiAxNikgPT09IDE2XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA6ICdjb250YWlucycgaW4gcm9vdFxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIubm9kZVR5cGUgPT09IDkgfHwgY29udGFpbmVyID09PSB3aW5kb3cgPyByb290IDogY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXIgIT09IGVsZW1lbnQgJiYgY29udGFpbmVyLmNvbnRhaW5zKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKSBpZiAoZWxlbWVudCA9PT0gY29udGFpbmVyKSByZXR1cm4gMVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICwgY2hlY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0XG4gICAgICAgICAgICAgIHJldHVybiAhcmVsYXRlZFxuICAgICAgICAgICAgICAgID8gcmVsYXRlZCA9PSBudWxsXG4gICAgICAgICAgICAgICAgOiAocmVsYXRlZCAhPT0gdGhpcyAmJiByZWxhdGVkLnByZWZpeCAhPT0gJ3h1bCcgJiYgIS9kb2N1bWVudC8udGVzdCh0aGlzLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgICAgICYmICFpc0FuY2VzdG9yKHJlbGF0ZWQsIHRoaXMpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb3VzZWVudGVyOiB7IGJhc2U6ICdtb3VzZW92ZXInLCBjb25kaXRpb246IGNoZWNrIH1cbiAgICAgICAgICAsIG1vdXNlbGVhdmU6IHsgYmFzZTogJ21vdXNlb3V0JywgY29uZGl0aW9uOiBjaGVjayB9XG4gICAgICAgICAgLCBtb3VzZXdoZWVsOiB7IGJhc2U6IC9GaXJlZm94Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gJ0RPTU1vdXNlU2Nyb2xsJyA6ICdtb3VzZXdoZWVsJyB9XG4gICAgICAgIH1cbiAgICAgIH0oKSlcblxuICAgICAgLy8gd2UgcHJvdmlkZSBhIGNvbnNpc3RlbnQgRXZlbnQgb2JqZWN0IGFjcm9zcyBicm93c2VycyBieSB0YWtpbmcgdGhlIGFjdHVhbCBET01cbiAgICAgIC8vIGV2ZW50IG9iamVjdCBhbmQgZ2VuZXJhdGluZyBhIG5ldyBvbmUgZnJvbSBpdHMgcHJvcGVydGllcy5cbiAgICAsIEV2ZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGEgd2hpdGVsaXN0IG9mIHByb3BlcnRpZXMgKGZvciBkaWZmZXJlbnQgZXZlbnQgdHlwZXMpIHRlbGxzIHVzIHdoYXQgdG8gY2hlY2sgZm9yIGFuZCBjb3B5XG4gICAgICAgIHZhciBjb21tb25Qcm9wcyAgPSBzdHIyYXJyKCdhbHRLZXkgYXR0ckNoYW5nZSBhdHRyTmFtZSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0ICcgK1xuICAgICAgICAgICAgICAnZGV0YWlsIGV2ZW50UGhhc2UgZ2V0TW9kaWZpZXJTdGF0ZSBpc1RydXN0ZWQgbWV0YUtleSByZWxhdGVkTm9kZSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5ICcgICtcbiAgICAgICAgICAgICAgJ3NyY0VsZW1lbnQgdGFyZ2V0IHRpbWVTdGFtcCB0eXBlIHZpZXcgd2hpY2ggcHJvcGVydHlOYW1lJylcbiAgICAgICAgICAsIG1vdXNlUHJvcHMgICA9IGNvbW1vblByb3BzLmNvbmNhdChzdHIyYXJyKCdidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgZGF0YVRyYW5zZmVyICcgICAgICArXG4gICAgICAgICAgICAgICdmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudCcpKVxuICAgICAgICAgICwgbW91c2VXaGVlbFByb3BzID0gbW91c2VQcm9wcy5jb25jYXQoc3RyMmFycignd2hlZWxEZWx0YSB3aGVlbERlbHRhWCB3aGVlbERlbHRhWSB3aGVlbERlbHRhWiAnICtcbiAgICAgICAgICAgICAgJ2F4aXMnKSkgLy8gJ2F4aXMnIGlzIEZGIHNwZWNpZmljXG4gICAgICAgICAgLCBrZXlQcm9wcyAgICAgPSBjb21tb25Qcm9wcy5jb25jYXQoc3RyMmFycignY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZSBrZXlJZGVudGlmaWVyICcgICAgICAgICAgK1xuICAgICAgICAgICAgICAna2V5TG9jYXRpb24gbG9jYXRpb24nKSlcbiAgICAgICAgICAsIHRleHRQcm9wcyAgICA9IGNvbW1vblByb3BzLmNvbmNhdChzdHIyYXJyKCdkYXRhJykpXG4gICAgICAgICAgLCB0b3VjaFByb3BzICAgPSBjb21tb25Qcm9wcy5jb25jYXQoc3RyMmFycigndG91Y2hlcyB0YXJnZXRUb3VjaGVzIGNoYW5nZWRUb3VjaGVzIHNjYWxlIHJvdGF0aW9uJykpXG4gICAgICAgICAgLCBtZXNzYWdlUHJvcHMgPSBjb21tb25Qcm9wcy5jb25jYXQoc3RyMmFycignZGF0YSBvcmlnaW4gc291cmNlJykpXG4gICAgICAgICAgLCBzdGF0ZVByb3BzICAgPSBjb21tb25Qcm9wcy5jb25jYXQoc3RyMmFycignc3RhdGUnKSlcbiAgICAgICAgICAsIG92ZXJPdXRSZWdleCA9IC9vdmVyfG91dC9cbiAgICAgICAgICAgIC8vIHNvbWUgZXZlbnQgdHlwZXMgbmVlZCBzcGVjaWFsIGhhbmRsaW5nIGFuZCBzb21lIG5lZWQgc3BlY2lhbCBwcm9wZXJ0aWVzLCBkbyB0aGF0IGFsbCBoZXJlXG4gICAgICAgICAgLCB0eXBlRml4ZXJzICAgPSBbXG4gICAgICAgICAgICAgICAgeyAvLyBrZXkgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIHJlZzogL2tleS9pXG4gICAgICAgICAgICAgICAgICAsIGZpeDogZnVuY3Rpb24gKGV2ZW50LCBuZXdFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50LmtleUNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleVByb3BzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICwgeyAvLyBtb3VzZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgcmVnOiAvY2xpY2t8bW91c2UoPyEoLip3aGVlbHxzY3JvbGwpKXxtZW51fGRyYWd8ZHJvcC9pXG4gICAgICAgICAgICAgICAgICAsIGZpeDogZnVuY3Rpb24gKGV2ZW50LCBuZXdFdmVudCwgdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50LnJpZ2h0Q2xpY2sgPSBldmVudC53aGljaCA9PT0gMyB8fCBldmVudC5idXR0b24gPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudC5wb3MgPSB7IHg6IDAsIHk6IDAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5wYWdlWCB8fCBldmVudC5wYWdlWSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnQuY2xpZW50WCA9IGV2ZW50LnBhZ2VYXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudC5jbGllbnRZID0gZXZlbnQucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmNsaWVudFggfHwgZXZlbnQuY2xpZW50WSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnQuY2xpZW50WCA9IGV2ZW50LmNsaWVudFggKyBkb2MuYm9keS5zY3JvbGxMZWZ0ICsgcm9vdC5zY3JvbGxMZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudC5jbGllbnRZID0gZXZlbnQuY2xpZW50WSArIGRvYy5ib2R5LnNjcm9sbFRvcCArIHJvb3Quc2Nyb2xsVG9wXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChvdmVyT3V0UmVnZXgudGVzdCh0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnQucmVsYXRlZFRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgZXZlbnRbKHR5cGUgPT0gJ21vdXNlb3ZlcicgPyAnZnJvbScgOiAndG8nKSArICdFbGVtZW50J11cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vdXNlUHJvcHNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLCB7IC8vIG1vdXNlIHdoZWVsIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICByZWc6IC9tb3VzZS4qKHdoZWVsfHNjcm9sbCkvaVxuICAgICAgICAgICAgICAgICAgLCBmaXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vdXNlV2hlZWxQcm9wcyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAsIHsgLy8gVGV4dEV2ZW50XG4gICAgICAgICAgICAgICAgICAgIHJlZzogL150ZXh0L2lcbiAgICAgICAgICAgICAgICAgICwgZml4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0ZXh0UHJvcHMgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLCB7IC8vIHRvdWNoIGFuZCBnZXN0dXJlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICByZWc6IC9edG91Y2h8Xmdlc3R1cmUvaVxuICAgICAgICAgICAgICAgICAgLCBmaXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRvdWNoUHJvcHMgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLCB7IC8vIG1lc3NhZ2UgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIHJlZzogL15tZXNzYWdlJC9pXG4gICAgICAgICAgICAgICAgICAsIGZpeDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZVByb3BzIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICwgeyAvLyBwb3BzdGF0ZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgcmVnOiAvXnBvcHN0YXRlJC9pXG4gICAgICAgICAgICAgICAgICAsIGZpeDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RhdGVQcm9wcyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAsIHsgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlZzogLy4qL1xuICAgICAgICAgICAgICAgICAgLCBmaXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbW1vblByb3BzIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgLCB0eXBlRml4ZXJNYXAgPSB7fSAvLyB1c2VkIHRvIG1hcCBldmVudCB0eXBlcyB0byBmaXhlciBmdW5jdGlvbnMgKGFib3ZlKSwgYSBiYXNpYyBjYWNoZSBtZWNoYW5pc21cblxuICAgICAgICAgICwgRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQsIGVsZW1lbnQsIGlzTmF0aXZlKSB7XG4gICAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuXG4gICAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQgfHwgKChlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZWxlbWVudC5kb2N1bWVudCB8fCBlbGVtZW50KS5wYXJlbnRXaW5kb3cgfHwgd2luKS5ldmVudFxuICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsRXZlbnQgPSBldmVudFxuICAgICAgICAgICAgICB0aGlzLmlzTmF0aXZlICAgICAgID0gaXNOYXRpdmVcbiAgICAgICAgICAgICAgdGhpcy5pc0JlYW4gICAgICAgICA9IHRydWVcblxuICAgICAgICAgICAgICBpZiAoIWV2ZW50KSByZXR1cm5cblxuICAgICAgICAgICAgICB2YXIgdHlwZSAgID0gZXZlbnQudHlwZVxuICAgICAgICAgICAgICAgICwgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnRcbiAgICAgICAgICAgICAgICAsIGksIGwsIHAsIHByb3BzLCBmaXhlclxuXG4gICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0ICYmIHRhcmdldC5ub2RlVHlwZSA9PT0gMyA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0XG5cbiAgICAgICAgICAgICAgaWYgKGlzTmF0aXZlKSB7IC8vIHdlIG9ubHkgbmVlZCBiYXNpYyBhdWdtZW50YXRpb24gb24gY3VzdG9tIGV2ZW50cywgdGhlIHJlc3QgZXhwZW5zaXZlICYgcG9pbnRsZXNzXG4gICAgICAgICAgICAgICAgZml4ZXIgPSB0eXBlRml4ZXJNYXBbdHlwZV1cbiAgICAgICAgICAgICAgICBpZiAoIWZpeGVyKSB7IC8vIGhhdmVuJ3QgZW5jb3VudGVyZWQgdGhpcyBldmVudCB0eXBlIGJlZm9yZSwgbWFwIGEgZml4ZXIgZnVuY3Rpb24gZm9yIGl0XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdHlwZUZpeGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVGaXhlcnNbaV0ucmVnLnRlc3QodHlwZSkpIHsgLy8gZ3VhcmFudGVlZCB0byBtYXRjaCBhdCBsZWFzdCBvbmUsIGxhc3QgaXMgLipcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlRml4ZXJNYXBbdHlwZV0gPSBmaXhlciA9IHR5cGVGaXhlcnNbaV0uZml4XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByb3BzID0gZml4ZXIoZXZlbnQsIHRoaXMsIHR5cGUpXG4gICAgICAgICAgICAgICAgZm9yIChpID0gcHJvcHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoISgocCA9IHByb3BzW2ldKSBpbiB0aGlzKSAmJiBwIGluIGV2ZW50KSB0aGlzW3BdID0gZXZlbnRbcF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAvLyBwcmV2ZW50RGVmYXVsdCgpIGFuZCBzdG9wUHJvcGFnYXRpb24oKSBhcmUgYSBjb25zaXN0ZW50IGludGVyZmFjZSB0byB0aG9zZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gb24gdGhlIERPTSwgc3RvcCgpIGlzIGFuIGFsaWFzIGZvciBib3RoIG9mIHRoZW0gdG9nZXRoZXJcbiAgICAgICAgRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aGlzLm9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQpIHRoaXMub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgZWxzZSB0aGlzLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIEV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24pIHRoaXMub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgIGVsc2UgdGhpcy5vcmlnaW5hbEV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBFdmVudC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB0aGlzLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgdGhpcy5zdG9wcGVkID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIC8vIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIGhhcyB0byBiZSBoYW5kbGVkIGludGVybmFsbHkgYmVjYXVzZSB3ZSBtYW5hZ2UgdGhlIGV2ZW50IGxpc3QgZm9yXG4gICAgICAgIC8vIGVhY2ggZWxlbWVudFxuICAgICAgICAvLyBub3RlIHRoYXQgb3JpZ2luYWxFbGVtZW50IG1heSBiZSBhIEJlYW4jRXZlbnQgb2JqZWN0IGluIHNvbWUgc2l0dWF0aW9uc1xuICAgICAgICBFdmVudC5wcm90b3R5cGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aGlzLm9yaWdpbmFsRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB0aGlzLm9yaWdpbmFsRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcbiAgICAgICAgICB0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgICAgIH1cbiAgICAgICAgRXZlbnQucHJvdG90eXBlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgJiYgdGhpcy5vcmlnaW5hbEV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKClcbiAgICAgICAgfVxuICAgICAgICBFdmVudC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoY3VycmVudFRhcmdldCkge1xuICAgICAgICAgIC8vVE9ETzogdGhpcyBpcyByaXBlIGZvciBvcHRpbWlzYXRpb24sIG5ldyBldmVudHMgYXJlICpleHBlbnNpdmUqXG4gICAgICAgICAgLy8gaW1wcm92aW5nIHRoaXMgd2lsbCBzcGVlZCB1cCBkZWxlZ2F0ZWQgZXZlbnRzXG4gICAgICAgICAgdmFyIG5lID0gbmV3IEV2ZW50KHRoaXMsIHRoaXMuZWxlbWVudCwgdGhpcy5pc05hdGl2ZSlcbiAgICAgICAgICBuZS5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldFxuICAgICAgICAgIHJldHVybiBuZVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEV2ZW50XG4gICAgICB9KCkpXG5cbiAgICAgIC8vIGlmIHdlJ3JlIGluIG9sZCBJRSB3ZSBjYW4ndCBkbyBvbnByb3BlcnR5Y2hhbmdlIG9uIGRvYyBvciB3aW4gc28gd2UgdXNlIGRvYy5kb2N1bWVudEVsZW1lbnQgZm9yIGJvdGhcbiAgICAsIHRhcmdldEVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgaXNOYXRpdmUpIHtcbiAgICAgICAgcmV0dXJuICFXM0NfTU9ERUwgJiYgIWlzTmF0aXZlICYmIChlbGVtZW50ID09PSBkb2MgfHwgZWxlbWVudCA9PT0gd2luKSA/IHJvb3QgOiBlbGVtZW50XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICAqIEJlYW4gbWFpbnRhaW5zIGFuIGludGVybmFsIHJlZ2lzdHJ5IGZvciBldmVudCBsaXN0ZW5lcnMuIFdlIGRvbid0IHRvdWNoIGVsZW1lbnRzLCBvYmplY3RzXG4gICAgICAgICogb3IgZnVuY3Rpb25zIHRvIGlkZW50aWZ5IHRoZW0sIGluc3RlYWQgd2Ugc3RvcmUgZXZlcnl0aGluZyBpbiB0aGUgcmVnaXN0cnkuXG4gICAgICAgICogRWFjaCBldmVudCBsaXN0ZW5lciBoYXMgYSBSZWdFbnRyeSBvYmplY3QsIHdlIGhhdmUgb25lICdyZWdpc3RyeScgZm9yIHRoZSB3aG9sZSBpbnN0YW5jZS5cbiAgICAgICAgKi9cbiAgICAsIFJlZ0VudHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZWFjaCBoYW5kbGVyIGlzIHdyYXBwZWQgc28gd2UgY2FuIGhhbmRsZSBkZWxlZ2F0aW9uIGFuZCBjdXN0b20gZXZlbnRzXG4gICAgICAgIHZhciB3cmFwcGVkSGFuZGxlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBmbiwgY29uZGl0aW9uLCBhcmdzKSB7XG4gICAgICAgICAgICB2YXIgY2FsbCA9IGZ1bmN0aW9uIChldmVudCwgZWFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShlbGVtZW50LCBhcmdzID8gc2xpY2UuY2FsbChlYXJncywgZXZlbnQgPyAwIDogMSkuY29uY2F0KGFyZ3MpIDogZWFyZ3MpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAsIGZpbmRUYXJnZXQgPSBmdW5jdGlvbiAoZXZlbnQsIGV2ZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLl9fYmVhbkRlbCA/IGZuLl9fYmVhbkRlbC5mdChldmVudC50YXJnZXQsIGVsZW1lbnQpIDogZXZlbnRFbGVtZW50XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAsIGhhbmRsZXIgPSBjb25kaXRpb25cbiAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGZpbmRUYXJnZXQoZXZlbnQsIHRoaXMpIC8vIGRlbGVhdGVkIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbi5hcHBseSh0YXJnZXQsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudCkgZXZlbnQuY3VycmVudFRhcmdldCA9IHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGwoZXZlbnQsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGZuLl9fYmVhbkRlbCkgZXZlbnQgPSBldmVudC5jbG9uZShmaW5kVGFyZ2V0KGV2ZW50KSkgLy8gZGVsZWdhdGVkIGV2ZW50LCBmaXggdGhlIGZpeFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsKGV2ZW50LCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZXIuX19iZWFuRGVsID0gZm4uX19iZWFuRGVsXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlclxuICAgICAgICAgIH1cblxuICAgICAgICAsIFJlZ0VudHJ5ID0gZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIGhhbmRsZXIsIG9yaWdpbmFsLCBuYW1lc3BhY2VzLCBhcmdzLCByb290KSB7XG4gICAgICAgICAgICB2YXIgY3VzdG9tVHlwZSAgICAgPSBjdXN0b21FdmVudHNbdHlwZV1cbiAgICAgICAgICAgICAgLCBpc05hdGl2ZVxuXG4gICAgICAgICAgICBpZiAodHlwZSA9PSAndW5sb2FkJykge1xuICAgICAgICAgICAgICAvLyBzZWxmIGNsZWFuLXVwXG4gICAgICAgICAgICAgIGhhbmRsZXIgPSBvbmNlKHJlbW92ZUxpc3RlbmVyLCBlbGVtZW50LCB0eXBlLCBoYW5kbGVyLCBvcmlnaW5hbClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1c3RvbVR5cGUpIHtcbiAgICAgICAgICAgICAgaWYgKGN1c3RvbVR5cGUuY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IHdyYXBwZWRIYW5kbGVyKGVsZW1lbnQsIGhhbmRsZXIsIGN1c3RvbVR5cGUuY29uZGl0aW9uLCBhcmdzKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHR5cGUgPSBjdXN0b21UeXBlLmJhc2UgfHwgdHlwZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzTmF0aXZlICAgICAgPSBpc05hdGl2ZSA9IG5hdGl2ZUV2ZW50c1t0eXBlXSAmJiAhIWVsZW1lbnRbZXZlbnRTdXBwb3J0XVxuICAgICAgICAgICAgdGhpcy5jdXN0b21UeXBlICAgID0gIVczQ19NT0RFTCAmJiAhaXNOYXRpdmUgJiYgdHlwZVxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ICAgICAgID0gZWxlbWVudFxuICAgICAgICAgICAgdGhpcy50eXBlICAgICAgICAgID0gdHlwZVxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbCAgICAgID0gb3JpZ2luYWxcbiAgICAgICAgICAgIHRoaXMubmFtZXNwYWNlcyAgICA9IG5hbWVzcGFjZXNcbiAgICAgICAgICAgIHRoaXMuZXZlbnRUeXBlICAgICA9IFczQ19NT0RFTCB8fCBpc05hdGl2ZSA/IHR5cGUgOiAncHJvcGVydHljaGFuZ2UnXG4gICAgICAgICAgICB0aGlzLnRhcmdldCAgICAgICAgPSB0YXJnZXRFbGVtZW50KGVsZW1lbnQsIGlzTmF0aXZlKVxuICAgICAgICAgICAgdGhpc1tldmVudFN1cHBvcnRdID0gISF0aGlzLnRhcmdldFtldmVudFN1cHBvcnRdXG4gICAgICAgICAgICB0aGlzLnJvb3QgICAgICAgICAgPSByb290XG4gICAgICAgICAgICB0aGlzLmhhbmRsZXIgICAgICAgPSB3cmFwcGVkSGFuZGxlcihlbGVtZW50LCBoYW5kbGVyLCBudWxsLCBhcmdzKVxuICAgICAgICAgIH1cblxuICAgICAgICAvLyBnaXZlbiBhIGxpc3Qgb2YgbmFtZXNwYWNlcywgaXMgb3VyIGVudHJ5IGluIGFueSBvZiB0aGVtP1xuICAgICAgICBSZWdFbnRyeS5wcm90b3R5cGUuaW5OYW1lc3BhY2VzID0gZnVuY3Rpb24gKGNoZWNrTmFtZXNwYWNlcykge1xuICAgICAgICAgIHZhciBpLCBqLCBjID0gMFxuICAgICAgICAgIGlmICghY2hlY2tOYW1lc3BhY2VzKSByZXR1cm4gdHJ1ZVxuICAgICAgICAgIGlmICghdGhpcy5uYW1lc3BhY2VzKSByZXR1cm4gZmFsc2VcbiAgICAgICAgICBmb3IgKGkgPSBjaGVja05hbWVzcGFjZXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICBmb3IgKGogPSB0aGlzLm5hbWVzcGFjZXMubGVuZ3RoOyBqLS07KSB7XG4gICAgICAgICAgICAgIGlmIChjaGVja05hbWVzcGFjZXNbaV0gPT0gdGhpcy5uYW1lc3BhY2VzW2pdKSBjKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoZWNrTmFtZXNwYWNlcy5sZW5ndGggPT09IGNcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1hdGNoIGJ5IGVsZW1lbnQsIG9yaWdpbmFsIGZuIChvcHQpLCBoYW5kbGVyIGZuIChvcHQpXG4gICAgICAgIFJlZ0VudHJ5LnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKGNoZWNrRWxlbWVudCwgY2hlY2tPcmlnaW5hbCwgY2hlY2tIYW5kbGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudCA9PT0gY2hlY2tFbGVtZW50ICYmXG4gICAgICAgICAgICAoIWNoZWNrT3JpZ2luYWwgfHwgdGhpcy5vcmlnaW5hbCA9PT0gY2hlY2tPcmlnaW5hbCkgJiZcbiAgICAgICAgICAgICghY2hlY2tIYW5kbGVyIHx8IHRoaXMuaGFuZGxlciA9PT0gY2hlY2tIYW5kbGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlZ0VudHJ5XG4gICAgICB9KCkpXG5cbiAgICAsIHJlZ2lzdHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gb3VyIG1hcCBzdG9yZXMgYXJyYXlzIGJ5IGV2ZW50IHR5cGUsIGp1c3QgYmVjYXVzZSBpdCdzIGJldHRlciB0aGFuIHN0b3JpbmdcbiAgICAgICAgLy8gZXZlcnl0aGluZyBpbiBhIHNpbmdsZSBhcnJheS5cbiAgICAgICAgLy8gdXNlcyAnJCcgYXMgYSBwcmVmaXggZm9yIHRoZSBrZXlzIGZvciBzYWZldHkgYW5kICdyJyBhcyBhIHNwZWNpYWwgcHJlZml4IGZvclxuICAgICAgICAvLyByb290TGlzdGVuZXJzIHNvIHdlIGNhbiBsb29rIHRoZW0gdXAgZmFzdFxuICAgICAgICB2YXIgbWFwID0ge31cblxuICAgICAgICAgIC8vIGdlbmVyaWMgZnVuY3Rpb25hbCBzZWFyY2ggb2Ygb3VyIHJlZ2lzdHJ5IGZvciBtYXRjaGluZyBsaXN0ZW5lcnMsXG4gICAgICAgICAgLy8gYGZuYCByZXR1cm5zIGZhbHNlIHRvIGJyZWFrIG91dCBvZiB0aGUgbG9vcFxuICAgICAgICAgICwgZm9yQWxsID0gZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIG9yaWdpbmFsLCBoYW5kbGVyLCByb290LCBmbikge1xuICAgICAgICAgICAgICB2YXIgcGZ4ID0gcm9vdCA/ICdyJyA6ICckJ1xuICAgICAgICAgICAgICBpZiAoIXR5cGUgfHwgdHlwZSA9PSAnKicpIHtcbiAgICAgICAgICAgICAgICAvLyBzZWFyY2ggdGhlIHdob2xlIHJlZ2lzdHJ5XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdCBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0LmNoYXJBdCgwKSA9PSBwZngpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yQWxsKGVsZW1lbnQsIHQuc3Vic3RyKDEpLCBvcmlnaW5hbCwgaGFuZGxlciwgcm9vdCwgZm4pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBpID0gMCwgbCwgbGlzdCA9IG1hcFtwZnggKyB0eXBlXSwgYWxsID0gZWxlbWVudCA9PSAnKidcbiAgICAgICAgICAgICAgICBpZiAoIWxpc3QpIHJldHVyblxuICAgICAgICAgICAgICAgIGZvciAobCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoKGFsbCB8fCBsaXN0W2ldLm1hdGNoZXMoZWxlbWVudCwgb3JpZ2luYWwsIGhhbmRsZXIpKSAmJiAhZm4obGlzdFtpXSwgbGlzdCwgaSwgdHlwZSkpIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBoYXMgPSBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgb3JpZ2luYWwsIHJvb3QpIHtcbiAgICAgICAgICAgICAgLy8gd2UncmUgbm90IHVzaW5nIGZvckFsbCBoZXJlIHNpbXBseSBiZWNhdXNlIGl0J3MgYSBiaXQgc2xvd2VyIGFuZCB0aGlzXG4gICAgICAgICAgICAgIC8vIG5lZWRzIHRvIGJlIGZhc3RcbiAgICAgICAgICAgICAgdmFyIGksIGxpc3QgPSBtYXBbKHJvb3QgPyAncicgOiAnJCcpICsgdHlwZV1cbiAgICAgICAgICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgICAgaWYgKCFsaXN0W2ldLnJvb3QgJiYgbGlzdFtpXS5tYXRjaGVzKGVsZW1lbnQsIG9yaWdpbmFsLCBudWxsKSkgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAsIGdldCA9IGZ1bmN0aW9uIChlbGVtZW50LCB0eXBlLCBvcmlnaW5hbCwgcm9vdCkge1xuICAgICAgICAgICAgICB2YXIgZW50cmllcyA9IFtdXG4gICAgICAgICAgICAgIGZvckFsbChlbGVtZW50LCB0eXBlLCBvcmlnaW5hbCwgbnVsbCwgcm9vdCwgZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXMucHVzaChlbnRyeSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXNcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICwgcHV0ID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgIHZhciBoYXMgPSAhZW50cnkucm9vdCAmJiAhdGhpcy5oYXMoZW50cnkuZWxlbWVudCwgZW50cnkudHlwZSwgbnVsbCwgZmFsc2UpXG4gICAgICAgICAgICAgICAgLCBrZXkgPSAoZW50cnkucm9vdCA/ICdyJyA6ICckJykgKyBlbnRyeS50eXBlXG4gICAgICAgICAgICAgIDsobWFwW2tleV0gfHwgKG1hcFtrZXldID0gW10pKS5wdXNoKGVudHJ5KVxuICAgICAgICAgICAgICByZXR1cm4gaGFzXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAsIGRlbCA9IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICBmb3JBbGwoZW50cnkuZWxlbWVudCwgZW50cnkudHlwZSwgbnVsbCwgZW50cnkuaGFuZGxlciwgZW50cnkucm9vdCwgZnVuY3Rpb24gKGVudHJ5LCBsaXN0LCBpKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSlcbiAgICAgICAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgZGVsZXRlIG1hcFsoZW50cnkucm9vdCA/ICdyJyA6ICckJykgKyBlbnRyeS50eXBlXVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkdW1wIGFsbCBlbnRyaWVzLCB1c2VkIGZvciBvbnVubG9hZFxuICAgICAgICAgICwgZW50cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHQsIGVudHJpZXMgPSBbXVxuICAgICAgICAgICAgICBmb3IgKHQgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHQuY2hhckF0KDApID09ICckJykgZW50cmllcyA9IGVudHJpZXMuY29uY2F0KG1hcFt0XSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZW50cmllc1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IGhhczogaGFzLCBnZXQ6IGdldCwgcHV0OiBwdXQsIGRlbDogZGVsLCBlbnRyaWVzOiBlbnRyaWVzIH1cbiAgICAgIH0oKSlcblxuICAgICAgLy8gd2UgbmVlZCBhIHNlbGVjdG9yIGVuZ2luZSBmb3IgZGVsZWdhdGVkIGV2ZW50cywgdXNlIHF1ZXJ5U2VsZWN0b3JBbGwgaWYgaXQgZXhpc3RzXG4gICAgICAvLyBidXQgZm9yIG9sZGVyIGJyb3dzZXJzIHdlIG5lZWQgUXdlcnksIFNpenpsZSBvciBzaW1pbGFyXG4gICAgLCBzZWxlY3RvckVuZ2luZVxuICAgICwgc2V0U2VsZWN0b3JFbmdpbmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBzZWxlY3RvckVuZ2luZSA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChzLCByKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIucXVlcnlTZWxlY3RvckFsbChzKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JlYW46IE5vIHNlbGVjdG9yIGVuZ2luZSBpbnN0YWxsZWQnKSAvLyBlZWVrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3RvckVuZ2luZSA9IGVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB3ZSBhdHRhY2ggdGhpcyBsaXN0ZW5lciB0byBlYWNoIERPTSBldmVudCB0aGF0IHdlIG5lZWQgdG8gbGlzdGVuIHRvLCBvbmx5IG9uY2VcbiAgICAgIC8vIHBlciBldmVudCB0eXBlIHBlciBET00gZWxlbWVudFxuICAgICwgcm9vdExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCB0eXBlKSB7XG4gICAgICAgIGlmICghVzNDX01PREVMICYmIHR5cGUgJiYgZXZlbnQgJiYgZXZlbnQucHJvcGVydHlOYW1lICE9ICdfb24nICsgdHlwZSkgcmV0dXJuXG5cbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHJlZ2lzdHJ5LmdldCh0aGlzLCB0eXBlIHx8IGV2ZW50LnR5cGUsIG51bGwsIGZhbHNlKVxuICAgICAgICAgICwgbCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICAgICAsIGkgPSAwXG5cbiAgICAgICAgZXZlbnQgPSBuZXcgRXZlbnQoZXZlbnQsIHRoaXMsIHRydWUpXG4gICAgICAgIGlmICh0eXBlKSBldmVudC50eXBlID0gdHlwZVxuXG4gICAgICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBhbGwgaGFuZGxlcnMgcmVnaXN0ZXJlZCBmb3IgdGhpcyB0eXBlLCBjYWxsaW5nIHRoZW0gdW5sZXNzIHRoZXkgaGF2ZVxuICAgICAgICAvLyBiZWVuIHJlbW92ZWQgYnkgYSBwcmV2aW91cyBoYW5kbGVyIG9yIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIGhhcyBiZWVuIGNhbGxlZFxuICAgICAgICBmb3IgKDsgaSA8IGwgJiYgIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCk7IGkrKykge1xuICAgICAgICAgIGlmICghbGlzdGVuZXJzW2ldLnJlbW92ZWQpIGxpc3RlbmVyc1tpXS5oYW5kbGVyLmNhbGwodGhpcywgZXZlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gYWRkIGFuZCByZW1vdmUgbGlzdGVuZXJzIHRvIERPTSBlbGVtZW50c1xuICAgICwgbGlzdGVuZXIgPSBXM0NfTU9ERUxcbiAgICAgICAgPyBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgYWRkKSB7XG4gICAgICAgICAgICAvLyBuZXcgYnJvd3NlcnNcbiAgICAgICAgICAgIGVsZW1lbnRbYWRkID8gYWRkRXZlbnQgOiByZW1vdmVFdmVudF0odHlwZSwgcm9vdExpc3RlbmVyLCBmYWxzZSlcbiAgICAgICAgICB9XG4gICAgICAgIDogZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIGFkZCwgY3VzdG9tKSB7XG4gICAgICAgICAgICAvLyBJRTggYW5kIGJlbG93LCB1c2UgYXR0YWNoRXZlbnQvZGV0YWNoRXZlbnQgYW5kIHdlIGhhdmUgdG8gcGlnZ3ktYmFjayBwcm9wZXJ0eWNoYW5nZSBldmVudHNcbiAgICAgICAgICAgIC8vIHRvIHNpbXVsYXRlIGV2ZW50IGJ1YmJsaW5nIGV0Yy5cbiAgICAgICAgICAgIHZhciBlbnRyeVxuICAgICAgICAgICAgaWYgKGFkZCkge1xuICAgICAgICAgICAgICByZWdpc3RyeS5wdXQoZW50cnkgPSBuZXcgUmVnRW50cnkoXG4gICAgICAgICAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICAgICAgLCBjdXN0b20gfHwgdHlwZVxuICAgICAgICAgICAgICAgICwgZnVuY3Rpb24gKGV2ZW50KSB7IC8vIGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgcm9vdExpc3RlbmVyLmNhbGwoZWxlbWVudCwgZXZlbnQsIGN1c3RvbSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAsIHJvb3RMaXN0ZW5lclxuICAgICAgICAgICAgICAgICwgbnVsbFxuICAgICAgICAgICAgICAgICwgbnVsbFxuICAgICAgICAgICAgICAgICwgdHJ1ZSAvLyBpcyByb290XG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgIGlmIChjdXN0b20gJiYgZWxlbWVudFsnX29uJyArIGN1c3RvbV0gPT0gbnVsbCkgZWxlbWVudFsnX29uJyArIGN1c3RvbV0gPSAwXG4gICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZW50cnkuZXZlbnRUeXBlLCBlbnRyeS5oYW5kbGVyKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW50cnkgPSByZWdpc3RyeS5nZXQoZWxlbWVudCwgY3VzdG9tIHx8IHR5cGUsIHJvb3RMaXN0ZW5lciwgdHJ1ZSlbMF1cbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgZW50cnkudGFyZ2V0LmRldGFjaEV2ZW50KCdvbicgKyBlbnRyeS5ldmVudFR5cGUsIGVudHJ5LmhhbmRsZXIpXG4gICAgICAgICAgICAgICAgcmVnaXN0cnkuZGVsKGVudHJ5KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgLCBvbmNlID0gZnVuY3Rpb24gKHJtLCBlbGVtZW50LCB0eXBlLCBmbiwgb3JpZ2luYWxGbikge1xuICAgICAgICAvLyB3cmFwIHRoZSBoYW5kbGVyIGluIGEgaGFuZGxlciB0aGF0IGRvZXMgYSByZW1vdmUgYXMgd2VsbFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICBybShlbGVtZW50LCB0eXBlLCBvcmlnaW5hbEZuKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAsIHJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9yZ1R5cGUsIGhhbmRsZXIsIG5hbWVzcGFjZXMpIHtcbiAgICAgICAgdmFyIHR5cGUgICAgID0gb3JnVHlwZSAmJiBvcmdUeXBlLnJlcGxhY2UobmFtZVJlZ2V4LCAnJylcbiAgICAgICAgICAsIGhhbmRsZXJzID0gcmVnaXN0cnkuZ2V0KGVsZW1lbnQsIHR5cGUsIG51bGwsIGZhbHNlKVxuICAgICAgICAgICwgcmVtb3ZlZCAgPSB7fVxuICAgICAgICAgICwgaSwgbFxuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoKCFoYW5kbGVyIHx8IGhhbmRsZXJzW2ldLm9yaWdpbmFsID09PSBoYW5kbGVyKSAmJiBoYW5kbGVyc1tpXS5pbk5hbWVzcGFjZXMobmFtZXNwYWNlcykpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgaXMgcHJvYmxlbWF0aWMsIHdlIGhhdmUgYSByZWdpc3RyeS5nZXQoKSBhbmQgcmVnaXN0cnkuZGVsKCkgdGhhdFxuICAgICAgICAgICAgLy8gYm90aCBkbyByZWdpc3RyeSBzZWFyY2hlcyBzbyB3ZSB3YXN0ZSBjeWNsZXMgZG9pbmcgdGhpcy4gTmVlZHMgdG8gYmUgcm9sbGVkIGludG9cbiAgICAgICAgICAgIC8vIGEgc2luZ2xlIHJlZ2lzdHJ5LmZvckFsbChmbikgdGhhdCByZW1vdmVzIHdoaWxlIGZpbmRpbmcsIGJ1dCB0aGUgY2F0Y2ggaXMgdGhhdFxuICAgICAgICAgICAgLy8gd2UnbGwgYmUgc3BsaWNpbmcgdGhlIGFycmF5cyB0aGF0IHdlJ3JlIGl0ZXJhdGluZyBvdmVyLiBOZWVkcyBleHRyYSB0ZXN0cyB0b1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGRvbid0IHNjcmV3IGl0IHVwLiBAcnZhZ2dcbiAgICAgICAgICAgIHJlZ2lzdHJ5LmRlbChoYW5kbGVyc1tpXSlcbiAgICAgICAgICAgIGlmICghcmVtb3ZlZFtoYW5kbGVyc1tpXS5ldmVudFR5cGVdICYmIGhhbmRsZXJzW2ldW2V2ZW50U3VwcG9ydF0pXG4gICAgICAgICAgICAgIHJlbW92ZWRbaGFuZGxlcnNbaV0uZXZlbnRUeXBlXSA9IHsgdDogaGFuZGxlcnNbaV0uZXZlbnRUeXBlLCBjOiBoYW5kbGVyc1tpXS50eXBlIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgZWFjaCB0eXBlL2VsZW1lbnQgZm9yIHJlbW92ZWQgbGlzdGVuZXJzIGFuZCByZW1vdmUgdGhlIHJvb3RMaXN0ZW5lciB3aGVyZSBpdCdzIG5vIGxvbmdlciBuZWVkZWRcbiAgICAgICAgZm9yIChpIGluIHJlbW92ZWQpIHtcbiAgICAgICAgICBpZiAoIXJlZ2lzdHJ5LmhhcyhlbGVtZW50LCByZW1vdmVkW2ldLnQsIG51bGwsIGZhbHNlKSkge1xuICAgICAgICAgICAgLy8gbGFzdCBsaXN0ZW5lciBvZiB0aGlzIHR5cGUsIHJlbW92ZSB0aGUgcm9vdExpc3RlbmVyXG4gICAgICAgICAgICBsaXN0ZW5lcihlbGVtZW50LCByZW1vdmVkW2ldLnQsIGZhbHNlLCByZW1vdmVkW2ldLmMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCB1cCBhIGRlbGVnYXRlIGhlbHBlciB1c2luZyB0aGUgZ2l2ZW4gc2VsZWN0b3IsIHdyYXAgdGhlIGhhbmRsZXIgZnVuY3Rpb25cbiAgICAsIGRlbGVnYXRlID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBmbikge1xuICAgICAgICAvL1RPRE86IGZpbmRUYXJnZXQgKHRoZXJlZm9yZSAkKSBpcyBjYWxsZWQgdHdpY2UsIG9uY2UgZm9yIG1hdGNoIGFuZCBvbmNlIGZvclxuICAgICAgICAvLyBzZXR0aW5nIGUuY3VycmVudFRhcmdldCwgZml4IHRoaXMgc28gaXQncyBvbmx5IG5lZWRlZCBvbmNlXG4gICAgICAgIHZhciBmaW5kVGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcm9vdCkge1xuICAgICAgICAgICAgICB2YXIgaSwgYXJyYXkgPSBpc1N0cmluZyhzZWxlY3RvcikgPyBzZWxlY3RvckVuZ2luZShzZWxlY3Rvciwgcm9vdCkgOiBzZWxlY3RvclxuICAgICAgICAgICAgICBmb3IgKDsgdGFyZ2V0ICYmIHRhcmdldCAhPT0gcm9vdDsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBhcnJheS5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhcnJheVtpXSA9PT0gdGFyZ2V0KSByZXR1cm4gdGFyZ2V0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLCBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoID0gZmluZFRhcmdldChlLnRhcmdldCwgdGhpcylcbiAgICAgICAgICAgICAgaWYgKG1hdGNoKSBmbi5hcHBseShtYXRjaCwgYXJndW1lbnRzKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIC8vIF9fYmVhbkRlbCBpc24ndCBwbGVhc2FudCBidXQgaXQncyBhIHByaXZhdGUgZnVuY3Rpb24sIG5vdCBleHBvc2VkIG91dHNpZGUgb2YgQmVhblxuICAgICAgICBoYW5kbGVyLl9fYmVhbkRlbCA9IHtcbiAgICAgICAgICAgIGZ0ICAgICAgIDogZmluZFRhcmdldCAvLyBhdHRhY2ggaXQgaGVyZSBmb3IgY3VzdG9tRXZlbnRzIHRvIHVzZSB0b29cbiAgICAgICAgICAsIHNlbGVjdG9yIDogc2VsZWN0b3JcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFuZGxlclxuICAgICAgfVxuXG4gICAgLCBmaXJlTGlzdGVuZXIgPSBXM0NfTU9ERUwgPyBmdW5jdGlvbiAoaXNOYXRpdmUsIHR5cGUsIGVsZW1lbnQpIHtcbiAgICAgICAgLy8gbW9kZXJuIGJyb3dzZXJzLCBkbyBhIHByb3BlciBkaXNwYXRjaEV2ZW50KClcbiAgICAgICAgdmFyIGV2dCA9IGRvYy5jcmVhdGVFdmVudChpc05hdGl2ZSA/ICdIVE1MRXZlbnRzJyA6ICdVSUV2ZW50cycpXG4gICAgICAgIGV2dFtpc05hdGl2ZSA/ICdpbml0RXZlbnQnIDogJ2luaXRVSUV2ZW50J10odHlwZSwgdHJ1ZSwgdHJ1ZSwgd2luLCAxKVxuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KVxuICAgICAgfSA6IGZ1bmN0aW9uIChpc05hdGl2ZSwgdHlwZSwgZWxlbWVudCkge1xuICAgICAgICAvLyBvbGQgYnJvd3NlciB1c2Ugb25wcm9wZXJ0eWNoYW5nZSwganVzdCBpbmNyZW1lbnQgYSBjdXN0b20gcHJvcGVydHkgdG8gdHJpZ2dlciB0aGUgZXZlbnRcbiAgICAgICAgZWxlbWVudCA9IHRhcmdldEVsZW1lbnQoZWxlbWVudCwgaXNOYXRpdmUpXG4gICAgICAgIGlzTmF0aXZlID8gZWxlbWVudC5maXJlRXZlbnQoJ29uJyArIHR5cGUsIGRvYy5jcmVhdGVFdmVudE9iamVjdCgpKSA6IGVsZW1lbnRbJ19vbicgKyB0eXBlXSsrXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICAqIFB1YmxpYyBBUEk6IG9mZigpLCBvbigpLCBhZGQoKSwgKHJlbW92ZSgpKSwgb25lKCksIGZpcmUoKSwgY2xvbmUoKVxuICAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAgKiBvZmYoZWxlbWVudFssIGV2ZW50VHlwZShzKVssIGhhbmRsZXIgXV0pXG4gICAgICAgICovXG4gICAgLCBvZmYgPSBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZVNwZWMsIGZuKSB7XG4gICAgICAgIHZhciBpc1R5cGVTdHIgPSBpc1N0cmluZyh0eXBlU3BlYylcbiAgICAgICAgICAsIGssIHR5cGUsIG5hbWVzcGFjZXMsIGlcblxuICAgICAgICBpZiAoaXNUeXBlU3RyICYmIHR5cGVTcGVjLmluZGV4T2YoJyAnKSA+IDApIHtcbiAgICAgICAgICAvLyBvZmYoZWwsICd0MSB0MiB0MycsIGZuKSBvciBvZmYoZWwsICd0MSB0MiB0MycpXG4gICAgICAgICAgdHlwZVNwZWMgPSBzdHIyYXJyKHR5cGVTcGVjKVxuICAgICAgICAgIGZvciAoaSA9IHR5cGVTcGVjLmxlbmd0aDsgaS0tOylcbiAgICAgICAgICAgIG9mZihlbGVtZW50LCB0eXBlU3BlY1tpXSwgZm4pXG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIHR5cGUgPSBpc1R5cGVTdHIgJiYgdHlwZVNwZWMucmVwbGFjZShuYW1lUmVnZXgsICcnKVxuICAgICAgICBpZiAodHlwZSAmJiBjdXN0b21FdmVudHNbdHlwZV0pIHR5cGUgPSBjdXN0b21FdmVudHNbdHlwZV0uYmFzZVxuXG4gICAgICAgIGlmICghdHlwZVNwZWMgfHwgaXNUeXBlU3RyKSB7XG4gICAgICAgICAgLy8gb2ZmKGVsKSBvciBvZmYoZWwsIHQxLm5zKSBvciBvZmYoZWwsIC5ucykgb3Igb2ZmKGVsLCAubnMxLm5zMi5uczMpXG4gICAgICAgICAgaWYgKG5hbWVzcGFjZXMgPSBpc1R5cGVTdHIgJiYgdHlwZVNwZWMucmVwbGFjZShuYW1lc3BhY2VSZWdleCwgJycpKSBuYW1lc3BhY2VzID0gc3RyMmFycihuYW1lc3BhY2VzLCAnLicpXG4gICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZm4sIG5hbWVzcGFjZXMpXG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0eXBlU3BlYykpIHtcbiAgICAgICAgICAvLyBvZmYoZWwsIGZuKVxuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIG51bGwsIHR5cGVTcGVjKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG9mZihlbCwgeyB0MTogZm4xLCB0MiwgZm4yIH0pXG4gICAgICAgICAgZm9yIChrIGluIHR5cGVTcGVjKSB7XG4gICAgICAgICAgICBpZiAodHlwZVNwZWMuaGFzT3duUHJvcGVydHkoaykpIG9mZihlbGVtZW50LCBrLCB0eXBlU3BlY1trXSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAgKiBvbihlbGVtZW50LCBldmVudFR5cGUocylbLCBzZWxlY3Rvcl0sIGhhbmRsZXJbLCBhcmdzIF0pXG4gICAgICAgICovXG4gICAgLCBvbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50cywgc2VsZWN0b3IsIGZuKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbEZuLCB0eXBlLCB0eXBlcywgaSwgYXJncywgZW50cnksIGZpcnN0XG5cbiAgICAgICAgLy9UT0RPOiB0aGUgdW5kZWZpbmVkIGNoZWNrIG1lYW5zIHlvdSBjYW4ndCBwYXNzIGFuICdhcmdzJyBhcmd1bWVudCwgZml4IHRoaXMgcGVyaGFwcz9cbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIGV2ZW50cyA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vVE9ETzogdGhpcyBjYW4ndCBoYW5kbGUgZGVsZWdhdGVkIGV2ZW50c1xuICAgICAgICAgIGZvciAodHlwZSBpbiBldmVudHMpIHtcbiAgICAgICAgICAgIGlmIChldmVudHMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgICAgICAgICAgb24uY2FsbCh0aGlzLCBlbGVtZW50LCB0eXBlLCBldmVudHNbdHlwZV0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKHNlbGVjdG9yKSkge1xuICAgICAgICAgIC8vIGRlbGVnYXRlZCBldmVudFxuICAgICAgICAgIG9yaWdpbmFsRm4gPSBmblxuICAgICAgICAgIGFyZ3MgICAgICAgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgNClcbiAgICAgICAgICBmbiAgICAgICAgID0gZGVsZWdhdGUoc2VsZWN0b3IsIG9yaWdpbmFsRm4sIHNlbGVjdG9yRW5naW5lKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFyZ3MgICAgICAgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMylcbiAgICAgICAgICBmbiAgICAgICAgID0gb3JpZ2luYWxGbiA9IHNlbGVjdG9yXG4gICAgICAgIH1cblxuICAgICAgICB0eXBlcyA9IHN0cjJhcnIoZXZlbnRzKVxuXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3Igb25lKCksIHdyYXAgaW4gYSBzZWxmLXJlbW92aW5nIGhhbmRsZXJcbiAgICAgICAgaWYgKHRoaXMgPT09IE9ORSkge1xuICAgICAgICAgIGZuID0gb25jZShvZmYsIGVsZW1lbnQsIGV2ZW50cywgZm4sIG9yaWdpbmFsRm4pXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSB0eXBlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAvLyBhZGQgbmV3IGhhbmRsZXIgdG8gdGhlIHJlZ2lzdHJ5IGFuZCBjaGVjayBpZiBpdCdzIHRoZSBmaXJzdCBmb3IgdGhpcyBlbGVtZW50L3R5cGVcbiAgICAgICAgICBmaXJzdCA9IHJlZ2lzdHJ5LnB1dChlbnRyeSA9IG5ldyBSZWdFbnRyeShcbiAgICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgLCB0eXBlc1tpXS5yZXBsYWNlKG5hbWVSZWdleCwgJycpIC8vIGV2ZW50IHR5cGVcbiAgICAgICAgICAgICwgZm5cbiAgICAgICAgICAgICwgb3JpZ2luYWxGblxuICAgICAgICAgICAgLCBzdHIyYXJyKHR5cGVzW2ldLnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSwgJy4nKSAvLyBuYW1lc3BhY2VzXG4gICAgICAgICAgICAsIGFyZ3NcbiAgICAgICAgICAgICwgZmFsc2UgLy8gbm90IHJvb3RcbiAgICAgICAgICApKVxuICAgICAgICAgIGlmIChlbnRyeVtldmVudFN1cHBvcnRdICYmIGZpcnN0KSB7XG4gICAgICAgICAgICAvLyBmaXJzdCBldmVudCBvZiB0aGlzIHR5cGUgb24gdGhpcyBlbGVtZW50LCBhZGQgcm9vdCBsaXN0ZW5lclxuICAgICAgICAgICAgbGlzdGVuZXIoZWxlbWVudCwgZW50cnkuZXZlbnRUeXBlLCB0cnVlLCBlbnRyeS5jdXN0b21UeXBlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICAqIGFkZChlbGVtZW50Wywgc2VsZWN0b3JdLCBldmVudFR5cGUocyksIGhhbmRsZXJbLCBhcmdzIF0pXG4gICAgICAgICpcbiAgICAgICAgKiBEZXByZWNhdGVkOiBrZXB0IChmb3Igbm93KSBmb3IgYmFja3dhcmQtY29tcGF0aWJpbGl0eVxuICAgICAgICAqL1xuICAgICwgYWRkID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50cywgZm4sIGRlbGZuKSB7XG4gICAgICAgIHJldHVybiBvbi5hcHBseShcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAsICFpc1N0cmluZyhmbilcbiAgICAgICAgICAgICAgPyBzbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgOiBbIGVsZW1lbnQsIGZuLCBldmVudHMsIGRlbGZuIF0uY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPiAzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDUpIDogW10pXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgICogb25lKGVsZW1lbnQsIGV2ZW50VHlwZShzKVssIHNlbGVjdG9yXSwgaGFuZGxlclssIGFyZ3MgXSlcbiAgICAgICAgKi9cbiAgICAsIG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG9uLmFwcGx5KE9ORSwgYXJndW1lbnRzKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAgKiBmaXJlKGVsZW1lbnQsIGV2ZW50VHlwZShzKVssIGFyZ3MgXSlcbiAgICAgICAgKlxuICAgICAgICAqIFRoZSBvcHRpb25hbCAnYXJncycgYXJndW1lbnQgbXVzdCBiZSBhbiBhcnJheSwgaWYgbm8gJ2FyZ3MnIGFyZ3VtZW50IGlzIHByb3ZpZGVkXG4gICAgICAgICogdGhlbiB3ZSBjYW4gdXNlIHRoZSBicm93c2VyJ3MgRE9NIGV2ZW50IHN5c3RlbSwgb3RoZXJ3aXNlIHdlIHRyaWdnZXIgaGFuZGxlcnMgbWFudWFsbHlcbiAgICAgICAgKi9cbiAgICAsIGZpcmUgPSBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgYXJncykge1xuICAgICAgICB2YXIgdHlwZXMgPSBzdHIyYXJyKHR5cGUpXG4gICAgICAgICAgLCBpLCBqLCBsLCBuYW1lcywgaGFuZGxlcnNcblxuICAgICAgICBmb3IgKGkgPSB0eXBlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICB0eXBlID0gdHlwZXNbaV0ucmVwbGFjZShuYW1lUmVnZXgsICcnKVxuICAgICAgICAgIGlmIChuYW1lcyA9IHR5cGVzW2ldLnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSkgbmFtZXMgPSBzdHIyYXJyKG5hbWVzLCAnLicpXG4gICAgICAgICAgaWYgKCFuYW1lcyAmJiAhYXJncyAmJiBlbGVtZW50W2V2ZW50U3VwcG9ydF0pIHtcbiAgICAgICAgICAgIGZpcmVMaXN0ZW5lcihuYXRpdmVFdmVudHNbdHlwZV0sIHR5cGUsIGVsZW1lbnQpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vbi1uYXRpdmUgZXZlbnQsIGVpdGhlciBiZWNhdXNlIG9mIGEgbmFtZXNwYWNlLCBhcmd1bWVudHMgb3IgYSBub24gRE9NIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBhbGwgbGlzdGVuZXJzIGFuZCBtYW51YWxseSAnZmlyZSdcbiAgICAgICAgICAgIGhhbmRsZXJzID0gcmVnaXN0cnkuZ2V0KGVsZW1lbnQsIHR5cGUsIG51bGwsIGZhbHNlKVxuICAgICAgICAgICAgYXJncyA9IFtmYWxzZV0uY29uY2F0KGFyZ3MpXG4gICAgICAgICAgICBmb3IgKGogPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgICAgIGlmIChoYW5kbGVyc1tqXS5pbk5hbWVzcGFjZXMobmFtZXMpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbal0uaGFuZGxlci5hcHBseShlbGVtZW50LCBhcmdzKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICAqIGNsb25lKGRzdEVsZW1lbnQsIHNyY0VsZW1lbnRbLCBldmVudFR5cGUgXSlcbiAgICAgICAgKlxuICAgICAgICAqIFRPRE86IHBlcmhhcHMgZm9yIGNvbnNpc3RlbmN5IHdlIHNob3VsZCBhbGxvdyB0aGUgc2FtZSBmbGV4aWJpbGl0eSBpbiB0eXBlIHNwZWNpZmllcnM/XG4gICAgICAgICovXG4gICAgLCBjbG9uZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBmcm9tLCB0eXBlKSB7XG4gICAgICAgIHZhciBoYW5kbGVycyA9IHJlZ2lzdHJ5LmdldChmcm9tLCB0eXBlLCBudWxsLCBmYWxzZSlcbiAgICAgICAgICAsIGwgPSBoYW5kbGVycy5sZW5ndGhcbiAgICAgICAgICAsIGkgPSAwXG4gICAgICAgICAgLCBhcmdzLCBiZWFuRGVsXG5cbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoaGFuZGxlcnNbaV0ub3JpZ2luYWwpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBbIGVsZW1lbnQsIGhhbmRsZXJzW2ldLnR5cGUgXVxuICAgICAgICAgICAgaWYgKGJlYW5EZWwgPSBoYW5kbGVyc1tpXS5oYW5kbGVyLl9fYmVhbkRlbCkgYXJncy5wdXNoKGJlYW5EZWwuc2VsZWN0b3IpXG4gICAgICAgICAgICBhcmdzLnB1c2goaGFuZGxlcnNbaV0ub3JpZ2luYWwpXG4gICAgICAgICAgICBvbi5hcHBseShudWxsLCBhcmdzKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgfVxuXG4gICAgLCBiZWFuID0ge1xuICAgICAgICAgICdvbicgICAgICAgICAgICAgICAgOiBvblxuICAgICAgICAsICdhZGQnICAgICAgICAgICAgICAgOiBhZGRcbiAgICAgICAgLCAnb25lJyAgICAgICAgICAgICAgIDogb25lXG4gICAgICAgICwgJ29mZicgICAgICAgICAgICAgICA6IG9mZlxuICAgICAgICAsICdyZW1vdmUnICAgICAgICAgICAgOiBvZmZcbiAgICAgICAgLCAnY2xvbmUnICAgICAgICAgICAgIDogY2xvbmVcbiAgICAgICAgLCAnZmlyZScgICAgICAgICAgICAgIDogZmlyZVxuICAgICAgICAsICdFdmVudCcgICAgICAgICAgICAgOiBFdmVudFxuICAgICAgICAsICdzZXRTZWxlY3RvckVuZ2luZScgOiBzZXRTZWxlY3RvckVuZ2luZVxuICAgICAgICAsICdub0NvbmZsaWN0JyAgICAgICAgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb250ZXh0W25hbWVdID0gb2xkXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAvLyBmb3IgSUUsIGNsZWFuIHVwIG9uIHVubG9hZCB0byBhdm9pZCBsZWFrc1xuICBpZiAod2luLmF0dGFjaEV2ZW50KSB7XG4gICAgdmFyIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaSwgZW50cmllcyA9IHJlZ2lzdHJ5LmVudHJpZXMoKVxuICAgICAgZm9yIChpIGluIGVudHJpZXMpIHtcbiAgICAgICAgaWYgKGVudHJpZXNbaV0udHlwZSAmJiBlbnRyaWVzW2ldLnR5cGUgIT09ICd1bmxvYWQnKSBvZmYoZW50cmllc1tpXS5lbGVtZW50LCBlbnRyaWVzW2ldLnR5cGUpXG4gICAgICB9XG4gICAgICB3aW4uZGV0YWNoRXZlbnQoJ29udW5sb2FkJywgY2xlYW51cClcbiAgICAgIHdpbi5Db2xsZWN0R2FyYmFnZSAmJiB3aW4uQ29sbGVjdEdhcmJhZ2UoKVxuICAgIH1cbiAgICB3aW4uYXR0YWNoRXZlbnQoJ29udW5sb2FkJywgY2xlYW51cClcbiAgfVxuXG4gIC8vIGluaXRpYWxpemUgc2VsZWN0b3IgZW5naW5lIHRvIGludGVybmFsIGRlZmF1bHQgKHFTQSBvciB0aHJvdyBFcnJvcilcbiAgc2V0U2VsZWN0b3JFbmdpbmUoKVxuXG4gIHJldHVybiBiZWFuXG59KTtcbiIsIi8qXG4gKiBKYXZhU2NyaXB0IE1ENSAxLjAuMVxuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvSmF2YVNjcmlwdC1NRDVcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSwgU2ViYXN0aWFuIFRzY2hhblxuICogaHR0cHM6Ly9ibHVlaW1wLm5ldFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKiBcbiAqIEJhc2VkIG9uXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFJTQSBEYXRhIFNlY3VyaXR5LCBJbmMuIE1ENSBNZXNzYWdlXG4gKiBEaWdlc3QgQWxnb3JpdGhtLCBhcyBkZWZpbmVkIGluIFJGQyAxMzIxLlxuICogVmVyc2lvbiAyLjIgQ29weXJpZ2h0IChDKSBQYXVsIEpvaG5zdG9uIDE5OTkgLSAyMDA5XG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cblxuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSAqL1xuLypnbG9iYWwgdW5lc2NhcGUsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKlxuICAgICogQWRkIGludGVnZXJzLCB3cmFwcGluZyBhdCAyXjMyLiBUaGlzIHVzZXMgMTYtYml0IG9wZXJhdGlvbnMgaW50ZXJuYWxseVxuICAgICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVfYWRkKHgsIHkpIHtcbiAgICAgICAgdmFyIGxzdyA9ICh4ICYgMHhGRkZGKSArICh5ICYgMHhGRkZGKSxcbiAgICAgICAgICAgIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICAgICAgICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICAgICovXG4gICAgZnVuY3Rpb24gYml0X3JvbChudW0sIGNudCkge1xuICAgICAgICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gICAgKi9cbiAgICBmdW5jdGlvbiBtZDVfY21uKHEsIGEsIGIsIHgsIHMsIHQpIHtcbiAgICAgICAgcmV0dXJuIHNhZmVfYWRkKGJpdF9yb2woc2FmZV9hZGQoc2FmZV9hZGQoYSwgcSksIHNhZmVfYWRkKHgsIHQpKSwgcyksIGIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZDVfZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgICAgICByZXR1cm4gbWQ1X2NtbigoYiAmIGMpIHwgKCh+YikgJiBkKSwgYSwgYiwgeCwgcywgdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1kNV9nZyhhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgICAgIHJldHVybiBtZDVfY21uKChiICYgZCkgfCAoYyAmICh+ZCkpLCBhLCBiLCB4LCBzLCB0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWQ1X2hoKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgICAgICAgcmV0dXJuIG1kNV9jbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWQ1X2lpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgICAgICAgcmV0dXJuIG1kNV9jbW4oYyBeIChiIHwgKH5kKSksIGEsIGIsIHgsIHMsIHQpO1xuICAgIH1cblxuICAgIC8qXG4gICAgKiBDYWxjdWxhdGUgdGhlIE1ENSBvZiBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzLCBhbmQgYSBiaXQgbGVuZ3RoLlxuICAgICovXG4gICAgZnVuY3Rpb24gYmlubF9tZDUoeCwgbGVuKSB7XG4gICAgICAgIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gICAgICAgIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgKGxlbiAlIDMyKTtcbiAgICAgICAgeFsoKChsZW4gKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gbGVuO1xuXG4gICAgICAgIHZhciBpLCBvbGRhLCBvbGRiLCBvbGRjLCBvbGRkLFxuICAgICAgICAgICAgYSA9ICAxNzMyNTg0MTkzLFxuICAgICAgICAgICAgYiA9IC0yNzE3MzM4NzksXG4gICAgICAgICAgICBjID0gLTE3MzI1ODQxOTQsXG4gICAgICAgICAgICBkID0gIDI3MTczMzg3ODtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIG9sZGEgPSBhO1xuICAgICAgICAgICAgb2xkYiA9IGI7XG4gICAgICAgICAgICBvbGRjID0gYztcbiAgICAgICAgICAgIG9sZGQgPSBkO1xuXG4gICAgICAgICAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaV0sICAgICAgIDcsIC02ODA4NzY5MzYpO1xuICAgICAgICAgICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2kgKyAgMV0sIDEyLCAtMzg5NTY0NTg2KTtcbiAgICAgICAgICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpICsgIDJdLCAxNywgIDYwNjEwNTgxOSk7XG4gICAgICAgICAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSArICAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcbiAgICAgICAgICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpICsgIDRdLCAgNywgLTE3NjQxODg5Nyk7XG4gICAgICAgICAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSArICA1XSwgMTIsICAxMjAwMDgwNDI2KTtcbiAgICAgICAgICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpICsgIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgICAgICAgICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2kgKyAgN10sIDIyLCAtNDU3MDU5ODMpO1xuICAgICAgICAgICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2kgKyAgOF0sICA3LCAgMTc3MDAzNTQxNik7XG4gICAgICAgICAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSArICA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcbiAgICAgICAgICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpICsgMTBdLCAxNywgLTQyMDYzKTtcbiAgICAgICAgICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpICsgMTFdLCAyMiwgLTE5OTA0MDQxNjIpO1xuICAgICAgICAgICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2kgKyAxMl0sICA3LCAgMTgwNDYwMzY4Mik7XG4gICAgICAgICAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSArIDEzXSwgMTIsIC00MDM0MTEwMSk7XG4gICAgICAgICAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICAgICAgICAgIGIgPSBtZDVfZmYoYiwgYywgZCwgYSwgeFtpICsgMTVdLCAyMiwgIDEyMzY1MzUzMjkpO1xuXG4gICAgICAgICAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSArICAxXSwgIDUsIC0xNjU3OTY1MTApO1xuICAgICAgICAgICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2kgKyAgNl0sICA5LCAtMTA2OTUwMTYzMik7XG4gICAgICAgICAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTQsICA2NDM3MTc3MTMpO1xuICAgICAgICAgICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2ldLCAgICAgIDIwLCAtMzczODk3MzAyKTtcbiAgICAgICAgICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpICsgIDVdLCAgNSwgLTcwMTU1ODY5MSk7XG4gICAgICAgICAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSArIDEwXSwgIDksICAzODAxNjA4Myk7XG4gICAgICAgICAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgICAgICAgICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2kgKyAgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICAgICAgICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpICsgIDldLCAgNSwgIDU2ODQ0NjQzOCk7XG4gICAgICAgICAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSArIDE0XSwgIDksIC0xMDE5ODAzNjkwKTtcbiAgICAgICAgICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpICsgIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgICAgICAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSArICA4XSwgMjAsICAxMTYzNTMxNTAxKTtcbiAgICAgICAgICAgIGEgPSBtZDVfZ2coYSwgYiwgYywgZCwgeFtpICsgMTNdLCAgNSwgLTE0NDQ2ODE0NjcpO1xuICAgICAgICAgICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2kgKyAgMl0sICA5LCAtNTE0MDM3ODQpO1xuICAgICAgICAgICAgYyA9IG1kNV9nZyhjLCBkLCBhLCBiLCB4W2kgKyAgN10sIDE0LCAgMTczNTMyODQ3Myk7XG4gICAgICAgICAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSArIDEyXSwgMjAsIC0xOTI2NjA3NzM0KTtcblxuICAgICAgICAgICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2kgKyAgNV0sICA0LCAtMzc4NTU4KTtcbiAgICAgICAgICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpICsgIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgICAgICAgICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAgMTgzOTAzMDU2Mik7XG4gICAgICAgICAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSArIDE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgICAgICAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSArICAxXSwgIDQsIC0xNTMwOTkyMDYwKTtcbiAgICAgICAgICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpICsgIDRdLCAxMSwgIDEyNzI4OTMzNTMpO1xuICAgICAgICAgICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2kgKyAgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICAgICAgICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgICAgICAgICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sICA0LCAgNjgxMjc5MTc0KTtcbiAgICAgICAgICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpXSwgICAgICAxMSwgLTM1ODUzNzIyMik7XG4gICAgICAgICAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSArICAzXSwgMTYsIC03MjI1MjE5NzkpO1xuICAgICAgICAgICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2kgKyAgNl0sIDIzLCAgNzYwMjkxODkpO1xuICAgICAgICAgICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2kgKyAgOV0sICA0LCAtNjQwMzY0NDg3KTtcbiAgICAgICAgICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgICAgICAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsICA1MzA3NDI1MjApO1xuICAgICAgICAgICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2kgKyAgMl0sIDIzLCAtOTk1MzM4NjUxKTtcblxuICAgICAgICAgICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2ldLCAgICAgICA2LCAtMTk4NjMwODQ0KTtcbiAgICAgICAgICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpICsgIDddLCAxMCwgIDExMjY4OTE0MTUpO1xuICAgICAgICAgICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgICAgICAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSArICA1XSwgMjEsIC01NzQzNDA1NSk7XG4gICAgICAgICAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgIDYsICAxNzAwNDg1NTcxKTtcbiAgICAgICAgICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpICsgIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgICAgICAgICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE1LCAtMTA1MTUyMyk7XG4gICAgICAgICAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSArICAxXSwgMjEsIC0yMDU0OTIyNzk5KTtcbiAgICAgICAgICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpICsgIDhdLCAgNiwgIDE4NzMzMTMzNTkpO1xuICAgICAgICAgICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2kgKyAxNV0sIDEwLCAtMzA2MTE3NDQpO1xuICAgICAgICAgICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2kgKyAgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgICAgICAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsICAxMzA5MTUxNjQ5KTtcbiAgICAgICAgICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpICsgIDRdLCAgNiwgLTE0NTUyMzA3MCk7XG4gICAgICAgICAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICAgICAgICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpICsgIDJdLCAxNSwgIDcxODc4NzI1OSk7XG4gICAgICAgICAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSArICA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuXG4gICAgICAgICAgICBhID0gc2FmZV9hZGQoYSwgb2xkYSk7XG4gICAgICAgICAgICBiID0gc2FmZV9hZGQoYiwgb2xkYik7XG4gICAgICAgICAgICBjID0gc2FmZV9hZGQoYywgb2xkYyk7XG4gICAgICAgICAgICBkID0gc2FmZV9hZGQoZCwgb2xkZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFthLCBiLCBjLCBkXTtcbiAgICB9XG5cbiAgICAvKlxuICAgICogQ29udmVydCBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzIHRvIGEgc3RyaW5nXG4gICAgKi9cbiAgICBmdW5jdGlvbiBiaW5sMnJzdHIoaW5wdXQpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBvdXRwdXQgPSAnJztcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDMyOyBpICs9IDgpIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChpbnB1dFtpID4+IDVdID4+PiAoaSAlIDMyKSkgJiAweEZGKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qXG4gICAgKiBDb252ZXJ0IGEgcmF3IHN0cmluZyB0byBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzXG4gICAgKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJzdHIyYmlubChpbnB1dCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG91dHB1dCA9IFtdO1xuICAgICAgICBvdXRwdXRbKGlucHV0Lmxlbmd0aCA+PiAyKSAtIDFdID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3V0cHV0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBvdXRwdXRbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGggKiA4OyBpICs9IDgpIHtcbiAgICAgICAgICAgIG91dHB1dFtpID4+IDVdIHw9IChpbnB1dC5jaGFyQ29kZUF0KGkgLyA4KSAmIDB4RkYpIDw8IChpICUgMzIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgLypcbiAgICAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGEgcmF3IHN0cmluZ1xuICAgICovXG4gICAgZnVuY3Rpb24gcnN0cl9tZDUocykge1xuICAgICAgICByZXR1cm4gYmlubDJyc3RyKGJpbmxfbWQ1KHJzdHIyYmlubChzKSwgcy5sZW5ndGggKiA4KSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAqIENhbGN1bGF0ZSB0aGUgSE1BQy1NRDUsIG9mIGEga2V5IGFuZCBzb21lIGRhdGEgKHJhdyBzdHJpbmdzKVxuICAgICovXG4gICAgZnVuY3Rpb24gcnN0cl9obWFjX21kNShrZXksIGRhdGEpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBia2V5ID0gcnN0cjJiaW5sKGtleSksXG4gICAgICAgICAgICBpcGFkID0gW10sXG4gICAgICAgICAgICBvcGFkID0gW10sXG4gICAgICAgICAgICBoYXNoO1xuICAgICAgICBpcGFkWzE1XSA9IG9wYWRbMTVdID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYmtleS5sZW5ndGggPiAxNikge1xuICAgICAgICAgICAgYmtleSA9IGJpbmxfbWQ1KGJrZXksIGtleS5sZW5ndGggKiA4KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gMSkge1xuICAgICAgICAgICAgaXBhZFtpXSA9IGJrZXlbaV0gXiAweDM2MzYzNjM2O1xuICAgICAgICAgICAgb3BhZFtpXSA9IGJrZXlbaV0gXiAweDVDNUM1QzVDO1xuICAgICAgICB9XG4gICAgICAgIGhhc2ggPSBiaW5sX21kNShpcGFkLmNvbmNhdChyc3RyMmJpbmwoZGF0YSkpLCA1MTIgKyBkYXRhLmxlbmd0aCAqIDgpO1xuICAgICAgICByZXR1cm4gYmlubDJyc3RyKGJpbmxfbWQ1KG9wYWQuY29uY2F0KGhhc2gpLCA1MTIgKyAxMjgpKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBoZXggc3RyaW5nXG4gICAgKi9cbiAgICBmdW5jdGlvbiByc3RyMmhleChpbnB1dCkge1xuICAgICAgICB2YXIgaGV4X3RhYiA9ICcwMTIzNDU2Nzg5YWJjZGVmJyxcbiAgICAgICAgICAgIG91dHB1dCA9ICcnLFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgeCA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gaGV4X3RhYi5jaGFyQXQoKHggPj4+IDQpICYgMHgwRikgK1xuICAgICAgICAgICAgICAgIGhleF90YWIuY2hhckF0KHggJiAweDBGKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qXG4gICAgKiBFbmNvZGUgYSBzdHJpbmcgYXMgdXRmLThcbiAgICAqL1xuICAgIGZ1bmN0aW9uIHN0cjJyc3RyX3V0ZjgoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCkpO1xuICAgIH1cblxuICAgIC8qXG4gICAgKiBUYWtlIHN0cmluZyBhcmd1bWVudHMgYW5kIHJldHVybiBlaXRoZXIgcmF3IG9yIGhleCBlbmNvZGVkIHN0cmluZ3NcbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJhd19tZDUocykge1xuICAgICAgICByZXR1cm4gcnN0cl9tZDUoc3RyMnJzdHJfdXRmOChzKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhleF9tZDUocykge1xuICAgICAgICByZXR1cm4gcnN0cjJoZXgocmF3X21kNShzKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhd19obWFjX21kNShrLCBkKSB7XG4gICAgICAgIHJldHVybiByc3RyX2htYWNfbWQ1KHN0cjJyc3RyX3V0ZjgoayksIHN0cjJyc3RyX3V0ZjgoZCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoZXhfaG1hY19tZDUoaywgZCkge1xuICAgICAgICByZXR1cm4gcnN0cjJoZXgocmF3X2htYWNfbWQ1KGssIGQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZDUoc3RyaW5nLCBrZXksIHJhdykge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgaWYgKCFyYXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4X21kNShzdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJhd19tZDUoc3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJhdykge1xuICAgICAgICAgICAgcmV0dXJuIGhleF9obWFjX21kNShrZXksIHN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhd19obWFjX21kNShrZXksIHN0cmluZyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG1kNTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJC5tZDUgPSBtZDU7XG4gICAgfVxufSh0aGlzKSk7XG4iLCIvKiFcbiAgKiBCb256bzogRE9NIFV0aWxpdHkgKGMpIER1c3RpbiBEaWF6IDIwMTJcbiAgKiBodHRwczovL2dpdGh1Yi5jb20vZGVkL2JvbnpvXG4gICogTGljZW5zZSBNSVRcbiAgKi9cbihmdW5jdGlvbiAobmFtZSwgY29udGV4dCwgZGVmaW5pdGlvbikge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShkZWZpbml0aW9uKVxuICBlbHNlIGNvbnRleHRbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0pKCdib256bycsIHRoaXMsIGZ1bmN0aW9uKCkge1xuICB2YXIgd2luID0gd2luZG93XG4gICAgLCBkb2MgPSB3aW4uZG9jdW1lbnRcbiAgICAsIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50XG4gICAgLCBwYXJlbnROb2RlID0gJ3BhcmVudE5vZGUnXG4gICAgLCBzcGVjaWFsQXR0cmlidXRlcyA9IC9eKGNoZWNrZWR8dmFsdWV8c2VsZWN0ZWR8ZGlzYWJsZWQpJC9pXG4gICAgICAvLyB0YWdzIHRoYXQgd2UgaGF2ZSB0cm91YmxlIGluc2VydGluZyAqaW50bypcbiAgICAsIHNwZWNpYWxUYWdzID0gL14oc2VsZWN0fGZpZWxkc2V0fHRhYmxlfHRib2R5fHRmb290fHRkfHRyfGNvbGdyb3VwKSQvaVxuICAgICwgc2ltcGxlU2NyaXB0VGFnUmUgPSAvXFxzKjxzY3JpcHQgK3NyYz1bJ1wiXShbXidcIl0rKVsnXCJdPi9cbiAgICAsIHRhYmxlID0gWyc8dGFibGU+JywgJzwvdGFibGU+JywgMV1cbiAgICAsIHRkID0gWyc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+JywgM11cbiAgICAsIG9wdGlvbiA9IFsnPHNlbGVjdD4nLCAnPC9zZWxlY3Q+JywgMV1cbiAgICAsIG5vc2NvcGUgPSBbJ18nLCAnJywgMCwgMV1cbiAgICAsIHRhZ01hcCA9IHsgLy8gdGFncyB0aGF0IHdlIGhhdmUgdHJvdWJsZSAqaW5zZXJ0aW5nKlxuICAgICAgICAgIHRoZWFkOiB0YWJsZSwgdGJvZHk6IHRhYmxlLCB0Zm9vdDogdGFibGUsIGNvbGdyb3VwOiB0YWJsZSwgY2FwdGlvbjogdGFibGVcbiAgICAgICAgLCB0cjogWyc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+JywgMl1cbiAgICAgICAgLCB0aDogdGQgLCB0ZDogdGRcbiAgICAgICAgLCBjb2w6IFsnPHRhYmxlPjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPicsIDJdXG4gICAgICAgICwgZmllbGRzZXQ6IFsnPGZvcm0+JywgJzwvZm9ybT4nLCAxXVxuICAgICAgICAsIGxlZ2VuZDogWyc8Zm9ybT48ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+PC9mb3JtPicsIDJdXG4gICAgICAgICwgb3B0aW9uOiBvcHRpb24sIG9wdGdyb3VwOiBvcHRpb25cbiAgICAgICAgLCBzY3JpcHQ6IG5vc2NvcGUsIHN0eWxlOiBub3Njb3BlLCBsaW5rOiBub3Njb3BlLCBwYXJhbTogbm9zY29wZSwgYmFzZTogbm9zY29wZVxuICAgICAgfVxuICAgICwgc3RhdGVBdHRyaWJ1dGVzID0gL14oY2hlY2tlZHxzZWxlY3RlZHxkaXNhYmxlZCkkL1xuICAgICwgaWUgPSAvbXNpZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICAsIGhhc0NsYXNzLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3NcbiAgICAsIHVpZE1hcCA9IHt9XG4gICAgLCB1dWlkcyA9IDBcbiAgICAsIGRpZ2l0ID0gL14tP1tcXGRcXC5dKyQvXG4gICAgLCBkYXR0ciA9IC9eZGF0YS0oLispJC9cbiAgICAsIHB4ID0gJ3B4J1xuICAgICwgc2V0QXR0cmlidXRlID0gJ3NldEF0dHJpYnV0ZSdcbiAgICAsIGdldEF0dHJpYnV0ZSA9ICdnZXRBdHRyaWJ1dGUnXG4gICAgLCBieVRhZyA9ICdnZXRFbGVtZW50c0J5VGFnTmFtZSdcbiAgICAsIGZlYXR1cmVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3AnKVxuICAgICAgICBlLmlubmVySFRNTCA9ICc8YSBocmVmPVwiI3hcIj54PC9hPjx0YWJsZSBzdHlsZT1cImZsb2F0OmxlZnQ7XCI+PC90YWJsZT4nXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZkV4dGVuZGVkOiBlW2J5VGFnXSgnYScpWzBdW2dldEF0dHJpYnV0ZV0oJ2hyZWYnKSAhPSAnI3gnIC8vIElFIDwgOFxuICAgICAgICAsIGF1dG9UYm9keTogZVtieVRhZ10oJ3Rib2R5JykubGVuZ3RoICE9PSAwIC8vIElFIDwgOFxuICAgICAgICAsIGNvbXB1dGVkU3R5bGU6IGRvYy5kZWZhdWx0VmlldyAmJiBkb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVxuICAgICAgICAsIGNzc0Zsb2F0OiBlW2J5VGFnXSgndGFibGUnKVswXS5zdHlsZS5zdHlsZUZsb2F0ID8gJ3N0eWxlRmxvYXQnIDogJ2Nzc0Zsb2F0J1xuICAgICAgICAsIHRyYW5zZm9ybTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gWyd0cmFuc2Zvcm0nLCAnd2Via2l0VHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ21zVHJhbnNmb3JtJ10sIGlcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAocHJvcHNbaV0gaW4gZS5zdHlsZSkgcmV0dXJuIHByb3BzW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSgpXG4gICAgICAgICwgY2xhc3NMaXN0OiAnY2xhc3NMaXN0JyBpbiBlXG4gICAgICAgICwgb3Bhc2l0eTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBkb2MuY3JlYXRlRWxlbWVudCgnYScpLnN0eWxlLm9wYWNpdHkgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgfSgpXG4gICAgICAgIH1cbiAgICAgIH0oKVxuICAgICwgdHJpbVJlcGxhY2UgPSAvKF5cXHMqfFxccyokKS9nXG4gICAgLCB3aGl0ZXNwYWNlUmVnZXggPSAvXFxzKy9cbiAgICAsIHRvU3RyaW5nID0gU3RyaW5nLnByb3RvdHlwZS50b1N0cmluZ1xuICAgICwgdW5pdGxlc3MgPSB7IGxpbmVIZWlnaHQ6IDEsIHpvb206IDEsIHpJbmRleDogMSwgb3BhY2l0eTogMSwgYm94RmxleDogMSwgV2Via2l0Qm94RmxleDogMSwgTW96Qm94RmxleDogMSB9XG4gICAgLCBxdWVyeSA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsICYmIGZ1bmN0aW9uIChzZWxlY3RvcikgeyByZXR1cm4gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpIH1cbiAgICAsIHRyaW0gPSBTdHJpbmcucHJvdG90eXBlLnRyaW0gP1xuICAgICAgICBmdW5jdGlvbiAocykge1xuICAgICAgICAgIHJldHVybiBzLnRyaW0oKVxuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKHRyaW1SZXBsYWNlLCAnJylcbiAgICAgICAgfVxuXG4gICAgLCBnZXRTdHlsZSA9IGZlYXR1cmVzLmNvbXB1dGVkU3R5bGVcbiAgICAgICAgPyBmdW5jdGlvbiAoZWwsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBudWxsXG4gICAgICAgICAgICAgICwgY29tcHV0ZWQgPSBkb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgJycpXG4gICAgICAgICAgICBjb21wdXRlZCAmJiAodmFsdWUgPSBjb21wdXRlZFtwcm9wZXJ0eV0pXG4gICAgICAgICAgICByZXR1cm4gZWwuc3R5bGVbcHJvcGVydHldIHx8IHZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICA6ICEoaWUgJiYgaHRtbC5jdXJyZW50U3R5bGUpXG4gICAgICAgICAgPyBmdW5jdGlvbiAoZWwsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbC5zdHlsZVtwcm9wZXJ0eV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ3xudW1iZXJ9XG4gICAgICAgICAgICovXG4gICAgICAgICAgZnVuY3Rpb24gKGVsLCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgdmFyIHZhbCwgdmFsdWVcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PSAnb3BhY2l0eScgJiYgIWZlYXR1cmVzLm9wYXNpdHkpIHtcbiAgICAgICAgICAgICAgdmFsID0gMTAwXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsID0gZWxbJ2ZpbHRlcnMnXVsnRFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEnXS5vcGFjaXR5XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUxKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHZhbCA9IGVsWydmaWx0ZXJzJ10oJ2FscGhhJykub3BhY2l0eVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUyKSB7fVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB2YWwgLyAxMDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gZWwuY3VycmVudFN0eWxlID8gZWwuY3VycmVudFN0eWxlW3Byb3BlcnR5XSA6IG51bGxcbiAgICAgICAgICAgIHJldHVybiBlbC5zdHlsZVtwcm9wZXJ0eV0gfHwgdmFsdWVcbiAgICAgICAgICB9XG5cbiAgZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSAmJiBub2RlLm5vZGVOYW1lICYmIChub2RlLm5vZGVUeXBlID09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PSAxMSlcbiAgfVxuXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplKG5vZGUsIGhvc3QsIGNsb25lKSB7XG4gICAgdmFyIGksIGwsIHJldFxuICAgIGlmICh0eXBlb2Ygbm9kZSA9PSAnc3RyaW5nJykgcmV0dXJuIGJvbnpvLmNyZWF0ZShub2RlKVxuICAgIGlmIChpc05vZGUobm9kZSkpIG5vZGUgPSBbIG5vZGUgXVxuICAgIGlmIChjbG9uZSkge1xuICAgICAgcmV0ID0gW10gLy8gZG9uJ3QgY2hhbmdlIG9yaWdpbmFsIGFycmF5XG4gICAgICBmb3IgKGkgPSAwLCBsID0gbm9kZS5sZW5ndGg7IGkgPCBsOyBpKyspIHJldFtpXSA9IGNsb25lTm9kZShob3N0LCBub2RlW2ldKVxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cbiAgICByZXR1cm4gbm9kZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjIGEgY2xhc3MgbmFtZSB0byB0ZXN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBjbGFzc1JlZyhjKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJyhefFxcXFxzKyknICsgYyArICcoXFxcXHMrfCQpJylcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Qm9uem98QXJyYXl9IGFyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oT2JqZWN0LCBudW1iZXIsIChCb256b3xBcnJheSkpfSBmblxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfcmV2XG4gICAqIEByZXR1cm4ge0JvbnpvfEFycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gZWFjaChhciwgZm4sIG9wdF9zY29wZSwgb3B0X3Jldikge1xuICAgIHZhciBpbmQsIGkgPSAwLCBsID0gYXIubGVuZ3RoXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGluZCA9IG9wdF9yZXYgPyBhci5sZW5ndGggLSBpIC0gMSA6IGlcbiAgICAgIGZuLmNhbGwob3B0X3Njb3BlIHx8IGFyW2luZF0sIGFyW2luZF0sIGluZCwgYXIpXG4gICAgfVxuICAgIHJldHVybiBhclxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtCb256b3xBcnJheX0gYXJcbiAgICogQHBhcmFtIHtmdW5jdGlvbihPYmplY3QsIG51bWJlciwgKEJvbnpvfEFycmF5KSl9IGZuXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Njb3BlXG4gICAqIEByZXR1cm4ge0JvbnpvfEFycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gZGVlcEVhY2goYXIsIGZuLCBvcHRfc2NvcGUpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGlzTm9kZShhcltpXSkpIHtcbiAgICAgICAgZGVlcEVhY2goYXJbaV0uY2hpbGROb2RlcywgZm4sIG9wdF9zY29wZSlcbiAgICAgICAgZm4uY2FsbChvcHRfc2NvcGUgfHwgYXJbaV0sIGFyW2ldLCBpLCBhcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiBjYW1lbGl6ZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvLSguKS9nLCBmdW5jdGlvbiAobSwgbTEpIHtcbiAgICAgIHJldHVybiBtMS50b1VwcGVyQ2FzZSgpXG4gICAgfSlcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIGRlY2FtZWxpemUocykge1xuICAgIHJldHVybiBzID8gcy5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpIDogc1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gZGF0YShlbCkge1xuICAgIGVsW2dldEF0dHJpYnV0ZV0oJ2RhdGEtbm9kZS11aWQnKSB8fCBlbFtzZXRBdHRyaWJ1dGVdKCdkYXRhLW5vZGUtdWlkJywgKyt1dWlkcylcbiAgICB2YXIgdWlkID0gZWxbZ2V0QXR0cmlidXRlXSgnZGF0YS1ub2RlLXVpZCcpXG4gICAgcmV0dXJuIHVpZE1hcFt1aWRdIHx8ICh1aWRNYXBbdWlkXSA9IHt9KVxuICB9XG5cblxuICAvKipcbiAgICogcmVtb3ZlcyB0aGUgZGF0YSBhc3NvY2lhdGVkIHdpdGggYW4gZWxlbWVudFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqL1xuICBmdW5jdGlvbiBjbGVhckRhdGEoZWwpIHtcbiAgICB2YXIgdWlkID0gZWxbZ2V0QXR0cmlidXRlXSgnZGF0YS1ub2RlLXVpZCcpXG4gICAgaWYgKHVpZCkgZGVsZXRlIHVpZE1hcFt1aWRdXG4gIH1cblxuXG4gIGZ1bmN0aW9uIGRhdGFWYWx1ZShkKSB7XG4gICAgdmFyIGZcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChkID09PSBudWxsIHx8IGQgPT09IHVuZGVmaW5lZCkgPyB1bmRlZmluZWQgOlxuICAgICAgICBkID09PSAndHJ1ZScgPyB0cnVlIDpcbiAgICAgICAgICBkID09PSAnZmFsc2UnID8gZmFsc2UgOlxuICAgICAgICAgICAgZCA9PT0gJ251bGwnID8gbnVsbCA6XG4gICAgICAgICAgICAgIChmID0gcGFyc2VGbG9hdChkKSkgPT0gZCA/IGYgOiBkO1xuICAgIH0gY2F0Y2goZSkge31cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0JvbnpvfEFycmF5fSBhclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdCwgbnVtYmVyLCAoQm9uem98QXJyYXkpKX0gZm5cbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfc2NvcGVcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBgc29tZWB0aGluZyB3YXMgZm91bmRcbiAgICovXG4gIGZ1bmN0aW9uIHNvbWUoYXIsIGZuLCBvcHRfc2NvcGUpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFyLmxlbmd0aDsgaSA8IGo7ICsraSkgaWYgKGZuLmNhbGwob3B0X3Njb3BlIHx8IG51bGwsIGFyW2ldLCBpLCBhcikpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuXG4gIC8qKlxuICAgKiB0aGlzIGNvdWxkIGJlIGEgZ2lhbnQgZW51bSBvZiBDU1MgcHJvcGVydGllc1xuICAgKiBidXQgaW4gZmF2b3Igb2YgZmlsZSBzaXplIHNhbnMtY2xvc3VyZSBkZWFkY29kZSBvcHRpbWl6YXRpb25zXG4gICAqIHdlJ3JlIGp1c3QgYXNraW5nIGZvciBhbnkgb2wgc3RyaW5nXG4gICAqIHRoZW4gaXQgZ2V0cyB0cmFuc2Zvcm1lZCBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdHlsZSBwcm9wZXJ0eSBmb3IgSlMgYWNjZXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHN0eWxlUHJvcGVydHkocCkge1xuICAgICAgKHAgPT0gJ3RyYW5zZm9ybScgJiYgKHAgPSBmZWF0dXJlcy50cmFuc2Zvcm0pKSB8fFxuICAgICAgICAoL150cmFuc2Zvcm0tP1tPb11yaWdpbiQvLnRlc3QocCkgJiYgKHAgPSBmZWF0dXJlcy50cmFuc2Zvcm0gKyAnT3JpZ2luJykpIHx8XG4gICAgICAgIChwID09ICdmbG9hdCcgJiYgKHAgPSBmZWF0dXJlcy5jc3NGbG9hdCkpXG4gICAgICByZXR1cm4gcCA/IGNhbWVsaXplKHApIDogbnVsbFxuICB9XG5cbiAgLy8gdGhpcyBpbnNlcnQgbWV0aG9kIGlzIGludGVuc2VcbiAgZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgaG9zdCwgZm4sIHJldikge1xuICAgIHZhciBpID0gMCwgc2VsZiA9IGhvc3QgfHwgdGhpcywgciA9IFtdXG4gICAgICAvLyB0YXJnZXQgbm9kZXMgY291bGQgYmUgYSBjc3Mgc2VsZWN0b3IgaWYgaXQncyBhIHN0cmluZyBhbmQgYSBzZWxlY3RvciBlbmdpbmUgaXMgcHJlc2VudFxuICAgICAgLy8gb3RoZXJ3aXNlLCBqdXN0IHVzZSB0YXJnZXRcbiAgICAgICwgbm9kZXMgPSBxdWVyeSAmJiB0eXBlb2YgdGFyZ2V0ID09ICdzdHJpbmcnICYmIHRhcmdldC5jaGFyQXQoMCkgIT0gJzwnID8gcXVlcnkodGFyZ2V0KSA6IHRhcmdldFxuICAgIC8vIG5vcm1hbGl6ZSBlYWNoIG5vZGUgaW4gY2FzZSBpdCdzIHN0aWxsIGEgc3RyaW5nIGFuZCB3ZSBuZWVkIHRvIGNyZWF0ZSBub2RlcyBvbiB0aGUgZmx5XG4gICAgZWFjaChub3JtYWxpemUobm9kZXMpLCBmdW5jdGlvbiAodCwgaikge1xuICAgICAgZWFjaChzZWxmLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZm4odCwgcltpKytdID0gaiA+IDAgPyBjbG9uZU5vZGUoc2VsZiwgZWwpIDogZWwpXG4gICAgICB9LCBudWxsLCByZXYpXG4gICAgfSwgdGhpcywgcmV2KVxuICAgIHNlbGYubGVuZ3RoID0gaVxuICAgIGVhY2gociwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHNlbGZbLS1pXSA9IGVcbiAgICB9LCBudWxsLCAhcmV2KVxuICAgIHJldHVybiBzZWxmXG4gIH1cblxuXG4gIC8qKlxuICAgKiBzZXRzIGFuIGVsZW1lbnQgdG8gYW4gZXhwbGljaXQgeC95IHBvc2l0aW9uIG9uIHRoZSBwYWdlXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHs/bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7P251bWJlcn0geVxuICAgKi9cbiAgZnVuY3Rpb24geHkoZWwsIHgsIHkpIHtcbiAgICB2YXIgJGVsID0gYm9uem8oZWwpXG4gICAgICAsIHN0eWxlID0gJGVsLmNzcygncG9zaXRpb24nKVxuICAgICAgLCBvZmZzZXQgPSAkZWwub2Zmc2V0KClcbiAgICAgICwgcmVsID0gJ3JlbGF0aXZlJ1xuICAgICAgLCBpc1JlbCA9IHN0eWxlID09IHJlbFxuICAgICAgLCBkZWx0YSA9IFtwYXJzZUludCgkZWwuY3NzKCdsZWZ0JyksIDEwKSwgcGFyc2VJbnQoJGVsLmNzcygndG9wJyksIDEwKV1cblxuICAgIGlmIChzdHlsZSA9PSAnc3RhdGljJykge1xuICAgICAgJGVsLmNzcygncG9zaXRpb24nLCByZWwpXG4gICAgICBzdHlsZSA9IHJlbFxuICAgIH1cblxuICAgIGlzTmFOKGRlbHRhWzBdKSAmJiAoZGVsdGFbMF0gPSBpc1JlbCA/IDAgOiBlbC5vZmZzZXRMZWZ0KVxuICAgIGlzTmFOKGRlbHRhWzFdKSAmJiAoZGVsdGFbMV0gPSBpc1JlbCA/IDAgOiBlbC5vZmZzZXRUb3ApXG5cbiAgICB4ICE9IG51bGwgJiYgKGVsLnN0eWxlLmxlZnQgPSB4IC0gb2Zmc2V0LmxlZnQgKyBkZWx0YVswXSArIHB4KVxuICAgIHkgIT0gbnVsbCAmJiAoZWwuc3R5bGUudG9wID0geSAtIG9mZnNldC50b3AgKyBkZWx0YVsxXSArIHB4KVxuXG4gIH1cblxuICAvLyBjbGFzc0xpc3Qgc3VwcG9ydCBmb3IgY2xhc3MgbWFuYWdlbWVudFxuICAvLyBhbHRobyB0byBiZSBmYWlyLCB0aGUgYXBpIHN1Y2tzIGJlY2F1c2UgaXQgd29uJ3QgYWNjZXB0IG11bHRpcGxlIGNsYXNzZXMgYXQgb25jZVxuICBpZiAoZmVhdHVyZXMuY2xhc3NMaXN0KSB7XG4gICAgaGFzQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGMpIHtcbiAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoYylcbiAgICB9XG4gICAgYWRkQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGMpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYylcbiAgICB9XG4gICAgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGMpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYylcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgaGFzQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGMpIHtcbiAgICAgIHJldHVybiBjbGFzc1JlZyhjKS50ZXN0KGVsLmNsYXNzTmFtZSlcbiAgICB9XG4gICAgYWRkQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGMpIHtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IHRyaW0oZWwuY2xhc3NOYW1lICsgJyAnICsgYylcbiAgICB9XG4gICAgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGMpIHtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IHRyaW0oZWwuY2xhc3NOYW1lLnJlcGxhY2UoY2xhc3NSZWcoYyksICcgJykpXG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogdGhpcyBhbGxvd3MgbWV0aG9kIGNhbGxpbmcgZm9yIHNldHRpbmcgdmFsdWVzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGJvbnpvKGVsZW1lbnRzKS5jc3MoJ2NvbG9yJywgZnVuY3Rpb24gKGVsKSB7XG4gICAqICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC1jb2xvcicpXG4gICAqIH0pXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtmdW5jdGlvbiAoRWxlbWVudCl8c3RyaW5nfVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiBzZXR0ZXIoZWwsIHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT0gJ2Z1bmN0aW9uJyA/IHYoZWwpIDogdlxuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsKHgsIHksIHR5cGUpIHtcbiAgICB2YXIgZWwgPSB0aGlzWzBdXG4gICAgaWYgKCFlbCkgcmV0dXJuIHRoaXNcbiAgICBpZiAoeCA9PSBudWxsICYmIHkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIChpc0JvZHkoZWwpID8gZ2V0V2luZG93U2Nyb2xsKCkgOiB7IHg6IGVsLnNjcm9sbExlZnQsIHk6IGVsLnNjcm9sbFRvcCB9KVt0eXBlXVxuICAgIH1cbiAgICBpZiAoaXNCb2R5KGVsKSkge1xuICAgICAgd2luLnNjcm9sbFRvKHgsIHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHggIT0gbnVsbCAmJiAoZWwuc2Nyb2xsTGVmdCA9IHgpXG4gICAgICB5ICE9IG51bGwgJiYgKGVsLnNjcm9sbFRvcCA9IHkpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7QXJyYXkuPEVsZW1lbnQ+fEVsZW1lbnR8Tm9kZXxzdHJpbmd9IGVsZW1lbnRzXG4gICAqL1xuICBmdW5jdGlvbiBCb256byhlbGVtZW50cykge1xuICAgIHRoaXMubGVuZ3RoID0gMFxuICAgIGlmIChlbGVtZW50cykge1xuICAgICAgZWxlbWVudHMgPSB0eXBlb2YgZWxlbWVudHMgIT09ICdzdHJpbmcnICYmXG4gICAgICAgICFlbGVtZW50cy5ub2RlVHlwZSAmJlxuICAgICAgICB0eXBlb2YgZWxlbWVudHMubGVuZ3RoICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgZWxlbWVudHMgOlxuICAgICAgICAgIFtlbGVtZW50c11cbiAgICAgIHRoaXMubGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB0aGlzW2ldID0gZWxlbWVudHNbaV1cbiAgICB9XG4gIH1cblxuICBCb256by5wcm90b3R5cGUgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAgICAgKiBAcmV0dXJuIHtFbGVtZW50fE5vZGV9XG4gICAgICAgKi9cbiAgICAgIGdldDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzW2luZGV4XSB8fCBudWxsXG4gICAgICB9XG5cbiAgICAgIC8vIGl0ZXRhdG9yc1xuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVsZW1lbnR8Tm9kZSl9IGZuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGVhY2g6IGZ1bmN0aW9uIChmbiwgb3B0X3Njb3BlKSB7XG4gICAgICAgIHJldHVybiBlYWNoKHRoaXMsIGZuLCBvcHRfc2NvcGUpXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Njb3BlXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgZGVlcEVhY2g6IGZ1bmN0aW9uIChmbiwgb3B0X3Njb3BlKSB7XG4gICAgICAgIHJldHVybiBkZWVwRWFjaCh0aGlzLCBmbiwgb3B0X3Njb3BlKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvcHRfcmVqZWN0XG4gICAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgICAqL1xuICAgICwgbWFwOiBmdW5jdGlvbiAoZm4sIG9wdF9yZWplY3QpIHtcbiAgICAgICAgdmFyIG0gPSBbXSwgbiwgaVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG4gPSBmbi5jYWxsKHRoaXMsIHRoaXNbaV0sIGkpXG4gICAgICAgICAgb3B0X3JlamVjdCA/IChvcHRfcmVqZWN0KG4pICYmIG0ucHVzaChuKSkgOiBtLnB1c2gobilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbVxuICAgICAgfVxuXG4gICAgLy8gdGV4dCBhbmQgaHRtbCBpbnNlcnRlcnMhXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaCB0aGUgSFRNTCB0byBpbnNlcnRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdGV4dCB3aGV0aGVyIHRvIHNldCBvciBnZXQgdGV4dCBjb250ZW50XG4gICAgICogQHJldHVybiB7Qm9uem98c3RyaW5nfVxuICAgICAqL1xuICAgICwgaHRtbDogZnVuY3Rpb24gKGgsIG9wdF90ZXh0KSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBvcHRfdGV4dFxuICAgICAgICAgICAgICA/IGh0bWwudGV4dENvbnRlbnQgPT09IHVuZGVmaW5lZCA/ICdpbm5lclRleHQnIDogJ3RleHRDb250ZW50J1xuICAgICAgICAgICAgICA6ICdpbm5lckhUTUwnXG4gICAgICAgICAgLCB0aGF0ID0gdGhpc1xuICAgICAgICAgICwgYXBwZW5kID0gZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICAgIGVhY2gobm9ybWFsaXplKGgsIHRoYXQsIGkpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKG5vZGUpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgLCB1cGRhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdF90ZXh0IHx8ICh0eXBlb2YgaCA9PSAnc3RyaW5nJyAmJiAhc3BlY2lhbFRhZ3MudGVzdChlbC50YWdOYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBlbFttZXRob2RdID0gaFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgYXBwZW5kKGVsLCBpKVxuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZW9mIGggIT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICA/IHRoaXMuZW1wdHkoKS5lYWNoKHVwZGF0ZUVsZW1lbnQpXG4gICAgICAgICAgOiB0aGlzWzBdID8gdGhpc1swXVttZXRob2RdIDogJydcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF90ZXh0IHRoZSB0ZXh0IHRvIHNldCwgb3RoZXJ3aXNlIHRoaXMgaXMgYSBnZXR0ZXJcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfHN0cmluZ31cbiAgICAgICAqL1xuICAgICwgdGV4dDogZnVuY3Rpb24gKG9wdF90ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0bWwob3B0X3RleHQsIHRydWUpXG4gICAgICB9XG5cbiAgICAgIC8vIG1vcmUgcmVsYXRlZCBpbnNlcnRpb24gbWV0aG9kc1xuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IG5vZGVcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBhcHBlbmQ6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgIGVhY2gobm9ybWFsaXplKG5vZGUsIHRoYXQsIGkpLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoaSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtCb256b3xzdHJpbmd8RWxlbWVudHxBcnJheX0gbm9kZVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIHByZXBlbmQ6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgIHZhciBmaXJzdCA9IGVsLmZpcnN0Q2hpbGRcbiAgICAgICAgICBlYWNoKG5vcm1hbGl6ZShub2RlLCB0aGF0LCBpKSwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGVsLmluc2VydEJlZm9yZShpLCBmaXJzdClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtCb256b3xzdHJpbmd8RWxlbWVudHxBcnJheX0gdGFyZ2V0IHRoZSBsb2NhdGlvbiBmb3Igd2hpY2ggeW91J2xsIGluc2VydCB5b3VyIG5ldyBjb250ZW50XG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9ob3N0IGFuIG9wdGlvbmFsIGhvc3Qgc2NvcGUgKHByaW1hcmlseSB1c2VkIHdoZW4gaW50ZWdyYXRlZCB3aXRoIEVuZGVyKVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGFwcGVuZFRvOiBmdW5jdGlvbiAodGFyZ2V0LCBvcHRfaG9zdCkge1xuICAgICAgICByZXR1cm4gaW5zZXJ0LmNhbGwodGhpcywgdGFyZ2V0LCBvcHRfaG9zdCwgZnVuY3Rpb24gKHQsIGVsKSB7XG4gICAgICAgICAgdC5hcHBlbmRDaGlsZChlbClcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IHRhcmdldCB0aGUgbG9jYXRpb24gZm9yIHdoaWNoIHlvdSdsbCBpbnNlcnQgeW91ciBuZXcgY29udGVudFxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaG9zdCBhbiBvcHRpb25hbCBob3N0IHNjb3BlIChwcmltYXJpbHkgdXNlZCB3aGVuIGludGVncmF0ZWQgd2l0aCBFbmRlcilcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBwcmVwZW5kVG86IGZ1bmN0aW9uICh0YXJnZXQsIG9wdF9ob3N0KSB7XG4gICAgICAgIHJldHVybiBpbnNlcnQuY2FsbCh0aGlzLCB0YXJnZXQsIG9wdF9ob3N0LCBmdW5jdGlvbiAodCwgZWwpIHtcbiAgICAgICAgICB0Lmluc2VydEJlZm9yZShlbCwgdC5maXJzdENoaWxkKVxuICAgICAgICB9LCAxKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtCb256b3xzdHJpbmd8RWxlbWVudHxBcnJheX0gbm9kZVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGJlZm9yZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgZWFjaChub3JtYWxpemUobm9kZSwgdGhhdCwgaSksIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBlbFtwYXJlbnROb2RlXS5pbnNlcnRCZWZvcmUoaSwgZWwpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IG5vZGVcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBhZnRlcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgZWFjaChub3JtYWxpemUobm9kZSwgdGhhdCwgaSksIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBlbFtwYXJlbnROb2RlXS5pbnNlcnRCZWZvcmUoaSwgZWwubmV4dFNpYmxpbmcpXG4gICAgICAgICAgfSwgbnVsbCwgMSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IHRhcmdldCB0aGUgbG9jYXRpb24gZm9yIHdoaWNoIHlvdSdsbCBpbnNlcnQgeW91ciBuZXcgY29udGVudFxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaG9zdCBhbiBvcHRpb25hbCBob3N0IHNjb3BlIChwcmltYXJpbHkgdXNlZCB3aGVuIGludGVncmF0ZWQgd2l0aCBFbmRlcilcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uICh0YXJnZXQsIG9wdF9ob3N0KSB7XG4gICAgICAgIHJldHVybiBpbnNlcnQuY2FsbCh0aGlzLCB0YXJnZXQsIG9wdF9ob3N0LCBmdW5jdGlvbiAodCwgZWwpIHtcbiAgICAgICAgICB0W3BhcmVudE5vZGVdLmluc2VydEJlZm9yZShlbCwgdClcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IHRhcmdldCB0aGUgbG9jYXRpb24gZm9yIHdoaWNoIHlvdSdsbCBpbnNlcnQgeW91ciBuZXcgY29udGVudFxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaG9zdCBhbiBvcHRpb25hbCBob3N0IHNjb3BlIChwcmltYXJpbHkgdXNlZCB3aGVuIGludGVncmF0ZWQgd2l0aCBFbmRlcilcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBpbnNlcnRBZnRlcjogZnVuY3Rpb24gKHRhcmdldCwgb3B0X2hvc3QpIHtcbiAgICAgICAgcmV0dXJuIGluc2VydC5jYWxsKHRoaXMsIHRhcmdldCwgb3B0X2hvc3QsIGZ1bmN0aW9uICh0LCBlbCkge1xuICAgICAgICAgIHZhciBzaWJsaW5nID0gdC5uZXh0U2libGluZ1xuICAgICAgICAgIHNpYmxpbmcgP1xuICAgICAgICAgICAgdFtwYXJlbnROb2RlXS5pbnNlcnRCZWZvcmUoZWwsIHNpYmxpbmcpIDpcbiAgICAgICAgICAgIHRbcGFyZW50Tm9kZV0uYXBwZW5kQ2hpbGQoZWwpXG4gICAgICAgIH0sIDEpXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0JvbnpvfHN0cmluZ3xFbGVtZW50fEFycmF5fSBub2RlXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICByZXR1cm4gYm9uem8odGhpc1swXS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChib256byhub3JtYWxpemUobm9kZSkpWzBdLCB0aGlzWzBdKSlcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9ob3N0IGFuIG9wdGlvbmFsIGhvc3Qgc2NvcGUgKHByaW1hcmlseSB1c2VkIHdoZW4gaW50ZWdyYXRlZCB3aXRoIEVuZGVyKVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGNsb25lOiBmdW5jdGlvbiAob3B0X2hvc3QpIHtcbiAgICAgICAgdmFyIHJldCA9IFtdIC8vIGRvbid0IGNoYW5nZSBvcmlnaW5hbCBhcnJheVxuICAgICAgICAgICwgbCwgaVxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHJldFtpXSA9IGNsb25lTm9kZShvcHRfaG9zdCB8fCB0aGlzLCB0aGlzW2ldKVxuICAgICAgICByZXR1cm4gYm9uem8ocmV0KVxuICAgICAgfVxuXG4gICAgICAvLyBjbGFzcyBtYW5hZ2VtZW50XG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBhZGRDbGFzczogZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgYyA9IHRvU3RyaW5nLmNhbGwoYykuc3BsaXQod2hpdGVzcGFjZVJlZ2V4KVxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIC8vIHdlIGBlYWNoYCBoZXJlIHNvIHlvdSBjYW4gZG8gJGVsLmFkZENsYXNzKCdmb28gYmFyJylcbiAgICAgICAgICBlYWNoKGMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBpZiAoYyAmJiAhaGFzQ2xhc3MoZWwsIHNldHRlcihlbCwgYykpKVxuICAgICAgICAgICAgICBhZGRDbGFzcyhlbCwgc2V0dGVyKGVsLCBjKSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCByZW1vdmVDbGFzczogZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgYyA9IHRvU3RyaW5nLmNhbGwoYykuc3BsaXQod2hpdGVzcGFjZVJlZ2V4KVxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIGVhY2goYywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIGlmIChjICYmIGhhc0NsYXNzKGVsLCBzZXR0ZXIoZWwsIGMpKSlcbiAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsIHNldHRlcihlbCwgYykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAgICovXG4gICAgLCBoYXNDbGFzczogZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgYyA9IHRvU3RyaW5nLmNhbGwoYykuc3BsaXQod2hpdGVzcGFjZVJlZ2V4KVxuICAgICAgICByZXR1cm4gc29tZSh0aGlzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICByZXR1cm4gc29tZShjLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGMgJiYgaGFzQ2xhc3MoZWwsIGMpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjIGNsYXNzbmFtZSB0byB0b2dnbGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9jb25kaXRpb24gd2hldGhlciB0byBhZGQgb3IgcmVtb3ZlIHRoZSBjbGFzcyBzdHJhaWdodCBhd2F5XG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uIChjLCBvcHRfY29uZGl0aW9uKSB7XG4gICAgICAgIGMgPSB0b1N0cmluZy5jYWxsKGMpLnNwbGl0KHdoaXRlc3BhY2VSZWdleClcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICBlYWNoKGMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICB0eXBlb2Ygb3B0X2NvbmRpdGlvbiAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgICAgICAgICAgIG9wdF9jb25kaXRpb24gPyAhaGFzQ2xhc3MoZWwsIGMpICYmIGFkZENsYXNzKGVsLCBjKSA6IHJlbW92ZUNsYXNzKGVsLCBjKSA6XG4gICAgICAgICAgICAgICAgaGFzQ2xhc3MoZWwsIGMpID8gcmVtb3ZlQ2xhc3MoZWwsIGMpIDogYWRkQ2xhc3MoZWwsIGMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgLy8gZGlzcGxheSB0b2dnbGVyc1xuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3R5cGUgdXNlZnVsIHRvIHNldCBiYWNrIHRvIGFueXRoaW5nIG90aGVyIHRoYW4gYW4gZW1wdHkgc3RyaW5nXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgc2hvdzogZnVuY3Rpb24gKG9wdF90eXBlKSB7XG4gICAgICAgIG9wdF90eXBlID0gdHlwZW9mIG9wdF90eXBlID09ICdzdHJpbmcnID8gb3B0X3R5cGUgOiAnJ1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcHRfdHlwZVxuICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0X2NhbGxiYWNrXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF90eXBlXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgdG9nZ2xlOiBmdW5jdGlvbiAob3B0X2NhbGxiYWNrLCBvcHRfdHlwZSkge1xuICAgICAgICBvcHRfdHlwZSA9IHR5cGVvZiBvcHRfdHlwZSA9PSAnc3RyaW5nJyA/IG9wdF90eXBlIDogJyc7XG4gICAgICAgIHR5cGVvZiBvcHRfY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJyAmJiAob3B0X2NhbGxiYWNrID0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gKGVsLm9mZnNldFdpZHRoIHx8IGVsLm9mZnNldEhlaWdodCkgPyAnbm9uZScgOiBvcHRfdHlwZTtcbiAgICAgICAgICBvcHRfY2FsbGJhY2sgJiYgb3B0X2NhbGxiYWNrLmNhbGwoZWwpXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLy8gRE9NIFdhbGtlcnMgJiBnZXR0ZXJzXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7RWxlbWVudHxOb2RlfVxuICAgICAgICovXG4gICAgLCBmaXJzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYm9uem8odGhpcy5sZW5ndGggPyB0aGlzWzBdIDogW10pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJuIHtFbGVtZW50fE5vZGV9XG4gICAgICAgKi9cbiAgICAsIGxhc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGJvbnpvKHRoaXMubGVuZ3RoID8gdGhpc1t0aGlzLmxlbmd0aCAtIDFdIDogW10pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJuIHtFbGVtZW50fE5vZGV9XG4gICAgICAgKi9cbiAgICAsIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVsYXRlZCgnbmV4dFNpYmxpbmcnKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7RWxlbWVudHxOb2RlfVxuICAgICAgICovXG4gICAgLCBwcmV2aW91czogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWxhdGVkKCdwcmV2aW91c1NpYmxpbmcnKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7RWxlbWVudHxOb2RlfVxuICAgICAgICovXG4gICAgLCBwYXJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWxhdGVkKHBhcmVudE5vZGUpXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCB0aGUgZGlyZWN0aW9uYWwgRE9NIG1ldGhvZFxuICAgICAgICogQHJldHVybiB7RWxlbWVudHxOb2RlfVxuICAgICAgICovXG4gICAgLCByZWxhdGVkOiBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBib256byh0aGlzLm1hcChcbiAgICAgICAgICBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIGVsID0gZWxbbWV0aG9kXVxuICAgICAgICAgICAgd2hpbGUgKGVsICYmIGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgICAgICAgIGVsID0gZWxbbWV0aG9kXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsIHx8IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsXG4gICAgICAgICAgfVxuICAgICAgICApKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoICYmIHRoaXNbMF0uZm9jdXMoKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGJsdXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sZW5ndGggJiYgdGhpc1swXS5ibHVyKClcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cblxuICAgICAgLy8gc3R5bGUgZ2V0dGVyIHNldHRlciAmIHJlbGF0ZWQgbWV0aG9kc1xuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gb1xuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdlxuICAgICAgICogQHJldHVybiB7Qm9uem98c3RyaW5nfVxuICAgICAgICovXG4gICAgLCBjc3M6IGZ1bmN0aW9uIChvLCBvcHRfdikge1xuICAgICAgICB2YXIgcCwgaXRlciA9IG9cbiAgICAgICAgLy8gaXMgdGhpcyBhIHJlcXVlc3QgZm9yIGp1c3QgZ2V0dGluZyBhIHN0eWxlP1xuICAgICAgICBpZiAob3B0X3YgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbyA9PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIHJlcHVycG9zZSAndidcbiAgICAgICAgICBvcHRfdiA9IHRoaXNbMF1cbiAgICAgICAgICBpZiAoIW9wdF92KSByZXR1cm4gbnVsbFxuICAgICAgICAgIGlmIChvcHRfdiA9PT0gZG9jIHx8IG9wdF92ID09PSB3aW4pIHtcbiAgICAgICAgICAgIHAgPSAob3B0X3YgPT09IGRvYykgPyBib256by5kb2MoKSA6IGJvbnpvLnZpZXdwb3J0KClcbiAgICAgICAgICAgIHJldHVybiBvID09ICd3aWR0aCcgPyBwLndpZHRoIDogbyA9PSAnaGVpZ2h0JyA/IHAuaGVpZ2h0IDogJydcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChvID0gc3R5bGVQcm9wZXJ0eShvKSkgPyBnZXRTdHlsZShvcHRfdiwgbykgOiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG8gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpdGVyID0ge31cbiAgICAgICAgICBpdGVyW29dID0gb3B0X3ZcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZmVhdHVyZXMub3Bhc2l0eSAmJiAnb3BhY2l0eScgaW4gaXRlcikge1xuICAgICAgICAgIC8vIG9oIHRoaXMgJ29sIGdhbXV0XG4gICAgICAgICAgaXRlci5maWx0ZXIgPSBpdGVyLm9wYWNpdHkgIT0gbnVsbCAmJiBpdGVyLm9wYWNpdHkgIT09ICcnXG4gICAgICAgICAgICA/ICdhbHBoYShvcGFjaXR5PScgKyAoaXRlci5vcGFjaXR5ICogMTAwKSArICcpJ1xuICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgIC8vIGdpdmUgaXQgbGF5b3V0XG4gICAgICAgICAgaXRlci56b29tID0gby56b29tIHx8IDFcbiAgICAgICAgICA7ZGVsZXRlIGl0ZXIub3BhY2l0eVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZm4oZWwsIHAsIHYpIHtcbiAgICAgICAgICBmb3IgKHZhciBrIGluIGl0ZXIpIHtcbiAgICAgICAgICAgIGlmIChpdGVyLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgIHYgPSBpdGVyW2tdO1xuICAgICAgICAgICAgICAvLyBjaGFuZ2UgXCI1XCIgdG8gXCI1cHhcIiAtIHVubGVzcyB5b3UncmUgbGluZS1oZWlnaHQsIHdoaWNoIGlzIGFsbG93ZWRcbiAgICAgICAgICAgICAgKHAgPSBzdHlsZVByb3BlcnR5KGspKSAmJiBkaWdpdC50ZXN0KHYpICYmICEocCBpbiB1bml0bGVzcykgJiYgKHYgKz0gcHgpXG4gICAgICAgICAgICAgIHRyeSB7IGVsLnN0eWxlW3BdID0gc2V0dGVyKGVsLCB2KSB9IGNhdGNoKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZm4pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF94XG4gICAgICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF95XG4gICAgICAgKiBAcmV0dXJuIHtCb256b3xudW1iZXJ9XG4gICAgICAgKi9cbiAgICAsIG9mZnNldDogZnVuY3Rpb24gKG9wdF94LCBvcHRfeSkge1xuICAgICAgICBpZiAob3B0X3ggJiYgdHlwZW9mIG9wdF94ID09ICdvYmplY3QnICYmICh0eXBlb2Ygb3B0X3gudG9wID09ICdudW1iZXInIHx8IHR5cGVvZiBvcHRfeC5sZWZ0ID09ICdudW1iZXInKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICB4eShlbCwgb3B0X3gubGVmdCwgb3B0X3gudG9wKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdF94ID09ICdudW1iZXInIHx8IHR5cGVvZiBvcHRfeSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICB4eShlbCwgb3B0X3gsIG9wdF95KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzWzBdKSByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiAwXG4gICAgICAgICAgLCBsZWZ0OiAwXG4gICAgICAgICAgLCBoZWlnaHQ6IDBcbiAgICAgICAgICAsIHdpZHRoOiAwXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsID0gdGhpc1swXVxuICAgICAgICAgICwgZGUgPSBlbC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgICAgICwgYmNyID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICAsIHNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbCgpXG4gICAgICAgICAgLCB3aWR0aCA9IGVsLm9mZnNldFdpZHRoXG4gICAgICAgICAgLCBoZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHRcbiAgICAgICAgICAsIHRvcCA9IGJjci50b3AgKyBzY3JvbGwueSAtIE1hdGgubWF4KDAsIGRlICYmIGRlLmNsaWVudFRvcCwgZG9jLmJvZHkuY2xpZW50VG9wKVxuICAgICAgICAgICwgbGVmdCA9IGJjci5sZWZ0ICsgc2Nyb2xsLnggLSBNYXRoLm1heCgwLCBkZSAmJiBkZS5jbGllbnRMZWZ0LCBkb2MuYm9keS5jbGllbnRMZWZ0KVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRvcFxuICAgICAgICAgICwgbGVmdDogbGVmdFxuICAgICAgICAgICwgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAsIHdpZHRoOiB3aWR0aFxuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICAgKi9cbiAgICAsIGRpbTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMubGVuZ3RoKSByZXR1cm4geyBoZWlnaHQ6IDAsIHdpZHRoOiAwIH1cbiAgICAgICAgdmFyIGVsID0gdGhpc1swXVxuICAgICAgICAgICwgZGUgPSBlbC5ub2RlVHlwZSA9PSA5ICYmIGVsLmRvY3VtZW50RWxlbWVudCAvLyBkb2N1bWVudFxuICAgICAgICAgICwgb3JpZyA9ICFkZSAmJiAhIWVsLnN0eWxlICYmICFlbC5vZmZzZXRXaWR0aCAmJiAhZWwub2Zmc2V0SGVpZ2h0ID9cbiAgICAgICAgICAgICAvLyBlbCBpc24ndCB2aXNpYmxlLCBjYW4ndCBiZSBtZWFzdXJlZCBwcm9wZXJseSwgc28gZml4IHRoYXRcbiAgICAgICAgICAgICBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgdmFyIHMgPSB7XG4gICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGVsLnN0eWxlLnBvc2l0aW9uIHx8ICcnXG4gICAgICAgICAgICAgICAgICwgdmlzaWJpbGl0eTogZWwuc3R5bGUudmlzaWJpbGl0eSB8fCAnJ1xuICAgICAgICAgICAgICAgICAsIGRpc3BsYXk6IGVsLnN0eWxlLmRpc3BsYXkgfHwgJydcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHQuZmlyc3QoKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICAgICAgICAgICwgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgLCBkaXNwbGF5OiAnYmxvY2snXG4gICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgIH0odGhpcykgOiBudWxsXG4gICAgICAgICAgLCB3aWR0aCA9IGRlXG4gICAgICAgICAgICAgID8gTWF0aC5tYXgoZWwuYm9keS5zY3JvbGxXaWR0aCwgZWwuYm9keS5vZmZzZXRXaWR0aCwgZGUuc2Nyb2xsV2lkdGgsIGRlLm9mZnNldFdpZHRoLCBkZS5jbGllbnRXaWR0aClcbiAgICAgICAgICAgICAgOiBlbC5vZmZzZXRXaWR0aFxuICAgICAgICAgICwgaGVpZ2h0ID0gZGVcbiAgICAgICAgICAgICAgPyBNYXRoLm1heChlbC5ib2R5LnNjcm9sbEhlaWdodCwgZWwuYm9keS5vZmZzZXRIZWlnaHQsIGRlLnNjcm9sbEhlaWdodCwgZGUub2Zmc2V0SGVpZ2h0LCBkZS5jbGllbnRIZWlnaHQpXG4gICAgICAgICAgICAgIDogZWwub2Zmc2V0SGVpZ2h0XG5cbiAgICAgICAgb3JpZyAmJiB0aGlzLmZpcnN0KCkuY3NzKG9yaWcpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICwgd2lkdGg6IHdpZHRoXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gYXR0cmlidXRlcyBhcmUgaGFyZC4gZ28gc2hvcHBpbmdcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gayBhbiBhdHRyaWJ1dGUgdG8gZ2V0IG9yIHNldFxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdiB0aGUgdmFsdWUgdG8gc2V0XG4gICAgICAgKiBAcmV0dXJuIHtCb256b3xzdHJpbmd9XG4gICAgICAgKi9cbiAgICAsIGF0dHI6IGZ1bmN0aW9uIChrLCBvcHRfdikge1xuICAgICAgICB2YXIgZWwgPSB0aGlzWzBdXG4gICAgICAgICAgLCBuXG5cbiAgICAgICAgaWYgKHR5cGVvZiBrICE9ICdzdHJpbmcnICYmICEoayBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgICAgICBmb3IgKG4gaW4gaykge1xuICAgICAgICAgICAgay5oYXNPd25Qcm9wZXJ0eShuKSAmJiB0aGlzLmF0dHIobiwga1tuXSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb3B0X3YgPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgICAgICFlbCA/IG51bGwgOiBzcGVjaWFsQXR0cmlidXRlcy50ZXN0KGspID9cbiAgICAgICAgICAgIHN0YXRlQXR0cmlidXRlcy50ZXN0KGspICYmIHR5cGVvZiBlbFtrXSA9PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICAgIHRydWUgOiBlbFtrXSA6IChrID09ICdocmVmJyB8fCBrID09J3NyYycpICYmIGZlYXR1cmVzLmhyZWZFeHRlbmRlZCA/XG4gICAgICAgICAgICAgICAgZWxbZ2V0QXR0cmlidXRlXShrLCAyKSA6IGVsW2dldEF0dHJpYnV0ZV0oaykgOlxuICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHNwZWNpYWxBdHRyaWJ1dGVzLnRlc3QoaykgPyAoZWxba10gPSBzZXR0ZXIoZWwsIG9wdF92KSkgOiBlbFtzZXRBdHRyaWJ1dGVdKGssIHNldHRlcihlbCwgb3B0X3YpKVxuICAgICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga1xuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIHJlbW92ZUF0dHI6IGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgc3RhdGVBdHRyaWJ1dGVzLnRlc3QoaykgPyAoZWxba10gPSBmYWxzZSkgOiBlbC5yZW1vdmVBdHRyaWJ1dGUoaylcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3NcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfHN0cmluZ31cbiAgICAgICAqL1xuICAgICwgdmFsOiBmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBzID09ICdzdHJpbmcnIHx8IHR5cGVvZiBzID09ICdudW1iZXInKSA/XG4gICAgICAgICAgdGhpcy5hdHRyKCd2YWx1ZScsIHMpIDpcbiAgICAgICAgICB0aGlzLmxlbmd0aCA/IHRoaXNbMF0udmFsdWUgOiBudWxsXG4gICAgICB9XG5cbiAgICAgIC8vIHVzZSB3aXRoIGNhcmUgYW5kIGtub3dsZWRnZS4gdGhpcyBkYXRhKCkgbWV0aG9kIHVzZXMgZGF0YSBhdHRyaWJ1dGVzIG9uIHRoZSBET00gbm9kZXNcbiAgICAgIC8vIHRvIGRvIHRoaXMgZGlmZmVyZW50bHkgY29zdHMgYSBsb3QgbW9yZSBjb2RlLiBjJ2VzdCBsYSB2aWVcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0PX0gb3B0X2sgdGhlIGtleSBmb3Igd2hpY2ggdG8gZ2V0IG9yIHNldCBkYXRhXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF92XG4gICAgICAgKiBAcmV0dXJuIHtCb256b3xPYmplY3R9XG4gICAgICAgKi9cbiAgICAsIGRhdGE6IGZ1bmN0aW9uIChvcHRfaywgb3B0X3YpIHtcbiAgICAgICAgdmFyIGVsID0gdGhpc1swXSwgbywgbVxuICAgICAgICBpZiAodHlwZW9mIG9wdF92ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmICghZWwpIHJldHVybiBudWxsXG4gICAgICAgICAgbyA9IGRhdGEoZWwpXG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRfayA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGVhY2goZWwuYXR0cmlidXRlcywgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgKG0gPSAoJycgKyBhLm5hbWUpLm1hdGNoKGRhdHRyKSkgJiYgKG9bY2FtZWxpemUobVsxXSldID0gZGF0YVZhbHVlKGEudmFsdWUpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBvXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb1tvcHRfa10gPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICBvW29wdF9rXSA9IGRhdGFWYWx1ZSh0aGlzLmF0dHIoJ2RhdGEtJyArIGRlY2FtZWxpemUob3B0X2spKSlcbiAgICAgICAgICAgIHJldHVybiBvW29wdF9rXVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkgeyBkYXRhKGVsKVtvcHRfa10gPSBvcHRfdiB9KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERPTSBkZXRhY2htZW50ICYgcmVsYXRlZFxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZWVwRWFjaChjbGVhckRhdGEpXG4gICAgICAgIHJldHVybiB0aGlzLmRldGFjaCgpXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgZW1wdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICBkZWVwRWFjaChlbC5jaGlsZE5vZGVzLCBjbGVhckRhdGEpXG5cbiAgICAgICAgICB3aGlsZSAoZWwuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgZWxbcGFyZW50Tm9kZV0gJiYgZWxbcGFyZW50Tm9kZV0ucmVtb3ZlQ2hpbGQoZWwpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIHdobyB1c2VzIGEgbW91c2UgYW55d2F5PyBvaCByaWdodC5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAgICovXG4gICAgLCBzY3JvbGxUb3A6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgIHJldHVybiBzY3JvbGwuY2FsbCh0aGlzLCBudWxsLCB5LCAneScpXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAgICovXG4gICAgLCBzY3JvbGxMZWZ0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsLmNhbGwodGhpcywgeCwgbnVsbCwgJ3gnKVxuICAgICAgfVxuXG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNsb25lTm9kZShob3N0LCBlbCkge1xuICAgIHZhciBjID0gZWwuY2xvbmVOb2RlKHRydWUpXG4gICAgICAsIGNsb25lRWxlbXNcbiAgICAgICwgZWxFbGVtc1xuICAgICAgLCBpXG5cbiAgICAvLyBjaGVjayBmb3IgZXhpc3RlbmNlIG9mIGFuIGV2ZW50IGNsb25lclxuICAgIC8vIHByZWZlcmFibHkgaHR0cHM6Ly9naXRodWIuY29tL2ZhdC9iZWFuXG4gICAgLy8gb3RoZXJ3aXNlIEJvbnpvIHdvbid0IGRvIHRoaXMgZm9yIHlvdVxuICAgIGlmIChob3N0LiQgJiYgdHlwZW9mIGhvc3QuY2xvbmVFdmVudHMgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaG9zdC4kKGMpLmNsb25lRXZlbnRzKGVsKVxuXG4gICAgICAvLyBjbG9uZSBldmVudHMgZnJvbSBldmVyeSBjaGlsZCBub2RlXG4gICAgICBjbG9uZUVsZW1zID0gaG9zdC4kKGMpLmZpbmQoJyonKVxuICAgICAgZWxFbGVtcyA9IGhvc3QuJChlbCkuZmluZCgnKicpXG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbEVsZW1zLmxlbmd0aDsgaSsrKVxuICAgICAgICBob3N0LiQoY2xvbmVFbGVtc1tpXSkuY2xvbmVFdmVudHMoZWxFbGVtc1tpXSlcbiAgICB9XG4gICAgcmV0dXJuIGNcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQm9keShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPT09IHdpbiB8fCAoL14oPzpib2R5fGh0bWwpJC9pKS50ZXN0KGVsZW1lbnQudGFnTmFtZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbCgpIHtcbiAgICByZXR1cm4geyB4OiB3aW4ucGFnZVhPZmZzZXQgfHwgaHRtbC5zY3JvbGxMZWZ0LCB5OiB3aW4ucGFnZVlPZmZzZXQgfHwgaHRtbC5zY3JvbGxUb3AgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2NyaXB0RnJvbUh0bWwoaHRtbCkge1xuICAgIHZhciBzY3JpcHRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXG4gICAgICAsIG1hdGNoZXMgPSBodG1sLm1hdGNoKHNpbXBsZVNjcmlwdFRhZ1JlKVxuICAgIHNjcmlwdEVsLnNyYyA9IG1hdGNoZXNbMV1cbiAgICByZXR1cm4gc2NyaXB0RWxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxFbGVtZW50PnxFbGVtZW50fE5vZGV8c3RyaW5nfSBlbHNcbiAgICogQHJldHVybiB7Qm9uem99XG4gICAqL1xuICBmdW5jdGlvbiBib256byhlbHMpIHtcbiAgICByZXR1cm4gbmV3IEJvbnpvKGVscylcbiAgfVxuXG4gIGJvbnpvLnNldFF1ZXJ5RW5naW5lID0gZnVuY3Rpb24gKHEpIHtcbiAgICBxdWVyeSA9IHE7XG4gICAgZGVsZXRlIGJvbnpvLnNldFF1ZXJ5RW5naW5lXG4gIH1cblxuICBib256by5hdWcgPSBmdW5jdGlvbiAobywgdGFyZ2V0KSB7XG4gICAgLy8gZm9yIHRob3NlIHN0YW5kYWxvbmUgYm9uem8gdXNlcnMuIHRoaXMgbG92ZSBpcyBmb3IgeW91LlxuICAgIGZvciAodmFyIGsgaW4gbykge1xuICAgICAgby5oYXNPd25Qcm9wZXJ0eShrKSAmJiAoKHRhcmdldCB8fCBCb256by5wcm90b3R5cGUpW2tdID0gb1trXSlcbiAgICB9XG4gIH1cblxuICBib256by5jcmVhdGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIC8vIGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoXG4gICAgcmV0dXJuIHR5cGVvZiBub2RlID09ICdzdHJpbmcnICYmIG5vZGUgIT09ICcnID9cbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNpbXBsZVNjcmlwdFRhZ1JlLnRlc3Qobm9kZSkpIHJldHVybiBbY3JlYXRlU2NyaXB0RnJvbUh0bWwobm9kZSldXG4gICAgICAgIHZhciB0YWcgPSBub2RlLm1hdGNoKC9eXFxzKjwoW15cXHM+XSspLylcbiAgICAgICAgICAsIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgICAgLCBlbHMgPSBbXVxuICAgICAgICAgICwgcCA9IHRhZyA/IHRhZ01hcFt0YWdbMV0udG9Mb3dlckNhc2UoKV0gOiBudWxsXG4gICAgICAgICAgLCBkZXAgPSBwID8gcFsyXSArIDEgOiAxXG4gICAgICAgICAgLCBucyA9IHAgJiYgcFszXVxuICAgICAgICAgICwgcG4gPSBwYXJlbnROb2RlXG4gICAgICAgICAgLCB0YiA9IGZlYXR1cmVzLmF1dG9UYm9keSAmJiBwICYmIHBbMF0gPT0gJzx0YWJsZT4nICYmICEoLzx0Ym9keS9pKS50ZXN0KG5vZGUpXG5cbiAgICAgICAgZWwuaW5uZXJIVE1MID0gcCA/IChwWzBdICsgbm9kZSArIHBbMV0pIDogbm9kZVxuICAgICAgICB3aGlsZSAoZGVwLS0pIGVsID0gZWwuZmlyc3RDaGlsZFxuICAgICAgICAvLyBmb3IgSUUgTm9TY29wZSwgd2UgbWF5IGluc2VydCBjcnVmdCBhdCB0aGUgYmVnaW5pbmcganVzdCB0byBnZXQgaXQgdG8gd29ya1xuICAgICAgICBpZiAobnMgJiYgZWwgJiYgZWwubm9kZVR5cGUgIT09IDEpIGVsID0gZWwubmV4dFNpYmxpbmdcbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8vIHRib2R5IHNwZWNpYWwgY2FzZSBmb3IgSUU8OCwgY3JlYXRlcyB0Ym9keSBvbiBhbnkgZW1wdHkgdGFibGVcbiAgICAgICAgICAvLyB3ZSBkb24ndCB3YW50IGl0IGlmIHdlJ3JlIGp1c3QgYWZ0ZXIgYSA8dGhlYWQ+LCA8Y2FwdGlvbj4sIGV0Yy5cbiAgICAgICAgICBpZiAoKCF0YWcgfHwgZWwubm9kZVR5cGUgPT0gMSkgJiYgKCF0YiB8fCAoZWwudGFnTmFtZSAmJiBlbC50YWdOYW1lICE9ICdUQk9EWScpKSkge1xuICAgICAgICAgICAgZWxzLnB1c2goZWwpXG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChlbCA9IGVsLm5leHRTaWJsaW5nKVxuICAgICAgICAvLyBJRSA8IDkgZ2l2ZXMgdXMgYSBwYXJlbnROb2RlIHdoaWNoIG1lc3NlcyB1cCBpbnNlcnQoKSBjaGVjayBmb3IgY2xvbmluZ1xuICAgICAgICAvLyBgZGVwYCA+IDEgY2FuIGFsc28gY2F1c2UgcHJvYmxlbXMgd2l0aCB0aGUgaW5zZXJ0KCkgY2hlY2sgKG11c3QgZG8gdGhpcyBsYXN0KVxuICAgICAgICBlYWNoKGVscywgZnVuY3Rpb24oZWwpIHsgZWxbcG5dICYmIGVsW3BuXS5yZW1vdmVDaGlsZChlbCkgfSlcbiAgICAgICAgcmV0dXJuIGVsc1xuICAgICAgfSgpIDogaXNOb2RlKG5vZGUpID8gW25vZGUuY2xvbmVOb2RlKHRydWUpXSA6IFtdXG4gIH1cblxuICBib256by5kb2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZwID0gYm9uem8udmlld3BvcnQoKVxuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBNYXRoLm1heChkb2MuYm9keS5zY3JvbGxXaWR0aCwgaHRtbC5zY3JvbGxXaWR0aCwgdnAud2lkdGgpXG4gICAgICAsIGhlaWdodDogTWF0aC5tYXgoZG9jLmJvZHkuc2Nyb2xsSGVpZ2h0LCBodG1sLnNjcm9sbEhlaWdodCwgdnAuaGVpZ2h0KVxuICAgIH1cbiAgfVxuXG4gIGJvbnpvLmZpcnN0Q2hpbGQgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICBmb3IgKHZhciBjID0gZWwuY2hpbGROb2RlcywgaSA9IDAsIGogPSAoYyAmJiBjLmxlbmd0aCkgfHwgMCwgZTsgaSA8IGo7IGkrKykge1xuICAgICAgaWYgKGNbaV0ubm9kZVR5cGUgPT09IDEpIGUgPSBjW2ogPSBpXVxuICAgIH1cbiAgICByZXR1cm4gZVxuICB9XG5cbiAgYm9uem8udmlld3BvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IGllID8gaHRtbC5jbGllbnRXaWR0aCA6IHdpbi5pbm5lcldpZHRoXG4gICAgICAsIGhlaWdodDogaWUgPyBodG1sLmNsaWVudEhlaWdodCA6IHdpbi5pbm5lckhlaWdodFxuICAgIH1cbiAgfVxuXG4gIGJvbnpvLmlzQW5jZXN0b3IgPSAnY29tcGFyZURvY3VtZW50UG9zaXRpb24nIGluIGh0bWwgP1xuICAgIGZ1bmN0aW9uIChjb250YWluZXIsIGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAoY29udGFpbmVyLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQpICYgMTYpID09IDE2XG4gICAgfSA6ICdjb250YWlucycgaW4gaHRtbCA/XG4gICAgZnVuY3Rpb24gKGNvbnRhaW5lciwgZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGNvbnRhaW5lciAhPT0gZWxlbWVudCAmJiBjb250YWluZXIuY29udGFpbnMoZWxlbWVudCk7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24gKGNvbnRhaW5lciwgZWxlbWVudCkge1xuICAgICAgd2hpbGUgKGVsZW1lbnQgPSBlbGVtZW50W3BhcmVudE5vZGVdKSB7XG4gICAgICAgIGlmIChlbGVtZW50ID09PSBjb250YWluZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgcmV0dXJuIGJvbnpvXG59KTsgLy8gdGhlIG9ubHkgbGluZSB3ZSBjYXJlIGFib3V0IHVzaW5nIGEgc2VtaS1jb2xvbi4gcGxhY2VkIGhlcmUgZm9yIGNvbmNhdGVuYXRpb24gdG9vbHNcbiIsbnVsbCwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4nKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIHZhciBtO1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gMDtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbihlbWl0dGVyLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IDE7XG4gIGVsc2VcbiAgICByZXQgPSBlbWl0dGVyLl9ldmVudHNbdHlwZV0ubGVuZ3RoO1xuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRRdWV1ZTtcbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgICAgICAgY3VycmVudFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xufVxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICBxdWV1ZS5wdXNoKGZ1bik7XG4gICAgaWYgKCFkcmFpbmluZykge1xuICAgICAgICBzZXRUaW1lb3V0KGRyYWluUXVldWUsIDApO1xuICAgIH1cbn07XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsInZhciBmb3JtYXQgPSByZXF1aXJlKCd1dGlsJykuZm9ybWF0O1xuXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxudmFyIFBhc3N3b3JkUG9saWN5RXJyb3IgPSByZXF1aXJlKCcuL2xpYi9wb2xpY3lfZXJyb3InKTtcblxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbnZhciBjaGFyc2V0cyA9IHJlcXVpcmUoJy4vbGliL3J1bGVzL2NvbnRhaW5zJykuY2hhcnNldHM7XG5cbnZhciB1cHBlckNhc2UgICAgICAgICA9IGNoYXJzZXRzLnVwcGVyQ2FzZTtcbnZhciBsb3dlckNhc2UgICAgICAgICA9IGNoYXJzZXRzLmxvd2VyQ2FzZTtcbnZhciBudW1iZXJzICAgICAgICAgICA9IGNoYXJzZXRzLm51bWJlcnM7XG52YXIgc3BlY2lhbENoYXJhY3RlcnMgPSBjaGFyc2V0cy5zcGVjaWFsQ2hhcmFjdGVycztcblxudmFyIHJ1bGVzVG9BcHBseSA9IHtcbiAgbGVuZ3RoOiAgICAgICAgICAgcmVxdWlyZSgnLi9saWIvcnVsZXMvbGVuZ3RoJyksXG4gIGNvbnRhaW5zOiAgICAgICAgIHJlcXVpcmUoJy4vbGliL3J1bGVzL2NvbnRhaW5zJyksXG4gIGNvbnRhaW5zQXRMZWFzdDogIHJlcXVpcmUoJy4vbGliL3J1bGVzL2NvbnRhaW5zQXRMZWFzdCcpLFxuICBpZGVudGljYWxDaGFyczogICByZXF1aXJlKCcuL2xpYi9ydWxlcy9pZGVudGljYWxDaGFycycpLFxufTtcblxuXG52YXIgcG9saWNpZXNCeU5hbWUgPSB7XG4gIG5vbmU6IHtcbiAgICBydWxlczoge1xuICAgICAgbGVuZ3RoOiB7IG1pbkxlbmd0aDogMSB9XG4gICAgfVxuICB9LFxuICBsb3c6IHtcbiAgICBydWxlczoge1xuICAgICAgbGVuZ3RoOiB7IG1pbkxlbmd0aDogNiB9XG4gICAgfSxcbiAgfSxcbiAgZmFpcjoge1xuICAgIHJ1bGVzOiB7XG4gICAgICBsZW5ndGg6IHsgbWluTGVuZ3RoOiA4IH0sXG4gICAgICBjb250YWluczoge1xuICAgICAgICBleHByZXNzaW9uczogW2xvd2VyQ2FzZSwgdXBwZXJDYXNlLCBudW1iZXJzXVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZ29vZDoge1xuICAgIHJ1bGVzOiB7XG4gICAgICBsZW5ndGg6IHsgbWluTGVuZ3RoOiA4IH0sXG4gICAgICBjb250YWluc0F0TGVhc3Q6IHtcbiAgICAgICAgYXRMZWFzdDogMyxcbiAgICAgICAgZXhwcmVzc2lvbnM6IFtsb3dlckNhc2UsIHVwcGVyQ2FzZSwgbnVtYmVycywgc3BlY2lhbENoYXJhY3RlcnNdXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBleGNlbGxlbnQ6IHtcbiAgICBydWxlczoge1xuICAgICAgbGVuZ3RoOiB7IG1pbkxlbmd0aDogMTAgfSxcbiAgICAgIGNvbnRhaW5zQXRMZWFzdDoge1xuICAgICAgICBhdExlYXN0OiAzLFxuICAgICAgICBleHByZXNzaW9uczogW2xvd2VyQ2FzZSwgdXBwZXJDYXNlLCBudW1iZXJzLCBzcGVjaWFsQ2hhcmFjdGVyc11cbiAgICAgIH0sXG4gICAgICBpZGVudGljYWxDaGFyczogeyBtYXg6IDIgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gcmVkdWNlUG9saWN5KHBvbGljeSwgZm4sIHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwb2xpY3kucnVsZXMpLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBydWxlTmFtZSkge1xuICAgIHZhciBydWxlT3B0aW9ucyA9IHBvbGljeS5ydWxlc1tydWxlTmFtZV07XG4gICAgdmFyIHJ1bGUgPSBydWxlc1RvQXBwbHlbcnVsZU5hbWVdO1xuXG4gICAgcmV0dXJuIGZuKHJlc3VsdCwgcnVsZU9wdGlvbnMsIHJ1bGUpO1xuXG4gIH0sIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlSdWxlcyAocG9saWN5LCBwYXNzd29yZCkge1xuICByZXR1cm4gcmVkdWNlUG9saWN5KHBvbGljeSwgZnVuY3Rpb24gKHJlc3VsdCwgcnVsZU9wdGlvbnMsIHJ1bGUpIHtcbiAgICAvLyBJZiBwcmV2aW91cyByZXN1bHQgd2FzIGZhbHNlIGFzIHRoaXMgYW4gJiYsIHRoZW4gbm90aGluZyB0byBkbyBoZXJlIVxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFydWxlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGUuYXNzZXJ0KHJ1bGVPcHRpb25zLCBwYXNzd29yZCk7XG4gIH0sIHRydWUpO1xufVxuXG5mdW5jdGlvbiBtaXNzaW5nIChwb2xpY3ksIHBhc3N3b3JkKSB7XG4gIHJldHVybiByZWR1Y2VQb2xpY3kocG9saWN5LCBmdW5jdGlvbiAocmVzdWx0LCBydWxlT3B0aW9ucywgcnVsZSkge1xuICAgIHZhciBtaXNzaW5nUnVsZSA9IHJ1bGUubWlzc2luZyhydWxlT3B0aW9ucywgcGFzc3dvcmQpO1xuICAgIHJlc3VsdC5ydWxlcy5wdXNoKG1pc3NpbmdSdWxlKTtcbiAgICByZXN1bHQudmVyaWZpZWQgPSByZXN1bHQudmVyaWZpZWQgJiYgISFtaXNzaW5nUnVsZS52ZXJpZmllZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7cnVsZXM6IFtdLCB2ZXJpZmllZDogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiBleHBsYWluIChwb2xpY3kpIHtcbiAgcmV0dXJuIHJlZHVjZVBvbGljeShwb2xpY3ksIGZ1bmN0aW9uIChyZXN1bHQsIHJ1bGVPcHRpb25zLCBydWxlKSB7XG4gICAgcmVzdWx0LnB1c2gocnVsZS5leHBsYWluKHJ1bGVPcHRpb25zKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiBmbGF0RGVzY3JpcHRpb25zIChkZXNjcmlwdGlvbnMsIGluZGV4KSB7XG5cbiAgaWYgKCFkZXNjcmlwdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgZnVuY3Rpb24gZmxhdFNpbmdsZURlc2NyaXB0aW9uIChkZXNjcmlwdGlvbiwgaW5kZXgpIHtcbiAgICB2YXIgc3BhY2VzID0gKG5ldyBBcnJheShpbmRleCsxKSkuam9pbignICcpO1xuICAgIHZhciByZXN1bHQgPSBzcGFjZXMgKyAnKiAnO1xuICAgIGlmIChkZXNjcmlwdGlvbi5mb3JtYXQpIHtcbiAgICAgIHJlc3VsdCArPSBmb3JtYXQuYXBwbHkobnVsbCwgW2Rlc2NyaXB0aW9uLm1lc3NhZ2VdLmNvbmNhdChkZXNjcmlwdGlvbi5mb3JtYXQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IGRlc2NyaXB0aW9uLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgaWYgKGRlc2NyaXB0aW9uLml0ZW1zKSB7XG4gICAgICByZXN1bHQgKz0gJ1xcbicgKyBzcGFjZXMgKyBmbGF0RGVzY3JpcHRpb25zKGRlc2NyaXB0aW9uLml0ZW1zLCBpbmRleCArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGZpcnN0RGVzY3JpcHRpb24gPSBmbGF0U2luZ2xlRGVzY3JpcHRpb24oZGVzY3JpcHRpb25zWzBdLCBpbmRleCk7XG5cbiAgZGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25zLnNsaWNlKDEpLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBkZXNjcmlwdGlvbikge1xuICAgIHJlc3VsdCArPSAnXFxuJyArIGZsYXRTaW5nbGVEZXNjcmlwdGlvbihkZXNjcmlwdGlvbiwgaW5kZXgpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgZmlyc3REZXNjcmlwdGlvbik7XG5cbiAgcmV0dXJuIGRlc2NyaXB0aW9ucztcbn1cblxuXG5cbl8uZWFjaChwb2xpY2llc0J5TmFtZSwgZnVuY3Rpb24gKHBvbGljeSkge1xuICByZWR1Y2VQb2xpY3kocG9saWN5LCBmdW5jdGlvbiAocmVzdWx0LCBydWxlT3B0aW9ucywgcnVsZSkge1xuICAgIHJ1bGUudmFsaWRhdGUocnVsZU9wdGlvbnMpO1xuICB9LCB0cnVlKTtcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBwYXNzd29yZCBwb2xpY3kuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBvbGljeU5hbWUgTmFtZSBvZiBwb2xpY3kgdG8gdXNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwb2xpY3lOYW1lKSB7XG4gIHZhciBwb2xpY3kgPSBwb2xpY2llc0J5TmFtZVtwb2xpY3lOYW1lXSB8fCBwb2xpY2llc0J5TmFtZS5ub25lO1xuXG4gIHJldHVybiB7XG4gICAgLyoqIFxuICAgICAqIENoZWNrcyB0aGF0IGEgcGFzc3dvcmQgbWVldHMgdGhpcyBwb2xpY3lcbiAgICAgKlxuICAgICAqIEBtZXRob2QgY2hlY2tcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFzc3dvcmRcbiAgICAgKi9cbiAgICBjaGVjazogZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gICAgICBpZiAoIWlzU3RyaW5nKHBhc3N3b3JkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcHBseVJ1bGVzKHBvbGljeSwgcGFzc3dvcmQpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBhc3NlcnRcbiAgICAgKiBBc3NlcnRzIHRoYXQgYSBwYXNzb3JkIG1lZXRzIHRoaXMgcG9saWN5IGVsc2UgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhc3N3b3JkXG4gICAgICovXG4gICAgYXNzZXJ0OiBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgIGlmICghdGhpcy5jaGVjayhwYXNzd29yZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBhc3N3b3JkUG9saWN5RXJyb3IoJ1Bhc3N3b3JkIGRvZXMgbm90IG1lZXQgcGFzc3dvcmQgcG9saWN5Jyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIG1pc3Npbmc6IGZ1bmN0aW9uIChwYXNzd29yZCkge1xuICAgICAgcmV0dXJuIG1pc3NpbmcocG9saWN5LCBwYXNzd29yZCk7XG4gICAgfSxcblxuICAgIG1pc3NpbmdBc01hcmtkb3duOiBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiBmbGF0RGVzY3JpcHRpb25zKG1pc3NpbmcocG9saWN5LCBwYXNzd29yZCksIDEpO1xuICAgIH0sXG5cbiAgICBleHBsYWluOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZXhwbGFpbihwb2xpY3kpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGcmllbmRseSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBvbGljeVxuICAgICAqIEBtZXRob2QgdG9TdHJpbmdcbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRlc2NyaXB0aW9ucyA9IHRoaXMuZXhwbGFpbigpO1xuICAgICAgcmV0dXJuIGZsYXREZXNjcmlwdGlvbnMoZGVzY3JpcHRpb25zLCAwKTtcbiAgICB9XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5ydWxlc1RvQXBwbHkgPSBydWxlc1RvQXBwbHk7XG4iLCIvKipcbiAqIEVycm9yIHRocm93biB3aGVuIGFzc2VydGluZyBhIHBvbGljeSBhZ2FpbnN0IGEgcGFzc3dvcmQuXG4gKlxuICogQGNsYXNzIFBhc3N3b3JkUG9saWN5RXJyb3JcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgRGVzY3JpcHRpdmUgbWVzc2FnZSBvZiB0aGUgZXJyb3JcbiAqL1xuZnVuY3Rpb24gUGFzc3dvcmRQb2xpY3lFcnJvcihtc2cpIHtcbiAgdmFyIGVyciA9IEVycm9yLmNhbGwodGhpcywgbXNnKTtcbiAgZXJyLm5hbWUgPSAnUGFzc3dvcmRQb2xpY3lFcnJvcic7XG4gIHJldHVybiBlcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc3dvcmRQb2xpY3lFcnJvcjtcbiIsInZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG4vKiBPV0FTUCBTcGVjaWFsIENoYXJhY3RlcnM6IGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvUGFzc3dvcmRfc3BlY2lhbF9jaGFyYWN0ZXJzICovXG52YXIgc3BlY2lhbENoYXJhY3RlcnMgPSBbJyAnLCAnIScsICdcIicsICcjJywgJ1xcXFwkJywgJyUnLCAnJicsICdcXCcnLCAnXFxcXCgnLCAnXFxcXCknLCAnXFxcXConLCAnXFxcXCsnLCAnLCcsICctJywgJ1xcXFwuJywgJy8nLCAnOicsICc7JywgJzwnLCAnPScsICc+JywgJ1xcXFw/JywgJ0AnLCAnXFxcXFsnLCAnXFxcXFxcXFwnLCAnXFxcXF0nLCAnXFxcXF4nLCAnXycsJ2AnLCd7JywnXFxcXHwnLCAnfScsJ34nXS5qb2luKCd8Jyk7XG5cbnZhciBzcGVjaWFsQ2hhcmFjdGVyc1JlZ2V4cCA9IG5ldyBSZWdFeHAoc3BlY2lhbENoYXJhY3RlcnMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ29wdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdCcpO1xuICAgIH1cblxuICAgIGlmICghXy5pc0FycmF5KG9wdGlvbnMuZXhwcmVzc2lvbnMpIHx8IF8uaXNFbXB0eShvcHRpb25zLmV4cHJlc3Npb25zKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb250YWlucyBleHBlY3RzIGV4cHJlc3Npb25zIHRvIGJlIGEgbm9uLWVtcHR5IGFycmF5Jyk7XG4gICAgfVxuXG4gICAgdmFyIG9rID0gb3B0aW9ucy5leHByZXNzaW9ucy5ldmVyeShmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIF8uaXNGdW5jdGlvbihleHByZXNzaW9uLmV4cGxhaW4pICYmIF8uaXNGdW5jdGlvbihleHByZXNzaW9uLnRlc3QpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFvaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb250YWlucyBleHByZXNzaW9ucyBhcmUgaW52YWxpZDogQW4gZXhwbGFpbiBhbmQgYSB0ZXN0IGZ1bmN0aW9uIHNob3VsZCBiZSBwcm92aWRlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZXhwbGFpbjogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogJ1Nob3VsZCBjb250YWluOicsXG4gICAgICBjb2RlOiAnc2hvdWxkQ29udGFpbicsXG4gICAgICBpdGVtczogb3B0aW9ucy5leHByZXNzaW9ucy5tYXAoZnVuY3Rpb24gKGV4cHJlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb24uZXhwbGFpbigpO1xuICAgICAgfSlcbiAgICB9O1xuICB9LFxuICBtaXNzaW5nOiBmdW5jdGlvbiAob3B0aW9ucywgcGFzc3dvcmQpIHtcbiAgICB2YXIgZXhwcmVzc2lvbnMgPSBvcHRpb25zLmV4cHJlc3Npb25zLm1hcChmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgdmFyIGV4cGxhaW5lZCA9IGV4cHJlc3Npb24uZXhwbGFpbigpO1xuICAgICAgZXhwbGFpbmVkLnZlcmlmaWVkID0gZXhwcmVzc2lvbi50ZXN0KHBhc3N3b3JkKTtcbiAgICAgIHJldHVybiBleHBsYWluZWQ7XG4gICAgfSk7XG5cbiAgICB2YXIgdmVyaWZpZWQgPSBleHByZXNzaW9ucy5ldmVyeShmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGV4cHJlc3Npb24udmVyaWZpZWQ7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogJ1Nob3VsZCBjb250YWluOicsXG4gICAgICBjb2RlOiAnc2hvdWxkQ29udGFpbicsXG4gICAgICB2ZXJpZmllZDogdmVyaWZpZWQsXG4gICAgICBpdGVtczogZXhwcmVzc2lvbnNcbiAgICB9O1xuICB9LFxuICBhc3NlcnQ6IGZ1bmN0aW9uIChvcHRpb25zLCBwYXNzd29yZCkge1xuICAgIGlmICghcGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucy5leHByZXNzaW9ucy5ldmVyeShmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgdmFyIHJlc3VsdCA9IGV4cHJlc3Npb24udGVzdChwYXNzd29yZCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICB9LFxuICBjaGFyc2V0czoge1xuICAgIHVwcGVyQ2FzZToge1xuICAgICAgZXhwbGFpbjogZnVuY3Rpb24gKCkgeyByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAndXBwZXIgY2FzZSBsZXR0ZXJzIChBLVopJyxcbiAgICAgICAgY29kZTogJ3VwcGVyQ2FzZSdcbiAgICAgIH07IH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiAocGFzc3dvcmQpIHsgcmV0dXJuIC9bQS1aXS8udGVzdChwYXNzd29yZCk7IH1cbiAgICB9LFxuICAgIGxvd2VyQ2FzZToge1xuICAgICAgZXhwbGFpbjogZnVuY3Rpb24gKCkgeyByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAnbG93ZXIgY2FzZSBsZXR0ZXJzIChhLXopJyxcbiAgICAgICAgY29kZTogJ2xvd2VyQ2FzZSdcbiAgICAgIH07IH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiAocGFzc3dvcmQpIHsgcmV0dXJuIC9bYS16XS8udGVzdChwYXNzd29yZCk7IH1cbiAgICB9LFxuICAgIHNwZWNpYWxDaGFyYWN0ZXJzOiB7XG4gICAgICBleHBsYWluOiBmdW5jdGlvbiAoKSB7IHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICdzcGVjaWFsIGNoYXJhY3RlcnMgKGUuZy4gIUAjJCVeJiopJyxcbiAgICAgICAgY29kZTogJ3NwZWNpYWxDaGFyYWN0ZXJzJ1xuICAgICAgfTsgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIChwYXNzd29yZCkgeyByZXR1cm4gc3BlY2lhbENoYXJhY3RlcnNSZWdleHAudGVzdChwYXNzd29yZCk7IH1cbiAgICB9LFxuICAgIG51bWJlcnM6IHtcbiAgICAgIGV4cGxhaW46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogJ251bWJlcnMgKGkuZS4gMC05KScsXG4gICAgICAgIGNvZGU6ICdudW1iZXJzJ1xuICAgICAgfTsgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIChwYXNzd29yZCkgeyByZXR1cm4gL1xcZC8udGVzdChwYXNzd29yZCk7IH1cbiAgICB9XG4gIH1cbn07XG4iLCJ2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxudmFyIGNvbnRhaW5zID0gcmVxdWlyZSgnLi9jb250YWlucycpO1xuXG5mdW5jdGlvbiBjcmVhdGVJbnRyb01lc3NhZ2UoKSB7XG4gIHJldHVybiAnQ29udGFpbiBhdCBsZWFzdCAlZCBvZiB0aGUgZm9sbG93aW5nICVkIHR5cGVzIG9mIGNoYXJhY3RlcnM6Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIFRPRE8gdmFsaWRhdGUgYXRMZWFzdCB0byBiZSBhIG51bWJlciA+IDAgYW5kIGV4cHJlc3Npb25zIHRvIGJlIGEgbGlzdCBvZiBhdCBsZWFzdCAxXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGlmICghXy5pc09iamVjdChvcHRpb25zKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zIHNob3VsZCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG5cbiAgICBpZiAoIV8uaXNOdW1iZXIob3B0aW9ucy5hdExlYXN0KSB8fCBfLmlzTmFOKG9wdGlvbnMuYXRMZWFzdCkgfHwgb3B0aW9ucy5hdExlYXN0IDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhdExlYXN0IHNob3VsZCBiZSBhIHZhbGlkLCBub24tTmFOIG51bWJlciwgZ3JlYXRlciB0aGFuIDAnKTtcbiAgICB9XG5cbiAgICBpZiAoIV8uaXNBcnJheShvcHRpb25zLmV4cHJlc3Npb25zKSB8fCBfLmlzRW1wdHkob3B0aW9ucy5leHByZXNzaW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZXhwcmVzc2lvbnMgc2hvdWxkIGJlIGFuIG5vbi1lbXB0eSBhcnJheScpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmV4cHJlc3Npb25zLmxlbmd0aCA8IG9wdGlvbnMuYXRMZWFzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHByZXNzaW9ucyBsZW5ndGggc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiBhdExlYXN0Jyk7XG4gICAgfVxuXG4gICAgdmFyIG9rID0gb3B0aW9ucy5leHByZXNzaW9ucy5ldmVyeShmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIF8uaXNGdW5jdGlvbihleHByZXNzaW9uLmV4cGxhaW4pICYmIF8uaXNGdW5jdGlvbihleHByZXNzaW9uLnRlc3QpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFvaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb250YWluc0F0TGVhc3QgZXhwcmVzc2lvbnMgYXJlIGludmFsaWQ6IEFuIGV4cGxhaW4gYW5kIGEgdGVzdCBmdW5jdGlvbiBzaG91bGQgYmUgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZXhwbGFpbjogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogY3JlYXRlSW50cm9NZXNzYWdlKCksXG4gICAgICBjb2RlOiAnY29udGFpbnNBdExlYXN0JyxcbiAgICAgIGZvcm1hdDogW29wdGlvbnMuYXRMZWFzdCwgb3B0aW9ucy5leHByZXNzaW9ucy5sZW5ndGhdLFxuICAgICAgaXRlbXM6IG9wdGlvbnMuZXhwcmVzc2lvbnMubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmV4cGxhaW4oKTsgfSlcbiAgICB9O1xuICB9LFxuICBtaXNzaW5nOiBmdW5jdGlvbiAob3B0aW9ucywgcGFzc3dvcmQpIHtcbiAgICB2YXIgZXhwcmVzc2lvbnMgPSBvcHRpb25zLmV4cHJlc3Npb25zICYmIG9wdGlvbnMuZXhwcmVzc2lvbnMubWFwKGZ1bmN0aW9uIChleHByZXNzaW9uKSB7XG4gICAgICB2YXIgZXhwbGFpbmVkID0gZXhwcmVzc2lvbi5leHBsYWluKCk7XG4gICAgICBleHBsYWluZWQudmVyaWZpZWQgPSBleHByZXNzaW9uLnRlc3QocGFzc3dvcmQpO1xuICAgICAgcmV0dXJuIGV4cGxhaW5lZDtcbiAgICB9KTtcblxuICAgIHZhciB2ZXJpZmllZENvdW50ID0gZXhwcmVzc2lvbnMucmVkdWNlKGZ1bmN0aW9uICh2YWwsIGV4KSB7IHJldHVybiB2YWwgKyAhIWV4LnZlcmlmaWVkOyB9LCAwKTtcbiAgICB2YXIgdmVyaWZpZWQgPSB2ZXJpZmllZENvdW50ID49IG9wdGlvbnMuYXRMZWFzdDtcblxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBjcmVhdGVJbnRyb01lc3NhZ2UoKSxcbiAgICAgIGNvZGU6ICdjb250YWluc0F0TGVhc3QnLFxuICAgICAgZm9ybWF0OiBbb3B0aW9ucy5hdExlYXN0LCBvcHRpb25zLmV4cHJlc3Npb25zLmxlbmd0aF0sXG4gICAgICBpdGVtczogZXhwcmVzc2lvbnMsXG4gICAgICB2ZXJpZmllZDogdmVyaWZpZWRcbiAgICB9O1xuICB9LFxuICBhc3NlcnQ6IGZ1bmN0aW9uIChvcHRpb25zLCBwYXNzd29yZCkge1xuICAgIGlmICghcGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgd29ya2luZ0V4cHJlc3Npb25zID0gb3B0aW9ucy5leHByZXNzaW9ucy5maWx0ZXIoZnVuY3Rpb24gKGV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybiBleHByZXNzaW9uLnRlc3QocGFzc3dvcmQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHdvcmtpbmdFeHByZXNzaW9ucy5sZW5ndGggPj0gb3B0aW9ucy5hdExlYXN0O1xuICB9LFxuICBjaGFyc2V0czogY29udGFpbnMuY2hhcnNldHNcbn07XG4iLCJ2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxuZnVuY3Rpb24gYXNzZXJ0KG9wdGlvbnMsIHBhc3N3b3JkKSB7XG4gIGlmICghcGFzc3dvcmQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaSwgY3VycmVudCA9IHtjOiBudWxsLCBjb3VudDogMH07XG5cbiAgZm9yIChpID0gMDsgaSA8IHBhc3N3b3JkLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGN1cnJlbnQuYyAhPT0gcGFzc3dvcmRbaV0pIHtcbiAgICAgIGN1cnJlbnQuYyA9IHBhc3N3b3JkW2ldO1xuICAgICAgY3VycmVudC5jb3VudCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQuY291bnQrKztcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudC5jb3VudCA+IG9wdGlvbnMubWF4KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBleHBsYWluIChvcHRpb25zLCB2ZXJpZmllZCkge1xuICAgIHZhciBleGFtcGxlID0gKG5ldyBBcnJheShvcHRpb25zLm1heCsyKSkuam9pbignYScpO1xuICAgIHZhciBkID0ge1xuICAgICAgbWVzc2FnZTogJ05vIG1vcmUgdGhhbiAlZCBpZGVudGljYWwgY2hhcmFjdGVycyBpbiBhIHJvdyAoZS5nLiwgXCIlc1wiIG5vdCBhbGxvd2VkKScsXG4gICAgICBjb2RlOiAnaWRlbnRpY2FsQ2hhcnMnLFxuICAgICAgZm9ybWF0OiBbb3B0aW9ucy5tYXgsIGV4YW1wbGVdXG4gICAgfTtcbiAgICBpZiAodmVyaWZpZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZC52ZXJpZmllZCA9IHZlcmlmaWVkO1xuICAgIH1cbiAgICByZXR1cm4gZDtcbiAgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ29wdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdCcpO1xuICAgIH1cblxuICAgIGlmICghXy5pc051bWJlcihvcHRpb25zLm1heCkgfHwgXy5pc05hTihvcHRpb25zLm1heCkgfHwgb3B0aW9ucy5tYXggPCAxICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXggc2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGV4cGxhaW46IGV4cGxhaW4sXG4gIG1pc3Npbmc6IGZ1bmN0aW9uIChvcHRpb25zLCBwYXNzd29yZCkge1xuICAgIHJldHVybiBleHBsYWluKG9wdGlvbnMsIGFzc2VydChvcHRpb25zLCBwYXNzd29yZCkpO1xuICB9LFxuICBhc3NlcnQ6IGFzc2VydFxufTtcbiIsInZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG4vKiBBIHJ1bGUgc2hvdWxkIGNvbnRhaW4gZXhwbGFpbiBhbmQgcnVsZSBtZXRob2RzICovXG4vLyBUT0RPIGV4cGxhaW4gZXhwbGFpblxuLy8gVE9ETyBleHBsYWluIG1pc3Npbmdcbi8vIFRPRE8gZXhwbGFpbiBhc3NlcnRcblxuZnVuY3Rpb24gYXNzZXJ0IChvcHRpb25zLCBwYXNzd29yZCkge1xuICByZXR1cm4gISFwYXNzd29yZCAmJiBvcHRpb25zLm1pbkxlbmd0aCA8PSBwYXNzd29yZC5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGV4cGxhaW4ob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5taW5MZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogJ05vbi1lbXB0eSBwYXNzd29yZCByZXF1aXJlZCcsXG4gICAgICBjb2RlOiAnbm9uRW1wdHknXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogJ0F0IGxlYXN0ICVkIGNoYXJhY3RlcnMgaW4gbGVuZ3RoJyxcbiAgICBmb3JtYXQ6IFtvcHRpb25zLm1pbkxlbmd0aF0sXG4gICAgY29kZTogJ2xlbmd0aEF0TGVhc3QnXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignb3B0aW9ucyBzaG91bGQgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFfLmlzTnVtYmVyKG9wdGlvbnMubWluTGVuZ3RoKSB8fCBfLmlzTmFOKG9wdGlvbnMubWluTGVuZ3RoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdsZW5ndGggZXhwZWN0cyBtaW5MZW5ndGggdG8gYmUgYSBub24temVybyBudW1iZXInKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZXhwbGFpbjogZXhwbGFpbixcbiAgbWlzc2luZzogZnVuY3Rpb24gKG9wdGlvbnMsIHBhc3N3b3JkKSB7XG4gICAgdmFyIGV4cGxhaW5lZCA9IGV4cGxhaW4ob3B0aW9ucyk7XG4gICAgZXhwbGFpbmVkLnZlcmlmaWVkID0gISFhc3NlcnQob3B0aW9ucywgcGFzc3dvcmQpO1xuICAgIHJldHVybiBleHBsYWluZWQ7XG4gIH0sXG4gIGFzc2VydDogYXNzZXJ0XG59O1xuIiwiLy8gICAgIFVuZGVyc2NvcmUuanMgMS43LjBcbi8vICAgICBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuLy8gICAgIChjKSAyMDA5LTIwMTQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLy8gQmFzZWxpbmUgc2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCBpbiB0aGUgYnJvd3Nlciwgb3IgYGV4cG9ydHNgIG9uIHRoZSBzZXJ2ZXIuXG4gIHZhciByb290ID0gdGhpcztcblxuICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYF9gIHZhcmlhYmxlLlxuICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fO1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyXG4gICAgcHVzaCAgICAgICAgICAgICA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSxcbiAgICBjb25jYXQgICAgICAgICAgID0gQXJyYXlQcm90by5jb25jYXQsXG4gICAgdG9TdHJpbmcgICAgICAgICA9IE9ialByb3RvLnRvU3RyaW5nLFxuICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhclxuICAgIG5hdGl2ZUlzQXJyYXkgICAgICA9IEFycmF5LmlzQXJyYXksXG4gICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsXG4gICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0LlxuICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfO1xuICAgIH1cbiAgICBleHBvcnRzLl8gPSBfO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuXyA9IF87XG4gIH1cblxuICAvLyBDdXJyZW50IHZlcnNpb24uXG4gIF8uVkVSU0lPTiA9ICcxLjcuMCc7XG5cbiAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGVmZmljaWVudCAoZm9yIGN1cnJlbnQgZW5naW5lcykgdmVyc2lvblxuICAvLyBvZiB0aGUgcGFzc2VkLWluIGNhbGxiYWNrLCB0byBiZSByZXBlYXRlZGx5IGFwcGxpZWQgaW4gb3RoZXIgVW5kZXJzY29yZVxuICAvLyBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVDYWxsYmFjayA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkgcmV0dXJuIGZ1bmM7XG4gICAgc3dpdGNoIChhcmdDb3VudCA9PSBudWxsID8gMyA6IGFyZ0NvdW50KSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9O1xuICAgICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEEgbW9zdGx5LWludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSBhcHBsaWVkXG4gIC8vIHRvIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24sIHJldHVybmluZyB0aGUgZGVzaXJlZCByZXN1bHQg4oCUIGVpdGhlclxuICAvLyBpZGVudGl0eSwgYW4gYXJiaXRyYXJ5IGNhbGxiYWNrLCBhIHByb3BlcnR5IG1hdGNoZXIsIG9yIGEgcHJvcGVydHkgYWNjZXNzb3IuXG4gIF8uaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBjcmVhdGVDYWxsYmFjayh2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpO1xuICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSkgcmV0dXJuIF8ubWF0Y2hlcyh2YWx1ZSk7XG4gICAgcmV0dXJuIF8ucHJvcGVydHkodmFsdWUpO1xuICB9O1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgcmF3IG9iamVjdHMgaW4gYWRkaXRpb24gdG8gYXJyYXktbGlrZXMuIFRyZWF0cyBhbGxcbiAgLy8gc3BhcnNlIGFycmF5LWxpa2VzIGFzIGlmIHRoZXkgd2VyZSBkZW5zZS5cbiAgXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICBpdGVyYXRlZSA9IGNyZWF0ZUNhbGxiYWNrKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgaSwgbGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSArbGVuZ3RoKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIGl0ZXJhdGVlID0gXy5pdGVyYXRlZShpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSBvYmoubGVuZ3RoICE9PSArb2JqLmxlbmd0aCAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICBjdXJyZW50S2V5O1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIHJlc3VsdHNbaW5kZXhdID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICB2YXIgcmVkdWNlRXJyb3IgPSAnUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZSc7XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdO1xuICAgIGl0ZXJhdGVlID0gY3JlYXRlQ2FsbGJhY2soaXRlcmF0ZWUsIGNvbnRleHQsIDQpO1xuICAgIHZhciBrZXlzID0gb2JqLmxlbmd0aCAhPT0gK29iai5sZW5ndGggJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IDAsIGN1cnJlbnRLZXk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgICBpZiAoIWxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcihyZWR1Y2VFcnJvcik7XG4gICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzW2luZGV4KytdIDogaW5kZXgrK107XG4gICAgfVxuICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgbWVtbyA9IGl0ZXJhdGVlKG1lbW8sIG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG5cbiAgLy8gVGhlIHJpZ2h0LWFzc29jaWF0aXZlIHZlcnNpb24gb2YgcmVkdWNlLCBhbHNvIGtub3duIGFzIGBmb2xkcmAuXG4gIF8ucmVkdWNlUmlnaHQgPSBfLmZvbGRyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107XG4gICAgaXRlcmF0ZWUgPSBjcmVhdGVDYWxsYmFjayhpdGVyYXRlZSwgY29udGV4dCwgNCk7XG4gICAgdmFyIGtleXMgPSBvYmoubGVuZ3RoICE9PSArIG9iai5sZW5ndGggJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGluZGV4ID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIGN1cnJlbnRLZXk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgICBpZiAoIWluZGV4KSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICAgIG1lbW8gPSBvYmpba2V5cyA/IGtleXNbLS1pbmRleF0gOiAtLWluZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIG1lbW8gPSBpdGVyYXRlZShtZW1vLCBvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgcHJlZGljYXRlID0gXy5pdGVyYXRlZShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIF8uc29tZShvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXG4gIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBwcmVkaWNhdGUgPSBfLml0ZXJhdGVlKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKF8uaXRlcmF0ZWUocHJlZGljYXRlKSksIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgcHJlZGljYXRlID0gXy5pdGVyYXRlZShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gb2JqLmxlbmd0aCAhPT0gK29iai5sZW5ndGggJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICBpbmRleCwgY3VycmVudEtleTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYW55YC5cbiAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIHByZWRpY2F0ZSA9IF8uaXRlcmF0ZWUocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IG9iai5sZW5ndGggIT09ICtvYmoubGVuZ3RoICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgaW5kZXgsIGN1cnJlbnRLZXk7XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIHZhbHVlICh1c2luZyBgPT09YCkuXG4gIC8vIEFsaWFzZWQgYXMgYGluY2x1ZGVgLlxuICBfLmNvbnRhaW5zID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCB0YXJnZXQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICBpZiAob2JqLmxlbmd0aCAhPT0gK29iai5sZW5ndGgpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgcmV0dXJuIF8uaW5kZXhPZihvYmosIHRhcmdldCkgPj0gMDtcbiAgfTtcblxuICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi5cbiAgXy5pbnZva2UgPSBmdW5jdGlvbihvYmosIG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHZhciBpc0Z1bmMgPSBfLmlzRnVuY3Rpb24obWV0aG9kKTtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIChpc0Z1bmMgPyBtZXRob2QgOiB2YWx1ZVttZXRob2RdKS5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVzKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVzKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gb2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGggPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlID4gcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBfLml0ZXJhdGVlKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgPCByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IF8uaXRlcmF0ZWUoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkIDwgbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHNldCA9IG9iaiAmJiBvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IHNldC5sZW5ndGg7XG4gICAgdmFyIHNodWZmbGVkID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIHJhbmQ7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByYW5kID0gXy5yYW5kb20oMCwgaW5kZXgpO1xuICAgICAgaWYgKHJhbmQgIT09IGluZGV4KSBzaHVmZmxlZFtpbmRleF0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gc2V0W2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uLlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICBpZiAob2JqLmxlbmd0aCAhPT0gK29iai5sZW5ndGgpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07XG4gICAgfVxuICAgIHJldHVybiBfLnNodWZmbGUob2JqKS5zbGljZSgwLCBNYXRoLm1heCgwLCBuKSk7XG4gIH07XG5cbiAgLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdGVlLlxuICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IF8uaXRlcmF0ZWUoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgY3JpdGVyaWE6IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdClcbiAgICAgIH07XG4gICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICAgIH0pLCAndmFsdWUnKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG4gIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gXy5pdGVyYXRlZShpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCB2YWx1ZSwga2V5KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgLy8gVXNlIGEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IHRoZSBzbWFsbGVzdCBpbmRleCBhdCB3aGljaFxuICAvLyBhbiBvYmplY3Qgc2hvdWxkIGJlIGluc2VydGVkIHNvIGFzIHRvIG1haW50YWluIG9yZGVyLiBVc2VzIGJpbmFyeSBzZWFyY2guXG4gIF8uc29ydGVkSW5kZXggPSBmdW5jdGlvbihhcnJheSwgb2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gXy5pdGVyYXRlZShpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IGxvdyArIGhpZ2ggPj4+IDE7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbWlkXSkgPCB2YWx1ZSkgbG93ID0gbWlkICsgMTsgZWxzZSBoaWdoID0gbWlkO1xuICAgIH1cbiAgICByZXR1cm4gbG93O1xuICB9O1xuXG4gIC8vIFNhZmVseSBjcmVhdGUgYSByZWFsLCBsaXZlIGFycmF5IGZyb20gYW55dGhpbmcgaXRlcmFibGUuXG4gIF8udG9BcnJheSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghb2JqKSByZXR1cm4gW107XG4gICAgaWYgKF8uaXNBcnJheShvYmopKSByZXR1cm4gc2xpY2UuY2FsbChvYmopO1xuICAgIGlmIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIF8udmFsdWVzKG9iaik7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LlxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwO1xuICAgIHJldHVybiBvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBzYXRpc2Z5IHRoZSBnaXZlblxuICAvLyBwcmVkaWNhdGUsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG4gIF8ucGFydGl0aW9uID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBfLml0ZXJhdGVlKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIHBhc3MgPSBbXSwgZmFpbCA9IFtdO1xuICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikge1xuICAgICAgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBvYmopID8gcGFzcyA6IGZhaWwpLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBbcGFzcywgZmFpbF07XG4gIH07XG5cbiAgLy8gQXJyYXkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcbiAgICBpZiAobiA8IDApIHJldHVybiBbXTtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aFxuICAvLyBgXy5tYXBgLlxuICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gKG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKSkpO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgTWF0aC5tYXgoYXJyYXkubGVuZ3RoIC0gbiwgMCkpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqXG4gIC8vIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5yZXN0ID0gXy50YWlsID0gXy5kcm9wID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKTtcbiAgfTtcblxuICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuXG4gIF8uY29tcGFjdCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBfLmlkZW50aXR5KTtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiBhIHJlY3Vyc2l2ZSBgZmxhdHRlbmAgZnVuY3Rpb24uXG4gIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oaW5wdXQsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KSB7XG4gICAgaWYgKHNoYWxsb3cgJiYgXy5ldmVyeShpbnB1dCwgXy5pc0FycmF5KSkge1xuICAgICAgcmV0dXJuIGNvbmNhdC5hcHBseShvdXRwdXQsIGlucHV0KTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGlucHV0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmICghXy5pc0FycmF5KHZhbHVlKSAmJiAhXy5pc0FyZ3VtZW50cyh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCFzdHJpY3QpIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2hhbGxvdykge1xuICAgICAgICBwdXNoLmFwcGx5KG91dHB1dCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgc3RyaWN0LCBvdXRwdXQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgZmFsc2UsIFtdKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbiAgXy53aXRob3V0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5kaWZmZXJlbmNlKGFycmF5LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5XG4gIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS5cbiAgLy8gQWxpYXNlZCBhcyBgdW5pcXVlYC5cbiAgXy51bmlxID0gXy51bmlxdWUgPSBmdW5jdGlvbihhcnJheSwgaXNTb3J0ZWQsIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiBbXTtcbiAgICBpZiAoIV8uaXNCb29sZWFuKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdGVlO1xuICAgICAgaXRlcmF0ZWUgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpdGVyYXRlZSAhPSBudWxsKSBpdGVyYXRlZSA9IF8uaXRlcmF0ZWUoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaV07XG4gICAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IHZhbHVlKSByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIHNlZW4gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGksIGFycmF5KTtcbiAgICAgICAgaWYgKF8uaW5kZXhPZihzZWVuLCBjb21wdXRlZCkgPCAwKSB7XG4gICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXy5pbmRleE9mKHJlc3VsdCwgdmFsdWUpIDwgMCkge1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mXG4gIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLnVuaW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8udW5pcShmbGF0dGVuKGFyZ3VtZW50cywgdHJ1ZSwgdHJ1ZSwgW10pKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgZXZlcnkgaXRlbSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlXG4gIC8vIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgICAgaWYgKF8uY29udGFpbnMocmVzdWx0LCBpdGVtKSkgY29udGludWU7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gZmxhdHRlbihzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIHRydWUsIHRydWUsIFtdKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci5cbiAgXy56aXAgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gW107XG4gICAgdmFyIGxlbmd0aCA9IF8ubWF4KGFyZ3VtZW50cywgJ2xlbmd0aCcpLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0c1tpXSA9IF8ucGx1Y2soYXJndW1lbnRzLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYFxuICAvLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2ZcbiAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICBfLm9iamVjdCA9IGZ1bmN0aW9uKGxpc3QsIHZhbHVlcykge1xuICAgIGlmIChsaXN0ID09IG51bGwpIHJldHVybiB7fTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2xpc3RbaV1bMF1dID0gbGlzdFtpXVsxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgaXNTb3J0ZWQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpc1NvcnRlZCkge1xuICAgICAgaWYgKHR5cGVvZiBpc1NvcnRlZCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpID0gaXNTb3J0ZWQgPCAwID8gTWF0aC5tYXgoMCwgbGVuZ3RoICsgaXNTb3J0ZWQpIDogaXNTb3J0ZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gXy5zb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpXSA9PT0gaXRlbSA/IGkgOiAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgXy5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBmcm9tKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgICB2YXIgaWR4ID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgZnJvbSA9PSAnbnVtYmVyJykge1xuICAgICAgaWR4ID0gZnJvbSA8IDAgPyBpZHggKyBmcm9tICsgMSA6IE1hdGgubWluKGlkeCwgZnJvbSArIDEpO1xuICAgIH1cbiAgICB3aGlsZSAoLS1pZHggPj0gMCkgaWYgKGFycmF5W2lkeF0gPT09IGl0ZW0pIHJldHVybiBpZHg7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2ZcbiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHN0ZXAgPSBzdGVwIHx8IDE7XG5cbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCksIDApO1xuICAgIHZhciByYW5nZSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrLCBzdGFydCArPSBzdGVwKSB7XG4gICAgICByYW5nZVtpZHhdID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIC8vIEZ1bmN0aW9uIChhaGVtKSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUmV1c2FibGUgY29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHByb3RvdHlwZSBzZXR0aW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZlxuICAvLyBhdmFpbGFibGUuXG4gIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHtcbiAgICB2YXIgYXJncywgYm91bmQ7XG4gICAgaWYgKG5hdGl2ZUJpbmQgJiYgZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kKSByZXR1cm4gbmF0aXZlQmluZC5hcHBseShmdW5jLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGlmICghXy5pc0Z1bmN0aW9uKGZ1bmMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdCaW5kIG11c3QgYmUgY2FsbGVkIG9uIGEgZnVuY3Rpb24nKTtcbiAgICBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgYm91bmQpKSByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIEN0b3IucHJvdG90eXBlID0gZnVuYy5wcm90b3R5cGU7XG4gICAgICB2YXIgc2VsZiA9IG5ldyBDdG9yO1xuICAgICAgQ3Rvci5wcm90b3R5cGUgPSBudWxsO1xuICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICBpZiAoXy5pc09iamVjdChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG5cbiAgLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0c1xuICAvLyBhcmd1bWVudHMgcHJlLWZpbGxlZCwgd2l0aG91dCBjaGFuZ2luZyBpdHMgZHluYW1pYyBgdGhpc2AgY29udGV4dC4gXyBhY3RzXG4gIC8vIGFzIGEgcGxhY2Vob2xkZXIsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmUgcHJlLWZpbGxlZC5cbiAgXy5wYXJ0aWFsID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICAgIHZhciBhcmdzID0gYm91bmRBcmdzLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJncy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJnc1tpXSA9PT0gXykgYXJnc1tpXSA9IGFyZ3VtZW50c1twb3NpdGlvbisrXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGFyZ3VtZW50cy5sZW5ndGgpIGFyZ3MucHVzaChhcmd1bWVudHNbcG9zaXRpb24rK10pO1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHNcbiAgLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzXG4gIC8vIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC5cbiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGksIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIGtleTtcbiAgICBpZiAobGVuZ3RoIDw9IDEpIHRocm93IG5ldyBFcnJvcignYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcycpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gYXJndW1lbnRzW2ldO1xuICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgICB2YXIgYWRkcmVzcyA9IGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5O1xuICAgICAgaWYgKCFfLmhhcyhjYWNoZSwgYWRkcmVzcykpIGNhY2hlW2FkZHJlc3NdID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGNhY2hlW2FkZHJlc3NdO1xuICAgIH07XG4gICAgbWVtb2l6ZS5jYWNoZSA9IHt9O1xuICAgIHJldHVybiBtZW1vaXplO1xuICB9O1xuXG4gIC8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHNcbiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLlxuICBfLmRlbGF5ID0gZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9LCB3YWl0KTtcbiAgfTtcblxuICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXNcbiAgLy8gY2xlYXJlZC5cbiAgXy5kZWZlciA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICByZXR1cm4gXy5kZWxheS5hcHBseShfLCBbZnVuYywgMV0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbiAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xuICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuICAvLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbiAgXy50aHJvdHRsZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICAgIHZhciB0aW1lb3V0ID0gbnVsbDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IF8ubm93KCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBub3cgPSBfLm5vdygpO1xuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdztcbiAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgdmFyIHRpbWVvdXQsIGFyZ3MsIGNvbnRleHQsIHRpbWVzdGFtcCwgcmVzdWx0O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGFzdCA9IF8ubm93KCkgLSB0aW1lc3RhbXA7XG5cbiAgICAgIGlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID4gMCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB0aW1lc3RhbXAgPSBfLm5vdygpO1xuICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChjYWxsTm93KSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcbiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG4gIF8ubmVnYXRlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgYWZ0ZXIgYmVpbmcgY2FsbGVkIE4gdGltZXMuXG4gIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzIDwgMSkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIGJlZm9yZSBiZWluZyBjYWxsZWQgTiB0aW1lcy5cbiAgXy5iZWZvcmUgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHZhciBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzID4gMCkge1xuICAgICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVuYyA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBfLnBhcnRpYWwoXy5iZWZvcmUsIDIpO1xuXG4gIC8vIE9iamVjdCBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgT2JqZWN0LmtleXNgXG4gIF8ua2V5cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gW107XG4gICAgaWYgKG5hdGl2ZUtleXMpIHJldHVybiBuYXRpdmVLZXlzKG9iaik7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSB0aGUgdmFsdWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuXG4gIF8udmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHZhbHVlcyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVzW2ldID0gb2JqW2tleXNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIC8vIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYSBsaXN0IG9mIGBba2V5LCB2YWx1ZV1gIHBhaXJzLlxuICBfLnBhaXJzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHBhaXJzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyc1tpXSA9IFtrZXlzW2ldLCBvYmpba2V5c1tpXV1dO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgdmFyIHNvdXJjZSwgcHJvcDtcbiAgICBmb3IgKHZhciBpID0gMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgcHJvcCkpIHtcbiAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ucGljayA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0ge30sIGtleTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGl0ZXJhdGVlID0gY3JlYXRlQ2FsbGJhY2soaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBjb25jYXQuYXBwbHkoW10sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICBvYmogPSBuZXcgT2JqZWN0KG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoa2V5IGluIG9iaikgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ub21pdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaXRlcmF0ZWUgPSBfLm5lZ2F0ZShpdGVyYXRlZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5tYXAoY29uY2F0LmFwcGx5KFtdLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpLCBTdHJpbmcpO1xuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiAhXy5jb250YWlucyhrZXlzLCBrZXkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIF8ucGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgZm9yICh2YXIgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHZvaWQgMCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cbiAgXy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7XG4gIH07XG5cbiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLlxuICAvLyBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiwgaW5cbiAgLy8gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpbiB0aGUgY2hhaW4uXG4gIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikge1xuICAgIGludGVyY2VwdG9yKG9iaik7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICB2YXIgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICAgIC8vIEEgc3RyaWN0IGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYG51bGwgPT0gdW5kZWZpbmVkYC5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICByZXR1cm4gJycgKyBhID09PSAnJyArIGI7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAvLyBPYmplY3QoTmFOKSBpcyBlcXVpdmFsZW50IHRvIE5hTlxuICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG4gICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzXG4gICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cbiAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgaWYgKFxuICAgICAgYUN0b3IgIT09IGJDdG9yICYmXG4gICAgICAvLyBIYW5kbGUgT2JqZWN0LmNyZWF0ZSh4KSBjYXNlc1xuICAgICAgJ2NvbnN0cnVjdG9yJyBpbiBhICYmICdjb25zdHJ1Y3RvcicgaW4gYiAmJlxuICAgICAgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiZcbiAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG4gICAgdmFyIHNpemUsIHJlc3VsdDtcbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIHNpemUgPSBhLmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpemUgPT09IGIubGVuZ3RoO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhhKSwga2V5O1xuICAgICAgc2l6ZSA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgcmVzdWx0ID0gXy5rZXlzKGIpLmxlbmd0aCA9PT0gc2l6ZTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgd2hpbGUgKHNpemUtLSkge1xuICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICAgIGtleSA9IGtleXNbc2l6ZV07XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID0gXy5oYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLlxuICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGVxKGEsIGIsIFtdLCBbXSk7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiBhcnJheSwgc3RyaW5nLCBvciBvYmplY3QgZW1wdHk/XG4gIC8vIEFuIFwiZW1wdHlcIiBvYmplY3QgaGFzIG5vIGVudW1lcmFibGUgb3duLXByb3BlcnRpZXMuXG4gIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKF8uaXNBcnJheShvYmopIHx8IF8uaXNTdHJpbmcob2JqKSB8fCBfLmlzQXJndW1lbnRzKG9iaikpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4gIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5XG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfTtcblxuICAvLyBBZGQgc29tZSBpc1R5cGUgbWV0aG9kczogaXNBcmd1bWVudHMsIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc051bWJlciwgaXNEYXRlLCBpc1JlZ0V4cC5cbiAgXy5lYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgbmFtZSArICddJztcbiAgICB9O1xuICB9KTtcblxuICAvLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFKSwgd2hlcmVcbiAgLy8gdGhlcmUgaXNuJ3QgYW55IGluc3BlY3RhYmxlIFwiQXJndW1lbnRzXCIgdHlwZS5cbiAgaWYgKCFfLmlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHtcbiAgICBfLmlzQXJndW1lbnRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gXy5oYXMob2JqLCAnY2FsbGVlJyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS4gV29yayBhcm91bmQgYW4gSUUgMTEgYnVnLlxuICBpZiAodHlwZW9mIC8uLyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJyB8fCBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyP1xuICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLlxuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT09ICtvYmo7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIF8uY29uc3RhbnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICB9O1xuXG4gIF8ubm9vcCA9IGZ1bmN0aW9uKCl7fTtcblxuICBfLnByb3BlcnR5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIHByZWRpY2F0ZSBmb3IgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xuICAgIHZhciBwYWlycyA9IF8ucGFpcnMoYXR0cnMpLCBsZW5ndGggPSBwYWlycy5sZW5ndGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gIWxlbmd0aDtcbiAgICAgIG9iaiA9IG5ldyBPYmplY3Qob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXSwga2V5ID0gcGFpclswXTtcbiAgICAgICAgaWYgKHBhaXJbMV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBpdGVyYXRlZSA9IGNyZWF0ZUNhbGxiYWNrKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRlZShpKTtcbiAgICByZXR1cm4gYWNjdW07XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gYW5kIG1heCAoaW5jbHVzaXZlKS5cbiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gIH07XG5cbiAgLy8gQSAocG9zc2libHkgZmFzdGVyKSB3YXkgdG8gZ2V0IHRoZSBjdXJyZW50IHRpbWVzdGFtcCBhcyBhbiBpbnRlZ2VyLlxuICBfLm5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfTtcblxuICAgLy8gTGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy5cbiAgdmFyIGVzY2FwZU1hcCA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmI3gyNzsnLFxuICAgICdgJzogJyYjeDYwOydcbiAgfTtcbiAgdmFyIHVuZXNjYXBlTWFwID0gXy5pbnZlcnQoZXNjYXBlTWFwKTtcblxuICAvLyBGdW5jdGlvbnMgZm9yIGVzY2FwaW5nIGFuZCB1bmVzY2FwaW5nIHN0cmluZ3MgdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXG4gIHZhciBjcmVhdGVFc2NhcGVyID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGVzY2FwZXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgcmV0dXJuIG1hcFttYXRjaF07XG4gICAgfTtcbiAgICAvLyBSZWdleGVzIGZvciBpZGVudGlmeWluZyBhIGtleSB0aGF0IG5lZWRzIHRvIGJlIGVzY2FwZWRcbiAgICB2YXIgc291cmNlID0gJyg/OicgKyBfLmtleXMobWFwKS5qb2luKCd8JykgKyAnKSc7XG4gICAgdmFyIHRlc3RSZWdleHAgPSBSZWdFeHAoc291cmNlKTtcbiAgICB2YXIgcmVwbGFjZVJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UsICdnJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nID09IG51bGwgPyAnJyA6ICcnICsgc3RyaW5nO1xuICAgICAgcmV0dXJuIHRlc3RSZWdleHAudGVzdChzdHJpbmcpID8gc3RyaW5nLnJlcGxhY2UocmVwbGFjZVJlZ2V4cCwgZXNjYXBlcikgOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgXy5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKGVzY2FwZU1hcCk7XG4gIF8udW5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKHVuZXNjYXBlTWFwKTtcblxuICAvLyBJZiB0aGUgdmFsdWUgb2YgdGhlIG5hbWVkIGBwcm9wZXJ0eWAgaXMgYSBmdW5jdGlvbiB0aGVuIGludm9rZSBpdCB3aXRoIHRoZVxuICAvLyBgb2JqZWN0YCBhcyBjb250ZXh0OyBvdGhlcndpc2UsIHJldHVybiBpdC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIHZhciB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyBvYmplY3RbcHJvcGVydHldKCkgOiB2YWx1ZTtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLlxuICAvLyBVc2VmdWwgZm9yIHRlbXBvcmFyeSBET00gaWRzLlxuICB2YXIgaWRDb3VudGVyID0gMDtcbiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBpZCA9ICsraWRDb3VudGVyICsgJyc7XG4gICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7XG4gIH07XG5cbiAgLy8gQnkgZGVmYXVsdCwgVW5kZXJzY29yZSB1c2VzIEVSQi1zdHlsZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLCBjaGFuZ2UgdGhlXG4gIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgXy50ZW1wbGF0ZVNldHRpbmdzID0ge1xuICAgIGV2YWx1YXRlICAgIDogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICBpbnRlcnBvbGF0ZSA6IC88JT0oW1xcc1xcU10rPyklPi9nLFxuICAgIGVzY2FwZSAgICAgIDogLzwlLShbXFxzXFxTXSs/KSU+L2dcbiAgfTtcblxuICAvLyBXaGVuIGN1c3RvbWl6aW5nIGB0ZW1wbGF0ZVNldHRpbmdzYCwgaWYgeW91IGRvbid0IHdhbnQgdG8gZGVmaW5lIGFuXG4gIC8vIGludGVycG9sYXRpb24sIGV2YWx1YXRpb24gb3IgZXNjYXBpbmcgcmVnZXgsIHdlIG5lZWQgb25lIHRoYXQgaXNcbiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guXG4gIHZhciBub01hdGNoID0gLyguKV4vO1xuXG4gIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhXG4gIC8vIHN0cmluZyBsaXRlcmFsLlxuICB2YXIgZXNjYXBlcyA9IHtcbiAgICBcIidcIjogICAgICBcIidcIixcbiAgICAnXFxcXCc6ICAgICAnXFxcXCcsXG4gICAgJ1xccic6ICAgICAncicsXG4gICAgJ1xcbic6ICAgICAnbicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIHZhciBlc2NhcGVyID0gL1xcXFx8J3xcXHJ8XFxufFxcdTIwMjh8XFx1MjAyOS9nO1xuXG4gIHZhciBlc2NhcGVDaGFyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07XG4gIH07XG5cbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuICAvLyBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgLy8gTkI6IGBvbGRTZXR0aW5nc2Agb25seSBleGlzdHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICBfLnRlbXBsYXRlID0gZnVuY3Rpb24odGV4dCwgc2V0dGluZ3MsIG9sZFNldHRpbmdzKSB7XG4gICAgaWYgKCFzZXR0aW5ncyAmJiBvbGRTZXR0aW5ncykgc2V0dGluZ3MgPSBvbGRTZXR0aW5ncztcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBSZWdFeHAoW1xuICAgICAgKHNldHRpbmdzLmVzY2FwZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuaW50ZXJwb2xhdGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZVxuICAgIF0uam9pbignfCcpICsgJ3wkJywgJ2cnKTtcblxuICAgIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc291cmNlID0gXCJfX3ArPSdcIjtcbiAgICB0ZXh0LnJlcGxhY2UobWF0Y2hlciwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZSwgaW50ZXJwb2xhdGUsIGV2YWx1YXRlLCBvZmZzZXQpIHtcbiAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UoZXNjYXBlciwgZXNjYXBlQ2hhcik7XG4gICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgaWYgKGVzY2FwZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGVzY2FwZSArIFwiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGludGVycG9sYXRlICsgXCIpKT09bnVsbD8nJzpfX3QpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgIH1cblxuICAgICAgLy8gQWRvYmUgVk1zIG5lZWQgdGhlIG1hdGNoIHJldHVybmVkIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3Qgb2ZmZXN0LlxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG5cbiAgICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgICAgc291cmNlICsgJ3JldHVybiBfX3A7XFxuJztcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonLCAnXycsIHNvdXJjZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIHZhciB0ZW1wbGF0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTtcbiAgICB9O1xuXG4gICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLlxuICAgIHZhciBhcmd1bWVudCA9IHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonO1xuICAgIHRlbXBsYXRlLnNvdXJjZSA9ICdmdW5jdGlvbignICsgYXJndW1lbnQgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9O1xuXG4gIC8vIEFkZCBhIFwiY2hhaW5cIiBmdW5jdGlvbi4gU3RhcnQgY2hhaW5pbmcgYSB3cmFwcGVkIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLmNoYWluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGluc3RhbmNlID0gXyhvYmopO1xuICAgIGluc3RhbmNlLl9jaGFpbiA9IHRydWU7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIC8vIE9PUFxuICAvLyAtLS0tLS0tLS0tLS0tLS1cbiAgLy8gSWYgVW5kZXJzY29yZSBpcyBjYWxsZWQgYXMgYSBmdW5jdGlvbiwgaXQgcmV0dXJucyBhIHdyYXBwZWQgb2JqZWN0IHRoYXRcbiAgLy8gY2FuIGJlIHVzZWQgT08tc3R5bGUuIFRoaXMgd3JhcHBlciBob2xkcyBhbHRlcmVkIHZlcnNpb25zIG9mIGFsbCB0aGVcbiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC5cblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29udGludWUgY2hhaW5pbmcgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gIHZhciByZXN1bHQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdO1xuICAgICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XG4gICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIGZ1bmMuYXBwbHkoXywgYXJncykpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBBZGQgYWxsIG9mIHRoZSBVbmRlcnNjb3JlIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlciBvYmplY3QuXG4gIF8ubWl4aW4oXyk7XG5cbiAgLy8gQWRkIGFsbCBtdXRhdG9yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9iaiA9IHRoaXMuX3dyYXBwZWQ7XG4gICAgICBtZXRob2QuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKChuYW1lID09PSAnc2hpZnQnIHx8IG5hbWUgPT09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBFeHRyYWN0cyB0aGUgcmVzdWx0IGZyb20gYSB3cmFwcGVkIGFuZCBjaGFpbmVkIG9iamVjdC5cbiAgXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBBTUQgcmVnaXN0cmF0aW9uIGhhcHBlbnMgYXQgdGhlIGVuZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIEFNRCBsb2FkZXJzXG4gIC8vIHRoYXQgbWF5IG5vdCBlbmZvcmNlIG5leHQtdHVybiBzZW1hbnRpY3Mgb24gbW9kdWxlcy4gRXZlbiB0aG91Z2ggZ2VuZXJhbFxuICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzXG4gIC8vIGFzIGEgbmFtZWQgbW9kdWxlIGJlY2F1c2UsIGxpa2UgalF1ZXJ5LCBpdCBpcyBhIGJhc2UgbGlicmFyeSB0aGF0IGlzXG4gIC8vIHBvcHVsYXIgZW5vdWdoIHRvIGJlIGJ1bmRsZWQgaW4gYSB0aGlyZCBwYXJ0eSBsaWIsIGJ1dCBub3QgYmUgcGFydCBvZlxuICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuXG4gIC8vIGFub255bW91cyBkZWZpbmUoKSBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGxvYWRlciByZXF1ZXN0LlxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKCd1bmRlcnNjb3JlJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIvKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjEuMVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE0LTEyLTE1XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcblxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH07XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG1hdGNoLCBlbGVtLCBtLCBub2RlVHlwZSxcblx0XHQvLyBRU0EgdmFyc1xuXHRcdGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yO1xuXG5cdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHRpZiAoICFzZWxlY3RvciB8fCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHRpZiAoIChub2RlVHlwZSA9IGNvbnRleHQubm9kZVR5cGUpICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRpZiAoIGRvY3VtZW50SXNIVE1MICYmICFzZWVkICkge1xuXG5cdFx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyB3aGVuIHBvc3NpYmxlIChlLmcuLCBub3QgdW5kZXIgRG9jdW1lbnRGcmFnbWVudClcblx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIiNJRFwiKVxuXHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApO1xuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoalF1ZXJ5ICM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUsIE9wZXJhLCBhbmQgV2Via2l0IHJldHVybiBpdGVtc1xuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnRcblx0XHRcdFx0XHRpZiAoIGNvbnRleHQub3duZXJEb2N1bWVudCAmJiAoZWxlbSA9IGNvbnRleHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJiBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIlRBR1wiKVxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIuQ0xBU1NcIilcblx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUVNBIHBhdGhcblx0XHRpZiAoIHN1cHBvcnQucXNhICYmICghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cdFx0XHRuaWQgPSBvbGQgPSBleHBhbmRvO1xuXHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRuZXdTZWxlY3RvciA9IG5vZGVUeXBlICE9PSAxICYmIHNlbGVjdG9yO1xuXG5cdFx0XHQvLyBxU0Egd29ya3Mgc3RyYW5nZWx5IG9uIEVsZW1lbnQtcm9vdGVkIHF1ZXJpZXNcblx0XHRcdC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3Rcblx0XHRcdC8vIGFuZCB3b3JraW5nIHVwIGZyb20gdGhlcmUgKFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGUgdGVjaG5pcXVlKVxuXHRcdFx0Ly8gSUUgOCBkb2Vzbid0IHdvcmsgb24gb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cblx0XHRcdFx0aWYgKCAob2xkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkgKSB7XG5cdFx0XHRcdFx0bmlkID0gb2xkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCBuaWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuaWQgPSBcIltpZD0nXCIgKyBuaWQgKyBcIiddIFwiO1xuXG5cdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWQgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dDtcblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbihcIixcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2gocXNhRXJyb3IpIHtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoICFvbGQgKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7RnVuY3Rpb24oc3RyaW5nLCBPYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZGl2LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIElmIG5vIGRvY3VtZW50IGFuZCBkb2N1bWVudEVsZW1lbnQgaXMgYXZhaWxhYmxlLCByZXR1cm5cblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBTZXQgb3VyIGRvY3VtZW50XG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0cGFyZW50ID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdC8vIFN1cHBvcnQ6IElFPjhcblx0Ly8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLFxuXHQvLyBJRSB3aWxsIHRocm93IFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIGFjY2Vzc2luZyBcImRvY3VtZW50XCIgdmFyaWFibGUsIHNlZSBqUXVlcnkgIzEzOTM2XG5cdC8vIElFNi04IGRvIG5vdCBzdXBwb3J0IHRoZSBkZWZhdWx0VmlldyBwcm9wZXJ0eSBzbyBwYXJlbnQgd2lsbCBiZSB1bmRlZmluZWRcblx0aWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xuXHRcdC8vIElFMTEgZG9lcyBub3QgaGF2ZSBhdHRhY2hFdmVudCwgc28gYWxsIG11c3Qgc3VmZmVyXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXHRcdH0gZWxzZSBpZiAoIHBhcmVudC5hdHRhY2hFdmVudCApIHtcblx0XHRcdHBhcmVudC5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogU3VwcG9ydCB0ZXN0c1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2MgKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2MuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xuXHRcdFx0XHRyZXR1cm4gbSAmJiBtLnBhcmVudE5vZGUgPyBbIG0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdC8vIFN1cHBvcnQ6IElFNi83XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdGRlbGV0ZSBFeHByLmZpbmRbXCJJRFwiXTtcblxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2MucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXGZdJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC4yKywgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjcrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBkb2VzIG5vdCBpbXBsZW1lbnQgaW5jbHVzaXZlIGRlc2NlbmRlbnRcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jIHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jIHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2MgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvYyA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvYztcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgZGlmZiwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBwYXJlbnRbIGV4cGFuZG8gXSB8fCAocGFyZW50WyBleHBhbmRvIF0gPSB7fSk7XG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsxXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzJdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHVzZUNhY2hlICYmIChjYWNoZSA9IChlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSkgJiYgY2FjaGVbMF0gPT09IGRpcnJ1bnMgKSB7XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVsxXTtcblxuXHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKSBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJiArK2RpZmYgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQobm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZTtcblx0XHR9LFxuXG5cdFx0XCJkaXNhYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGRpciA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBkaXIgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cdFx0XHRcdFx0XHRpZiAoIChvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGRpciBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgIT09IGRvY3VtZW50ICYmIGNvbnRleHQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBLZWVwIGBpYCBhIHN0cmluZyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgc28gYG1hdGNoZWRDb3VudGAgd2lsbCBiZSBcIjAwXCIgYmVsb3dcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG5vIHNlZWQgYW5kIG9ubHkgb25lIGdyb3VwXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gVGFrZSBhIHNob3J0Y3V0IGFuZCBzZXQgdGhlIGNvbnRleHQgaWYgdGhlIHJvb3Qgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHRyc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBFWFBPU0VcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIFNpenpsZTsgfSk7XG4vLyBTaXp6bGUgcmVxdWlyZXMgdGhhdCB0aGVyZSBiZSBhIGdsb2JhbCB3aW5kb3cgaW4gQ29tbW9uLUpTIGxpa2UgZW52aXJvbm1lbnRzXG59IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzICkge1xuXHRtb2R1bGUuZXhwb3J0cyA9IFNpenpsZTtcbn0gZWxzZSB7XG5cdHdpbmRvdy5TaXp6bGUgPSBTaXp6bGU7XG59XG4vLyBFWFBPU0VcblxufSkoIHdpbmRvdyApO1xuIiwiXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0cmltO1xuXG5mdW5jdGlvbiB0cmltKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5leHBvcnRzLmxlZnQgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpO1xufTtcblxuZXhwb3J0cy5yaWdodCA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59O1xuIiwiLy8gICAgIFVuZGVyc2NvcmUuanMgMS41LjJcbi8vICAgICBodHRwOi8vdW5kZXJzY29yZWpzLm9yZ1xuLy8gICAgIChjKSAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgLy8gQmFzZWxpbmUgc2V0dXBcbiAgLy8gLS0tLS0tLS0tLS0tLS1cblxuICAvLyBFc3RhYmxpc2ggdGhlIHJvb3Qgb2JqZWN0LCBgd2luZG93YCBpbiB0aGUgYnJvd3Nlciwgb3IgYGV4cG9ydHNgIG9uIHRoZSBzZXJ2ZXIuXG4gIHZhciByb290ID0gdGhpcztcblxuICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYF9gIHZhcmlhYmxlLlxuICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fO1xuXG4gIC8vIEVzdGFibGlzaCB0aGUgb2JqZWN0IHRoYXQgZ2V0cyByZXR1cm5lZCB0byBicmVhayBvdXQgb2YgYSBsb29wIGl0ZXJhdGlvbi5cbiAgdmFyIGJyZWFrZXIgPSB7fTtcblxuICAvLyBTYXZlIGJ5dGVzIGluIHRoZSBtaW5pZmllZCAoYnV0IG5vdCBnemlwcGVkKSB2ZXJzaW9uOlxuICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBGdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbiAgLy8gQ3JlYXRlIHF1aWNrIHJlZmVyZW5jZSB2YXJpYWJsZXMgZm9yIHNwZWVkIGFjY2VzcyB0byBjb3JlIHByb3RvdHlwZXMuXG4gIHZhclxuICAgIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsXG4gICAgc2xpY2UgICAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2UsXG4gICAgY29uY2F0ICAgICAgICAgICA9IEFycmF5UHJvdG8uY29uY2F0LFxuICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXJcbiAgICBuYXRpdmVGb3JFYWNoICAgICAgPSBBcnJheVByb3RvLmZvckVhY2gsXG4gICAgbmF0aXZlTWFwICAgICAgICAgID0gQXJyYXlQcm90by5tYXAsXG4gICAgbmF0aXZlUmVkdWNlICAgICAgID0gQXJyYXlQcm90by5yZWR1Y2UsXG4gICAgbmF0aXZlUmVkdWNlUmlnaHQgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodCxcbiAgICBuYXRpdmVGaWx0ZXIgICAgICAgPSBBcnJheVByb3RvLmZpbHRlcixcbiAgICBuYXRpdmVFdmVyeSAgICAgICAgPSBBcnJheVByb3RvLmV2ZXJ5LFxuICAgIG5hdGl2ZVNvbWUgICAgICAgICA9IEFycmF5UHJvdG8uc29tZSxcbiAgICBuYXRpdmVJbmRleE9mICAgICAgPSBBcnJheVByb3RvLmluZGV4T2YsXG4gICAgbmF0aXZlTGFzdEluZGV4T2YgID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZixcbiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kO1xuXG4gIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LlxuICB2YXIgXyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqO1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBfKSkgcmV0dXJuIG5ldyBfKG9iaik7XG4gICAgdGhpcy5fd3JhcHBlZCA9IG9iajtcbiAgfTtcblxuICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKk5vZGUuanMqKiwgd2l0aFxuICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIGluXG4gIC8vIHRoZSBicm93c2VyLCBhZGQgYF9gIGFzIGEgZ2xvYmFsIG9iamVjdCB2aWEgYSBzdHJpbmcgaWRlbnRpZmllcixcbiAgLy8gZm9yIENsb3N1cmUgQ29tcGlsZXIgXCJhZHZhbmNlZFwiIG1vZGUuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuNS4yJztcblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIG9iamVjdHMgd2l0aCB0aGUgYnVpbHQtaW4gYGZvckVhY2hgLCBhcnJheXMsIGFuZCByYXcgb2JqZWN0cy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGZvckVhY2hgIGlmIGF2YWlsYWJsZS5cbiAgdmFyIGVhY2ggPSBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm47XG4gICAgaWYgKG5hdGl2ZUZvckVhY2ggJiYgb2JqLmZvckVhY2ggPT09IG5hdGl2ZUZvckVhY2gpIHtcbiAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopID09PSBicmVha2VyKSByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0b3IgdG8gZWFjaCBlbGVtZW50LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbWFwYCBpZiBhdmFpbGFibGUuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlTWFwICYmIG9iai5tYXAgPT09IG5hdGl2ZU1hcCkgcmV0dXJuIG9iai5tYXAoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJlc3VsdHMucHVzaChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIHZhciByZWR1Y2VFcnJvciA9ICdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJztcblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGByZWR1Y2VgIGlmIGF2YWlsYWJsZS5cbiAgXy5yZWR1Y2UgPSBfLmZvbGRsID0gXy5pbmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdO1xuICAgIGlmIChuYXRpdmVSZWR1Y2UgJiYgb2JqLnJlZHVjZSA9PT0gbmF0aXZlUmVkdWNlKSB7XG4gICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlKGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2UoaXRlcmF0b3IpO1xuICAgIH1cbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoIWluaXRpYWwpIHtcbiAgICAgICAgbWVtbyA9IHZhbHVlO1xuICAgICAgICBpbml0aWFsID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbml0aWFsKSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuXG4gIF8ucmVkdWNlUmlnaHQgPSBfLmZvbGRyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgbWVtbywgY29udGV4dCkge1xuICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTtcbiAgICBpZiAobmF0aXZlUmVkdWNlUmlnaHQgJiYgb2JqLnJlZHVjZVJpZ2h0ID09PSBuYXRpdmVSZWR1Y2VSaWdodCkge1xuICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBpbml0aWFsID8gb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvcik7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09ICtsZW5ndGgpIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB9XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaW5kZXggPSBrZXlzID8ga2V5c1stLWxlbmd0aF0gOiAtLWxlbmd0aDtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gb2JqW2luZGV4XTtcbiAgICAgICAgaW5pdGlhbCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZW1vID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBtZW1vLCBvYmpbaW5kZXhdLCBpbmRleCwgbGlzdCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFpbml0aWFsKSB0aHJvdyBuZXcgVHlwZUVycm9yKHJlZHVjZUVycm9yKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuXG4gIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgYW55KG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmaWx0ZXJgIGlmIGF2YWlsYWJsZS5cbiAgLy8gQWxpYXNlZCBhcyBgc2VsZWN0YC5cbiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7XG4gICAgaWYgKG5hdGl2ZUZpbHRlciAmJiBvYmouZmlsdGVyID09PSBuYXRpdmVGaWx0ZXIpIHJldHVybiBvYmouZmlsdGVyKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuXG4gIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuICFpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgfSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBldmVyeWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgfHwgKGl0ZXJhdG9yID0gXy5pZGVudGl0eSk7XG4gICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChuYXRpdmVFdmVyeSAmJiBvYmouZXZlcnkgPT09IG5hdGl2ZUV2ZXJ5KSByZXR1cm4gb2JqLmV2ZXJ5KGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAoIShyZXN1bHQgPSByZXN1bHQgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSkgcmV0dXJuIGJyZWFrZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuICEhcmVzdWx0O1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgc29tZWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbnlgLlxuICB2YXIgYW55ID0gXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgfHwgKGl0ZXJhdG9yID0gXy5pZGVudGl0eSk7XG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAobmF0aXZlU29tZSAmJiBvYmouc29tZSA9PT0gbmF0aXZlU29tZSkgcmV0dXJuIG9iai5zb21lKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocmVzdWx0IHx8IChyZXN1bHQgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjtcbiAgICB9KTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiB2YWx1ZSAodXNpbmcgYD09PWApLlxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlYC5cbiAgXy5jb250YWlucyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgb2JqLmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xO1xuICAgIHJldHVybiBhbnkob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0YXJnZXQ7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiAoaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXSkuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXG4gIF8ucGx1Y2sgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuIHZhbHVlW2tleV07IH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMsIGZpcnN0KSB7XG4gICAgaWYgKF8uaXNFbXB0eShhdHRycykpIHJldHVybiBmaXJzdCA/IHZvaWQgMCA6IFtdO1xuICAgIHJldHVybiBfW2ZpcnN0ID8gJ2ZpbmQnIDogJ2ZpbHRlciddKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBhdHRycykge1xuICAgICAgICBpZiAoYXR0cnNba2V5XSAhPT0gdmFsdWVba2V5XSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy53aGVyZShvYmosIGF0dHJzLCB0cnVlKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCBvciAoZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIC8vIENhbid0IG9wdGltaXplIGFycmF5cyBvZiBpbnRlZ2VycyBsb25nZXIgdGhhbiA2NSw1MzUgZWxlbWVudHMuXG4gIC8vIFNlZSBbV2ViS2l0IEJ1ZyA4MDc5N10oaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTgwNzk3KVxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBvYmopO1xuICAgIH1cbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gLUluZmluaXR5O1xuICAgIHZhciByZXN1bHQgPSB7Y29tcHV0ZWQgOiAtSW5maW5pdHksIHZhbHVlOiAtSW5maW5pdHl9O1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7XG4gICAgICBjb21wdXRlZCA+IHJlc3VsdC5jb21wdXRlZCAmJiAocmVzdWx0ID0ge3ZhbHVlIDogdmFsdWUsIGNvbXB1dGVkIDogY29tcHV0ZWR9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaWYgKCFpdGVyYXRvciAmJiBfLmlzQXJyYXkob2JqKSAmJiBvYmpbMF0gPT09ICtvYmpbMF0gJiYgb2JqLmxlbmd0aCA8IDY1NTM1KSB7XG4gICAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgb2JqKTtcbiAgICB9XG4gICAgaWYgKCFpdGVyYXRvciAmJiBfLmlzRW1wdHkob2JqKSkgcmV0dXJuIEluZmluaXR5O1xuICAgIHZhciByZXN1bHQgPSB7Y29tcHV0ZWQgOiBJbmZpbml0eSwgdmFsdWU6IEluZmluaXR5fTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICB2YXIgY29tcHV0ZWQgPSBpdGVyYXRvciA/IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSA6IHZhbHVlO1xuICAgICAgY29tcHV0ZWQgPCByZXN1bHQuY29tcHV0ZWQgJiYgKHJlc3VsdCA9IHt2YWx1ZSA6IHZhbHVlLCBjb21wdXRlZCA6IGNvbXB1dGVkfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbiAgfTtcblxuICAvLyBTaHVmZmxlIGFuIGFycmF5LCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlIFxuICAvLyBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuXG4gIF8uc2h1ZmZsZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByYW5kO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNodWZmbGVkID0gW107XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByYW5kID0gXy5yYW5kb20oaW5kZXgrKyk7XG4gICAgICBzaHVmZmxlZFtpbmRleCAtIDFdID0gc2h1ZmZsZWRbcmFuZF07XG4gICAgICBzaHVmZmxlZFtyYW5kXSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBzaHVmZmxlZDtcbiAgfTtcblxuICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50IGZyb20gdGhlIGFycmF5LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIgfHwgZ3VhcmQpIHtcbiAgICAgIHJldHVybiBvYmpbXy5yYW5kb20ob2JqLmxlbmd0aCAtIDEpXTtcbiAgICB9XG4gICAgcmV0dXJuIF8uc2h1ZmZsZShvYmopLnNsaWNlKDAsIE1hdGgubWF4KDAsIG4pKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBsb29rdXAgaXRlcmF0b3JzLlxuICB2YXIgbG9va3VwSXRlcmF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBmdW5jdGlvbihvYmopeyByZXR1cm4gb2JqW3ZhbHVlXTsgfTtcbiAgfTtcblxuICAvLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0b3IuXG4gIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCkge1xuICAgIHZhciBpdGVyYXRvciA9IGxvb2t1cEl0ZXJhdG9yKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdClcbiAgICAgIH07XG4gICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICAgIH0pLCAndmFsdWUnKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG4gIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgdmFsdWUsIGNvbnRleHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbHVlID09IG51bGwgPyBfLmlkZW50aXR5IDogbG9va3VwSXRlcmF0b3IodmFsdWUpO1xuICAgICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIG9iaik7XG4gICAgICAgIGJlaGF2aW9yKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4gIC8vIHRvIGdyb3VwIGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3JpdGVyaW9uLlxuICBfLmdyb3VwQnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIGtleSwgdmFsdWUpIHtcbiAgICAoXy5oYXMocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0gOiAocmVzdWx0W2tleV0gPSBbXSkpLnB1c2godmFsdWUpO1xuICB9KTtcblxuICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yXG4gIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbiAgXy5pbmRleEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCBrZXksIHZhbHVlKSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzXG4gIC8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAvLyBjcml0ZXJpb24uXG4gIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwga2V5KSB7XG4gICAgXy5oYXMocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0rKyA6IHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgLy8gVXNlIGEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IHRoZSBzbWFsbGVzdCBpbmRleCBhdCB3aGljaFxuICAvLyBhbiBvYmplY3Qgc2hvdWxkIGJlIGluc2VydGVkIHNvIGFzIHRvIG1haW50YWluIG9yZGVyLiBVc2VzIGJpbmFyeSBzZWFyY2guXG4gIF8uc29ydGVkSW5kZXggPSBmdW5jdGlvbihhcnJheSwgb2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3IgPT0gbnVsbCA/IF8uaWRlbnRpdHkgOiBsb29rdXBJdGVyYXRvcihpdGVyYXRvcik7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmopO1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxO1xuICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBhcnJheVttaWRdKSA8IHZhbHVlID8gbG93ID0gbWlkICsgMSA6IGhpZ2ggPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG4gIH07XG5cbiAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSByZXR1cm4gXy5tYXAob2JqLCBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gXy52YWx1ZXMob2JqKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBvYmplY3QuXG4gIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7XG4gICAgcmV0dXJuIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkgPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICByZXR1cm4gKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyBhcnJheVswXSA6IHNsaWNlLmNhbGwoYXJyYXksIDAsIG4pO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpblxuICAvLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGhcbiAgLy8gYF8ubWFwYC5cbiAgXy5pbml0aWFsID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIGFycmF5Lmxlbmd0aCAtICgobiA9PSBudWxsKSB8fCBndWFyZCA/IDEgOiBuKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5sYXN0ID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgaWYgKChuID09IG51bGwpIHx8IGd1YXJkKSB7XG4gICAgICByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBNYXRoLm1heChhcnJheS5sZW5ndGggLSBuLCAwKSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqXG4gIC8vIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5yZXN0ID0gXy50YWlsID0gXy5kcm9wID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIChuID09IG51bGwpIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgb3V0cHV0KSB7XG4gICAgaWYgKHNoYWxsb3cgJiYgXy5ldmVyeShpbnB1dCwgXy5pc0FycmF5KSkge1xuICAgICAgcmV0dXJuIGNvbmNhdC5hcHBseShvdXRwdXQsIGlucHV0KTtcbiAgICB9XG4gICAgZWFjaChpbnB1dCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmIChfLmlzQXJyYXkodmFsdWUpIHx8IF8uaXNBcmd1bWVudHModmFsdWUpKSB7XG4gICAgICAgIHNoYWxsb3cgPyBwdXNoLmFwcGx5KG91dHB1dCwgdmFsdWUpIDogZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgb3V0cHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgW10pO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdG9yO1xuICAgICAgaXRlcmF0b3IgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpbml0aWFsID0gaXRlcmF0b3IgPyBfLm1hcChhcnJheSwgaXRlcmF0b3IsIGNvbnRleHQpIDogYXJyYXk7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGVhY2goaW5pdGlhbCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICBpZiAoaXNTb3J0ZWQgPyAoIWluZGV4IHx8IHNlZW5bc2Vlbi5sZW5ndGggLSAxXSAhPT0gdmFsdWUpIDogIV8uY29udGFpbnMoc2VlbiwgdmFsdWUpKSB7XG4gICAgICAgIHNlZW4ucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJlc3VsdHMucHVzaChhcnJheVtpbmRleF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuaXEoXy5mbGF0dGVuKGFyZ3VtZW50cywgdHJ1ZSkpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihfLnVuaXEoYXJyYXkpLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gXy5ldmVyeShyZXN0LCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICByZXR1cm4gXy5pbmRleE9mKG90aGVyLCBpdGVtKSA+PSAwO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7IH0pO1xuICB9O1xuXG4gIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG4gIF8uemlwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9IF8ubWF4KF8ucGx1Y2soYXJndW1lbnRzLCBcImxlbmd0aFwiKS5jb25jYXQoMCkpO1xuICAgIHZhciByZXN1bHRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0c1tpXSA9IF8ucGx1Y2soYXJndW1lbnRzLCAnJyArIGkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgaWYgKGxpc3QgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcGx5IHVzIHdpdGggaW5kZXhPZiAoSSdtIGxvb2tpbmcgYXQgeW91LCAqKk1TSUUqKiksXG4gIC8vIHdlIG5lZWQgdGhpcyBmdW5jdGlvbi4gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhblxuICAvLyBpdGVtIGluIGFuIGFycmF5LCBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgaW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlzU29ydGVkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgaXNTb3J0ZWQgPT0gJ251bWJlcicpIHtcbiAgICAgICAgaSA9IChpc1NvcnRlZCA8IDAgPyBNYXRoLm1heCgwLCBsZW5ndGggKyBpc1NvcnRlZCkgOiBpc1NvcnRlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gXy5zb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpXSA9PT0gaXRlbSA/IGkgOiAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgYXJyYXkuaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZikgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSwgaXNTb3J0ZWQpO1xuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBsYXN0SW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb20pIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgIHZhciBoYXNJbmRleCA9IGZyb20gIT0gbnVsbDtcbiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSB7XG4gICAgICByZXR1cm4gaGFzSW5kZXggPyBhcnJheS5sYXN0SW5kZXhPZihpdGVtLCBmcm9tKSA6IGFycmF5Lmxhc3RJbmRleE9mKGl0ZW0pO1xuICAgIH1cbiAgICB2YXIgaSA9IChoYXNJbmRleCA/IGZyb20gOiBhcnJheS5sZW5ndGgpO1xuICAgIHdoaWxlIChpLS0pIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2ZcbiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHN0ZXAgPSBhcmd1bWVudHNbMl0gfHwgMTtcblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIHJhbmdlID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZShpZHggPCBsZW5ndGgpIHtcbiAgICAgIHJhbmdlW2lkeCsrXSA9IHN0YXJ0O1xuICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXVzYWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgcHJvdG90eXBlIHNldHRpbmcuXG4gIHZhciBjdG9yID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLFxuICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmXG4gIC8vIGF2YWlsYWJsZS5cbiAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCkge1xuICAgIHZhciBhcmdzLCBib3VuZDtcbiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkpIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgY3Rvci5wcm90b3R5cGUgPSBmdW5jLnByb3RvdHlwZTtcbiAgICAgIHZhciBzZWxmID0gbmV3IGN0b3I7XG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG51bGw7XG4gICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcbiAgfTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LlxuICBfLnBhcnRpYWwgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBCaW5kIGFsbCBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXRcbiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBmdW5jcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzXCIpO1xuICAgIGVhY2goZnVuY3MsIGZ1bmN0aW9uKGYpIHsgb2JqW2ZdID0gXy5iaW5kKG9ialtmXSwgb2JqKTsgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLlxuICBfLm1lbW9pemUgPSBmdW5jdGlvbihmdW5jLCBoYXNoZXIpIHtcbiAgICB2YXIgbWVtbyA9IHt9O1xuICAgIGhhc2hlciB8fCAoaGFzaGVyID0gXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGtleSA9IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIF8uaGFzKG1lbW8sIGtleSkgPyBtZW1vW2tleV0gOiAobWVtb1trZXldID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIERlbGF5cyBhIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYW5kIHRoZW4gY2FsbHNcbiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLlxuICBfLmRlbGF5ID0gZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgfTtcblxuICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXNcbiAgLy8gY2xlYXJlZC5cbiAgXy5kZWZlciA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICByZXR1cm4gXy5kZWxheS5hcHBseShfLCBbZnVuYywgMV0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbiAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xuICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuICAvLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbiAgXy50aHJvdHRsZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICAgIHZhciB0aW1lb3V0ID0gbnVsbDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogbmV3IERhdGU7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGU7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbGFzdCA9IChuZXcgRGF0ZSgpKSAtIHRpbWVzdGFtcDtcbiAgICAgICAgaWYgKGxhc3QgPCB3YWl0KSB7XG4gICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIH1cbiAgICAgIGlmIChjYWxsTm93KSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIHJhbiA9IGZhbHNlLCBtZW1vO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vO1xuICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgZnVuY3Rpb24gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBzZWNvbmQsXG4gIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmRcbiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgXy53cmFwID0gZnVuY3Rpb24oZnVuYywgd3JhcHBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gW2Z1bmNdO1xuICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBmb3IgKHZhciBpID0gZnVuY3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXJncyA9IFtmdW5jc1tpXS5hcHBseSh0aGlzLCBhcmdzKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnc1swXTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBhZnRlciBiZWluZyBjYWxsZWQgTiB0aW1lcy5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBuYXRpdmVLZXlzIHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogIT09IE9iamVjdChvYmopKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG9iamVjdCcpO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyc1tpXSA9IFtrZXlzW2ldLCBvYmpba2V5c1tpXV1dO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGNvcHkgPSB7fTtcbiAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIG9iaikgY29weVtrZXldID0gb2JqW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcHk7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgY29weSA9IHt9O1xuICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKCFfLmNvbnRhaW5zKGtleXMsIGtleSkpIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHZvaWQgMCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09IDEgLyBiO1xuICAgIC8vIEEgc3RyaWN0IGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYG51bGwgPT0gdW5kZWZpbmVkYC5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLiBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yXG4gICAgICAgIC8vIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gYSAhPSArYSA/IGIgIT0gK2IgOiAoYSA9PSAwID8gMSAvIGEgPT0gMSAvIGIgOiBhID09ICtiKTtcbiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgIHJldHVybiArYSA9PSArYjtcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyIHNvdXJjZSBwYXR0ZXJucyBhbmQgZmxhZ3MuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgICByZXR1cm4gYS5zb3VyY2UgPT0gYi5zb3VyY2UgJiZcbiAgICAgICAgICAgICAgIGEuZ2xvYmFsID09IGIuZ2xvYmFsICYmXG4gICAgICAgICAgICAgICBhLm11bHRpbGluZSA9PSBiLm11bHRpbGluZSAmJlxuICAgICAgICAgICAgICAgYS5pZ25vcmVDYXNlID09IGIuaWdub3JlQ2FzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09IGI7XG4gICAgfVxuICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3Rgc1xuICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIChhQ3RvciBpbnN0YW5jZW9mIGFDdG9yKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmlzRnVuY3Rpb24oYkN0b3IpICYmIChiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpO1xuICAgIGJTdGFjay5wdXNoKGIpO1xuICAgIHZhciBzaXplID0gMCwgcmVzdWx0ID0gdHJ1ZTtcbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoY2xhc3NOYW1lID09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgc2l6ZSA9IGEubGVuZ3RoO1xuICAgICAgcmVzdWx0ID0gc2l6ZSA9PSBiLmxlbmd0aDtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgICAgd2hpbGUgKHNpemUtLSkge1xuICAgICAgICAgIGlmICghKHJlc3VsdCA9IGVxKGFbc2l6ZV0sIGJbc2l6ZV0sIGFTdGFjaywgYlN0YWNrKSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICAgICAgaWYgKF8uaGFzKGEsIGtleSkpIHtcbiAgICAgICAgICAvLyBDb3VudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlci5cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGZvciAoa2V5IGluIGIpIHtcbiAgICAgICAgICBpZiAoXy5oYXMoYiwga2V5KSAmJiAhKHNpemUtLSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9ICFzaXplO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYiwgW10sIFtdKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IE9iamVjdChvYmopO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLlxuICBlYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIERlZmluZSBhIGZhbGxiYWNrIHZlcnNpb24gb2YgdGhlIG1ldGhvZCBpbiBicm93c2VycyAoYWhlbSwgSUUpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiAhIShvYmogJiYgXy5oYXMob2JqLCAnY2FsbGVlJykpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuXG4gIGlmICh0eXBlb2YgKC8uLykgIT09ICdmdW5jdGlvbicpIHtcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbiAgfTtcblxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuXG4gIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIG9iaiAhPSArb2JqO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdG9ycy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxuICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBpKTtcbiAgICByZXR1cm4gYWNjdW07XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gYW5kIG1heCAoaW5jbHVzaXZlKS5cbiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gIH07XG5cbiAgLy8gTGlzdCBvZiBIVE1MIGVudGl0aWVzIGZvciBlc2NhcGluZy5cbiAgdmFyIGVudGl0eU1hcCA9IHtcbiAgICBlc2NhcGU6IHtcbiAgICAgICcmJzogJyZhbXA7JyxcbiAgICAgICc8JzogJyZsdDsnLFxuICAgICAgJz4nOiAnJmd0OycsXG4gICAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAgIFwiJ1wiOiAnJiN4Mjc7J1xuICAgIH1cbiAgfTtcbiAgZW50aXR5TWFwLnVuZXNjYXBlID0gXy5pbnZlcnQoZW50aXR5TWFwLmVzY2FwZSk7XG5cbiAgLy8gUmVnZXhlcyBjb250YWluaW5nIHRoZSBrZXlzIGFuZCB2YWx1ZXMgbGlzdGVkIGltbWVkaWF0ZWx5IGFib3ZlLlxuICB2YXIgZW50aXR5UmVnZXhlcyA9IHtcbiAgICBlc2NhcGU6ICAgbmV3IFJlZ0V4cCgnWycgKyBfLmtleXMoZW50aXR5TWFwLmVzY2FwZSkuam9pbignJykgKyAnXScsICdnJyksXG4gICAgdW5lc2NhcGU6IG5ldyBSZWdFeHAoJygnICsgXy5rZXlzKGVudGl0eU1hcC51bmVzY2FwZSkuam9pbignfCcpICsgJyknLCAnZycpXG4gIH07XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICBfLmVhY2goWydlc2NhcGUnLCAndW5lc2NhcGUnXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgX1ttZXRob2RdID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBpZiAoc3RyaW5nID09IG51bGwpIHJldHVybiAnJztcbiAgICAgIHJldHVybiAoJycgKyBzdHJpbmcpLnJlcGxhY2UoZW50aXR5UmVnZXhlc1ttZXRob2RdLCBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgICByZXR1cm4gZW50aXR5TWFwW21ldGhvZF1bbWF0Y2hdO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBgcHJvcGVydHlgIGlzIGEgZnVuY3Rpb24gdGhlbiBpbnZva2UgaXQgd2l0aCB0aGVcbiAgLy8gYG9iamVjdGAgYXMgY29udGV4dDsgb3RoZXJ3aXNlLCByZXR1cm4gaXQuXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldO1xuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IF9bbmFtZV0gPSBvYmpbbmFtZV07XG4gICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IFt0aGlzLl93cmFwcGVkXTtcbiAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGUgICAgOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlIDogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlICAgICAgOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiAgICAgIFwiJ1wiLFxuICAgICdcXFxcJzogICAgICdcXFxcJyxcbiAgICAnXFxyJzogICAgICdyJyxcbiAgICAnXFxuJzogICAgICduJyxcbiAgICAnXFx0JzogICAgICd0JyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZXIgPSAvXFxcXHwnfFxccnxcXG58XFx0fFxcdTIwMjh8XFx1MjAyOS9nO1xuXG4gIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBkYXRhLCBzZXR0aW5ncykge1xuICAgIHZhciByZW5kZXI7XG4gICAgc2V0dGluZ3MgPSBfLmRlZmF1bHRzKHt9LCBzZXR0aW5ncywgXy50ZW1wbGF0ZVNldHRpbmdzKTtcblxuICAgIC8vIENvbWJpbmUgZGVsaW1pdGVycyBpbnRvIG9uZSByZWd1bGFyIGV4cHJlc3Npb24gdmlhIGFsdGVybmF0aW9uLlxuICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICAgICAgLnJlcGxhY2UoZXNjYXBlciwgZnVuY3Rpb24obWF0Y2gpIHsgcmV0dXJuICdcXFxcJyArIGVzY2FwZXNbbWF0Y2hdOyB9KTtcblxuICAgICAgaWYgKGVzY2FwZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInK1xcbigoX190PShcIiArIGVzY2FwZSArIFwiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXFxuJ1wiO1xuICAgICAgfVxuICAgICAgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfVxuICAgICAgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgICB9XG4gICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArIFwicmV0dXJuIF9fcDtcXG5cIjtcblxuICAgIHRyeSB7XG4gICAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEpIHJldHVybiByZW5kZXIoZGF0YSwgXyk7XG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbiBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAoc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicpICsgJyl7XFxuJyArIHNvdXJjZSArICd9JztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvLyBBZGQgYSBcImNoYWluXCIgZnVuY3Rpb24sIHdoaWNoIHdpbGwgZGVsZWdhdGUgdG8gdGhlIHdyYXBwZXIuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXyhvYmopLmNoYWluKCk7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0aGlzLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBlYWNoKFsncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9iaiA9IHRoaXMuX3dyYXBwZWQ7XG4gICAgICBtZXRob2QuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKChuYW1lID09ICdzaGlmdCcgfHwgbmFtZSA9PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBvYmopO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEFkZCBhbGwgYWNjZXNzb3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBlYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgbWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xuXG4gIF8uZXh0ZW5kKF8ucHJvdG90eXBlLCB7XG5cbiAgICAvLyBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gICAgY2hhaW46IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY2hhaW4gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LlxuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl93cmFwcGVkO1xuICAgIH1cblxuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIi8qXG4gKlxuICogVGhpcyBpcyB1c2VkIHRvIGJ1aWxkIHRoZSBidW5kbGUgd2l0aCBicm93c2VyaWZ5LlxuICpcbiAqIFRoZSBidW5kbGUgaXMgdXNlZCBieSBwZW9wbGUgd2hvIGRvZXNuJ3QgdXNlIGJyb3dzZXJpZnkucmVxdWlyZVxuICogVGhvc2Ugd2hvIHVzZSBicm93c2VyaWZ5IHdpbGwgaW5zdGFsbCB3aXRoIG5wbSBhbmQgcmVxdWlyZSB0aGUgbW9kdWxlLFxuICogdGhlIHBhY2thZ2UuanNvbiBmaWxlIHBvaW50cyB0byBpbmRleC5qcy5cbiAqL1xudmFyIEF1dGgwTG9jayA9IHJlcXVpcmUoJy4vJyk7XG5cbi8vIHVzZSBhbWQgb3IganVzdCB0aHJvdWdodCB0byB3aW5kb3cgb2JqZWN0LlxuaWYgKHR5cGVvZiBnbG9iYWwud2luZG93LmRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGdsb2JhbC53aW5kb3cuZGVmaW5lLmFtZCkge1xuICBnbG9iYWwud2luZG93LmRlZmluZSgnYXV0aDAtbG9jaycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIEF1dGgwTG9jazsgfSk7XG59IGVsc2UgaWYgKGdsb2JhbC53aW5kb3cpIHtcbiAgZ2xvYmFsLndpbmRvdy5BdXRoMExvY2sgPSBBdXRoMExvY2s7XG59XG4iXX0=
